#include <cmath>
#include "bicycle.h"

namespace bicycle {

using ::std::sin;
using ::std::cos;
using ::std::pow;
using ::std::sqrt;

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::gc_r_ogl(double ar[16]) const;
void Bicycle::gc_r_ogl(double ar[16]) const
{
  double z[40];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(twist);
  z[5] = cos(azimuth);
  z[6] = cos(elevation);
  z[7] = cos(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = cos(twist);
  z[10] = cam_x + cam_z;
  z[11] = pow(z[3], 2);
  z[12] = pow(z[7], 2);
  z[13] = pow(z[8], 2);
  z[14] = z[11] + z[13];
  z[15] = z[0]*z[8] + z[2]*z[3]*z[5];
  z[16] = z[0]*z[1]*z[7] + z[2]*z[6];
  z[17] = z[0]*z[2]*z[8] + z[3]*z[5];
  z[18] = z[0]*z[3] - z[2]*z[5]*z[8];
  z[19] = z[0]*z[2]*z[3] - z[5]*z[8];
  z[20] = z[1]*z[7]*z[8] + z[17]*z[6];
  z[21] = z[1]*z[3]*z[7] + z[19]*z[6];
  z[22] = z[1]*z[19] - z[3]*z[6]*z[7];
  z[23] = z[15]*z[9] + z[22]*z[4];
  z[24] = -z[15]*z[4] + z[22]*z[9];
  z[25] = -z[18]*z[4] + z[9]*(-z[1]*z[17] + z[6]*z[7]*z[8]);
  z[26] = z[18]*z[9] - z[4]*(z[1]*z[17] - z[6]*z[7]*z[8]);
  z[27] = -z[1];
  z[28] = -z[3];
  z[29] = -z[4];
  z[30] = -z[5];
  z[31] = -z[6];
  z[32] = -z[0]*z[29];
  z[33] = z[0]*z[9];
  z[34] = z[2]*z[8];
  z[35] = -z[30]*z[9];
  z[36] = -1/sqrt(z[12]*z[14]);
  z[37] = -z[36]*z[7];
  z[38] = z[2]*z[28]*z[36];
  z[39] = z[14]*z[7]/sqrt(z[11]*z[12] + z[12]*z[13]);

  ar[0] = z[37]*(z[23]*z[8] - z[26]*z[28]);
  ar[1] = -z[37]*(z[24]*z[8] - z[25]*z[28]);
  ar[2] = z[37]*(z[20]*z[28] + z[21]*z[8]);
  ar[3] = 0;
  ar[4] = z[7]*(z[23]*z[38] + z[26]*z[34]*z[36] + z[39]*(-z[16]*z[29] + z[35]*z[7]));
  ar[5] = z[7]*(-z[24]*z[38] - z[25]*z[34]*z[36] - z[39]*(z[16]*z[9] - z[29]*z[30]*z[7]));
  ar[6] = z[7]*(-z[20]*z[34]*z[36] + z[21]*z[38] + z[39]*(-z[0]*z[31]*z[7] + z[2]*z[27]));
  ar[7] = 0;
  ar[8] = z[29]*z[31];
  ar[9] = z[31]*z[9];
  ar[10] = z[27];
  ar[11] = 0;
  ar[12] = -cam_y*(-z[27]*z[32] + z[35]) - z[10]*(z[27]*z[29]*z[30] + z[33]);
  ar[13] = cam_y*(-z[27]*z[33] - z[29]*z[30]) - z[10]*(-z[27]*z[35] + z[32]);
  ar[14] = -z[31]*(-cam_y*z[0] - z[10]*z[30]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::wc_r_ogl(double ar[16]) const;
void Bicycle::wc_r_ogl(double ar[16]) const
{
  double z[32];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[4]);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = cos(elevation);
  z[8] = cos(state_[1]);
  z[9] = cos(state_[2]);
  z[10] = cos(twist);
  z[11] = cam_x + cam_z;
  z[12] = pow(z[8], 2);
  z[13] = z[0]*z[5] + z[1]*z[10]*z[6];
  z[14] = z[0]*z[1]*z[5] + z[10]*z[6];
  z[15] = z[0]*z[2]*z[7] + z[1]*z[8];
  z[16] = z[0]*z[10] - z[1]*z[5]*z[6];
  z[17] = z[0]*z[1]*z[10] - z[5]*z[6];
  z[18] = z[0]*z[7]*z[8] - z[1]*z[2];
  z[19] = z[14]*z[8] + z[2]*z[5]*z[7];
  z[20] = z[15]*z[9] + z[3]*z[6]*z[7];
  z[21] = z[14]*z[2] - z[5]*z[7]*z[8];
  z[22] = z[10]*z[2]*z[7] + z[17]*z[8];
  z[23] = -z[15]*z[3] + z[6]*z[7]*z[9];
  z[24] = z[16]*z[3] - z[21]*z[9];
  z[25] = -z[13]*z[3] + z[9]*(z[10]*z[7]*z[8] - z[17]*z[2]);
  z[26] = z[13]*z[9] - z[3]*(-z[10]*z[7]*z[8] + z[17]*z[2]);
  z[27] = -z[16]*z[9] - z[21]*z[3];
  z[28] = rear_.r*z[2];
  z[29] = -z[3];
  z[30] = -cos(state_[4]);
  z[31] = z[8]*(rear_.R/sqrt(z[12]*pow(z[3], 2) + z[12]*pow(z[9], 2)) + rear_.r);

  ar[0] = -z[24]*z[4] + z[27]*z[30];
  ar[1] = z[25]*z[4] - z[26]*z[30];
  ar[2] = z[20]*z[4] + z[23]*z[30];
  ar[3] = 0;
  ar[4] = z[19];
  ar[5] = -z[22];
  ar[6] = z[18];
  ar[7] = 0;
  ar[8] = -z[24]*z[30] - z[27]*z[4];
  ar[9] = z[25]*z[30] + z[26]*z[4];
  ar[10] = z[20]*z[30] - z[23]*z[4];
  ar[11] = 0;
  ar[12] = -cam_y*z[14] - z[11]*z[16] - z[19]*z[28] - z[24]*z[31]*z[9] + z[27]*z[29]*z[31];
  ar[13] = cam_y*z[17] - z[11]*z[13] + z[22]*z[28] + z[25]*z[31]*z[9] - z[26]*z[29]*z[31];
  ar[14] = -cam_y*z[0]*z[7] + z[11]*z[6]*z[7] - z[18]*z[28] + z[20]*z[31]*z[9] + z[23]*z[29]*z[31];
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::mc_r_ogl(double ar[16]) const;
void Bicycle::mc_r_ogl(double ar[16]) const
{
  double z[34];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(twist);
  z[5] = cos(azimuth);
  z[6] = cos(elevation);
  z[7] = cos(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = cos(twist);
  z[10] = cam_x + cam_z;
  z[11] = pow(z[7], 2);
  z[12] = z[0]*z[4] + z[1]*z[5]*z[9];
  z[13] = z[0]*z[1]*z[4] + z[5]*z[9];
  z[14] = z[0]*z[2]*z[6] + z[1]*z[7];
  z[15] = z[0]*z[9] - z[1]*z[4]*z[5];
  z[16] = z[0]*z[1]*z[9] - z[4]*z[5];
  z[17] = z[0]*z[6]*z[7] - z[1]*z[2];
  z[18] = sqrt(z[11]*pow(z[3], 2) + z[11]*pow(z[8], 2));
  z[19] = z[13]*z[7] + z[2]*z[4]*z[6];
  z[20] = z[14]*z[8] + z[3]*z[5]*z[6];
  z[21] = z[13]*z[2] - z[4]*z[6]*z[7];
  z[22] = z[16]*z[7] + z[2]*z[6]*z[9];
  z[23] = -z[16]*z[2] + z[6]*z[7]*z[9];
  z[24] = rear_.R*z[3]*z[7]/z[18] + rear_.a + rear_.r*z[3]*z[7];
  z[25] = rear_.R*z[7]*z[8]/z[18] - rear_.b + rear_.r*z[7]*z[8];
  z[26] = z[15]*z[3] - z[21]*z[8];
  z[27] = z[12]*z[8] + z[23]*z[3];
  z[28] = rear_.r*z[2];
  z[29] = -z[8];
  z[30] = z[5]*z[6];
  z[31] = z[12]*z[3];
  z[32] = z[14]*z[3];
  z[33] = z[21]*z[3];

  ar[0] = -z[15]*z[29] + z[33];
  ar[1] = z[27];
  ar[2] = z[29]*z[30] + z[32];
  ar[3] = 0;
  ar[4] = z[19];
  ar[5] = -z[22];
  ar[6] = z[17];
  ar[7] = 0;
  ar[8] = z[26];
  ar[9] = z[23]*z[29] + z[31];
  ar[10] = -z[20];
  ar[11] = 0;
  ar[12] = -cam_y*z[13] - z[10]*z[15] - z[19]*z[28] - z[24]*(z[15]*z[29] - z[33]) - z[25]*z[26];
  ar[13] = cam_y*z[16] - z[10]*z[12] + z[22]*z[28] + z[24]*z[27] + z[25]*(-z[23]*z[29] - z[31]);
  ar[14] = -cam_y*z[0]*z[6] + z[10]*z[30] - z[17]*z[28] + z[20]*z[25] - z[24]*(-z[29]*z[30] - z[32]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::gc_f_ogl(double ar[16]) const;
void Bicycle::gc_f_ogl(double ar[16]) const
{
  double z[64];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[3]);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = cos(elevation);
  z[8] = cos(state_[1]);
  z[9] = cos(state_[2]);
  z[10] = cos(state_[3]);
  z[11] = cos(twist);
  z[12] = pow(z[8], 2);
  z[13] = -cam_x - cam_z;
  z[14] = z[0]*z[5] + z[1]*z[11]*z[6];
  z[15] = z[10]*z[2] + z[3]*z[4]*z[8];
  z[16] = z[0]*z[1]*z[5] + z[11]*z[6];
  z[17] = z[0]*z[2]*z[7] + z[1]*z[8];
  z[18] = z[0]*z[2]*z[9] + z[3]*z[6];
  z[19] = z[10]*z[2]*z[3] + z[4]*z[8];
  z[20] = z[0]*z[3] - z[2]*z[6]*z[9];
  z[21] = z[0]*z[11] - z[1]*z[5]*z[6];
  z[22] = -z[10]*z[3]*z[8] + z[2]*z[4];
  z[23] = z[0]*z[1]*z[11] - z[5]*z[6];
  z[24] = z[0]*z[7]*z[8] - z[1]*z[2];
  z[25] = -z[10]*z[8] + z[2]*z[3]*z[4];
  z[26] = sqrt(z[12]*pow(z[3], 2) + z[12]*pow(z[9], 2));
  z[27] = z[16]*z[8] + z[2]*z[5]*z[7];
  z[28] = z[17]*z[9] + z[3]*z[6]*z[7];
  z[29] = z[1]*z[8]*z[9] + z[18]*z[7];
  z[30] = z[0]*z[10]*z[9] + z[19]*z[6];
  z[31] = z[16]*z[2] - z[5]*z[7]*z[8];
  z[32] = z[11]*z[2]*z[7] + z[23]*z[8];
  z[33] = -z[17]*z[3] + z[6]*z[7]*z[9];
  z[34] = -z[1]*z[18] + z[7]*z[8]*z[9];
  z[35] = z[0]*z[19] - z[10]*z[6]*z[9];
  z[36] = -z[0]*z[4]*z[9] - z[25]*z[6];
  z[37] = front_.R/sqrt(z[12]*pow(z[9], 2) + pow(z[22], 2)) + front_.r;
  z[38] = rear_.R*z[8]*z[9]/z[26] - ls_ + rear_.r*z[8]*z[9];
  z[39] = -rear_.R*z[3]*z[8]/z[26] - rear_.c - rear_.r*z[3]*z[8];
  z[40] = z[11]*z[20] + z[34]*z[5];
  z[41] = z[1]*(-z[0]*z[25] + z[4]*z[6]*z[9]) + z[15]*z[7];
  z[42] = z[1]*z[35] + z[22]*z[7];
  z[43] = z[21]*z[3] - z[31]*z[9];
  z[44] = -z[14]*z[3] + z[9]*(z[11]*z[7]*z[8] - z[2]*z[23]);
  z[45] = z[14]*z[9] - z[3]*(-z[11]*z[7]*z[8] + z[2]*z[23]);
  z[46] = -z[1]*z[22] + z[35]*z[7];
  z[47] = -z[21]*z[9] - z[3]*z[31];
  z[48] = front_.R*z[22]/sqrt(z[12]*pow(z[9], 2) + pow(z[22], 2)) - front_.c + front_.r*z[22];
  z[49] = -z[11]*z[30] - z[42]*z[5];
  z[50] = -z[1];
  z[51] = -z[2];
  z[52] = -z[4];
  z[53] = -z[7];
  z[54] = -z[9];
  z[55] = -z[10];
  z[56] = -z[11];
  z[57] = -z[54]*z[8];
  z[58] = z[12]*pow(z[54], 2);
  z[59] = front_.r*z[15];
  z[60] = z[20]*z[5];
  z[61] = z[30]*z[5];
  z[62] = -z[34]*z[56];
  z[63] = z[15]/sqrt(pow(z[22], 2) + z[58]);

  ar[0] = (-z[22]*z[40] - z[49]*z[57])/sqrt(pow(z[22], 2) + z[58]);
  ar[1] = (z[22]*(-z[60] + z[62]) - z[57]*(-z[42]*z[56] - z[61]))/sqrt(pow(z[22], 2) + z[58]);
  ar[2] = (z[22]*z[29] + z[46]*z[57])/sqrt(pow(z[22], 2) + z[58]);
  ar[3] = 0;
  ar[4] = z[22]*z[49]*z[63] - z[40]*z[57]*z[63] + sqrt(pow(z[22], 2) + z[58])*(-z[36]*z[56] + z[41]*z[5]);
  ar[5] = -z[22]*z[63]*(z[42]*z[56] + z[61]) - z[57]*z[63]*(z[60] - z[62]) + sqrt(pow(z[22], 2) + z[58])*(z[36]*z[5] + z[41]*z[56]);
  ar[6] = -z[22]*z[46]*z[63] + z[29]*z[57]*z[63] + sqrt(pow(z[22], 2) + z[58])*(z[15]*z[50] + z[53]*(z[0]*z[25] - z[52]*z[54]*z[6]));
  ar[7] = 0;
  ar[8] = -z[5]*z[53];
  ar[9] = -z[53]*z[56];
  ar[10] = z[50];
  ar[11] = 0;
  ar[12] = -cam_y*z[16] + rear_.r*z[27]*z[51] + z[13]*z[21] + z[37]*z[43]*z[57] - z[38]*z[43] + z[39]*z[47] + z[48]*(-z[27]*z[52] + z[47]*z[55]) - z[59]*(z[27]*z[55] + z[47]*z[52]);
  ar[13] = cam_y*z[23] - rear_.r*z[32]*z[51] + z[13]*z[14] - z[37]*z[44]*z[57] + z[38]*z[44] - z[39]*z[45] + z[48]*(z[32]*z[52] - z[45]*z[55]) - z[59]*(-z[32]*z[55] - z[45]*z[52]);
  ar[14] = cam_y*z[0]*z[53] + rear_.r*z[24]*z[51] + z[13]*z[53]*z[6] - z[28]*z[37]*z[57] + z[28]*z[38] + z[33]*z[39] + z[48]*(-z[24]*z[52] + z[33]*z[55]) + z[59]*(-z[24]*z[55] - z[33]*z[52]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::wc_f_ogl(double ar[16]) const;
void Bicycle::wc_f_ogl(double ar[16]) const
{
  double z[41];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[3]);
  z[5] = sin(state_[5]);
  z[6] = sin(twist);
  z[7] = cos(azimuth);
  z[8] = cos(elevation);
  z[9] = cos(state_[1]);
  z[10] = cos(state_[2]);
  z[11] = cos(state_[3]);
  z[12] = cos(twist);
  z[13] = cam_x + cam_z;
  z[14] = pow(z[9], 2);
  z[15] = z[0]*z[6] + z[1]*z[12]*z[7];
  z[16] = z[0]*z[1]*z[6] + z[12]*z[7];
  z[17] = z[0]*z[2]*z[8] + z[1]*z[9];
  z[18] = z[0]*z[12] - z[1]*z[6]*z[7];
  z[19] = z[0]*z[1]*z[12] - z[6]*z[7];
  z[20] = z[0]*z[8]*z[9] - z[1]*z[2];
  z[21] = sqrt(pow(z[10], 2)*z[14] + z[14]*pow(z[3], 2));
  z[22] = z[16]*z[9] + z[2]*z[6]*z[8];
  z[23] = z[10]*z[17] + z[3]*z[7]*z[8];
  z[24] = z[16]*z[2] - z[6]*z[8]*z[9];
  z[25] = z[10]*z[7]*z[8] - z[17]*z[3];
  z[26] = z[12]*z[8]*z[9] - z[19]*z[2];
  z[27] = -z[12]*z[2]*z[8] - z[19]*z[9];
  z[28] = rear_.R*z[3]*z[9]/z[21] + rear_.c + rear_.r*z[3]*z[9];
  z[29] = rear_.R*z[10]*z[9]/z[21] - ls_ + rear_.r*z[10]*z[9];
  z[30] = z[10]*z[15] + z[26]*z[3];
  z[31] = z[10]*z[24] - z[18]*z[3];
  z[32] = z[10]*z[26] - z[15]*z[3];
  z[33] = z[11]*z[25] - z[20]*z[4];
  z[34] = -z[10]*z[18] - z[24]*z[3];
  z[35] = -z[11]*z[34] + z[22]*z[4];
  z[36] = z[11]*z[30] + z[27]*z[4];
  z[37] = -front_.c;
  z[38] = rear_.r*z[2];
  z[39] = -z[4];
  z[40] = -cos(state_[5]);

  ar[0] = z[31]*z[5] - z[35]*z[40];
  ar[1] = z[32]*z[5] - z[36]*z[40];
  ar[2] = z[23]*z[5] + z[33]*z[40];
  ar[3] = 0;
  ar[4] = z[11]*z[22] - z[34]*z[39];
  ar[5] = z[11]*z[27] + z[30]*z[39];
  ar[6] = z[11]*z[20] - z[25]*z[39];
  ar[7] = 0;
  ar[8] = z[31]*z[40] + z[35]*z[5];
  ar[9] = z[32]*z[40] + z[36]*z[5];
  ar[10] = z[23]*z[40] - z[33]*z[5];
  ar[11] = 0;
  ar[12] = -cam_y*z[16] - z[13]*z[18] - z[22]*z[38] - z[28]*z[34] + z[29]*z[31] + z[35]*z[37];
  ar[13] = cam_y*z[19] - z[13]*z[15] - z[27]*z[38] + z[28]*z[30] + z[29]*z[32] + z[36]*z[37];
  ar[14] = -cam_y*z[0]*z[8] + z[13]*z[7]*z[8] - z[20]*z[38] + z[23]*z[29] - z[25]*z[28] - z[33]*z[37];
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::mc_f_ogl(double ar[16]) const;
void Bicycle::mc_f_ogl(double ar[16]) const
{
  double z[41];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[3]);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = cos(elevation);
  z[8] = cos(state_[1]);
  z[9] = cos(state_[2]);
  z[10] = cos(state_[3]);
  z[11] = cos(twist);
  z[12] = pow(z[8], 2);
  z[13] = front_.a - front_.c;
  z[14] = -cam_x - cam_z;
  z[15] = z[0]*z[5] + z[1]*z[11]*z[6];
  z[16] = z[0]*z[1]*z[5] + z[11]*z[6];
  z[17] = z[0]*z[2]*z[7] + z[1]*z[8];
  z[18] = z[0]*z[11] - z[1]*z[5]*z[6];
  z[19] = z[0]*z[1]*z[11] - z[5]*z[6];
  z[20] = z[0]*z[7]*z[8] - z[1]*z[2];
  z[21] = sqrt(z[12]*pow(z[3], 2) + z[12]*pow(z[9], 2));
  z[22] = z[16]*z[8] + z[2]*z[5]*z[7];
  z[23] = z[16]*z[2] - z[5]*z[7]*z[8];
  z[24] = z[11]*z[2]*z[7] + z[19]*z[8];
  z[25] = -z[17]*z[3] + z[6]*z[7]*z[9];
  z[26] = z[11]*z[7]*z[8] - z[19]*z[2];
  z[27] = -z[17]*z[9] - z[3]*z[6]*z[7];
  z[28] = rear_.R*z[8]*z[9]/z[21] - ls_ + rear_.r*z[8]*z[9];
  z[29] = -rear_.R*z[3]*z[8]/z[21] - rear_.c - rear_.r*z[3]*z[8];
  z[30] = z[18]*z[3] - z[23]*z[9];
  z[31] = -z[15]*z[3] + z[26]*z[9];
  z[32] = z[15]*z[9] + z[26]*z[3];
  z[33] = -z[10]*z[25] + z[20]*z[4];
  z[34] = -z[18]*z[9] - z[23]*z[3];
  z[35] = z[10]*z[32] - z[24]*z[4];
  z[36] = -cam_y;
  z[37] = -z[4];
  z[38] = -z[10];
  z[39] = -rear_.r*z[2];
  z[40] = -z[22]*z[37];

  ar[0] = z[34]*z[38] + z[40];
  ar[1] = z[35];
  ar[2] = z[33];
  ar[3] = 0;
  ar[4] = -z[22]*z[38] - z[34]*z[37];
  ar[5] = z[24]*z[38] + z[32]*z[37];
  ar[6] = -z[20]*z[38] - z[25]*z[37];
  ar[7] = 0;
  ar[8] = z[30];
  ar[9] = -z[31];
  ar[10] = z[27];
  ar[11] = 0;
  ar[12] = front_.b*z[30] + z[13]*(z[34]*z[38] + z[40]) + z[14]*z[18] + z[16]*z[36] + z[22]*z[39] - z[28]*z[30] + z[29]*z[34];
  ar[13] = -front_.b*z[31] + z[13]*z[35] + z[14]*z[15] - z[19]*z[36] - z[24]*z[39] + z[28]*z[31] - z[29]*z[32];
  ar[14] = front_.b*z[27] + z[0]*z[36]*z[7] + z[13]*z[33] - z[14]*z[6]*z[7] + z[20]*z[39] + z[25]*z[29] - z[27]*z[28];
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::N_ogl(double ar[16]) const;
void Bicycle::N_ogl(double ar[16]) const
{
  double z[20];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[0]);
  z[3] = sin(twist);
  z[4] = cos(azimuth);
  z[5] = cos(state_[0]);
  z[6] = cos(twist);
  z[7] = cam_x + cam_z;
  z[8] = z[0]*z[2] + z[4]*z[5];
  z[9] = z[0]*z[5] - z[2]*z[4];
  z[10] = z[0]*z[3] + z[1]*z[4]*z[6];
  z[11] = z[0]*z[1]*z[3] + z[4]*z[6];
  z[12] = z[0]*z[6] - z[1]*z[3]*z[4];
  z[13] = z[0]*z[1]*z[6] - z[3]*z[4];
  z[14] = z[10]*z[5] + z[13]*z[2];
  z[15] = z[11]*z[5] + z[12]*z[2];
  z[16] = z[10]*z[2] - z[13]*z[5];
  z[17] = -z[11]*z[2] + z[12]*z[5];
  z[18] = -state_[7];
  z[19] = -cos(elevation);

  ar[0] = z[17];
  ar[1] = z[14];
  ar[2] = z[19]*z[8];
  ar[3] = 0;
  ar[4] = z[15];
  ar[5] = z[16];
  ar[6] = -z[19]*z[9];
  ar[7] = 0;
  ar[8] = -z[19]*z[3];
  ar[9] = z[19]*z[6];
  ar[10] = -z[1];
  ar[11] = 0;
  ar[12] = -cam_y*z[11] - state_[6]*z[17] - z[12]*z[7] + z[15]*z[18];
  ar[13] = cam_y*z[13] - state_[6]*z[14] - z[10]*z[7] + z[16]*z[18];
  ar[14] = -z[19]*(-cam_y*z[0] + state_[6]*z[8] + z[18]*z[9] + z[4]*z[7]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_wheel_center_point(double ar[3]) const;
void Bicycle::rear_wheel_center_point(double ar[3]) const
{
  double z[6];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[1]);
  z[2] = pow(sin(state_[2]), 2);
  z[3] = pow(z[1], 2);
  z[4] = pow(cos(state_[2]), 2);
  z[5] = rear_.R/sqrt(z[2]*z[3] + z[3]*z[4]) + rear_.r;

  ar[0] = 0;
  ar[1] = z[0]*z[1]*(-rear_.r + z[2]*z[5] + z[4]*z[5]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[2]*z[3]*z[5] - z[3]*z[4]*z[5];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_mass_center_point(double ar[3]) const;
void Bicycle::rear_mass_center_point(double ar[3]) const
{
  double z[10];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = pow(z[2], 2);
  z[5] = sqrt(pow(z[1], 2)*z[4] + pow(z[3], 2)*z[4]);
  z[6] = rear_.R*z[1]*z[2]/z[5] + rear_.a + rear_.r*z[1]*z[2];
  z[7] = rear_.R*z[2]*z[3]/z[5] - rear_.b + rear_.r*z[2]*z[3];
  z[8] = z[1]*z[6];
  z[9] = z[3]*z[7];

  ar[0] = -z[1]*z[7] + z[3]*z[6];
  ar[1] = z[0]*(-rear_.r*z[2] + z[8] + z[9]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[2]*z[8] - z[2]*z[9];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_steer_axis_point(double ar[3]) const;
void Bicycle::rear_steer_axis_point(double ar[3]) const
{
  double z[10];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = pow(z[2], 2);
  z[5] = pow(z[3], 2);
  z[6] = sqrt(pow(z[1], 2)*z[4] + z[4]*z[5]);
  z[7] = rear_.R/z[6] + rear_.r;
  z[8] = rear_.R*z[1]*z[2]/z[6] + rear_.c + rear_.r*z[1]*z[2];
  z[9] = z[1]*z[2];

  ar[0] = z[3]*(-z[7]*z[9] + z[8]);
  ar[1] = z[0]*(-rear_.r*z[2] + z[1]*z[8] + z[2]*z[5]*z[7]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[4]*z[5]*z[7] - z[8]*z[9];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_wheel_center_point(double ar[3]) const;
void Bicycle::front_wheel_center_point(double ar[3]) const
{
  double z[12];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = pow(z[3], 2);
  z[6] = sqrt(pow(z[1], 2)*z[5] + pow(z[4], 2)*z[5]);
  z[7] = rear_.R*z[1]*z[3]/z[6] + rear_.c + rear_.r*z[1]*z[3];
  z[8] = rear_.R*z[3]*z[4]/z[6] - ls_ + rear_.r*z[3]*z[4];
  z[9] = -cos(state_[3]);
  z[10] = z[0]*z[1];
  z[11] = z[1]*z[3];

  ar[0] = front_.c*z[4]*z[9] - z[1]*z[8] + z[4]*z[7];
  ar[1] = -front_.c*(-z[10]*z[9] + z[2]*z[3]) - rear_.r*z[0]*z[3] + z[0]*z[4]*z[8] + z[10]*z[7];
  ar[2] = -front_.c*(z[0]*z[2] + z[11]*z[9]) - rear_.r*pow(z[0], 2) - z[11]*z[7] - z[3]*z[4]*z[8];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_mass_center_point(double ar[3]) const;
void Bicycle::front_mass_center_point(double ar[3]) const
{
  double z[15];

  z[0] = sin(state_[2]);
  z[1] = sin(state_[3]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = cos(state_[3]);
  z[5] = pow(z[2], 2);
  z[6] = front_.a - front_.c;
  z[7] = sqrt(pow(z[0], 2)*z[5] + pow(z[3], 2)*z[5]);
  z[8] = rear_.R*z[0]*z[2]/z[7] + rear_.c + rear_.r*z[0]*z[2];
  z[9] = rear_.R*z[2]*z[3]/z[7] - ls_ + rear_.r*z[2]*z[3];
  z[10] = -sin(state_[1]);
  z[11] = -z[2];
  z[12] = z[0]*z[4];
  z[13] = -z[11]*z[3];
  z[14] = z[0]*z[8];

  ar[0] = front_.b*z[0] - z[0]*z[9] + z[3]*z[4]*z[6] + z[3]*z[8];
  ar[1] = front_.b*z[10]*z[3] + rear_.r*z[10]*z[2] - z[10]*z[14] - z[10]*z[3]*z[9] + z[6]*(-z[1]*z[11] - z[10]*z[12]);
  ar[2] = front_.b*z[13] - rear_.r*pow(z[10], 2) + z[11]*z[14] - z[13]*z[9] + z[6]*(-z[1]*z[10] + z[11]*z[12]);
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_steer_axis_point(double ar[3]) const;
void Bicycle::front_steer_axis_point(double ar[3]) const
{
  double z[10];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = pow(z[2], 2);
  z[5] = sqrt(pow(z[1], 2)*z[4] + pow(z[3], 2)*z[4]);
  z[6] = rear_.R*z[1]*z[2]/z[5] + rear_.c + rear_.r*z[1]*z[2];
  z[7] = rear_.R*z[2]*z[3]/z[5] - ls_ + rear_.r*z[2]*z[3];
  z[8] = z[1]*z[6];
  z[9] = z[3]*z[7];

  ar[0] = -z[1]*z[7] + z[3]*z[6];
  ar[1] = z[0]*(-rear_.r*z[2] + z[8] + z[9]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[2]*z[8] - z[2]*z[9];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_ground_contact_point(double ar[3]) const;
void Bicycle::front_ground_contact_point(double ar[3]) const
{
  double z[20];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[3], 2);
  z[7] = pow(z[4], 2);
  z[8] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[9] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[10] = sqrt(pow(z[1], 2)*z[6] + z[6]*z[7]);
  z[11] = sqrt(z[6]*z[7] + pow(z[9], 2));
  z[12] = front_.R/z[11] + front_.r;
  z[13] = rear_.R*z[1]*z[3]/z[10] + rear_.c + rear_.r*z[1]*z[3];
  z[14] = rear_.R*z[3]*z[4]/z[10] - ls_ + rear_.r*z[3]*z[4];
  z[15] = front_.R*z[9]/z[11] - front_.c + front_.r*z[9];
  z[16] = -z[3];
  z[17] = -front_.r*z[8];
  z[18] = z[1]*z[13];
  z[19] = z[14]*z[4];

  ar[0] = -z[1]*z[12]*z[16]*z[4] - z[1]*z[14] + z[13]*z[4] + z[15]*z[4]*z[5] + z[17]*z[2]*z[4];
  ar[1] = -rear_.r*z[0]*z[3] + z[0]*z[12]*z[16]*z[7] + z[0]*z[18] + z[0]*z[19] + z[15]*(z[0]*z[1]*z[5] - z[16]*z[2]) + z[17]*(z[0]*z[1]*z[2] + z[16]*z[5]);
  ar[2] = -rear_.r*pow(z[0], 2) + z[12]*z[6]*z[7] + z[15]*z[9] + z[16]*z[18] + z[16]*z[19] - z[17]*z[8];
}

/** Computes the n-d array of shape (2)
 *
 * @param[out] ar a C-array of with 2 elements
 */
//  void Bicycle::path_radii(double ar[2]) const;
void Bicycle::path_radii(double ar[2]) const
{
  double z[28];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[3], 2);
  z[8] = pow(z[4], 2);
  z[9] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[10] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[11] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[12] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[13] = pow(z[11], 2);
  z[14] = sqrt(z[6]*z[7] + z[7]*z[8]);
  z[15] = sqrt(z[13] + z[7]*z[8]);
  z[16] = rear_.R*z[1]*z[3]/z[14] + rear_.c + rear_.r*z[1]*z[3];
  z[17] = rear_.R*z[3]*z[4]/z[14] - ls_ + rear_.r*z[3]*z[4];
  z[18] = front_.R*z[3]*z[4]/z[15] + front_.r*z[3]*z[4];
  z[19] = front_.R*z[11]/z[15] - front_.c + front_.r*z[11];
  z[20] = -z[13]/z[15] - z[7]*z[8]/z[15];
  z[21] = z[1]*z[3]*z[9]/z[15] + z[11]*z[5]*z[9]/z[15];
  z[22] = -front_.r*z[2]*z[4]*z[9] - z[1]*z[17] + z[16]*z[4] + z[19]*z[4]*z[5];
  z[23] = -z[3];
  z[24] = z[0]*z[4];
  z[25] = pow(z[0], 2)/z[14];
  z[26] = z[9]/z[15];
  z[27] = z[2]*z[20];

  ar[0] = ((-z[21] + z[27])*(-front_.r*z[12]*z[9] + rear_.r*z[0]*z[23] + z[0]*z[1]*z[16] + z[10]*z[19] + z[17]*z[24] - z[18]*z[24]) + (z[1]*z[18] + z[22])*(z[0]*z[23]*z[26]*z[8] + z[10]*z[11]*z[26] - z[12]*z[20])/z[4])/(z[23]*(z[21] - z[27])*(z[25]*z[6] + z[25]*z[8] + z[6]*z[7]/z[14] + z[7]*z[8]/z[14]));
  ar[1] = (-z[1]*z[23]*z[4]*(front_.R/z[15] + front_.r) + z[22])/(z[4]*(z[15]*z[2] + z[21]));
}

/** Computes the n-d array of shape (6)
 *
 * @param[out] ar a C-array of with 6 elements
 */
//  void Bicycle::ke_pe(double ar[6]) const;
void Bicycle::ke_pe(double ar[6]) const
{
  double z[37];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[3], 2);
  z[8] = pow(z[4], 2);
  z[9] = state_[10] + state_[8]*z[0];
  z[10] = state_[12] + z[9];
  z[11] = state_[8]*z[3]*z[4] + state_[9]*z[1];
  z[12] = state_[8]*z[1]*z[3] - state_[9]*z[4];
  z[13] = state_[11] + z[11];
  z[14] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[15] = -z[11];
  z[16] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[17] = pow(z[16], 2);
  z[18] = sqrt(z[6]*z[7] + z[7]*z[8]);
  z[19] = z[12]*z[2] + z[5]*z[9];
  z[20] = -z[12]*z[5] + z[2]*z[9];
  z[21] = sqrt(z[17] + z[7]*z[8]);
  z[22] = -state_[13] - z[19];
  z[23] = rear_.R*z[1]*z[3]/z[18] + rear_.r*z[1]*z[3];
  z[24] = rear_.R*z[3]*z[4]/z[18] + rear_.r*z[3]*z[4];
  z[25] = front_.R*z[3]*z[4]/z[21] + front_.r*z[3]*z[4];
  z[26] = front_.R*z[16]/z[21] + front_.r*z[16];
  z[27] = -front_.b;
  z[28] = rear_.r*z[0];
  z[29] = z[1]*z[3];
  z[30] = z[3]*z[4];
  z[31] = z[7]*z[8];
  z[32] = front_.r*z[14];
  z[33] = state_[14]/z[18];
  z[34] = state_[15]*z[0]/z[18];
  z[35] = state_[17]/z[21];
  z[36] = state_[18]*z[14]/z[21];

  ar[0] = 0.5*rear_.m*(pow(-rear_.a*z[15] + rear_.b*z[12] + state_[15]*(z[31]/z[18] + z[6]*z[7]/z[18]) + state_[16]*z[0] - z[12]*z[24] - z[15]*z[23], 2) + pow(rear_.a*z[9] - state_[16]*z[30] + z[10]*z[23] - z[12]*z[28] - z[29]*z[33] + z[30]*z[34], 2) + pow(rear_.b*z[9] - state_[16]*z[29] - z[10]*z[24] - z[15]*z[28] + z[29]*z[34] + z[30]*z[33], 2));
  ar[1] = 0.5*rear_.Iyy*pow(z[9], 2) + 0.5*rear_.J*pow(state_[12], 2) + rear_.J*state_[12]*z[9] + 0.5*z[12]*(rear_.Ixx*z[12] + rear_.Ixz*z[15]) + 0.5*z[15]*(rear_.Ixz*z[12] + rear_.Izz*z[15]);
  ar[2] = 0.5*front_.m*(pow(front_.a*z[13] + state_[18]*(z[17]/z[21] + z[31]/z[21]) + state_[19]*z[14] - z[13]*z[26] + z[20]*z[25] + z[20]*z[27], 2) + pow(front_.a*z[19] - state_[19]*z[30] + z[16]*z[35] + z[20]*z[32] + z[22]*z[26] + z[30]*z[36], 2) + pow(state_[19]*z[16] + z[13]*z[32] - z[16]*z[36] - z[19]*z[27] + z[22]*z[25] + z[30]*z[35], 2));
  ar[3] = 0.5*front_.Iyy*pow(z[19], 2) + 0.5*front_.J*pow(state_[13], 2) + front_.J*state_[13]*z[19] + 0.5*z[13]*(front_.Ixz*z[20] + front_.Izz*z[13]) + 0.5*z[20]*(front_.Ixx*z[20] + front_.Ixz*z[13]);
  ar[4] = g_*rear_.m*(z[0]*z[28] + z[29]*(rear_.a + z[23]) + z[30]*(-rear_.b + z[24]));
  ar[5] = g_*front_.m*(z[14]*z[32] + z[16]*(-front_.a + z[26]) + z[30]*(z[25] + z[27]));
}

/** Computes the n-d array of shape (2)
 *
 * @param[out] ar a C-array of with 2 elements
 */
//void q6q7_from_bm(double ar[2], double x_bm, double y_bm) const;
void Bicycle::q6q7_from_bm(double ar[2], double x_bm, double y_bm) const
{
  double z[1];

  z[0] = rear_.R*sin(state_[1]);

  ar[0] = x_bm + z[0]*sin(state_[0]);
  ar[1] = y_bm - z[0]*cos(state_[0]);
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::xyz_dot_bm(double ar[3]) const;
void Bicycle::xyz_dot_bm(double ar[3]) const
{
  double z[23];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[2], 2);
  z[7] = pow(z[4], 2);
  z[8] = pow(z[5], 2);
  z[9] = state_[8]*z[4]*z[5] + state_[9]*z[2];
  z[10] = state_[8]*z[2]*z[4] - state_[9]*z[5];
  z[11] = -state_[10] - state_[12] - state_[8]*z[1];
  z[12] = sqrt(z[6]*z[7] + z[7]*z[8]);
  z[13] = rear_.R*z[2]*z[4]/z[12] + rear_.r*z[2]*z[4];
  z[14] = rear_.R*z[4]*z[5]/z[12] + rear_.r*z[4]*z[5];
  z[15] = rear_.r*z[1]*z[10] + state_[14]*z[2]*z[4]/z[12] - state_[15]*z[1]*z[4]*z[5]/z[12] + state_[16]*z[4]*z[5] + z[11]*z[13];
  z[16] = -rear_.r*z[1]*z[9] - state_[14]*z[4]*z[5]/z[12] - state_[15]*z[1]*z[2]*z[4]/z[12] + state_[16]*z[2]*z[4] - z[11]*z[14];
  z[17] = state_[15]*(z[6]*z[7]/z[12] + z[7]*z[8]/z[12]) + state_[16]*z[1] - z[10]*z[14] + z[13]*z[9];
  z[18] = -z[5];
  z[19] = z[0]*z[2];
  z[20] = -z[0]*z[18];
  z[21] = z[2]*z[3];
  z[22] = z[17]*z[4];

  ar[0] = -z[0]*z[22] + z[15]*(z[1]*z[20] + z[21]) + z[16]*(z[1]*z[19] + z[18]*z[3]);
  ar[1] = z[15]*(z[1]*z[18]*z[3] + z[19]) - z[16]*(z[1]*z[21] + z[20]) + z[22]*z[3];
  ar[2] = z[1]*z[17] - z[15]*z[18]*z[4] + z[16]*z[2]*z[4];
}

/** Computes the n-d array of shape (1)
 *
 * @param[out] ar a C-array of with 1 elements
 */
//  void Bicycle::f_c(double ar[1]) const;
void Bicycle::f_c(double ar[1]) const
{
  double z[14];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[3], 2);
  z[7] = pow(z[4], 2);
  z[8] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[9] = rear_.r*z[3];
  z[10] = z[1]*z[3];
  z[11] = z[3]*z[4];
  z[12] = rear_.R/sqrt(pow(z[1], 2)*z[6] + z[6]*z[7]);
  z[13] = front_.R/sqrt(z[6]*z[7] + pow(z[8], 2));

  ar[0] = front_.r*pow(z[0]*z[5] + z[10]*z[2], 2) - rear_.r*pow(z[0], 2) - z[10]*(rear_.c + z[1]*z[9] + z[10]*z[12]) - z[11]*(-ls_ + z[11]*z[12] + z[4]*z[9]) + z[6]*z[7]*(front_.r + z[13]) + z[8]*(-front_.c + front_.r*z[8] + z[13]*z[8]);
}

/** Computes the n-d array of shape (8)
 *
 * @param[out] ar a C-array of with 8 elements
 */
//  void Bicycle::f_c_dq(double ar[8]) const;
void Bicycle::f_c_dq(double ar[8]) const
{
  double z[30];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[3], 2);
  z[8] = pow(z[4], 2);
  z[9] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[10] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[11] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[12] = pow(z[11], 2);
  z[13] = z[6]*z[7] + z[7]*z[8];
  z[14] = sqrt(z[13]);
  z[15] = z[12] + z[7]*z[8];
  z[16] = sqrt(z[15]);
  z[17] = z[1]*z[4]*z[7] + z[11]*z[3]*z[4]*z[5];
  z[18] = front_.R/z[16] + front_.r;
  z[19] = rear_.R*z[1]*z[3]/z[14] + rear_.c + rear_.r*z[1]*z[3];
  z[20] = rear_.R*z[3]*z[4]/z[14] - ls_ + rear_.r*z[3]*z[4];
  z[21] = -z[0]*z[3]*z[8] + z[10]*z[11];
  z[22] = front_.R*z[11]/z[16] - front_.c;
  z[23] = front_.r*z[11] + z[22];
  z[24] = -z[3];
  z[25] = -z[24]*z[4]*z[5];
  z[26] = 2*front_.r*z[9];
  z[27] = front_.R/z[16];
  z[28] = -front_.R/pow(z[15], 3.0L/2.0L);
  z[29] = -z[24]*(rear_.R*z[0]/z[14] - rear_.R*z[3]*(z[0]*z[3]*z[6] + z[0]*z[3]*z[8])/pow(z[13], 3.0L/2.0L) + rear_.r*z[0]);

  ar[0] = 0;
  ar[1] = 2*rear_.r*z[0]*z[24] + z[0]*z[1]*z[19] + z[0]*z[18]*z[24]*z[8] + z[0]*z[20]*z[4] + z[10]*z[23] + z[11]*(front_.r*z[10] + z[10]*z[27] + z[11]*z[21]*z[28]) + z[24]*z[8]*(front_.r*z[0] + z[0]*z[27] + z[21]*z[24]*z[28]) - z[26]*(z[0]*z[1]*z[2] + z[24]*z[5]) + z[29]*z[6] + z[29]*z[8];
  ar[2] = -z[1]*z[18]*z[4]*z[7] - z[1]*z[20]*z[24] - z[11]*(front_.r*z[25] + z[11]*z[17]*z[28] + z[25]*z[27]) + z[19]*z[24]*z[4] - z[2]*z[24]*z[26]*z[4] - z[23]*z[25] - z[4]*z[7]*(front_.r*z[1] + z[1]*z[27] + z[17]*z[28]*z[4]);
  ar[3] = z[9]*(-front_.r*z[11] + z[11]*z[28]*z[7]*z[8] + z[11]*(z[12]*z[28] + z[18]) + z[22]);
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
}

/** Computes the n-d array of shape (3, 12)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::f_v_du(double ar[36]) const;
void Bicycle::f_v_du(double ar[36]) const
{
  double z[42];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[3], 2);
  z[8] = pow(z[4], 2);
  z[9] = z[6] + z[8];
  z[10] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[11] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[12] = -z[10];
  z[13] = sqrt(z[7]*z[9]);
  z[14] = rear_.R/z[13] + rear_.r;
  z[15] = sqrt(z[6]*z[7] + z[7]*z[8]);
  z[16] = sqrt(pow(z[11], 2) + z[7]*z[8]);
  z[17] = -rear_.R*z[3]*z[4]/z[15] + ls_;
  z[18] = rear_.R*z[1]*z[3]/z[15] + rear_.r*z[1]*z[3];
  z[19] = rear_.R*z[3]*z[4]/z[15] + rear_.r*z[3]*z[4];
  z[20] = -front_.R/z[16] - front_.r;
  z[21] = rear_.c*z[1] - ls_*z[4] + z[1]*z[18] + z[19]*z[4];
  z[22] = -front_.c;
  z[23] = -rear_.c;
  z[24] = rear_.r*z[1];
  z[25] = -z[0];
  z[26] = -z[2];
  z[27] = -z[5];
  z[28] = z[25]*z[27];
  z[29] = z[1]*z[3];
  z[30] = z[3]*z[4];
  z[31] = z[24]*z[3];
  z[32] = rear_.r*z[30];
  z[33] = -front_.r*z[12];
  z[34] = z[1]/z[13];
  z[35] = rear_.R/z[15];
  z[36] = z[3]*z[9]/z[15];
  z[37] = -z[20]*z[30];
  z[38] = -z[20]*z[3]*z[8];
  z[39] = z[11]/z[16];
  z[40] = -z[11]*z[20];
  z[41] = z[3]*(rear_.c*z[4] + ls_*z[1] - z[1]*z[19] + z[18]*z[4]);

  ar[0] = -z[12]*z[37] + z[17]*z[28] - z[26]*z[41] - z[30]*z[33];
  ar[1] = -z[1]*z[33] - z[21]*z[26] + z[24]*z[28] + z[26]*z[38];
  ar[2] = -z[27]*(z[17] - z[32] + z[37]);
  ar[3] = -z[33];
  ar[4] = z[14]*z[27]*z[30];
  ar[5] = z[37];
  ar[6] = -z[27]*z[30]/z[13];
  ar[7] = z[3]*(-z[26]*z[36] + z[28]*z[34]);
  ar[8] = z[11];
  ar[9] = -z[30]/z[16];
  ar[10] = -z[12]*z[39];
  ar[11] = -z[11];
  ar[12] = -z[17]*z[25]*z[26] + z[22]*z[30] - z[27]*z[41];
  ar[13] = z[1]*z[22] + z[1]*z[40] - z[21]*z[27] - z[24]*z[25]*z[26] + z[27]*z[38];
  ar[14] = -z[26]*(-z[17] + z[32] - z[37]);
  ar[15] = front_.R*z[11]/z[16] + front_.r*z[11] + z[22];
  ar[16] = -z[14]*z[26]*z[30];
  ar[17] = 0;
  ar[18] = z[26]*z[30]/z[13];
  ar[19] = z[3]*(-z[25]*z[26]*z[34] - z[27]*z[36]);
  ar[20] = z[10];
  ar[21] = 0;
  ar[22] = -z[16];
  ar[23] = z[12];
  ar[24] = z[11]*z[33] + z[12]*z[22] + z[12]*z[40] - z[23]*z[25] + z[25]*z[29]*(rear_.r + z[35]) - z[25]*z[31];
  ar[25] = z[4]*(rear_.r*z[25] - z[22]*z[26] - z[26]*z[40] - z[27]*z[33]);
  ar[26] = -rear_.R*z[29]/z[13] + z[22]*z[27] + z[23] - z[26]*z[33] + z[27]*z[40] - z[31];
  ar[27] = 0;
  ar[28] = -z[14]*z[29];
  ar[29] = -z[40];
  ar[30] = z[29]/z[13];
  ar[31] = z[25]*z[30]/z[13];
  ar[32] = z[30];
  ar[33] = z[39];
  ar[34] = -z[12]*z[30]/z[16];
  ar[35] = -z[30];
}

/** Computes the n-d array of shape (3, 12, 3)
 *
 * @param[out] ar a C-array of with 108 elements
 */
//  void Bicycle::f_v_dudq(double ar[108]) const;
void Bicycle::f_v_dudq(double ar[108]) const
{
  double z[112];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = rear_.c*z[4] + ls_*z[1];
  z[11] = z[7] + z[9];
  z[12] = rear_.c*z[1] - ls_*z[4];
  z[13] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[14] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[15] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[16] = -z[15];
  z[17] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[18] = -z[13];
  z[19] = -z[14];
  z[20] = sqrt(z[11]*z[8]);
  z[21] = pow(z[11]*z[8], 3.0L/2.0L);
  z[22] = z[7]*z[8] + z[8]*z[9];
  z[23] = z[0]*z[3]*z[7] + z[0]*z[3]*z[9];
  z[24] = rear_.R/z[20] + rear_.r;
  z[25] = sqrt(z[22]);
  z[26] = pow(z[22], 3.0L/2.0L);
  z[27] = z[1]*z[3] + z[16]*z[5];
  z[28] = rear_.R/z[25] + rear_.r;
  z[29] = -rear_.R*z[3]*z[4]/z[25] + ls_;
  z[30] = z[1]*z[4]*z[8] + z[16]*z[3]*z[4]*z[5];
  z[31] = front_.R/sqrt(pow(z[16], 2) + z[8]*z[9]) + front_.r;
  z[32] = rear_.R*z[1]*z[3]/z[25] + rear_.r*z[1]*z[3];
  z[33] = rear_.R*z[3]*z[4]/z[25] + rear_.r*z[3]*z[4];
  z[34] = rear_.r*z[3]*z[4] - z[29];
  z[35] = -z[0]*z[3]*z[9] - z[16]*z[19];
  z[36] = -front_.R*z[1]/sqrt(pow(z[16], 2) + z[8]*z[9]) - front_.r*z[1];
  z[37] = -rear_.R*z[11]*z[8]/z[21] + z[24];
  z[38] = rear_.R*z[0]/z[25] - rear_.R*z[23]*z[3]/z[26] + rear_.r*z[0];
  z[39] = -front_.R*pow(z[16], 2)/pow(pow(z[16], 2) + z[8]*z[9], 3.0L/2.0L) + z[31];
  z[40] = rear_.R*z[0]*z[1]/z[25] - rear_.R*z[1]*z[23]*z[3]/z[26] + rear_.r*z[0]*z[1];
  z[41] = rear_.R*z[0]*z[4]/z[25] - rear_.R*z[23]*z[3]*z[4]/z[26] + rear_.r*z[0]*z[4];
  z[42] = z[1]*z[32] + z[12] + z[33]*z[4];
  z[43] = -z[1]*z[33] + z[10] + z[32]*z[4];
  z[44] = -front_.R*z[30]*z[4]/pow(pow(z[16], 2) + z[8]*z[9], 3.0L/2.0L) - z[36];
  z[45] = front_.R*z[0]/sqrt(pow(z[16], 2) + z[8]*z[9]) + front_.R*z[3]*z[35]/pow(pow(z[16], 2) + z[8]*z[9], 3.0L/2.0L) + front_.r*z[0];
  z[46] = -front_.R*z[16]*z[30]/pow(pow(z[16], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[3]*z[4]*z[5]/sqrt(pow(z[16], 2) + z[8]*z[9]) + front_.r*z[3]*z[4]*z[5];
  z[47] = -front_.R*z[16]*z[35]/pow(pow(z[16], 2) + z[8]*z[9], 3.0L/2.0L) - front_.R*z[19]/sqrt(pow(z[16], 2) + z[8]*z[9]) - front_.r*z[19];
  z[48] = -z[47];
  z[49] = ls_*z[3] - rear_.r*z[4]*z[6] + rear_.r*z[4]*z[8] + z[0]*z[41] - z[3]*z[33];
  z[50] = -front_.c;
  z[51] = -front_.r;
  z[52] = -z[1]*z[50];
  z[53] = rear_.c*z[4];
  z[54] = ls_*z[1];
  z[55] = -z[5]*z[51];
  z[56] = rear_.r*z[0];
  z[57] = rear_.r*z[3];
  z[58] = -z[0];
  z[59] = -z[1];
  z[60] = -z[2];
  z[61] = -z[3];
  z[62] = -z[4];
  z[63] = -z[5];
  z[64] = z[1]*z[51];
  z[65] = z[58]*z[59];
  z[66] = z[58]*z[60];
  z[67] = z[58]*z[61];
  z[68] = z[58]*z[62];
  z[69] = z[59]*z[61];
  z[70] = z[59]*z[63];
  z[71] = z[60]*z[61];
  z[72] = z[60]*z[62];
  z[73] = z[61]*z[62];
  z[74] = z[61]*z[63];
  z[75] = z[62]*z[63];
  z[76] = -z[56]*z[59];
  z[77] = -z[6]*z[60];
  z[78] = -z[59]*z[8];
  z[79] = -z[61]*z[9];
  z[80] = -z[63]*z[65];
  z[81] = z[8]*z[9];
  z[82] = z[11]*z[8];
  z[83] = -z[16]*z[51];
  z[84] = -z[17]*z[51];
  z[85] = z[18]*z[60];
  z[86] = z[18]*z[62];
  z[87] = -z[16]*z[60];
  z[88] = -z[16]*z[62];
  z[89] = -z[16]*z[63];
  z[90] = rear_.R/z[20];
  z[91] = -pow(z[16], 2);
  z[92] = -z[60]/z[20];
  z[93] = z[8]/z[20];
  z[94] = rear_.R/z[25];
  z[95] = -z[16]*z[18];
  z[96] = z[16]*z[17];
  z[97] = front_.R/pow(z[81] - z[91], 3.0L/2.0L);
  z[98] = front_.R/sqrt(z[81] - z[91]);
  z[99] = z[11]/z[25];
  z[100] = -z[61]/sqrt(z[81] - z[91]);
  z[101] = -z[62]/sqrt(z[81] - z[91]);
  z[102] = z[31]*z[9];
  z[103] = z[16]*z[27];
  z[104] = z[102]*z[71];
  z[105] = pow(z[18], 2)/(z[81] - z[91]);
  z[106] = z[16]*z[31];
  z[107] = z[27]/(z[81] - z[91]);
  z[108] = z[35]/(z[81] - z[91]);
  z[109] = -z[18]*z[39];
  z[110] = z[45]*z[9];
  z[111] = (2*z[0]*z[7] + 2*z[0]*z[9] - z[23]*z[3]*z[7]/z[22] - z[23]*z[3]*z[9]/z[22])/z[25];

  ar[0] = -z[0]*z[51]*z[86] - z[17]*z[31]*z[73] - z[45]*z[86] - z[49]*z[63] + z[60]*(z[32]*z[68] - z[33]*z[65] + z[40]*z[73] - z[41]*z[69] - z[53]*z[58] - z[54]*z[58]) + z[73]*z[84];
  ar[1] = -z[61]*(z[104] + z[12]*z[60] + z[18]*z[44] + z[18]*z[64] + z[51]*z[71]*z[9] + z[80]*z[94]);
  ar[2] = -z[106]*z[73] + z[18]*z[73]*z[95]*z[97] - z[29]*z[66] + z[43]*z[74] + z[73]*z[83];
  ar[3] = -z[110]*z[60] - z[17]*z[64] + z[57]*z[70] + z[60]*(-z[40]*z[59] - z[41]*z[62]);
  ar[4] = -z[10]*z[60] + z[31]*z[69]*z[72] - z[44]*z[62]*z[71] + z[51]*z[86] + z[56]*z[75] - z[62]*z[64]*z[71];
  ar[5] = -z[102]*z[74] - z[16]*z[64] - z[42]*z[63] + z[60]*z[76] + z[71]*z[9]*z[95]*z[97];
  ar[6] = z[75]*(z[38] - z[45]);
  ar[7] = z[74]*(-z[28]*z[59] - z[44]);
  ar[8] = z[18]*z[73]*z[89]*z[97] + z[31]*z[62]*z[71] - z[34]*z[60];
  ar[9] = z[84];
  ar[10] = -z[51]*z[62]*z[71];
  ar[11] = z[83];
  ar[12] = -z[37]*z[63]*z[68];
  ar[13] = -z[24]*z[63]*z[69];
  ar[14] = -z[24]*z[62]*z[71];
  ar[15] = z[45]*z[62];
  ar[16] = -z[61]*(z[27]*z[79]*z[97] + z[36]);
  ar[17] = -z[73]*z[95]*z[97];
  ar[18] = 0;
  ar[19] = z[63]*z[69]/z[20];
  ar[20] = z[62]*z[71]/z[20];
  ar[21] = -z[111]*z[71] + z[70]*z[93] + z[6]*z[70]*z[82]/z[21] - z[6]*z[70]/z[20];
  ar[22] = z[67]*z[75]/z[20];
  ar[23] = -z[61]*(-z[65]*z[92] + z[74]*z[99]);
  ar[24] = z[14];
  ar[25] = z[63]*z[73];
  ar[26] = z[13];
  ar[27] = z[101]*(z[100]*z[35]/sqrt(z[81] - z[91]) - z[58]);
  ar[28] = z[100]*(-z[107]*z[79] - z[59]);
  ar[29] = z[73]*z[95]/pow(z[81] - z[91], 3.0L/2.0L);
  ar[30] = (-z[108]*z[95] + z[18]*z[19] - z[96])/sqrt(z[81] - z[91]);
  ar[31] = z[73]*(z[107]*z[95] - z[18]*z[63] + z[87])/sqrt(z[81] - z[91]);
  ar[32] = (z[105]*z[91] + pow(z[18], 2) + z[91])/sqrt(z[81] - z[91]);
  ar[33] = z[19];
  ar[34] = -z[63]*z[73];
  ar[35] = z[18];
  ar[36] = -z[106]*z[68] + z[19]*z[31]*z[73] + z[45]*z[88] - z[48]*z[73] + z[49]*z[60] - z[50]*z[68] - z[63]*(-z[32]*z[68] + z[33]*z[65] - z[40]*z[73] + z[41]*z[69] + z[53]*z[58] + z[54]*z[58]);
  ar[37] = -z[61]*(z[102]*z[74] + z[106]*z[59] + z[12]*z[63] + z[16]*z[44] + z[46]*z[62] + z[52] + z[60]*z[65]*z[94]);
  ar[38] = z[109]*z[73] + z[18]*z[31]*z[73] + z[18]*z[73]*z[91]*z[97] - z[29]*z[58]*z[63] - z[43]*z[71];
  ar[39] = -z[110]*z[63] + z[48]*z[59] - z[57]*z[59]*z[60] - z[63]*(z[40]*z[59] + z[41]*z[62]);
  ar[40] = -z[10]*z[63] + z[31]*z[69]*z[75] + z[31]*z[88] - z[44]*z[63]*z[73] + z[46]*z[59] - z[50]*z[62] - z[56]*z[72];
  ar[41] = z[104] - z[109]*z[59] + z[42]*z[60] - z[56]*z[70] + z[74]*z[9]*z[95]*z[97];
  ar[42] = z[72]*(-z[38] + z[45]);
  ar[43] = z[71]*(z[28]*z[59] + z[44]);
  ar[44] = z[16]*z[71]*z[86]*z[97] + z[31]*z[63]*z[73] - z[34]*z[63];
  ar[45] = z[47];
  ar[46] = z[73]*(z[103]*z[97] - z[55] + z[63]*z[98]);
  ar[47] = z[109];
  ar[48] = z[37]*z[62]*z[66];
  ar[49] = z[24]*z[60]*z[69];
  ar[50] = -z[24]*z[63]*z[73];
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = z[69]*z[92];
  ar[56] = z[63]*z[73]/z[20];
  ar[57] = -z[11]*z[77]*z[78]/z[21] - z[111]*z[74] - z[78]*z[92] - z[59]*z[77]/z[20];
  ar[58] = -z[66]*z[73]/z[20];
  ar[59] = z[61]*(z[71]*z[99] + z[80]/z[20]);
  ar[60] = -z[17];
  ar[61] = -z[62]*z[71];
  ar[62] = z[15];
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = (z[108]*z[81] - z[108]*z[91] + 2*z[16]*z[19] - 2*z[58]*z[79])/sqrt(z[81] - z[91]);
  ar[67] = z[73]*(-z[107]*z[81] + z[107]*z[91] + 2*z[69] + 2*z[89])/sqrt(z[81] - z[91]);
  ar[68] = z[95]*(z[81]/(z[81] - z[91]) - z[91]/(z[81] - z[91]) - 2)/sqrt(z[81] - z[91]);
  ar[69] = z[17];
  ar[70] = z[62]*z[71];
  ar[71] = z[16];
  ar[72] = rear_.c*z[61] + rear_.r*z[59]*z[6] - rear_.r*z[59]*z[8] + z[17]*z[50] - z[17]*z[83] - z[18]*z[19]*z[51] - z[18]*z[48] - z[28]*z[78] + z[31]*z[96] + z[38]*z[65];
  ar[73] = -z[18]*z[46] + z[18]*z[55]*z[73] + z[28]*z[62]*z[67] - z[31]*z[71]*z[88] + z[50]*z[62]*z[71] + z[56]*z[73] - z[62]*z[71]*z[83];
  ar[74] = z[109]*z[18] + z[16]*z[50] - z[16]*z[83] - pow(z[18], 2)*z[51] - z[31]*z[91];
  ar[75] = z[62]*(z[17]*z[55] - z[48]*z[60] + z[57]);
  ar[76] = z[18]*z[63]*z[64] + z[31]*z[59]*z[87] - z[46]*z[72] - z[52]*z[60] + z[55]*z[71]*z[9] + z[76];
  ar[77] = -z[62]*(-z[16]*z[55] + z[31]*z[89] + z[39]*z[85] - z[50]*z[63] + z[51]*z[85]);
  ar[78] = -rear_.R*z[65]*z[82]/z[21] - z[48]*z[63] + z[60]*z[84] + z[65]*z[90] + z[76];
  ar[79] = -z[46]*z[63] - z[51]*z[71]*z[72] + z[57]*z[62] - z[73]*z[90];
  ar[80] = z[109]*z[63] - z[18]*z[55] + z[31]*z[87] - z[50]*z[60] + z[60]*z[83];
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[37]*z[65];
  ar[85] = -z[24]*z[73];
  ar[86] = 0;
  ar[87] = z[48];
  ar[88] = z[73]*(-z[103]*z[97] + z[55] - z[63]*z[98]);
  ar[89] = -z[109];
  ar[90] = 0;
  ar[91] = z[73]/z[20];
  ar[92] = 0;
  ar[93] = z[62]*z[93];
  ar[94] = -z[61]*z[65]/z[20];
  ar[95] = 0;
  ar[96] = -z[68];
  ar[97] = -z[69];
  ar[98] = 0;
  ar[99] = (-z[108]*z[16] - z[19])/sqrt(z[81] - z[91]);
  ar[100] = z[73]*(z[103]/(z[81] - z[91]) + z[63])/sqrt(z[81] - z[91]);
  ar[101] = -z[18]*(z[91]/(z[81] - z[91]) + 1)/sqrt(z[81] - z[91]);
  ar[102] = z[101]*(z[100]*z[18]*z[35]/sqrt(z[81] - z[91]) + z[17]*z[61] - z[18]*z[58]);
  ar[103] = z[100]*(-z[107]*z[18]*z[79] - z[18]*z[59] + z[71]*z[9]);
  ar[104] = -z[16]*z[73]*(z[105] + 1)/sqrt(z[81] - z[91]);
  ar[105] = z[68];
  ar[106] = z[69];
  ar[107] = 0;
}

/** Computes the n-d array of shape (3, 12)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::f_v_dudt(double ar[36]) const;
void Bicycle::f_v_dudt(double ar[36]) const
{
  double z[89];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = z[7] + z[9];
  z[11] = state_[10]*z[1]*z[3] + state_[9]*z[0]*z[4];
  z[12] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[13] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[14] = sqrt(z[10]*z[8]);
  z[15] = pow(z[10]*z[8], 3.0L/2.0L);
  z[16] = pow(z[12], 2);
  z[17] = z[7]*z[8] + z[8]*z[9];
  z[18] = sqrt(z[17]);
  z[19] = pow(z[17], 3.0L/2.0L);
  z[20] = state_[9]*z[0]*z[3]*z[7] + state_[9]*z[0]*z[3]*z[9];
  z[21] = rear_.R/z[18] + rear_.r;
  z[22] = z[16] + z[8]*z[9];
  z[23] = sqrt(z[22]);
  z[24] = pow(z[22], 3.0L/2.0L);
  z[25] = -rear_.R*z[3]*z[4]/z[18] + ls_;
  z[26] = front_.R/z[23] + front_.r;
  z[27] = rear_.R*z[1]*z[3]/z[18] + rear_.r*z[1]*z[3];
  z[28] = -rear_.R*z[3]*z[4]/z[18] - rear_.r*z[3]*z[4];
  z[29] = rear_.r*z[3]*z[4] - z[25];
  z[30] = -state_[10]*z[3]*z[4]*z[5] + state_[11]*z[0]*z[5] + state_[11]*z[1]*z[2]*z[3] + state_[9]*z[0]*z[1]*z[5] + state_[9]*z[2]*z[3];
  z[31] = state_[10]*z[2]*z[3]*z[4] - state_[11]*z[0]*z[2] + state_[11]*z[1]*z[3]*z[5] - state_[9]*z[0]*z[1]*z[2] + state_[9]*z[3]*z[5];
  z[32] = state_[10]*z[1]*z[4]*z[8] + state_[9]*z[0]*z[3]*z[9] - z[12]*z[30];
  z[33] = rear_.c*z[1] - ls_*z[4] + z[1]*z[27] - z[28]*z[4];
  z[34] = -rear_.R*state_[10]*z[3]*z[4]/z[14] - rear_.R*state_[9]*z[0]*z[1]*z[10]*z[8]/z[15] + rear_.R*state_[9]*z[0]*z[1]/z[14] - rear_.r*state_[10]*z[3]*z[4] + rear_.r*state_[9]*z[0]*z[1];
  z[35] = 2*state_[9]*z[0]*z[7] + 2*state_[9]*z[0]*z[9] - z[20]*z[3]*z[7]/z[17] - z[20]*z[3]*z[9]/z[17];
  z[36] = rear_.R*state_[10]*z[1]*z[3]/z[18] + rear_.R*state_[9]*z[0]*z[4]/z[18] - rear_.R*z[20]*z[3]*z[4]/z[19] + rear_.r*state_[10]*z[1]*z[3] + rear_.r*state_[9]*z[0]*z[4];
  z[37] = rear_.R*state_[10]*z[3]*z[4]/z[18] - rear_.R*state_[9]*z[0]*z[1]/z[18] + rear_.R*z[1]*z[20]*z[3]/z[19] + rear_.r*state_[10]*z[3]*z[4] - rear_.r*state_[9]*z[0]*z[1];
  z[38] = front_.R*state_[10]*z[1]*z[3]/z[23] + front_.R*state_[9]*z[0]*z[4]/z[23] - front_.R*z[3]*z[32]*z[4]/z[24] + front_.r*state_[10]*z[1]*z[3] + front_.r*state_[9]*z[0]*z[4];
  z[39] = ls_*state_[9]*z[3] - rear_.r*state_[10]*z[0]*z[1]*z[3] - rear_.r*state_[9]*z[4]*z[6] + rear_.r*state_[9]*z[4]*z[8] + state_[9]*z[28]*z[3] + z[0]*z[36];
  z[40] = front_.R*z[12]*z[32]/z[24] + front_.R*z[30]/z[23] + front_.r*z[30];
  z[41] = rear_.c*state_[10]*z[4] + ls_*state_[10]*z[1] + state_[10]*z[1]*z[28] + state_[10]*z[27]*z[4] + z[1]*z[37] - z[36]*z[4];
  z[42] = -front_.c;
  z[43] = -ls_;
  z[44] = -front_.r;
  z[45] = -state_[10];
  z[46] = -state_[11];
  z[47] = z[42]*z[45];
  z[48] = z[44]*z[45];
  z[49] = rear_.c*z[1];
  z[50] = rear_.c*z[4];
  z[51] = -z[1]*z[43];
  z[52] = rear_.r*z[1];
  z[53] = rear_.r*z[3];
  z[54] = -z[1]*z[45];
  z[55] = -z[3]*z[45];
  z[56] = -z[4]*z[45];
  z[57] = -z[2]*z[46];
  z[58] = -z[46]*z[5];
  z[59] = state_[9]*z[0];
  z[60] = state_[9]*z[1];
  z[61] = state_[9]*z[3];
  z[62] = -z[0];
  z[63] = -z[1];
  z[64] = -z[2];
  z[65] = -z[4];
  z[66] = -z[5];
  z[67] = z[62]*z[64];
  z[68] = z[62]*z[66];
  z[69] = -z[3]*z[63];
  z[70] = -z[3]*z[65];
  z[71] = -z[3]*z[66];
  z[72] = z[65]*z[66];
  z[73] = state_[9]*z[8];
  z[74] = z[3]*z[54];
  z[75] = -z[58]*z[62];
  z[76] = -z[59]*z[65];
  z[77] = z[10]*z[8];
  z[78] = z[13]*z[44];
  z[79] = z[6]/z[15];
  z[80] = z[8]/z[14];
  z[81] = z[26]*z[3];
  z[82] = -z[31]*z[44];
  z[83] = z[12]*z[26];
  z[84] = z[3]*(rear_.c*z[4] + ls_*z[1] + z[1]*z[28] + z[27]*z[4]);
  z[85] = z[32]/z[22];
  z[86] = -z[36]*z[66];
  z[87] = z[36]*z[64];
  z[88] = -z[38]*z[64];

  ar[0] = z[13]*z[38] - z[13]*z[48]*z[69] + z[25]*z[57]*z[62] + z[26]*z[31]*z[70] - z[39]*z[66] + z[58]*z[84] + z[64]*(z[27]*z[74] + z[27]*z[76] + z[28]*z[55]*z[65] - z[28]*z[59]*z[63] - z[36]*z[69] - z[37]*z[70] - z[43]*z[55]*z[65] + z[49]*z[55] + z[50]*z[59] + z[51]*z[59]) - z[70]*z[82] + z[76]*z[78];
  ar[1] = rear_.r*z[56]*z[68] - z[13]*z[48]*z[65] - z[26]*z[54]*z[64]*z[70] + z[33]*z[58] - z[41]*z[64] + z[52]*z[57]*z[62] - z[52]*z[61]*z[66] - z[58]*z[81]*z[9] + z[63]*z[82] - z[65]*z[88];
  ar[2] = -z[26]*z[57]*z[70] + z[29]*z[57] + z[38]*z[66] + z[86];
  ar[3] = -z[82];
  ar[4] = z[21]*z[57]*z[70] + z[86];
  ar[5] = -z[38];
  ar[6] = (-z[54]*z[71] - z[57]*z[70])/z[14];
  ar[7] = -z[60]*z[66]*z[77]*z[79] - z[60]*z[66]*z[80] + z[3]*z[35]*z[64]/z[18] + z[58]*z[77]/z[18] - z[55]*z[65]*z[68]/z[14] + z[57]*z[62]*z[69]/z[14] + z[6]*z[60]*z[66]/z[14];
  ar[8] = z[30];
  ar[9] = (z[11] - z[70]*z[85])/z[23];
  ar[10] = (-z[12]*z[13]*z[85] + z[12]*z[31] - z[13]*z[30])/z[23];
  ar[11] = -z[30];
  ar[12] = z[12]*z[38] - z[25]*z[75] - z[26]*z[30]*z[70] + z[39]*z[64] + z[40]*z[70] - z[42]*z[76] + z[47]*z[69] - z[57]*z[84] - z[66]*(-z[27]*z[74] - z[27]*z[76] - z[28]*z[55]*z[65] + z[28]*z[59]*z[63] + z[36]*z[69] + z[37]*z[70] + z[43]*z[55]*z[65] - z[49]*z[55] - z[50]*z[59] - z[51]*z[59]) - z[74]*z[83] - z[76]*z[83];
  ar[13] = -rear_.r*z[56]*z[67] - z[26]*z[54]*z[66]*z[70] - z[33]*z[57] + z[38]*z[72] - z[40]*z[63] - z[41]*z[66] + z[47]*z[65] + z[52]*z[61]*z[64] - z[52]*z[75] + z[56]*z[83] + z[57]*z[81]*z[9];
  ar[14] = -z[26]*z[58]*z[70] + z[29]*z[58] + z[87] + z[88];
  ar[15] = z[40];
  ar[16] = z[21]*z[58]*z[70] + z[87];
  ar[17] = 0;
  ar[18] = (-z[58]*z[70] - z[64]*z[74])/z[14];
  ar[19] = z[60]*z[64]*z[77]*z[79] + z[60]*z[64]*z[80] - z[35]*z[71]/z[18] - z[57]*z[77]/z[18] + z[55]*z[65]*z[67]/z[14] - z[6]*z[60]*z[64]/z[14] - z[69]*z[75]/z[14];
  ar[20] = z[31];
  ar[21] = 0;
  ar[22] = (-2*z[12]*z[30] - z[16]*z[85] + 2*z[3]*z[59]*z[9] - 2*z[54]*z[65]*z[8] - z[8]*z[85]*z[9])/z[23];
  ar[23] = -z[31];
  ar[24] = -rear_.c*z[61] - state_[9]*z[52]*z[6] + z[12]*z[82] + z[13]*z[40] - z[21]*z[60]*z[8] + z[30]*z[78] - z[31]*z[42] - z[31]*z[83] + z[37]*z[62] + z[52]*z[73] - z[53]*z[56]*z[62];
  ar[25] = state_[9]*z[53]*z[65] - z[12]*z[26]*z[58]*z[65] + z[13]*z[48]*z[63]*z[66] + z[40]*z[64]*z[65] - z[42]*z[58]*z[65] + z[45]*z[52]*z[62] + z[47]*z[63]*z[64] + z[54]*z[64]*z[83] + z[57]*z[65]*z[78] + z[72]*z[82];
  ar[26] = z[34] + z[40]*z[66] + z[42]*z[57] + z[57]*z[83] + z[58]*z[78] - z[64]*z[82];
  ar[27] = 0;
  ar[28] = z[34];
  ar[29] = -z[40];
  ar[30] = -z[55]*z[65]/z[14];
  ar[31] = (-z[62]*z[74] + z[65]*z[73])/z[14];
  ar[32] = -z[11];
  ar[33] = (z[12]*z[85] + z[30])/z[23];
  ar[34] = (-z[13]*z[70]*z[85] + z[13]*z[74] + z[13]*z[76] + z[31]*z[70])/z[23];
  ar[35] = z[11];
}

/** Computes the n-d array of shape (3, 12, 3)
 *
 * @param[out] ar a C-array of with 108 elements
 */
//  void Bicycle::f_v_dudtdq(double ar[108]) const;
void Bicycle::f_v_dudtdq(double ar[108]) const
{
  double z[234];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[0], 3);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[3], 3);
  z[11] = pow(z[4], 2);
  z[12] = pow(z[4], 3);
  z[13] = rear_.c*z[4] + ls_*z[1];
  z[14] = z[11] + z[8];
  z[15] = rear_.c*z[1] - ls_*z[4];
  z[16] = pow(z[14], 2);
  z[17] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[18] = -z[17];
  z[19] = -state_[10]*z[0]*z[1] + state_[9]*z[3]*z[4];
  z[20] = state_[10]*z[3]*z[4] - state_[9]*z[0]*z[1];
  z[21] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[22] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[23] = -z[0]*z[1]*z[5] - z[2]*z[3];
  z[24] = rear_.r*state_[10]*z[0]*z[4] + rear_.r*state_[9]*z[1]*z[3];
  z[25] = rear_.r*state_[10]*z[1]*z[3] + rear_.r*state_[9]*z[0]*z[4];
  z[26] = sqrt(z[14]*z[9]);
  z[27] = pow(z[14]*z[9], 3.0L/2.0L);
  z[28] = pow(z[14]*z[9], 5.0L/2.0L);
  z[29] = state_[10]*z[1]*z[3]*z[5] + state_[11]*z[2]*z[3]*z[4];
  z[30] = state_[10]*z[2]*z[3]*z[4] + state_[11]*z[1]*z[3]*z[5];
  z[31] = state_[10]*z[1]*z[2]*z[3] - state_[11]*z[3]*z[4]*z[5];
  z[32] = -state_[10]*z[3]*z[4]*z[5] + state_[11]*z[1]*z[2]*z[3];
  z[33] = z[11]*z[9] + z[8]*z[9];
  z[34] = z[0]*z[11]*z[3] + z[0]*z[3]*z[8];
  z[35] = sqrt(z[33]);
  z[36] = pow(z[33], 3.0L/2.0L);
  z[37] = pow(z[33], 5.0L/2.0L);
  z[38] = state_[9]*z[0]*z[11]*z[3] + state_[9]*z[0]*z[3]*z[8];
  z[39] = state_[9]*z[11]*z[6] - state_[9]*z[11]*z[9];
  z[40] = z[1]*z[3] + z[18]*z[5];
  z[41] = -2*state_[9]*z[11]*z[6] + 2*state_[9]*z[11]*z[9];
  z[42] = rear_.R/z[35] + rear_.r;
  z[43] = state_[9]*z[0]*z[4]*z[5] + z[29];
  z[44] = state_[9]*z[0]*z[2]*z[4] + z[31];
  z[45] = -z[44];
  z[46] = -z[43];
  z[47] = -rear_.R*z[3]*z[4]/z[35] + ls_;
  z[48] = rear_.c*state_[10]*z[3]*z[4] - rear_.c*state_[9]*z[0]*z[1] + ls_*state_[10]*z[1]*z[3] + ls_*state_[9]*z[0]*z[4];
  z[49] = z[1]*z[4]*z[9] + z[18]*z[3]*z[4]*z[5];
  z[50] = front_.R/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.r;
  z[51] = rear_.R*z[1]*z[3]/z[35] + rear_.r*z[1]*z[3];
  z[52] = -rear_.R*z[3]*z[4]/z[35] - rear_.r*z[3]*z[4];
  z[53] = rear_.r*z[3]*z[4] - z[47];
  z[54] = state_[10]*z[0]*z[2]*z[4] + state_[11]*z[0]*z[1]*z[5] + state_[11]*z[2]*z[3] + state_[9]*z[0]*z[5] + state_[9]*z[1]*z[2]*z[3];
  z[55] = state_[11]*z[0]*z[5] + state_[9]*z[0]*z[1]*z[5] + state_[9]*z[2]*z[3] + z[32];
  z[56] = -z[0]*z[11]*z[3] - z[18]*z[23];
  z[57] = z[11]*z[6] - z[33] + z[6]*z[8];
  z[58] = state_[10]*z[0]*z[4]*z[5] - state_[11]*z[0]*z[1]*z[2] + state_[11]*z[3]*z[5] - state_[9]*z[0]*z[2] + state_[9]*z[1]*z[3]*z[5];
  z[59] = -state_[11]*z[0]*z[2] - state_[9]*z[0]*z[1]*z[2] + state_[9]*z[3]*z[5] + z[30];
  z[60] = -z[58];
  z[61] = -z[59];
  z[62] = -z[55];
  z[63] = -z[54];
  z[64] = state_[9]*z[6]*z[8] - state_[9]*z[8]*z[9] + z[39];
  z[65] = rear_.R*z[0]/z[35] - rear_.R*z[3]*z[34]/z[36] + rear_.r*z[0];
  z[66] = -state_[10]*z[1]*z[4]*z[9] - state_[9]*z[0]*z[11]*z[3] - z[18]*z[62];
  z[67] = rear_.R*z[0]*z[1]/z[35] - rear_.R*z[1]*z[3]*z[34]/z[36] + rear_.r*z[0]*z[1];
  z[68] = rear_.R*z[0]*z[4]/z[35] - rear_.R*z[3]*z[34]*z[4]/z[36] + rear_.r*z[0]*z[4];
  z[69] = rear_.R*state_[10]*z[1]*z[3]/z[26] - rear_.R*state_[9]*z[0]*z[14]*z[4]*z[9]/z[27] + rear_.R*state_[9]*z[0]*z[4]/z[26];
  z[70] = z[1]*z[51] + z[15] - z[4]*z[52];
  z[71] = z[1]*z[52] + z[13] + z[4]*z[51];
  z[72] = front_.R*z[1]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.R*z[4]*z[49]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.r*z[1];
  z[73] = front_.R*z[0]/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.R*z[3]*z[56]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.r*z[0];
  z[74] = z[18]*z[61] - z[22]*z[62];
  z[75] = 2*z[0]*z[11] + 2*z[0]*z[8] - z[11]*z[3]*z[34]/z[33] - z[3]*z[34]*z[8]/z[33];
  z[76] = -state_[10]*z[11]*z[9] + state_[10]*z[8]*z[9] + 2*state_[9]*z[0]*z[1]*z[3]*z[4] - z[18]*z[46] + z[3]*z[4]*z[5]*z[62];
  z[77] = rear_.R*state_[10]*z[1]*z[3]/z[35] + rear_.R*state_[9]*z[0]*z[4]/z[35] - rear_.R*z[3]*z[38]*z[4]/z[36] + z[25];
  z[78] = -front_.R*z[18]*z[49]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.r*z[3]*z[4]*z[5];
  z[79] = rear_.R*state_[10]*z[3]*z[4]/z[35] - rear_.R*state_[9]*z[0]*z[1]/z[35] + rear_.R*z[1]*z[3]*z[38]/z[36] + rear_.r*state_[10]*z[3]*z[4] - rear_.r*state_[9]*z[0]*z[1];
  z[80] = -2*state_[10]*z[0]*z[1]*z[3]*z[4] + z[18]*z[60] - z[23]*z[62] - z[39];
  z[81] = front_.R*z[18]*z[56]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[23]/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.r*z[23];
  z[82] = ls_*z[3] - rear_.r*z[4]*z[6] + rear_.r*z[4]*z[9] + z[0]*z[68] + z[3]*z[52];
  z[83] = -rear_.r*state_[10]*z[0]*z[1]*z[3] - rear_.r*state_[9]*z[4]*z[6] + rear_.r*state_[9]*z[4]*z[9] + z[0]*z[77];
  z[84] = -state_[11]*z[1]*z[2]*z[3]*z[42] + z[5]*z[79];
  z[85] = -rear_.r*state_[10]*z[0]*z[3]*z[4] + rear_.r*state_[9]*z[1]*z[6] - rear_.r*state_[9]*z[1]*z[9] + state_[9]*z[3]*z[51] + z[0]*z[79];
  z[86] = front_.R*state_[10]*z[1]*z[3]/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.R*state_[9]*z[0]*z[4]/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.R*z[3]*z[4]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.r*state_[10]*z[1]*z[3] + front_.r*state_[9]*z[0]*z[4];
  z[87] = ls_*state_[9]*z[3] + state_[9]*z[3]*z[52] + z[83];
  z[88] = -rear_.R*state_[10]*z[0]*z[14]*z[4]*z[9]/z[27] + rear_.R*state_[10]*z[0]*z[4]/z[26] - 3*rear_.R*state_[9]*z[1]*z[10]*z[16]*z[6]/z[28] + 2*rear_.R*state_[9]*z[1]*z[14]*z[3]*z[6]/z[27] + rear_.R*state_[9]*z[1]*z[3]*z[57]/z[27] + rear_.R*state_[9]*z[1]*z[3]/z[26];
  z[89] = -front_.R*z[18]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.R*z[62]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.r*z[62];
  z[90] = -rear_.c*z[0]*z[4] - ls_*z[0]*z[1] - z[0]*z[1]*z[52] - z[0]*z[4]*z[51] + z[1]*z[3]*z[68] - z[3]*z[4]*z[67];
  z[91] = state_[10]*z[1]*z[18]*z[22]*z[3] + state_[9]*z[0]*z[18]*z[22]*z[4] + 3*z[18]*z[22]*z[3]*z[4]*z[66]/(z[11]*z[9] + pow(z[18], 2)) - z[3]*z[4]*z[74];
  z[92] = rear_.c*state_[10]*z[4] + ls_*state_[10]*z[1] + state_[10]*z[1]*z[52] + state_[10]*z[4]*z[51] + z[1]*z[79] - z[4]*z[77];
  z[93] = -rear_.R*state_[10]*z[0]*z[1]/z[35] + rear_.R*state_[10]*z[1]*z[3]*z[34]/z[36] + rear_.R*state_[9]*z[0]*z[34]*z[4]/z[36] + rear_.R*state_[9]*z[3]*z[4]/z[35] + rear_.R*z[0]*z[38]*z[4]/z[36] - 3*rear_.R*z[3]*z[34]*z[38]*z[4]/z[37] + rear_.R*z[3]*z[4]*z[64]/z[36] - rear_.r*state_[10]*z[0]*z[1] + rear_.r*state_[9]*z[3]*z[4];
  z[94] = -rear_.R*state_[10]*z[0]*z[4]/z[35] + rear_.R*state_[10]*z[3]*z[34]*z[4]/z[36] - rear_.R*state_[9]*z[0]*z[1]*z[34]/z[36] - rear_.R*state_[9]*z[1]*z[3]/z[35] - rear_.R*z[0]*z[1]*z[38]/z[36] + 3*rear_.R*z[1]*z[3]*z[34]*z[38]/z[37] - rear_.R*z[1]*z[3]*z[64]/z[36] - z[24];
  z[95] = -front_.R*z[18]*z[76]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[3]*z[4]*z[5]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.R*z[46]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.r*z[46];
  z[96] = -z[95];
  z[97] = -state_[11]*z[2]*z[4]*z[65] + z[5]*z[93];
  z[98] = -rear_.c*state_[10]*z[1]*z[3] - rear_.c*state_[9]*z[0]*z[4] + ls_*state_[10]*z[3]*z[4] - ls_*state_[9]*z[0]*z[1] - state_[10]*z[1]*z[3]*z[51] + state_[10]*z[3]*z[4]*z[52] - state_[9]*z[0]*z[1]*z[52] - state_[9]*z[0]*z[4]*z[51] + z[1]*z[3]*z[77] + z[3]*z[4]*z[79];
  z[99] = 3*front_.R*z[18]*z[49]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 5.0L/2.0L) + front_.R*z[49]*z[62]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + z[96];
  z[100] = -3*front_.R*pow(z[18], 2)*z[22]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 5.0L/2.0L) - front_.R*z[18]*z[22]*z[62]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[18]*z[74]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[22]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.R*z[61]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.r*z[61];
  z[101] = -z[100];
  z[102] = front_.R*state_[10]*z[1]*z[3]*z[49]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*state_[10]*z[3]*z[4]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.R*state_[9]*z[0]*z[1]/sqrt(z[11]*z[9] + pow(z[18], 2)) + front_.R*state_[9]*z[0]*z[4]*z[49]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.R*z[1]*z[3]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + 3*front_.R*z[3]*z[4]*z[49]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 5.0L/2.0L) + front_.R*z[3]*z[4]*z[76]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.r*state_[10]*z[3]*z[4] - front_.r*state_[9]*z[0]*z[1];
  z[103] = -ls_*state_[9]*z[0] + rear_.r*state_[10]*z[1]*z[6] - rear_.r*state_[10]*z[1]*z[9] - 4*rear_.r*state_[9]*z[0]*z[3]*z[4] - state_[9]*z[0]*z[52] + state_[9]*z[3]*z[68] + z[0]*z[93] + z[3]*z[77];
  z[104] = -front_.R*state_[10]*z[0]*z[1]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.R*state_[10]*z[1]*z[3]*z[56]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.R*state_[9]*z[0]*z[4]*z[56]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*state_[9]*z[3]*z[4]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.R*z[0]*z[4]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - 3*front_.R*z[3]*z[4]*z[56]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 5.0L/2.0L) - front_.R*z[3]*z[4]*z[80]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.r*state_[10]*z[0]*z[1] + front_.r*state_[9]*z[3]*z[4];
  z[105] = 3*front_.R*z[18]*z[56]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 5.0L/2.0L) + front_.R*z[18]*z[80]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[23]*z[66]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + front_.R*z[56]*z[62]/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) - front_.R*z[60]/sqrt(z[11]*z[9] + pow(z[18], 2)) - front_.r*z[60];
  z[106] = -z[105];
  z[107] = rear_.c*state_[10]*z[0]*z[1] - rear_.c*state_[9]*z[3]*z[4] - ls_*state_[10]*z[0]*z[4] - ls_*state_[9]*z[1]*z[3] + state_[10]*z[0]*z[1]*z[51] - state_[10]*z[0]*z[4]*z[52] + state_[10]*z[1]*z[3]*z[67] + state_[10]*z[3]*z[4]*z[68] - state_[9]*z[0]*z[1]*z[68] + state_[9]*z[0]*z[4]*z[67] - state_[9]*z[1]*z[3]*z[52] - state_[9]*z[3]*z[4]*z[51] - z[0]*z[1]*z[77] - z[0]*z[4]*z[79] + z[1]*z[3]*z[93] + z[3]*z[4]*z[94];
  z[108] = -state_[10];
  z[109] = -state_[11];
  z[110] = -state_[9];
  z[111] = -2*z[110];
  z[112] = -front_.c*z[108];
  z[113] = -front_.c*z[109];
  z[114] = -front_.r*z[108];
  z[115] = -front_.r*z[110];
  z[116] = -rear_.r*z[108];
  z[117] = -rear_.r*z[110];
  z[118] = front_.r*z[1];
  z[119] = front_.r*z[5];
  z[120] = rear_.r*z[0];
  z[121] = -z[0]*z[108];
  z[122] = -z[1]*z[108];
  z[123] = -z[108]*z[2];
  z[124] = -z[108]*z[3];
  z[125] = -z[108]*z[4];
  z[126] = -z[1]*z[109];
  z[127] = -z[109]*z[2];
  z[128] = -z[109]*z[3];
  z[129] = -z[109]*z[4];
  z[130] = -z[109]*z[5];
  z[131] = -z[0]*z[110];
  z[132] = -z[1]*z[110];
  z[133] = -z[110]*z[2];
  z[134] = -z[110]*z[3];
  z[135] = -z[110]*z[4];
  z[136] = -z[0];
  z[137] = -2*z[136];
  z[138] = -z[1];
  z[139] = -z[2];
  z[140] = -z[4];
  z[141] = -2*z[140];
  z[142] = -z[5];
  z[143] = z[136]*z[138];
  z[144] = z[136]*z[139];
  z[145] = -z[136]*z[3];
  z[146] = z[136]*z[140];
  z[147] = z[138]*z[139];
  z[148] = -z[138]*z[3];
  z[149] = z[138]*z[142];
  z[150] = -z[139]*z[3];
  z[151] = z[139]*z[140];
  z[152] = -z[140]*z[3];
  z[153] = -z[142]*z[3];
  z[154] = z[140]*z[142];
  z[155] = -z[124]*z[140];
  z[156] = -z[128]*z[142];
  z[157] = -z[134]*z[140];
  z[158] = 2*z[8];
  z[159] = 2*z[11];
  z[160] = -z[140]/z[3];
  z[161] = z[11]*z[3];
  z[162] = -z[140]*z[9];
  z[163] = -z[142]*z[9];
  z[164] = z[121]*z[138];
  z[165] = z[131]*z[138];
  z[166] = z[122]*z[150];
  z[167] = z[126]*z[153];
  z[168] = z[127]*z[152];
  z[169] = z[6]/z[3];
  z[170] = z[8]*z[9];
  z[171] = z[11]*z[9];
  z[172] = z[11]*z[145];
  z[173] = -z[126]*z[144];
  z[174] = -z[128]*z[154];
  z[175] = -z[131]*z[147];
  z[176] = z[131]*z[161];
  z[177] = z[14]*z[6];
  z[178] = z[14]*z[9];
  z[179] = -front_.r*z[22];
  z[180] = front_.r*z[18];
  z[181] = front_.r*z[21];
  z[182] = z[18]*z[3];
  z[183] = -z[140]*z[18];
  z[184] = -z[142]*z[18];
  z[185] = -z[140]*z[21];
  z[186] = z[6]/z[26];
  z[187] = z[9]/z[26];
  z[188] = rear_.R/z[35];
  z[189] = -front_.r*z[45];
  z[190] = -z[18]*z[22];
  z[191] = front_.R/pow(z[171] + pow(z[18], 2), 3.0L/2.0L);
  z[192] = front_.R/sqrt(z[171] + pow(z[18], 2));
  z[193] = z[14]*z[7]/z[27];
  z[194] = z[10]*z[14]/z[27];
  z[195] = 3/pow(z[171] + pow(z[18], 2), 2);
  z[196] = 3*z[191]/(z[171] + pow(z[18], 2));
  z[197] = -z[191];
  z[198] = 3*z[10]*z[16]/z[28];
  z[199] = -front_.r*z[63];
  z[200] = -front_.r*z[62];
  z[201] = -front_.r*z[61];
  z[202] = z[140]*z[62];
  z[203] = -z[22]/(z[171] + pow(z[18], 2));
  z[204] = -z[34]/z[33];
  z[205] = z[140]*z[61];
  z[206] = z[18]/(z[171] + pow(z[18], 2));
  z[207] = -z[204]*z[3];
  z[208] = -z[203]*z[22];
  z[209] = -z[38]/z[33];
  z[210] = z[18]*z[206];
  z[211] = z[18]*z[50];
  z[212] = z[57]/z[14];
  z[213] = z[40]/(z[171] + pow(z[18], 2));
  z[214] = z[18]*z[56];
  z[215] = 3*z[34]*z[38]/pow(z[33], 2);
  z[216] = z[64]/z[33];
  z[217] = z[56]/(z[171] + pow(z[18], 2));
  z[218] = z[22]*z[66];
  z[219] = -z[18]*z[66];
  z[220] = z[18]*z[219];
  z[221] = -z[22]*(-front_.R*pow(z[18], 2)/pow(z[11]*z[9] + pow(z[18], 2), 3.0L/2.0L) + z[50]);
  z[222] = -z[40]*z[66];
  z[223] = -z[66]/(z[171] + pow(z[18], 2));
  z[224] = z[3]*z[72];
  z[225] = z[11]*z[73];
  z[226] = -z[56]*z[66];
  z[227] = z[139]*z[77];
  z[228] = -z[74]/(z[171] + pow(z[18], 2));
  z[229] = (2*state_[9]*z[0]*z[11] + 2*state_[9]*z[0]*z[8] - z[11]*z[3]*z[38]/z[33] - z[3]*z[38]*z[8]/z[33])/z[35];
  z[230] = z[76]/(z[171] + pow(z[18], 2));
  z[231] = -z[80]/(z[171] + pow(z[18], 2));
  z[232] = -z[142]*z[86];
  z[233] = -z[140]*z[89];

  ar[0] = front_.r*z[0]*z[205] - z[103]*z[142] + z[104]*z[22] - z[107]*z[139] + z[114]*z[143]*z[22] - z[114]*z[148]*z[21] - z[115]*z[146]*z[21] - z[115]*z[152]*z[22] - z[127]*z[82] + z[130]*z[90] + z[152]*z[199] + z[152]*z[50]*z[63] - z[205]*z[73] + z[21]*z[86];
  ar[1] = z[102]*z[22] + z[114]*z[147]*z[162] - z[114]*z[152]*z[22] + z[115]*z[143]*z[22] + z[115]*z[144]*z[161] - z[118]*z[3]*z[61] + z[139]*z[48] + z[140]*z[150]*z[86] - z[142]*z[85] - z[15]*z[156] + z[152]*z[189] + z[152]*z[45]*z[50] + z[173]*z[188]*z[3] + z[224]*z[61];
  ar[2] = -z[114]*z[148]*z[18] - z[115]*z[146]*z[18] - z[127]*z[3]*z[71] + z[130]*z[136]*z[47] + z[139]*z[87] - z[142]*z[98] - z[152]*z[190]*z[197]*z[61] + z[152]*z[200] + z[152]*z[50]*z[62] + z[18]*z[86] - z[197]*z[22]*z[91];
  ar[3] = -rear_.r*z[126]*z[2]*z[3] + z[104]*z[151] + z[114]*z[185] - z[116]*z[142]*z[152] + z[117]*z[142]*z[143] - z[118]*z[63] - z[122]*z[151]*z[73] + z[130]*z[225] - z[130]*(-z[138]*z[67] - z[140]*z[68]) + z[139]*(-z[122]*z[68] + z[125]*z[67] + z[138]*z[94] - z[140]*z[93]);
  ar[4] = z[102]*z[151] - z[11]*z[114]*z[150] + z[114]*z[138]*z[22] + z[116]*z[142]*z[143] - z[117]*z[142]*z[152] - z[118]*z[45] + z[120]*z[127]*z[140] - z[123]*z[15] + z[123]*z[161]*z[50] - z[126]*z[142]*z[152]*z[50] + z[13]*z[130] + z[140]*z[201] - z[147]*z[86] - z[166]*z[72] - z[174]*z[72];
  ar[5] = -z[11]*z[156]*z[190]*z[197] + z[114]*z[183] + z[116]*z[140]*z[144] - z[117]*z[147]*z[3] - z[118]*z[62] + z[120]*z[126]*z[142] - z[122]*z[142]*z[152]*z[50] + z[127]*z[161]*z[50] - z[127]*z[70] - z[142]*z[92] - z[151]*z[197]*z[91] + z[154]*z[86] - z[166]*z[183]*z[197]*z[22];
  ar[6] = z[104]*z[142] - z[127]*z[140]*z[73] + z[97];
  ar[7] = z[102]*z[142] + z[127]*z[224] + z[84];
  ar[8] = z[130]*z[53] - z[139]*z[86] - z[142]*z[197]*z[91] - z[168]*z[190]*z[197] + z[174]*z[50] + z[227];
  ar[9] = z[199];
  ar[10] = z[189];
  ar[11] = z[200];
  ar[12] = z[97];
  ar[13] = z[84];
  ar[14] = -z[174]*z[42] + z[227];
  ar[15] = -z[104];
  ar[16] = -z[114]*z[152] + z[115]*z[143] + z[122]*z[162]*z[197]*z[40] - z[148]*z[197]*z[66] + z[152]*z[197]*z[76] - z[155]*z[192] - z[165]*z[192] + z[171]*z[196]*z[222] + z[176]*z[197]*z[40];
  ar[17] = z[197]*z[91];
  ar[18] = (-z[134]*z[154] - z[135]*z[142]*z[169] + z[135]*z[142]*z[212]/z[3])/z[26];
  ar[19] = z[32]/z[26];
  ar[20] = z[31]/z[26];
  ar[21] = -z[111]*z[142]*z[143]*z[194] + z[125]*z[142]*z[186] + z[125]*z[163]*z[177]/z[27] + z[125]*z[163]/z[26] + z[126]*z[139]*z[177]*z[9]/z[27] - z[126]*z[139]*z[186] + z[126]*z[139]*z[187] + z[131]*z[142]*z[148]*z[57]/z[27] + 4*z[131]*z[142]*z[148]/z[26] - z[132]*z[142]*z[198]*z[7] - 2*z[132]*z[153]*z[193] - z[139]*(z[110]*z[158]*z[9] + z[111]*z[6]*z[8] - z[131]*z[158]*z[207] - z[131]*z[159]*z[207] + z[145]*z[158]*z[209] + z[145]*z[159]*z[209] + z[170]*z[215] - z[170]*z[216] + z[171]*z[215] - z[171]*z[216] - z[41])/z[35] - z[156]*z[75]/z[35];
  ar[22] = (z[121]*z[142]*z[148] + z[127]*z[140]*z[145] + z[135]*z[163])/z[26];
  ar[23] = z[121]*z[140]*z[150]/z[26] + z[126]*z[142]*z[145]/z[26] - z[127]*z[178]/z[35] + z[132]*z[139]*z[177]*z[9]/z[27] - z[132]*z[139]*z[186] + z[132]*z[139]*z[187] - z[153]*z[229];
  ar[24] = z[58];
  ar[25] = z[43];
  ar[26] = z[59];
  ar[27] = (-z[122]*z[217]*z[3] + z[131]*z[140]*z[217] + z[146]*z[223] + z[152]*z[195]*z[226] + z[152]*z[231] + z[19])/sqrt(z[171] + pow(z[18], 2));
  ar[28] = (z[122]*z[162]*z[213] + z[148]*z[223] + z[152]*z[230] - z[171]*z[195]*z[222] + z[176]*z[213] + z[20])/sqrt(z[171] + pow(z[18], 2));
  ar[29] = z[91]/pow(z[171] + pow(z[18], 2), 3.0L/2.0L);
  ar[30] = (z[18]*z[63] - z[190]*z[195]*z[226] - z[190]*z[231] + z[203]*z[23]*z[66] + z[203]*z[56]*z[62] + z[206]*z[21]*z[66] + z[206]*z[56]*z[61] + z[21]*z[62] + z[22]*z[60] + z[23]*z[61])/sqrt(z[171] + pow(z[18], 2));
  ar[31] = (-z[142]*z[152]*z[203]*z[66] - z[142]*z[152]*z[61] + z[150]*z[183]*z[223] + z[150]*z[202] + z[152]*z[190]*z[195]*z[222] - z[152]*z[203]*z[40]*z[62] - z[152]*z[206]*z[40]*z[61] + z[18]*z[45] - z[190]*z[230] + z[22]*z[46])/sqrt(z[171] + pow(z[18], 2));
  ar[32] = (2*z[18]*z[62] + pow(z[190], 2)*z[195]*z[66] + z[190]*z[203]*z[62] + z[190]*z[206]*z[61] - z[190]*z[228] - z[208]*z[66] + z[210]*z[66] + 2*z[22]*z[61])/sqrt(z[171] + pow(z[18], 2));
  ar[33] = z[60];
  ar[34] = z[46];
  ar[35] = z[61];
  ar[36] = front_.c*z[157] + z[103]*z[139] + z[104]*z[18] - z[106]*z[152] - z[107]*z[142] - z[112]*z[143] + z[122]*z[3]*z[81] - z[127]*z[90] - z[130]*z[82] - z[131]*z[140]*z[81] - z[146]*z[89] + z[152]*z[50]*z[60] - z[157]*z[211] - z[164]*z[211] + z[202]*z[73] - z[23]*z[86];
  ar[37] = front_.c*z[165] + z[102]*z[18] + z[112]*z[152] + z[122]*z[3]*z[78] + z[126]*z[142]*z[145]*z[188] + z[127]*z[15]*z[3] - z[131]*z[140]*z[78] + z[139]*z[85] + z[142]*z[48] - z[148]*z[89] - z[152]*z[232] + z[152]*z[46]*z[50] - z[152]*z[99] - z[155]*z[211] - z[165]*z[211] - z[224]*z[62];
  ar[38] = -z[101]*z[152] - z[122]*z[221]*z[3] - z[127]*z[136]*z[47] + z[131]*z[140]*z[221] + z[139]*z[98] + z[142]*z[87] + z[152]*z[190]*z[197]*z[62] + z[152]*z[50]*z[61] - z[156]*z[71] - z[18]*z[197]*z[91] - z[22]*z[86];
  ar[39] = -rear_.r*z[167] + z[104]*z[154] + z[106]*z[138] + z[116]*z[140]*z[150] - z[117]*z[139]*z[143] - z[122]*z[154]*z[73] - z[125]*z[81] - z[127]*z[225] - z[127]*(z[138]*z[67] + z[140]*z[68]) - z[142]*(z[122]*z[68] - z[125]*z[67] - z[138]*z[94] + z[140]*z[93]);
  ar[40] = z[102]*z[154] + z[108]*z[15]*z[5] - z[11]*z[124]*z[142]*z[50] - z[112]*z[138] - z[116]*z[139]*z[143] + z[117]*z[140]*z[150] + z[120]*z[129]*z[142] - z[122]*z[153]*z[72] - z[122]*z[211] - z[125]*z[78] + z[126]*z[140]*z[150]*z[50] - z[127]*z[13] + z[138]*z[99] - z[149]*z[86] - z[168]*z[72] + z[233];
  ar[41] = z[101]*z[138] + z[11]*z[156]*z[50] + z[116]*z[142]*z[146] + z[117]*z[142]*z[148] - z[120]*z[126]*z[139] - z[122]*z[152]*z[184]*z[197]*z[22] + z[125]*z[221] + z[127]*z[161]*z[190]*z[197] - z[130]*z[70] + z[139]*z[92] + z[140]*z[166]*z[50] - z[151]*z[86] - z[154]*z[197]*z[91];
  ar[42] = -z[104]*z[139] + z[129]*z[142]*z[65] - z[129]*z[142]*z[73] + z[139]*z[93];
  ar[43] = -z[102]*z[139] + z[139]*z[79] + z[156]*z[72] - z[167]*z[42];
  ar[44] = -z[127]*z[53] + z[139]*z[197]*z[91] + z[142]*z[77] + z[168]*z[50] + z[174]*z[190]*z[197] + z[232];
  ar[45] = z[105];
  ar[46] = z[152]*z[196]*z[219]*z[40] + z[152]*z[197]*z[40]*z[62] + z[95];
  ar[47] = z[100];
  ar[48] = z[129]*z[142]*z[65] + z[139]*z[93];
  ar[49] = z[139]*z[79] - z[167]*z[42];
  ar[50] = z[142]*z[77] - z[168]*z[42];
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = (z[133]*z[152] + z[133]*z[160]*z[212] - z[133]*z[160]*z[6])/z[26];
  ar[55] = z[30]/z[26];
  ar[56] = z[29]/z[26];
  ar[57] = z[111]*z[137]*z[147]*z[3]/z[26] + z[111]*z[147]*z[193]*z[3] - z[123]*z[140]*z[186] - z[123]*z[162]*z[177]/z[27] - z[123]*z[162]/z[26] - z[126]*z[142]*z[186] - z[126]*z[163]*z[177]/z[27] - z[126]*z[163]/z[26] + z[127]*z[3]*z[75]/z[35] + z[132]*z[139]*z[198]*z[7] + z[142]*(z[110]*z[158]*z[6] - z[111]*z[145]*z[204]*z[8] + z[111]*z[170] - z[111]*z[172]*z[204] - z[137]*z[161]*z[209] - z[137]*z[209]*z[3]*z[8] - z[170]*z[215] + z[170]*z[216] - z[171]*z[215] + z[171]*z[216] + z[41])/z[35] + 2*z[175]*z[194] - z[175]*z[3]*z[57]/z[27];
  ar[58] = (z[121]*z[147]*z[3] - z[133]*z[162] - z[146]*z[156])/z[26];
  ar[59] = z[121]*z[142]*z[152]/z[26] - z[130]*z[178]/z[35] - z[132]*z[142]*z[186] - z[132]*z[163]*z[177]/z[27] - z[132]*z[163]/z[26] + z[150]*z[229] - z[173]*z[3]/z[26];
  ar[60] = z[63];
  ar[61] = z[45];
  ar[62] = z[62];
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = (-2*z[121]*z[141]*z[148] - 2*z[122]*z[162]*z[217] - z[131]*z[159]*z[217]*z[3] + z[145]*z[159]*z[223] + z[171]*z[195]*z[226] + z[171]*z[231] + 2*z[18]*z[223]*z[23] + 2*z[18]*z[60] + z[195]*z[214]*z[219] - 2*z[206]*z[56]*z[62] - z[210]*z[80] - 2*z[23]*z[62] + z[41])/sqrt(z[171] + pow(z[18], 2));
  ar[67] = (-z[10]*z[12]*z[195]*z[222] + z[10]*z[122]*z[159]*z[213] + z[108]*z[158]*z[9] - z[108]*z[159]*z[9] - z[111]*z[12]*z[136]*z[213]*z[9] - 2*z[131]*z[141]*z[148] - z[138]*z[141]*z[223]*z[9] + z[141]*z[182]*z[213]*z[62] + 2*z[142]*z[152]*z[62] + 2*z[152]*z[184]*z[223] - z[152]*z[195]*z[220]*z[40] + z[171]*z[230] + 2*z[18]*z[46] + z[210]*z[76])/sqrt(z[171] + pow(z[18], 2));
  ar[68] = (-z[111]*z[172]*z[190]/(z[171] + pow(z[18], 2)) - z[122]*z[141]*z[190]*z[9]/(z[171] + pow(z[18], 2)) - z[171]*z[190]*z[195]*z[66] + z[171]*z[228] + 2*z[18]*z[61] + z[190]*z[195]*z[220] - 2*z[190]*z[206]*z[62] - 2*z[190]*z[223] - z[210]*z[74] - 2*z[22]*z[62])/sqrt(z[171] + pow(z[18], 2));
  ar[69] = z[54];
  ar[70] = z[44];
  ar[71] = z[55];
  ar[72] = front_.c*z[63] + rear_.c*z[131] + front_.r*z[23]*z[61] - z[106]*z[22] + z[116]*z[140]*z[6] + z[116]*z[162] - 4*z[117]*z[143]*z[3] + z[131]*z[148]*z[42] + z[132]*z[3]*z[65] + z[136]*z[94] - z[179]*z[60] + z[180]*z[63] + z[181]*z[62] + z[21]*z[89] - z[211]*z[63] - z[3]*z[79] - z[61]*z[81];
  ar[73] = front_.c*z[45] + z[119]*z[152]*z[61] - z[135]*z[42]*z[9] - z[140]*z[150]*z[200] - z[150]*z[233] - z[179]*z[46] + z[180]*z[45] - z[211]*z[45] - z[22]*z[99] - z[61]*z[78] + z[83];
  ar[74] = front_.c*z[62] - z[101]*z[22] - 2*z[179]*z[61] + z[18]*z[89] + 2*z[180]*z[62] - z[211]*z[62] + z[221]*z[61];
  ar[75] = -z[106]*z[151] + z[114]*z[149]*z[21] - z[119]*z[140]*z[63] - z[122]*z[139]*z[81] - z[127]*z[140]*z[181] + z[129]*z[142]*z[81] + z[25];
  ar[76] = -front_.r*z[11]*z[127]*z[150] + z[112]*z[151] + z[113]*z[149] + z[114]*z[142]*z[147]*z[152] + z[114]*z[154]*z[22] - z[118]*z[127]*z[22] - z[118]*z[142]*z[61] - z[119]*z[140]*z[45] - z[122]*z[139]*z[78] - z[123]*z[183]*z[50] - z[126]*z[184]*z[50] + z[129]*z[142]*z[78] - z[147]*z[89] - z[151]*z[99] + z[24];
  ar[77] = -z[101]*z[151] + z[112]*z[149] + z[113]*z[151] - z[114]*z[147]*z[22] + z[114]*z[149]*z[18] + z[119]*z[129]*z[22] - z[119]*z[202] + z[122]*z[139]*z[221] - z[122]*z[184]*z[50] - z[127]*z[140]*z[180] - z[127]*z[183]*z[50] - z[129]*z[142]*z[221] - z[151]*z[201] + z[154]*z[89];
  ar[78] = -z[106]*z[142] + z[109]*z[119]*z[21] - z[127]*z[81] + z[139]*z[199] + z[24] + z[88];
  ar[79] = z[119]*z[168] - z[127]*z[78] + z[139]*z[189] - z[142]*z[99] + z[25] + z[69];
  ar[80] = -z[101]*z[142] + z[109]*z[119]*z[18] + z[113]*z[142] - z[119]*z[61] - z[127]*z[179] + z[127]*z[221] + z[130]*z[211] + z[139]*z[200] - z[139]*z[89];
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[24] + z[88];
  ar[85] = z[25] + z[69];
  ar[86] = 0;
  ar[87] = z[106];
  ar[88] = -z[152]*z[196]*z[219]*z[40] - z[152]*z[197]*z[40]*z[62] + z[96];
  ar[89] = z[101];
  ar[90] = (z[132]*z[169] - z[132]*z[212]/z[3] - z[132]*z[3])/z[26];
  ar[91] = -z[122]*z[3]/z[26];
  ar[92] = 0;
  ar[93] = (-z[111]*z[140]*z[145] + z[122]*z[9] + z[131]*z[160]*z[212] - z[135]*z[7]/z[3])/z[26];
  ar[94] = (z[121]*z[152] + z[132]*z[9])/z[26];
  ar[95] = 0;
  ar[96] = -z[19];
  ar[97] = -z[20];
  ar[98] = 0;
  ar[99] = (z[195]*z[214]*z[66] + z[206]*z[80] + z[217]*z[62] - z[223]*z[23] - z[60])/sqrt(z[171] + pow(z[18], 2));
  ar[100] = (z[142]*z[152]*z[223] + z[152]*z[195]*z[219]*z[40] - z[152]*z[213]*z[62] - z[206]*z[76] - z[46])/sqrt(z[171] + pow(z[18], 2));
  ar[101] = (-z[190]*z[195]*z[219] + z[190]*z[62]/(z[171] + pow(z[18], 2)) - z[203]*z[66] + z[206]*z[74] - z[61])/sqrt(z[171] + pow(z[18], 2));
  ar[102] = (z[122]*z[203]*z[3]*z[56] + z[122]*z[21]*z[3] - z[131]*z[140]*z[203]*z[56] + z[131]*z[185] + z[146]*z[203]*z[66] + z[146]*z[61] - z[152]*z[195]*z[218]*z[56] + z[152]*z[203]*z[80] - z[152]*z[21]*z[223] + z[152]*z[217]*z[61] + z[152]*z[63] + z[157]*z[22] + z[164]*z[22])/sqrt(z[171] + pow(z[18], 2));
  ar[103] = (-z[11]*z[131]*z[150] - z[122]*z[151]*z[9] - z[122]*z[162]*z[203]*z[40] - z[139]*z[171]*z[223] + z[148]*z[203]*z[66] + z[148]*z[61] - z[152]*z[203]*z[76] + z[152]*z[45] + z[155]*z[22] + z[165]*z[22] + z[171]*z[195]*z[218]*z[40] - z[171]*z[213]*z[61] - z[176]*z[203]*z[40])/sqrt(z[171] + pow(z[18], 2));
  ar[104] = (z[122]*z[182]*z[208] + z[122]*z[182] + z[131]*z[183]*z[208] + z[131]*z[183] - z[152]*z[190]*z[195]*z[218] + z[152]*z[190]*z[61]/(z[171] + pow(z[18], 2)) + z[152]*z[203]*z[74] + z[152]*z[206]*z[66] + z[152]*z[62])/sqrt(z[171] + pow(z[18], 2));
  ar[105] = z[19];
  ar[106] = z[20];
  ar[107] = 0;
}

/** Computes the n-d array of shape (8)
 *
 * @param[out] ar a C-array of with 8 elements
 */
//  void Bicycle::f_1(double ar[8]) const;
void Bicycle::f_1(double ar[8]) const
{
  double z[21];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[2], 2);
  z[7] = pow(z[4], 2);
  z[8] = pow(z[5], 2);
  z[9] = z[6]*z[7] + z[7]*z[8];
  z[10] = sqrt(z[9]);
  z[11] = pow(z[9], 3.0L/2.0L);
  z[12] = state_[9]*z[1]*z[4]*z[6] + state_[9]*z[1]*z[4]*z[8];
  z[13] = rear_.R*state_[10]*z[4]*z[5]/z[10] - rear_.R*state_[9]*z[1]*z[2]/z[10] + rear_.R*z[12]*z[2]*z[4]/z[11] + rear_.r*state_[10]*z[4]*z[5] - rear_.r*state_[9]*z[1]*z[2] + state_[12]*(rear_.R*z[4]*z[5]/z[10] + rear_.r*z[4]*z[5]);
  z[14] = -rear_.R*state_[10]*z[2]*z[4]/z[10] - rear_.R*state_[9]*z[1]*z[5]/z[10] + rear_.R*z[12]*z[4]*z[5]/z[11] - rear_.r*state_[10]*z[2]*z[4] - rear_.r*state_[9]*z[1]*z[5] - state_[12]*(rear_.R*z[2]*z[4]/z[10] + rear_.r*z[2]*z[4]);
  z[15] = -state_[9];
  z[16] = z[0]*z[2];
  z[17] = z[0]*z[5];
  z[18] = z[2]*z[3];
  z[19] = rear_.r*z[7];
  z[20] = -z[3]*z[5];

  ar[0] = -state_[8];
  ar[1] = z[15];
  ar[2] = -state_[10];
  ar[3] = -state_[11];
  ar[4] = -state_[12];
  ar[5] = -state_[13];
  ar[6] = -z[0]*z[15]*z[19] - z[13]*(z[1]*z[16] + z[20]) - z[14]*(z[1]*z[17] + z[18]);
  ar[7] = z[13]*(z[1]*z[18] + z[17]) - z[14]*(z[1]*z[20] + z[16]) + z[15]*z[19]*z[3];
}

/** Computes the n-d array of shape (8, 8)
 *
 * @param[out] ar a C-array of with 64 elements
 */
//  void Bicycle::f_1_dq(double ar[64]) const;
void Bicycle::f_1_dq(double ar[64]) const
{
  double z[40];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[2], 2);
  z[8] = pow(z[4], 2);
  z[9] = pow(z[5], 2);
  z[10] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[11] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[12] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[13] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[14] = z[7]*z[8] + z[8]*z[9];
  z[15] = z[1]*z[4]*z[7] + z[1]*z[4]*z[9];
  z[16] = sqrt(z[14]);
  z[17] = pow(z[14], 3.0L/2.0L);
  z[18] = pow(z[14], 5.0L/2.0L);
  z[19] = state_[9]*z[1]*z[4]*z[7] + state_[9]*z[1]*z[4]*z[9];
  z[20] = state_[9]*z[6]*z[7] + state_[9]*z[6]*z[9] - state_[9]*z[7]*z[8] - state_[9]*z[8]*z[9];
  z[21] = -rear_.R*state_[10]*z[4]*z[5]/z[16] + rear_.R*state_[9]*z[1]*z[2]/z[16] - rear_.R*z[19]*z[2]*z[4]/z[17] - rear_.r*state_[10]*z[4]*z[5] + rear_.r*state_[9]*z[1]*z[2] - state_[12]*(rear_.R*z[4]*z[5]/z[16] + rear_.r*z[4]*z[5]);
  z[22] = -rear_.R*state_[10]*z[2]*z[4]/z[16] - rear_.R*state_[9]*z[1]*z[5]/z[16] + rear_.R*z[19]*z[4]*z[5]/z[17] - rear_.r*state_[10]*z[2]*z[4] - rear_.r*state_[9]*z[1]*z[5] - state_[12]*(rear_.R*z[2]*z[4]/z[16] + rear_.r*z[2]*z[4]);
  z[23] = rear_.R*state_[10]*z[1]*z[5]/z[16] - rear_.R*state_[10]*z[15]*z[4]*z[5]/z[17] + rear_.R*state_[9]*z[1]*z[15]*z[2]/z[17] + rear_.R*state_[9]*z[2]*z[4]/z[16] + rear_.R*z[1]*z[19]*z[2]/z[17] - 3*rear_.R*z[15]*z[19]*z[2]*z[4]/z[18] + rear_.R*z[2]*z[20]*z[4]/z[17] + rear_.r*state_[10]*z[1]*z[5] + rear_.r*state_[9]*z[2]*z[4] + state_[12]*(rear_.R*z[1]*z[5]/z[16] - rear_.R*z[15]*z[4]*z[5]/z[17] + rear_.r*z[1]*z[5]);
  z[24] = -state_[9];
  z[25] = rear_.r*z[1];
  z[26] = rear_.r*z[4];
  z[27] = state_[10]*z[2];
  z[28] = -z[24]*z[5];
  z[29] = -z[5];
  z[30] = -rear_.r*z[24]*z[8];
  z[31] = rear_.R*z[1]/z[16];
  z[32] = rear_.R*z[4]/z[16];
  z[33] = rear_.R*z[15]/z[17];
  z[34] = -z[33]*z[4];
  z[35] = rear_.R*z[1]*z[19]/z[17];
  z[36] = 3*rear_.R*z[15]*z[19]*z[4]/z[18];
  z[37] = rear_.R*z[20]*z[4]/z[17];
  z[38] = state_[12]*(rear_.R*z[1]*z[2]/z[16] - rear_.R*z[15]*z[2]*z[4]/z[17] + rear_.r*z[1]*z[2]);
  z[39] = -z[21]*z[4];

  ar[0] = 0;
  ar[1] = 0;
  ar[2] = 0;
  ar[3] = 0;
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
  ar[8] = 0;
  ar[9] = 0;
  ar[10] = 0;
  ar[11] = 0;
  ar[12] = 0;
  ar[13] = 0;
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = 0;
  ar[18] = 0;
  ar[19] = 0;
  ar[20] = 0;
  ar[21] = 0;
  ar[22] = 0;
  ar[23] = 0;
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = 0;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = 0;
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = 0;
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = 0;
  ar[40] = 0;
  ar[41] = 0;
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 0;
  ar[47] = 0;
  ar[48] = z[10]*z[21] + z[12]*z[22] + z[3]*z[30];
  ar[49] = -z[0]*z[2]*z[39] + z[0]*z[22]*z[29]*z[4] + 2*z[0]*z[24]*z[25]*z[4] - z[11]*(-z[1]*z[28]*z[33] + z[25]*z[27] - z[26]*z[28] + z[27]*z[31] + z[27]*z[34] - z[28]*z[32] + z[29]*z[35] - z[29]*z[36] + z[29]*z[37] + z[38]) + z[13]*z[23];
  ar[50] = 0;
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = z[0]*z[30] - z[11]*z[22] + z[13]*z[21];
  ar[57] = -z[10]*z[23] + z[12]*(z[1]*z[28]*z[33] - z[25]*z[27] + z[26]*z[28] - z[27]*z[31] - z[27]*z[34] + z[28]*z[32] - z[29]*z[35] + z[29]*z[36] - z[29]*z[37] - z[38]) + z[2]*z[3]*z[39] - z[22]*z[29]*z[3]*z[4] - 2*z[24]*z[25]*z[3]*z[4];
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = 0;
}

/** Computes the n-d array of shape (8, 12)
 *
 * @param[out] ar a C-array of with 96 elements
 */
//  void Bicycle::f_1_du(double ar[96]) const;
void Bicycle::f_1_du(double ar[96]) const
{
  double z[22];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[2], 2);
  z[7] = pow(z[4], 2);
  z[8] = pow(z[5], 2);
  z[9] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[10] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[11] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[12] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[13] = z[6]*z[7] + z[7]*z[8];
  z[14] = sqrt(z[13]);
  z[15] = rear_.R*z[1]/z[14] - rear_.R*z[4]*(z[1]*z[4]*z[6] + z[1]*z[4]*z[8])/pow(z[13], 3.0L/2.0L) + rear_.r*z[1];
  z[16] = rear_.r*z[7];
  z[17] = z[4]*(rear_.R/z[14] + rear_.r);
  z[18] = z[17]*(z[11]*z[2] + z[5]*z[9]);
  z[19] = z[17]*(z[10]*z[2] - z[12]*z[5]);
  z[20] = z[15]*z[2];
  z[21] = z[15]*z[5];

  ar[0] = -1;
  ar[1] = 0;
  ar[2] = 0;
  ar[3] = 0;
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
  ar[8] = 0;
  ar[9] = 0;
  ar[10] = 0;
  ar[11] = 0;
  ar[12] = 0;
  ar[13] = -1;
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = 0;
  ar[18] = 0;
  ar[19] = 0;
  ar[20] = 0;
  ar[21] = 0;
  ar[22] = 0;
  ar[23] = 0;
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = -1;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = 0;
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = 0;
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = -1;
  ar[40] = 0;
  ar[41] = 0;
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 0;
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = 0;
  ar[52] = -1;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = -1;
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = 0;
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = 0;
  ar[73] = z[0]*z[16] + z[10]*z[21] + z[12]*z[20];
  ar[74] = z[19];
  ar[75] = 0;
  ar[76] = z[19];
  ar[77] = 0;
  ar[78] = 0;
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = 0;
  ar[85] = z[11]*z[21] - z[16]*z[3] - z[20]*z[9];
  ar[86] = z[18];
  ar[87] = 0;
  ar[88] = z[18];
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = 0;
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
}

/** Computes the n-d array of shape (12, 12)
 *
 * @param[out] ar a C-array of with 144 elements
 */
//  void Bicycle::gif_dud(double ar[144]) const;
void Bicycle::gif_dud(double ar[144]) const
{
  double z[127];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[2], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[4], 2);
  z[11] = rear_.Ixx*z[4] + rear_.Ixz*z[1];
  z[12] = rear_.Ixz*z[4] + rear_.Izz*z[1];
  z[13] = z[10] + z[7];
  z[14] = rear_.Ixx*z[1] - rear_.Ixz*z[4];
  z[15] = rear_.Ixz*z[1] - rear_.Izz*z[4];
  z[16] = front_.Ixx*z[4]*z[5] + front_.Ixz*z[1];
  z[17] = front_.Ixz*z[4]*z[5] + front_.Izz*z[1];
  z[18] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[19] = -z[18];
  z[20] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[21] = sqrt(z[13]*z[9]);
  z[22] = z[10]*z[9] + z[7]*z[9];
  z[23] = sqrt(z[22]);
  z[24] = front_.Ixx*z[19] + front_.Ixz*z[3]*z[4];
  z[25] = front_.Ixz*z[19] + front_.Izz*z[3]*z[4];
  z[26] = rear_.R*z[1]*z[3]/z[23] + rear_.a;
  z[27] = -rear_.R*z[3]*z[4]/z[23] + rear_.b;
  z[28] = rear_.R*z[1]*z[3]/z[23] + rear_.r*z[1]*z[3];
  z[29] = rear_.R*z[3]*z[4]/z[23] + rear_.r*z[3]*z[4];
  z[30] = rear_.r*z[1]*z[3] + z[26];
  z[31] = -front_.R*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[19], 2)) + front_.b;
  z[32] = rear_.r*z[3]*z[4] - z[27];
  z[33] = front_.R*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[19], 2)) + front_.r*z[3]*z[4];
  z[34] = -front_.r*z[3]*z[4] + z[31];
  z[35] = front_.R*z[19]/sqrt(z[10]*z[9] + pow(z[19], 2)) - front_.a;
  z[36] = front_.b*z[2] - z[2]*z[33];
  z[37] = front_.b*z[5] - z[33]*z[5];
  z[38] = rear_.a*z[0] - rear_.r*z[0]*z[1]*z[3] + z[0]*z[28];
  z[39] = rear_.b*z[0] + rear_.r*z[0]*z[3]*z[4] - z[0]*z[29];
  z[40] = -front_.R*z[19]/sqrt(z[10]*z[9] + pow(z[19], 2)) - front_.r*z[19];
  z[41] = front_.r*z[19] + z[35];
  z[42] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[20] + z[2]*z[33]*z[4];
  z[43] = -z[1]*z[32] + z[30]*z[4];
  z[44] = rear_.a*z[1] - rear_.b*z[4] + z[1]*z[28] + z[29]*z[4];
  z[45] = front_.a*z[2] + front_.r*z[20]*z[5] + z[2]*z[40];
  z[46] = -front_.a*z[5] + front_.r*z[2]*z[20] - z[40]*z[5];
  z[47] = -front_.b*z[20] - front_.r*z[20]*z[3]*z[4] + z[20]*z[33];
  z[48] = rear_.a*z[3]*z[4] + rear_.b*z[1]*z[3] - z[1]*z[29]*z[3] + z[28]*z[3]*z[4];
  z[49] = front_.a*z[2]*z[4] + front_.r*z[20]*z[4]*z[5] + z[2]*z[4]*z[40];
  z[50] = front_.a*z[20] + front_.r*z[19]*z[20] + z[20]*z[40];
  z[51] = front_.a*z[1] - front_.b*z[4]*z[5] + z[1]*z[40] + z[33]*z[4]*z[5];
  z[52] = front_.a*z[3]*z[4] - front_.b*z[19] + z[19]*z[33] + z[3]*z[4]*z[40];
  z[53] = -rear_.J*z[0] + rear_.m*(-z[28]*z[38] + z[29]*z[39]);
  z[54] = -front_.J*z[5] + front_.m*(z[33]*z[37] + z[40]*z[46]);
  z[55] = front_.J*z[2]*z[4] - front_.m*(-z[33]*z[42] - z[40]*z[49]);
  z[56] = front_.J*z[20] + front_.m*(z[33]*z[47] + z[40]*z[50]);
  z[57] = front_.Iyy*z[2]*z[4]*z[5] - front_.m*(-z[36]*z[51] + z[37]*z[42] + z[46]*z[49]) - rear_.m*rear_.r*z[0]*z[43];
  z[58] = -front_.Iyy*z[20]*z[5] + rear_.Iyy*z[0] + front_.m*(-z[36]*z[52] + z[37]*z[47] + z[46]*z[50]) + rear_.m*(z[30]*z[38] - z[32]*z[39]);
  z[59] = -front_.Iyy*z[2]*z[20]*z[4] - front_.m*(z[42]*z[47] + z[49]*z[50] + z[51]*z[52]) - rear_.m*(rear_.r*z[0]*z[1]*z[39] + rear_.r*z[0]*z[38]*z[4] + z[44]*z[48]);
  z[60] = -front_.m;
  z[61] = -rear_.m;
  z[62] = front_.Ixx*z[2];
  z[63] = front_.Ixz*z[2];
  z[64] = rear_.a*z[4];
  z[65] = rear_.b*z[1];
  z[66] = -z[0]*z[61];
  z[67] = rear_.r*z[3];
  z[68] = -z[1];
  z[69] = -z[2];
  z[70] = -z[3];
  z[71] = -z[4];
  z[72] = -z[5];
  z[73] = z[68]*z[70];
  z[74] = z[70]*z[71];
  z[75] = z[71]*z[72];
  z[76] = rear_.r*z[6];
  z[77] = pow(rear_.r, 2)*z[6];
  z[78] = z[10]*z[9];
  z[79] = z[13]*z[9];
  z[80] = -front_.r*z[20];
  z[81] = z[6]/z[13];
  z[82] = -z[61]/z[21];
  z[83] = z[6]/z[21];
  z[84] = z[7]/z[21];
  z[85] = z[10]/z[21];
  z[86] = -sqrt(pow(z[19], 2) + z[78]);
  z[87] = z[13]/z[23];
  z[88] = -z[26]*z[71];
  z[89] = -z[27]*z[68];
  z[90] = -z[60]*(front_.R/sqrt(z[10]*z[9] + pow(z[19], 2)) + front_.r);
  z[91] = z[20]/z[86];
  z[92] = pow(z[91], 2);
  z[93] = -z[20]*z[91];
  z[94] = -z[60]*z[74]*z[80]/z[86];
  z[95] = z[19]*z[31];
  z[96] = z[74]*z[80]*z[90];
  z[97] = z[79]*z[82]*(rear_.R/z[23] + rear_.r);
  z[98] = z[19]*z[34];
  z[99] = -z[86]*z[90];
  z[100] = z[20]*z[35]*z[60];
  z[101] = -z[43]*z[70];
  z[102] = z[66]*z[9]*(z[84] + z[85] - z[87]);
  z[103] = -z[101]*z[61];
  z[104] = z[19]*z[42];
  z[105] = -z[66]*z[70]*(-z[26]*z[68] + z[27]*z[71])/z[21];
  z[106] = -z[70]*z[82]*(-z[30]*z[68] - z[32]*z[71]);
  z[107] = -z[101]*z[66]/z[21];
  z[108] = z[66]*(z[10]*z[67] - z[44] + z[67]*z[7]);
  z[109] = z[20]*z[60]*(-pow(z[19], 2)/z[86] - z[78]/z[86] + z[86]);
  z[110] = -rear_.J + z[61]*(z[28]*z[30] + z[29]*z[32]);
  z[111] = -z[60]*z[91]*(z[19]*z[35] - z[31]*z[74]);
  z[112] = -z[60]*(z[19]*z[80]*z[91] - z[41]*z[86]);
  z[113] = -z[66]*z[70]*(z[28]*z[71] - z[29]*z[68] - z[64] - z[65] + z[88] + z[89]);
  z[114] = -z[61]*z[70]*(-z[44]*z[70]*z[87] + z[76]*z[84] + z[76]*z[85]);
  z[115] = -z[60]*(-z[19]*z[46] - z[34]*z[72]*z[74])/z[86];
  z[116] = z[60]*(z[36]*z[41] + z[37]*z[80]) - z[63];
  z[117] = -z[60]*z[71]*(z[19]*z[45] + z[42]*z[70])/z[86];
  z[118] = z[60]*(-z[20]*z[34]*z[69] + z[46]*z[74] - z[72]*z[98]);
  z[119] = -z[61]*z[70]*(z[83]*z[88] + z[83]*z[89] + z[79]*(-z[28]*z[71] + z[29]*z[68] + z[64] + z[65])/z[23]);
  z[120] = -z[20]*z[60]*(z[35]*z[74] + z[52] + z[95]);
  z[121] = -z[17] + z[60]*(-z[41]*z[51] + z[42]*z[80]);
  z[122] = -z[60]*(-z[20]*z[72]*z[98]/z[86] + z[34]*z[69]*z[86] + z[46]*z[74]*z[91]);
  z[123] = z[60]*(-z[10]*z[45]*z[70] + z[104] - z[20]*z[51]);
  z[124] = -z[25] + z[60]*(-z[41]*z[52] + z[47]*z[80]);
  z[125] = -z[60]*(z[35]*z[74]*z[93] + z[52]*z[86] + z[93]*z[95]);
  z[126] = -z[60]*(-z[10]*z[45]*z[70]*z[91] + z[104]*z[91] + z[51]*z[86]);

  ar[0] = -front_.Iyy*pow(z[20], 2) - rear_.Iyy*z[6] + z[14]*z[68]*z[9] - z[15]*z[71]*z[9] - z[19]*z[24] - z[25]*z[74] + z[60]*(pow(z[47], 2) + pow(z[50], 2) + pow(z[52], 2)) + z[61]*(pow(z[38], 2) + pow(z[39], 2) + pow(z[48], 2));
  ar[1] = z[11]*z[73] - z[12]*z[74] - z[16]*z[19] - z[17]*z[74] + z[59];
  ar[2] = -z[19]*z[62] - z[58] - z[63]*z[74];
  ar[3] = z[124];
  ar[4] = z[53];
  ar[5] = z[56];
  ar[6] = z[105];
  ar[7] = z[119];
  ar[8] = z[113];
  ar[9] = z[111];
  ar[10] = z[125];
  ar[11] = z[120];
  ar[12] = z[14]*z[74] + z[15]*z[73] - z[24]*z[75] + z[25]*z[68] + z[59];
  ar[13] = -front_.Iyy*z[10]*z[8] + z[11]*z[71] + z[12]*z[68] - z[16]*z[75] + z[17]*z[68] + z[60]*(pow(z[42], 2) + pow(z[49], 2) + pow(z[51], 2)) + z[61]*(z[10]*z[77] + pow(z[44], 2) + z[7]*z[77]);
  ar[14] = front_.Ixz*z[1]*z[69] + z[57] - z[62]*z[75];
  ar[15] = z[121];
  ar[16] = 0;
  ar[17] = z[55];
  ar[18] = 0;
  ar[19] = z[114];
  ar[20] = z[108];
  ar[21] = z[117];
  ar[22] = z[126];
  ar[23] = z[123];
  ar[24] = z[24]*z[69] - z[58];
  ar[25] = z[16]*z[69] + z[57];
  ar[26] = -front_.Ixx*z[8] - front_.Iyy*pow(z[72], 2) - rear_.Iyy + z[60]*(pow(z[36], 2) + pow(z[37], 2) + pow(z[46], 2)) + z[61]*(pow(z[30], 2) + pow(z[32], 2));
  ar[27] = z[116];
  ar[28] = z[110];
  ar[29] = z[54];
  ar[30] = z[106];
  ar[31] = z[107];
  ar[32] = z[103];
  ar[33] = z[115];
  ar[34] = z[122];
  ar[35] = z[118];
  ar[36] = z[124];
  ar[37] = z[121];
  ar[38] = z[116];
  ar[39] = -front_.Izz + z[60]*(pow(z[41], 2) + pow(z[80], 2));
  ar[40] = 0;
  ar[41] = z[96];
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = z[94];
  ar[46] = z[112];
  ar[47] = z[100];
  ar[48] = z[53];
  ar[49] = 0;
  ar[50] = z[110];
  ar[51] = 0;
  ar[52] = -rear_.J + z[61]*(pow(z[28], 2) + pow(z[29], 2));
  ar[53] = 0;
  ar[54] = z[97];
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = z[56];
  ar[61] = z[55];
  ar[62] = z[54];
  ar[63] = z[96];
  ar[64] = 0;
  ar[65] = -front_.J + z[60]*(pow(z[33], 2) + pow(z[40], 2));
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[99];
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = z[105];
  ar[73] = 0;
  ar[74] = z[106];
  ar[75] = 0;
  ar[76] = z[97];
  ar[77] = 0;
  ar[78] = z[61];
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[119];
  ar[85] = z[114];
  ar[86] = z[107];
  ar[87] = 0;
  ar[88] = 0;
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = z[61]*(z[10]*z[81] + pow(z[13], 2)*pow(z[70], 4)/z[22] + z[7]*z[81]);
  ar[92] = z[102];
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
  ar[96] = z[113];
  ar[97] = z[108];
  ar[98] = z[103];
  ar[99] = 0;
  ar[100] = 0;
  ar[101] = 0;
  ar[102] = 0;
  ar[103] = z[102];
  ar[104] = z[61]*(z[22] + z[6]);
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = z[111];
  ar[109] = z[117];
  ar[110] = z[115];
  ar[111] = z[94];
  ar[112] = 0;
  ar[113] = z[99];
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = z[60];
  ar[118] = 0;
  ar[119] = 0;
  ar[120] = z[125];
  ar[121] = z[126];
  ar[122] = z[122];
  ar[123] = z[112];
  ar[124] = 0;
  ar[125] = 0;
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = 0;
  ar[130] = z[60]*(pow(z[19], 2)*z[92] + pow(z[19], 2) + z[78]*z[92] + z[78]);
  ar[131] = z[109];
  ar[132] = z[120];
  ar[133] = z[123];
  ar[134] = z[118];
  ar[135] = z[100];
  ar[136] = 0;
  ar[137] = 0;
  ar[138] = 0;
  ar[139] = 0;
  ar[140] = 0;
  ar[141] = 0;
  ar[142] = z[109];
  ar[143] = z[60]*(pow(z[19], 2) + pow(z[20], 2) + z[78]);
}

/** Computes the n-d array of shape (12, 12, 3)
 *
 * @param[out] ar a C-array of with 432 elements
 */
//  void Bicycle::gif_dud_dq(double ar[432]) const;
void Bicycle::gif_dud_dq(double ar[432]) const
{
  double z[377];

  z[0] = -2;
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = sin(state_[3]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = cos(state_[3]);
  z[7] = pow(front_.r, -z[0]);
  z[8] = pow(rear_.r, -z[0]);
  z[9] = pow(z[1], -z[0]);
  z[10] = pow(z[1], 3);
  z[11] = pow(z[2], -z[0]);
  z[12] = pow(z[3], -z[0]);
  z[13] = pow(z[4], -z[0]);
  z[14] = pow(z[5], -z[0]);
  z[15] = pow(z[5], 3);
  z[16] = pow(z[6], -z[0]);
  z[17] = rear_.Ixx*z[5] + rear_.Ixz*z[2];
  z[18] = rear_.Ixz*z[5] + rear_.Izz*z[2];
  z[19] = rear_.a*z[5] + rear_.b*z[2];
  z[20] = z[11] + z[14];
  z[21] = rear_.Ixx*z[2] - rear_.Ixz*z[5];
  z[22] = rear_.Ixz*z[2] - rear_.Izz*z[5];
  z[23] = -rear_.a*z[2] + rear_.b*z[5];
  z[24] = front_.Ixx*z[5]*z[6] + front_.Ixz*z[2];
  z[25] = front_.Ixz*z[5]*z[6] + front_.Izz*z[2];
  z[26] = front_.Ixx*z[2]*z[6] - front_.Ixz*z[5];
  z[27] = front_.Ixz*z[2]*z[6] - front_.Izz*z[5];
  z[28] = z[1]*z[3] - z[2]*z[4]*z[6];
  z[29] = -rear_.a*z[2]*z[4] + rear_.b*z[4]*z[5];
  z[30] = z[1]*z[2]*z[3] - z[4]*z[6];
  z[31] = -z[1]*z[6] - z[2]*z[3]*z[4];
  z[32] = -z[1]*z[2]*z[6] - z[3]*z[4];
  z[33] = sqrt(z[13]*z[20]);
  z[34] = pow(z[13]*z[20], 3.0L/2.0L);
  z[35] = pow(z[28], -z[0]);
  z[36] = z[11]*z[13] + z[13]*z[14];
  z[37] = z[1]*z[11]*z[4] + z[1]*z[14]*z[4];
  z[38] = sqrt(z[36]);
  z[39] = pow(z[36], 3.0L/2.0L);
  z[40] = front_.Ixx*z[28] + front_.Ixz*z[4]*z[5];
  z[41] = -front_.Ixx*z[32] - front_.Ixz*z[1]*z[5];
  z[42] = front_.Ixz*z[28] + front_.Izz*z[4]*z[5];
  z[43] = -front_.Ixz*z[32] - front_.Izz*z[1]*z[5];
  z[44] = z[2]*z[4] + z[28]*z[6];
  z[45] = rear_.R/z[38] + rear_.r;
  z[46] = z[13]*z[14] + z[35];
  z[47] = sqrt(z[46]);
  z[48] = pow(z[46], 3.0L/2.0L);
  z[49] = pow(z[46], -z[0]);
  z[50] = rear_.R*z[2]*z[4]/z[38] + rear_.a;
  z[51] = -rear_.R*z[4]*z[5]/z[38] + rear_.b;
  z[52] = z[13]*z[2]*z[5] + z[28]*z[4]*z[5]*z[6];
  z[53] = front_.R/z[47] + front_.r;
  z[54] = rear_.R*z[2]*z[4]/z[38] + rear_.r*z[2]*z[4];
  z[55] = rear_.r*z[2]*z[4] + z[50];
  z[56] = -rear_.R*z[4]*z[5]/z[38] - rear_.r*z[4]*z[5];
  z[57] = front_.r*z[35] - front_.r*pow(-z[31], -z[0]);
  z[58] = -front_.R*z[4]*z[5]/z[47] + front_.b;
  z[59] = rear_.r*z[4]*z[5] - z[51];
  z[60] = -z[1]*z[14]*z[4] - z[28]*z[32];
  z[61] = -front_.Iyy*z[28]*z[3]*z[5] - front_.Iyy*z[31]*z[5]*z[6];
  z[62] = -front_.R*z[4]*z[5]/z[47] - front_.r*z[4]*z[5];
  z[63] = -front_.r*z[4]*z[5] + z[58];
  z[64] = rear_.r*z[1]*z[2]*z[4] - z[1]*z[54];
  z[65] = rear_.r*z[1]*z[4]*z[5] + z[1]*z[56];
  z[66] = front_.R*z[28]/z[47] - front_.a;
  z[67] = front_.b*z[3] + z[3]*z[62];
  z[68] = front_.b*z[6] + z[6]*z[62];
  z[69] = rear_.a*z[1] - z[64];
  z[70] = rear_.b*z[1] + z[65];
  z[71] = -front_.b*z[3]*z[5] - z[3]*z[5]*z[62];
  z[72] = -front_.b*z[5]*z[6] - z[5]*z[6]*z[62];
  z[73] = -front_.r*z[28]*z[30] + front_.r*z[31]*z[32];
  z[74] = front_.R*z[28]/z[47] + front_.r*z[28];
  z[75] = front_.r*z[28] + z[66];
  z[76] = z[11]*z[4]*z[45] + z[14]*z[4]*z[45];
  z[77] = z[2]*z[51] + z[5]*z[50];
  z[78] = -front_.b*z[31] - z[31]*z[62];
  z[79] = front_.r*z[2]*z[31] - z[71];
  z[80] = -front_.b*z[28] - z[28]*z[62];
  z[81] = z[2]*z[54] - z[5]*z[56];
  z[82] = rear_.R*z[1]/z[38] - rear_.R*z[37]*z[4]/z[39] + rear_.r*z[1];
  z[83] = -front_.R*z[35]/z[48] + z[53];
  z[84] = z[2]*z[59] - z[5]*z[55];
  z[85] = -z[2]*z[55] - z[5]*z[59];
  z[86] = rear_.R*z[1]*z[5]/z[38] - rear_.R*z[37]*z[4]*z[5]/z[39] + rear_.r*z[1]*z[5];
  z[87] = -rear_.R*z[1]*z[2]/z[38] + rear_.R*z[2]*z[37]*z[4]/z[39] - rear_.r*z[1]*z[2];
  z[88] = z[13]*z[14]/z[46] + z[35]/z[46];
  z[89] = z[0] + z[88];
  z[90] = -z[23] + z[81];
  z[91] = z[19] + z[2]*z[56] + z[5]*z[54];
  z[92] = front_.R*z[4]*z[5]*pow(-z[31], -z[0])/z[48] - z[58];
  z[93] = front_.a*z[3] + front_.r*z[31]*z[6] - z[3]*z[74];
  z[94] = -front_.a*z[6] + front_.r*z[3]*z[31] + z[6]*z[74];
  z[95] = -front_.r*z[31]*z[4]*z[5] + z[78];
  z[96] = rear_.a*z[4]*z[5] + rear_.b*z[2]*z[4] + z[2]*z[4]*z[56] + z[4]*z[5]*z[54];
  z[97] = front_.a*z[3]*z[5] + front_.r*z[31]*z[5]*z[6] - z[3]*z[5]*z[74];
  z[98] = front_.R*z[2]/z[47] - front_.R*z[5]*z[52]/z[48] + front_.r*z[2];
  z[99] = front_.R*z[2]*z[4]/z[47] - front_.R*z[4]*z[5]*z[52]/z[48] + front_.r*z[2]*z[4];
  z[100] = front_.R*z[1]/z[47] + front_.R*z[4]*z[60]/z[48] + front_.r*z[1];
  z[101] = -z[0]*z[1]*z[11] - z[0]*z[1]*z[14] - z[11]*z[37]*z[4]/z[36] - z[14]*z[37]*z[4]/z[36];
  z[102] = front_.R*z[1]*z[5]/z[47] + front_.R*z[4]*z[5]*z[60]/z[48] + front_.r*z[1]*z[5];
  z[103] = front_.R*z[28]*z[3]*z[31]*z[4]*z[5]/z[48] - z[68];
  z[104] = -front_.R*z[31]*z[35]/z[48] + front_.R*z[31]/z[47] + front_.r*z[31];
  z[105] = -front_.R*z[28]*z[52]/z[48] + front_.R*z[4]*z[5]*z[6]/z[47] + front_.r*z[4]*z[5]*z[6];
  z[106] = front_.a*z[31] + front_.r*z[28]*z[31] - z[31]*z[74];
  z[107] = front_.a*z[2] - z[2]*z[74] + z[72];
  z[108] = -front_.r*z[12]*z[4]*z[5] - z[105]*z[6];
  z[109] = front_.R*z[14]*z[28]*z[3]*z[31]*z[4]/z[48] - front_.r*z[2]*z[28] + z[72];
  z[110] = -front_.r*z[2]*z[30] - z[102]*z[3]*z[5];
  z[111] = front_.R*z[28]*z[60]/z[48] + front_.R*z[32]/z[47] + front_.r*z[32];
  z[112] = rear_.b*z[4] + rear_.r*z[13]*z[5] - rear_.r*z[5]*z[9] + z[1]*z[86] + z[4]*z[56];
  z[113] = z[76] + z[85];
  z[114] = -rear_.a*z[4] + rear_.r*z[13]*z[2] - rear_.r*z[2]*z[9] - z[1]*z[87] - z[4]*z[54];
  z[115] = front_.a*z[4]*z[5] - z[4]*z[5]*z[74] + z[80];
  z[116] = front_.R*z[28]*z[4]*z[5]*pow(-z[31], -z[0])/z[48] - front_.r*z[28]*z[4]*z[5] + z[80];
  z[117] = -z[13]*z[14]*z[60]/z[46] - z[35]*z[60]/z[46];
  z[118] = front_.r*z[30]*z[6] + z[111]*z[3];
  z[119] = front_.r*z[3]*z[30] - z[111]*z[6];
  z[120] = front_.r*z[30]*z[5]*z[6] + z[111]*z[3]*z[5];
  z[121] = z[2]*z[87] - z[5]*z[86];
  z[122] = z[0]*z[13]*z[2]*z[5] + z[0]*z[28]*z[4]*z[5]*z[6] + z[13]*z[14]*z[52]/z[46] + z[35]*z[52]/z[46];
  z[123] = front_.r*z[28]*z[3]*z[4]*z[5] + front_.r*z[31]*z[4]*z[5]*z[6] - z[105]*z[31];
  z[124] = front_.b*z[2]*z[3] + front_.r*z[2]*z[3]*z[4]*z[5] - front_.r*z[31]*z[5] + z[2]*z[3]*z[62] - z[3]*z[5]*z[99];
  z[125] = z[0]*z[1]*z[14]*z[4] + z[0]*z[28]*z[32] + z[117];
  z[126] = front_.b*z[3]*z[4]*z[5] + front_.r*z[13]*z[14]*z[3] + front_.r*z[2]*z[31]*z[4] + z[3]*z[4]*z[5]*z[62] - z[31]*z[99];
  z[127] = front_.r*z[28]*z[3] - z[104]*z[6] + z[93];
  z[128] = -front_.a*z[2]*z[3] - front_.r*z[14]*z[3]*z[4]*z[6] - front_.r*z[2]*z[31]*z[6] + z[105]*z[3]*z[5] + z[2]*z[3]*z[74];
  z[129] = front_.a*z[5]*z[6] + front_.r*z[28]*z[5]*z[6] - front_.r*z[3]*z[31]*z[5] + z[104]*z[3]*z[5] - z[5]*z[6]*z[74];
  z[130] = front_.R*z[14]*z[28]*z[31]*z[4]*z[6]/z[48] + z[104]*z[2] - z[71];
  z[131] = -front_.b*z[30] + front_.r*z[1]*z[31]*z[5] - front_.r*z[30]*z[4]*z[5] - z[102]*z[31] - z[30]*z[62];
  z[132] = z[105]*z[28] + z[13]*z[5]*z[98];
  z[133] = -front_.a*z[3]*z[4]*z[5] - z[123] + z[3]*z[4]*z[5]*z[74];
  z[134] = front_.R*z[31]*z[35]*z[4]*z[5]/z[48] + z[104]*z[4]*z[5] - z[78];
  z[135] = front_.a*z[28] + z[104]*z[31] - z[28]*z[74] + z[57];
  z[136] = -rear_.a*z[1]*z[5] - rear_.b*z[1]*z[2] - z[1]*z[2]*z[56] - z[1]*z[5]*z[54] + z[2]*z[4]*z[86] + z[4]*z[5]*z[87];
  z[137] = z[69]*z[87] + z[70]*z[86];
  z[138] = -z[102]*z[5]*z[6] + z[111]*z[2];
  z[139] = -z[100]*z[14]*z[4] - z[111]*z[28];
  z[140] = front_.a*z[30] + z[111]*z[31] - z[30]*z[74] - z[73];
  z[141] = front_.a*z[5] + front_.b*z[2]*z[6] + z[105]*z[2] + z[2]*z[6]*z[62] - z[5]*z[6]*z[99] - z[5]*z[74];
  z[142] = front_.a*z[2]*z[4] - front_.b*z[4]*z[5]*z[6] - z[105]*z[4]*z[5] - z[2]*z[4]*z[74] + z[28]*z[99] - z[4]*z[5]*z[6]*z[62];
  z[143] = -front_.a*z[1]*z[5] + front_.b*z[32] + z[1]*z[5]*z[74] - z[102]*z[28] + z[111]*z[4]*z[5] + z[32]*z[62];
  z[144] = front_.J*z[3] - front_.m*(-front_.R*z[28]*z[31]*z[4]*z[5]*z[68]/z[48] - z[104]*z[94] + z[127]*z[74] + z[62]*(-front_.R*z[28]*z[31]*z[4]*z[5]*z[6]/z[48] - z[67]));
  z[145] = front_.Ixz*z[3]*z[5] + front_.m*(front_.r*z[109]*z[31] - front_.r*z[28]*z[79] - z[104]*z[107] + z[130]*z[75]);
  z[146] = front_.J*z[5]*z[6] - front_.m*(front_.R*z[28]*z[31]*z[4]*z[5]*z[79]/z[48] - z[104]*z[97] + z[109]*z[62] + z[129]*z[74]);
  z[147] = front_.J*z[28] - front_.m*(-front_.R*z[28]*z[31]*z[4]*z[5]*z[95]/z[48] - z[104]*z[106] + z[116]*z[62] + z[135]*z[74]);
  z[148] = -front_.m*(-front_.r*z[124]*z[31] - front_.r*z[3]*z[4]*z[5]*z[79] + z[105]*z[107] - z[141]*z[75]) + z[27];
  z[149] = rear_.r*z[1]*z[112]*z[2] - rear_.r*z[1]*z[114]*z[5] + rear_.r*z[2]*z[4]*z[70] + rear_.r*z[4]*z[5]*z[69] + z[121]*z[96] + z[136]*z[90];
  z[150] = front_.Ixz*z[4]*z[5]*z[6] + front_.Izz*z[2]*z[4] - front_.m*(-front_.r*z[126]*z[31] + front_.r*z[3]*z[4]*z[5]*z[95] + z[105]*z[115] + z[142]*z[75]);
  z[151] = front_.J*z[30] - front_.m*(z[102]*z[95] - z[106]*z[111] + z[131]*z[62] + z[140]*z[74]);
  z[152] = -front_.m*(-front_.r*z[131]*z[31] - front_.r*z[30]*z[95] + z[111]*z[115] - z[143]*z[75]) - z[43];
  z[153] = front_.Ixx*z[12]*z[5] - front_.Iyy*z[12]*z[5] + front_.Iyy*z[16]*z[5] - front_.m*(z[103]*z[107] + z[109]*z[68] + z[127]*z[97] + z[129]*z[94] - z[130]*z[67] - z[79]*(-front_.R*z[28]*z[31]*z[4]*z[5]*z[6]/z[48] - z[67]));
  z[154] = front_.Ixx*z[3]*z[31] + front_.Iyy*z[28]*z[6] - front_.Iyy*z[3]*z[31] - front_.m*(z[103]*z[115] + z[106]*z[127] + z[116]*z[68] - z[134]*z[67] + z[135]*z[94] + z[95]*(-front_.R*z[28]*z[31]*z[4]*z[5]*z[6]/z[48] - z[67]));
  z[155] = -front_.Iyy*z[2]*z[3]*z[6] - front_.m*(-z[107]*z[3]*z[99] + z[108]*z[97] + z[124]*z[68] + z[128]*z[94] - z[141]*z[67] - z[6]*z[79]*z[99]) - rear_.m*rear_.r*z[1]*(z[81] + z[85]);
  z[156] = -front_.Iyy*z[3]*z[4]*z[5]*z[6] - front_.m*(z[106]*z[108] - z[115]*z[3]*z[99] + z[126]*z[68] + z[133]*z[94] + z[142]*z[67] + z[6]*z[95]*z[99]) - rear_.m*(z[54]*z[70] - z[55]*z[65] - z[56]*z[69] + z[59]*z[64]);
  z[157] = z[106]*z[120] + z[107]*z[143] + z[110]*z[95] + z[115]*z[138] - z[131]*z[79] + z[140]*z[97];
  z[158] = front_.Iyy*z[30]*z[6] - rear_.Iyy*z[4] - front_.m*(-z[102]*z[115]*z[3] + z[102]*z[6]*z[95] + z[106]*z[119] + z[131]*z[68] + z[140]*z[94] - z[143]*z[67]) - rear_.m*(-z[112]*z[59] - z[114]*z[55] + z[137]);
  z[159] = front_.Iyy*z[12]*z[14]*z[4] + front_.Iyy*z[2]*z[3]*z[31] - front_.m*(z[106]*z[128] - z[107]*z[142] + z[115]*z[141] + z[124]*z[95] - z[126]*z[79] + z[133]*z[97]) + rear_.m*(rear_.r*z[1]*z[2]*z[64] + rear_.r*z[1]*z[2]*z[69] + rear_.r*z[1]*z[5]*z[65] - rear_.r*z[1]*z[5]*z[70] - z[19]*z[96] - z[29]*z[90]) + z[17]*z[4]*z[5] + z[18]*z[2]*z[4] - z[2]*z[21]*z[4] + z[2]*z[25]*z[4] + z[22]*z[4]*z[5] + z[24]*z[4]*z[5]*z[6];
  z[160] = -front_.b;
  z[161] = -front_.m;
  z[162] = z[0]*z[161];
  z[163] = -rear_.m;
  z[164] = -front_.r;
  z[165] = -rear_.r;
  z[166] = front_.Ixx*z[6];
  z[167] = front_.Ixz*z[2];
  z[168] = front_.Ixz*z[5];
  z[169] = front_.J*z[3];
  z[170] = -z[1]*z[163];
  z[171] = -z[163]*z[4];
  z[172] = -z[164]*z[3];
  z[173] = -z[164]*z[4];
  z[174] = -z[164]*z[5];
  z[175] = -z[1]*z[165];
  z[176] = -z[1];
  z[177] = z[0]*z[176];
  z[178] = -z[2];
  z[179] = z[0]*z[178];
  z[180] = -z[3];
  z[181] = -z[4];
  z[182] = z[0]*z[181];
  z[183] = -z[5];
  z[184] = -z[6];
  z[185] = z[176]*z[178];
  z[186] = z[176]*z[181];
  z[187] = z[176]*z[183];
  z[188] = z[178]*z[181];
  z[189] = z[178]*z[184];
  z[190] = z[180]*z[181];
  z[191] = z[180]*z[183];
  z[192] = z[181]*z[183];
  z[193] = z[181]*z[184];
  z[194] = z[183]*z[184];
  z[195] = -z[165]*z[9];
  z[196] = -z[10]*z[165];
  z[197] = -front_.Iyy*z[180]*z[6];
  z[198] = -z[9];
  z[199] = -z[13];
  z[200] = -z[0]*z[14];
  z[201] = -z[14]*z[176];
  z[202] = -z[14]*z[180];
  z[203] = -z[14]*z[181];
  z[204] = z[183]*z[199];
  z[205] = -z[16]*z[183];
  z[206] = -z[11]*z[199];
  z[207] = -z[14]*z[199];
  z[208] = -z[15]*z[199];
  z[209] = z[15]*pow(z[4], 3);
  z[210] = -z[14]*z[186];
  z[211] = -z[163]*z[19];
  z[212] = -z[17]*z[178];
  z[213] = -z[178]*z[22];
  z[214] = -z[199]*z[20];
  z[215] = -z[170]*z[19];
  z[216] = -front_.Iyy*z[31];
  z[217] = z[161]*z[31];
  z[218] = z[164]*z[31];
  z[219] = front_.Ixx*z[28];
  z[220] = front_.Iyy*z[30];
  z[221] = -z[161]*z[28];
  z[222] = -z[164]*z[28];
  z[223] = -z[164]*z[30];
  z[224] = z[180]*z[31];
  z[225] = z[181]*z[31];
  z[226] = z[183]*z[31];
  z[227] = z[184]*z[31];
  z[228] = -z[178]*z[28];
  z[229] = -z[183]*z[28];
  z[230] = -z[184]*z[28];
  z[231] = -z[181]*z[30];
  z[232] = -z[164]*z[35];
  z[233] = z[0]/z[33];
  z[234] = -z[35];
  z[235] = -z[198]/z[33];
  z[236] = z[10]/z[33];
  z[237] = -z[199]/z[33];
  z[238] = rear_.R/z[38];
  z[239] = z[31]*z[32];
  z[240] = -z[28]*z[31];
  z[241] = -z[30]*z[31];
  z[242] = z[28]*z[30];
  z[243] = z[28]*z[32];
  z[244] = front_.R/z[49];
  z[245] = front_.R/z[48];
  z[246] = -z[161]/z[47];
  z[247] = z[234]*z[31];
  z[248] = -z[198]*z[20]/z[34];
  z[249] = -1/z[46];
  z[250] = -1/z[47];
  z[251] = -z[47];
  z[252] = z[180]*z[250];
  z[253] = -z[178]*z[50];
  z[254] = -z[183]*z[50];
  z[255] = -z[178]*z[51];
  z[256] = -z[207]*z[249];
  z[257] = -z[211]*z[214]/z[33];
  z[258] = z[250]*z[31];
  z[259] = pow(-z[31], -z[0])/z[49];
  z[260] = pow(-z[31], -z[0])/z[48];
  z[261] = -z[249]*pow(-z[31], -z[0]);
  z[262] = -z[250]*pow(-z[31], -z[0]);
  z[263] = z[234]*z[249];
  z[264] = z[234]*z[250];
  z[265] = -z[32]*z[53];
  z[266] = z[28]*z[53];
  z[267] = -z[180]*z[63];
  z[268] = -z[184]*z[63];
  z[269] = -z[31]*z[58];
  z[270] = z[44]/z[48];
  z[271] = -z[249]*z[44];
  z[272] = z[28]*z[58];
  z[273] = z[53]/z[48];
  z[274] = z[31]*z[66];
  z[275] = z[250]*z[53];
  z[276] = z[249]*z[60];
  z[277] = z[60]/z[48];
  z[278] = -z[250]*z[63];
  z[279] = z[170]*z[84];
  z[280] = -z[181]*z[90];
  z[281] = -z[170]*z[181]*z[77]/z[33];
  z[282] = -z[250]*z[75];
  z[283] = z[173]*z[183]*z[221]*z[250]*(z[261] + 1);
  z[284] = z[170]*z[181]*z[45]*z[77];
  z[285] = z[28]*z[89];
  z[286] = z[173]*z[183]*z[221]*(z[245]*pow(-z[31], -z[0]) + z[53]);
  z[287] = z[250]*z[79];
  z[288] = -z[171]*z[84]/z[33];
  z[289] = -z[31]*z[93];
  z[290] = -z[31]*z[94];
  z[291] = -z[163]*z[237]*z[84];
  z[292] = z[28]*z[93];
  z[293] = -z[171]*z[20]*z[82]/z[33];
  z[294] = -z[199]*z[98];
  z[295] = z[171]*z[45]*z[84];
  z[296] = z[28]*z[98];
  z[297] = z[250]*z[93];
  z[298] = -z[250]*z[94];
  z[299] = -z[102]*z[180];
  z[300] = -z[102]*z[184];
  z[301] = -z[100]*z[31];
  z[302] = z[100]*z[28];
  z[303] = z[173]*z[246]*(-z[14]*z[190] + z[178]*z[31] + z[203]*z[271]*z[31]);
  z[304] = z[101]/z[38];
  z[305] = z[170]*z[181]*(z[11]*z[181]*z[238] + z[183]*z[51] - z[203]*z[238] + z[23] + z[253]);
  z[306] = z[113]*z[171];
  z[307] = z[174]*z[246]*(z[176]*z[31] - z[225]*z[276] + z[231]);
  z[308] = -z[107]*z[250];
  z[309] = -z[161]*z[173]*(z[14]*z[190]*z[53] + z[31]*z[98]);
  z[310] = z[113]*z[170]*z[181]/z[33];
  z[311] = z[161]*z[174]*(z[231]*z[53] + z[301]);
  z[312] = -z[161]*(-z[28]*z[75] + z[57] + z[83]*pow(-z[31], -z[0]));
  z[313] = -z[163]*z[82]*(z[76] - z[85]);
  z[314] = -z[116]*z[79];
  z[315] = -z[161]*z[192]*pow(-z[31], -z[0])*(-z[234]*z[244] - z[250]*z[83] + z[275]);
  z[316] = z[161]*(z[123] + z[183]*z[190]*z[75]);
  z[317] = z[171]*(z[11]*z[181]*z[235]*z[238] + z[183]*z[235]*z[51] - z[203]*z[235]*z[238] - z[214]*z[23]/z[38] + z[235]*z[253]);
  z[318] = z[161]*(-z[111]*z[31] + z[30]*z[75] + z[73]);
  z[319] = z[163]*(z[11]*z[195] - z[121]*z[176] + z[14]*z[195] + z[165]*z[206] + z[165]*z[207] + z[280]);
  z[320] = -z[171]*(-z[112]*z[183] - z[114]*z[178])/z[33];
  z[321] = -z[161]*z[181]*(z[105]*z[183] + z[14]*z[193]*z[53] - z[228]*z[53] + z[296]);
  z[322] = z[171]*(-z[11]*z[198]*z[233] - z[176]*z[304] - z[200]*z[235] + z[206]*z[248] + z[206]/z[33] + z[207]*z[248] + z[207]/z[33] - z[214]/z[38]);
  z[323] = -z[161]*z[183]*(z[111]*z[181] + z[176]*z[266] + z[181]*z[265] + z[302]);
  z[324] = -z[181]*z[217]*z[250]*(-z[105]*z[183] - z[14]*z[193]*z[53] + z[228]*z[53] - z[296]);
  z[325] = -z[217]*z[28]*(z[207]*z[244] + z[207]*z[273] - z[234]*z[273] + z[250]*z[83] + z[275]);
  z[326] = -z[183]*z[217]*z[250]*(-z[111]*z[181] - z[176]*z[266] - z[181]*z[265] - z[302]);
  z[327] = -z[221]*(z[0]*z[262] - z[207]*z[250] + z[207]*z[260] - z[234]*z[260] + z[251] - z[262]*z[89] + z[264]);
  z[328] = z[217]*(-z[0]*z[232]*z[250] + z[164]*z[250]*pow(-z[31], -z[0]) - z[232]*z[260] - z[251]*z[83] - z[282]*z[285]);
  z[329] = z[161]*(-z[105]*z[267] + z[172]*z[192]*z[268] + z[173]*z[227]*z[98] + z[190]*z[75]*z[98]);
  z[330] = -front_.Ixz*z[6] + z[161]*(-z[103]*z[75] - z[104]*z[67] + z[218]*(z[192]*z[227]*z[245]*z[28] - z[67]) - z[222]*z[68]);
  z[331] = -z[161]*(-z[100]*z[174]*z[227] - z[100]*z[191]*z[75] + z[111]*z[267] - z[184]*z[223]*z[63]);
  z[332] = -z[246]*(z[132] - z[178]*z[204]*z[53] + z[192]*z[230]*z[53] - z[192]*z[263]*z[44]*z[53] - z[209]*z[271]*z[53]);
  z[333] = z[161]*z[181]*(z[108]*z[183] - z[12]*z[183]*z[63] - z[178]*z[94] + z[205]*z[63] + z[224]*z[98] - z[230]*z[98]);
  z[334] = z[161]*(-z[103]*z[31] + z[127]*z[192] - z[180]*z[28]*z[63] + z[227]*z[63] + z[28]*(z[192]*z[227]*z[245]*z[28] - z[67]));
  z[335] = -z[163]*(z[11]*z[196]/z[33] - z[121]*z[214]/z[38] + z[14]*z[196]/z[33] - z[175]*z[200]*z[237] + z[175]*z[206]*z[233] - z[196]*z[20]*z[206]/z[34] - z[196]*z[20]*z[207]/z[34] + z[280]*z[304]);
  z[336] = z[161]*(z[122]*z[258] + z[179]*z[204]*z[258] + z[182]*z[194]*z[258]*z[28] + z[183]*z[190]*z[251] + z[183]*z[190]*z[264] - z[192]*z[247]*z[270] - z[209]*z[252] + z[209]*z[270]*z[31]);
  z[337] = -z[161]*(z[105]*z[251] + z[122]*z[282] - z[172]*z[182]*z[226]*z[250]*z[28] - z[173]*z[194]*z[262] + z[173]*z[229]*z[260]*z[44]);
  z[338] = z[246]*(z[139] + z[210]*z[53] - z[243]*z[53] - z[256]*z[53]*z[60] - z[263]*z[53]*z[60]);
  z[339] = rear_.J*z[181] + z[163]*(z[112]*z[56] - z[114]*z[54] + z[137]);
  z[340] = z[161]*(z[119]*z[192] - z[187]*z[94] - z[191]*z[301] + z[194]*z[302] + z[267]*z[30] - z[268]*z[32]);
  z[341] = -z[161]*(z[105]*z[94] - z[108]*z[266] - z[193]*z[63]*z[98] + z[194]*z[294]*z[53]);
  z[342] = z[246]*(z[135]*z[28] + z[192]*z[261]*z[272] - z[192]*z[28]*z[92] + z[234]*z[261]*z[66] + z[66]*pow(-z[31], -z[0]));
  z[343] = -z[161]*(-z[0]*z[218]*z[242]*z[250] + z[111]*z[251] + z[125]*z[282] + z[164]*z[262]*z[32] - z[222]*z[260]*z[60]);
  z[344] = -z[246]*(-z[108]*z[28] + z[14]*z[184]*z[199]*z[271]*z[63] - z[184]*z[192]*z[94] - z[188]*z[268] - z[192]*z[271]*z[28]*z[94] + z[194]*z[294]);
  z[345] = -z[161]*(z[0]*z[239]*z[250]*z[28] - z[125]*z[258] - z[177]*z[203]*z[258] + z[207]*z[250]*z[30] + z[207]*z[277]*z[31] - z[247]*z[277] - z[251]*z[30] - z[264]*z[30]);
  z[346] = z[163]*(-z[112]*z[188] + z[114]*z[192] - z[136]*z[176] - z[198]*z[254] - z[198]*z[255] - z[199]*z[91]);
  z[347] = z[246]*(z[127]*z[28] - z[192]*z[227]*z[249]*z[28]*z[63] - z[192]*(z[192]*z[227]*z[245]*z[28] - z[67]) + z[247]*z[249]*z[94] + z[290]);
  z[348] = z[161]*(-z[100]*z[14]*z[193]*z[53] + z[100]*z[194]*z[63] - z[111]*z[94] + z[119]*z[266]);
  z[349] = z[246]*(-z[100]*z[14]*z[193] + z[119]*z[28] + z[187]*z[268] - z[192]*z[268]*z[276] + z[276]*z[28]*z[94] - z[32]*z[94]);
  z[350] = -z[183]*z[246]*(z[109]*z[181] + z[225]*z[249]*z[28]*z[79] + z[247]*z[249]*z[93] + z[28]*(-z[104]*z[180] - z[184]*z[222] - z[94]) + z[289]);
  z[351] = -z[161]*z[183]*(-z[100]*z[79] + z[110]*z[181]*z[53] - z[111]*z[93] + z[118]*z[266]);
  z[352] = -z[183]*z[246]*(z[110]*z[181] + z[118]*z[28] + z[176]*z[79] - z[181]*z[276]*z[79] + z[276]*z[292] - z[32]*z[93]);
  z[353] = -z[161]*(-z[107]*z[111] - z[110]*z[218] + z[138]*z[75] - z[223]*z[79]);
  z[354] = z[161]*(-z[115]*z[28] - z[134]*z[31] + z[135]*z[192] - z[234]*z[92] + z[58]*pow(-z[31], -z[0]));
  z[355] = z[161]*(-z[107]*z[28] + z[109]*z[28] - z[130]*z[31] + z[203]*(-z[104]*z[180] - z[184]*z[222] - z[94]) + z[31]*z[79]);
  z[356] = z[246]*(-z[126]*z[192] + z[133]*z[28] + z[188]*z[269] - z[192]*z[227]*z[66] + z[192]*z[240]*z[271]*z[66] - z[256]*z[269]*z[44]);
  z[357] = front_.Ixz*z[31] + z[161]*(z[104]*z[115] + z[116]*z[218] - z[134]*z[75] - z[222]*z[95]);
  z[358] = z[161]*(-z[107]*z[30] + z[110]*z[28] + z[118]*z[203] - z[138]*z[31] - z[201]*z[93] + z[32]*z[79]);
  z[359] = z[161]*(-z[105]*z[97] + z[124]*z[62] + z[128]*z[74] - z[79]*z[99]) + z[169]*z[178];
  z[360] = z[246]*(-z[124]*z[192] + z[128]*z[28] - z[14]*z[193]*z[93] - z[188]*z[79] + z[203]*z[271]*z[292] + z[256]*z[44]*z[79]);
  z[361] = z[246]*(-z[131]*z[192] + z[140]*z[28] + z[187]*z[269] - z[192]*z[269]*z[276] + z[239]*z[66] + z[240]*z[276]*z[66]);
  z[362] = z[161]*(-z[105]*z[106] + z[126]*z[62] + z[133]*z[74] + z[95]*z[99]) - z[169]*z[192];
  z[363] = z[161]*(-z[107]*z[183]*z[190] + z[124]*z[28] + z[128]*z[192] - z[141]*z[31] + z[183]*z[188]*z[93] - z[184]*z[192]*z[79]);
  z[364] = z[161]*(-z[115]*z[183]*z[190] + z[126]*z[28] + z[133]*z[192] + z[142]*z[31] + z[188]*z[274] - z[192]*z[227]*z[58]);
  z[365] = z[163]*(z[10]*z[20]*z[204]*z[50]/z[34] + z[10]*z[214]*z[255]/z[34] - z[112]*z[181]*z[185]/z[33] + z[114]*z[183]*z[186]/z[33] + z[136]*z[214]/z[38] + z[185]*z[237]*z[51] + z[187]*z[237]*z[50] + z[199]*z[304]*z[91] - z[236]*z[254] - z[236]*z[255]);
  z[366] = z[161]*(-z[115]*z[30] + z[131]*z[28] + z[140]*z[192] - z[143]*z[31] + z[187]*z[274] + z[239]*z[58]);
  z[367] = z[161]*(-z[103]*z[251] - z[127]*z[192]*z[258] + z[192]*z[260]*z[28]*z[94] + z[192]*z[28]*z[298] + z[224]*z[278]*z[285] - z[234]*z[260]*z[268] + z[240]*z[250]*(z[192]*z[227]*z[245]*z[28] - z[67]) - z[262]*z[268] + z[264]*z[268]);
  z[368] = -z[161]*(z[108]*z[192]*z[258] + z[122]*z[252]*z[63] - z[16]*z[192]*z[258]*z[63] - z[188]*z[258]*z[94] + z[190]*z[194]*z[278]*z[28] - z[190]*z[251]*z[98] + z[192]*z[227]*z[270]*z[28]*z[63] - z[193]*z[240]*z[250]*z[98] - z[199]*z[202]*z[298] + z[207]*z[270]*z[290]);
  z[369] = z[161]*(z[115]*z[240]*z[250]*z[89] - z[134]*z[251] - z[135]*z[192]*z[258] - z[192]*z[240]*z[250]*z[66] + z[192]*z[240]*z[274]*z[31]/z[48] - z[247]*z[250]*z[58] + z[247]*z[250]*z[92] - z[247]*z[269]*z[31]/z[48] + z[258]*z[269]*z[31]);
  z[370] = -z[161]*(-z[100]*z[191]*z[251] - z[100]*z[194]*z[240]*z[250] + z[119]*z[192]*z[258] + z[125]*z[252]*z[63] - z[187]*z[258]*z[94] - z[192]*z[277]*z[290] - z[192]*z[298]*z[30] - z[227]*z[277]*z[28]*z[63] - z[227]*z[278]*z[32] - z[230]*z[278]*z[30]);
  z[371] = z[161]*(z[109]*z[240]*z[250] - z[130]*z[251] - z[203]*z[250]*z[292] - z[203]*z[258]*(-z[104]*z[180] - z[184]*z[222] - z[94]) + z[203]*z[260]*z[292] + z[234]*z[260]*z[79] - z[240]*z[308]*z[89] + z[262]*z[79] - z[264]*z[79]);
  z[372] = z[161]*(-z[107]*z[299] + z[110]*z[68] + z[119]*z[97] + z[120]*z[94] - z[138]*z[67] - z[300]*z[79]) - z[163]*z[165]*(z[185]*z[86] + z[187]*z[87] - z[188]*z[59] + z[192]*z[55]);
  z[373] = z[161]*(z[110]*z[240]*z[250] - z[118]*z[203]*z[258] + z[125]*z[308] - z[138]*z[251] + z[201]*z[258]*z[93] + z[203]*z[277]*z[289] - z[203]*z[297]*z[30] - z[239]*z[287] - z[240]*z[277]*z[79] + z[242]*z[287]);
  z[374] = -z[161]*(z[115]*z[122]*z[250] - z[126]*z[240]*z[250] + z[133]*z[192]*z[258] - z[142]*z[251] + z[184]*z[192]*z[262]*z[58] - z[188]*z[262]*z[66] - z[190]*z[226]*z[250]*z[272] + z[192]*z[260]*z[272]*z[44] - z[199]*z[202]*z[258]*z[66] + z[207]*z[260]*z[44]*z[66]);
  z[375] = -z[161]*(-z[122]*z[308] - z[124]*z[240]*z[250] + z[128]*z[192]*z[258] + z[141]*z[251] + z[188]*z[226]*z[297] + z[190]*z[229]*z[287] - z[192]*z[227]*z[287] - z[192]*z[240]*z[270]*z[79] + z[208]*z[252]*z[93] + z[208]*z[270]*z[289]);
  z[376] = -z[161]*(z[115]*z[125]*z[250] - z[131]*z[240]*z[250] + z[140]*z[192]*z[258] + z[143]*z[251] - z[187]*z[262]*z[66] + z[192]*z[241]*z[250]*z[66] - z[192]*z[260]*z[60]*z[66] + z[240]*z[250]*z[30]*z[58] - z[260]*z[272]*z[60] - z[262]*z[32]*z[58]);

  ar[0] = rear_.Iyy*z[177]*z[181] - z[0]*z[163]*(z[112]*z[70] - z[114]*z[69] + z[136]*z[96]) - z[0]*z[216]*z[30] - z[162]*(z[106]*z[140] + z[115]*z[143] + z[131]*z[95]) + z[177]*z[188]*z[21] - z[177]*z[192]*z[22] + z[187]*z[42] - z[192]*z[43] - z[28]*z[41] + z[32]*z[40];
  ar[1] = -z[0]*z[163]*(z[29]*z[96] - z[64]*z[70] - z[65]*z[69]) - z[162]*(z[106]*z[133] - z[115]*z[142] + z[126]*z[95]) + z[18]*z[204] - z[181]*z[24]*z[28] - z[182]*z[191]*z[216] - z[184]*z[192]*z[40] + z[188]*z[42] + z[199]*z[212] + z[199]*z[213] - z[204]*z[21] + z[204]*z[25];
  ar[2] = -z[0]*z[216]*z[28] - z[162]*(z[106]*z[135] + z[115]*z[134] + z[116]*z[95]) - z[168]*z[225] + z[219]*z[31] + z[31]*z[40];
  ar[3] = z[149]*z[163] + z[157]*z[161] - z[17]*z[185] + z[18]*z[187] + z[187]*z[25] - z[191]*z[220] + z[24]*z[32];
  ar[4] = z[159] + z[192]*z[27] + z[26]*z[28];
  ar[5] = front_.Ixz*z[14]*z[190] + z[161]*(z[106]*z[129] + z[107]*z[134] + z[109]*z[95] + z[115]*z[130] + z[135]*z[97] + z[314]) + z[191]*z[219] + z[24]*z[31] + z[61];
  ar[6] = -front_.Ixx*z[180]*z[32] + z[158] + z[168]*z[176]*z[180];
  ar[7] = z[156] - z[166]*z[183]*z[190] + z[167]*z[190];
  ar[8] = z[154] - z[166]*z[28] - z[168]*z[193];
  ar[9] = z[152];
  ar[10] = z[150];
  ar[11] = z[357];
  ar[12] = z[339];
  ar[13] = z[284];
  ar[14] = 0;
  ar[15] = z[151];
  ar[16] = z[362];
  ar[17] = z[147];
  ar[18] = z[320];
  ar[19] = z[281];
  ar[20] = 0;
  ar[21] = z[365];
  ar[22] = z[317];
  ar[23] = 0;
  ar[24] = z[346];
  ar[25] = z[305];
  ar[26] = 0;
  ar[27] = z[361];
  ar[28] = z[356];
  ar[29] = z[342];
  ar[30] = z[376];
  ar[31] = z[374];
  ar[32] = z[369];
  ar[33] = z[366];
  ar[34] = z[364];
  ar[35] = z[354];
  ar[36] = z[149]*z[163] + z[157]*z[161] + z[178]*z[43] - z[185]*z[22] - z[187]*z[21] - z[191]*z[220] - z[194]*z[41];
  ar[37] = z[159] + z[183]*z[42] + z[189]*z[40];
  ar[38] = z[161]*(z[106]*z[129] + z[107]*z[134] + z[109]*z[95] + z[115]*z[130] + z[135]*z[97] + z[314]) - z[166]*z[226] + z[167]*z[31] + z[191]*z[40] + z[61];
  ar[39] = z[0]*(-z[161]*(z[107]*z[138] - z[110]*z[79] + z[120]*z[97]) - z[163]*(z[11]*z[186]*z[8] + z[121]*z[90] - z[210]*z[8]));
  ar[40] = -front_.Iyy*z[12]*z[179]*z[183] + z[0]*z[211]*z[90] - z[162]*(z[107]*z[141] - z[124]*z[79] + z[128]*z[97]) - z[178]*z[27] + z[18]*z[183] - z[183]*z[21] + z[183]*z[25] + z[189]*z[24] + z[194]*z[26] + z[212] + z[213];
  ar[41] = -z[162]*(z[107]*z[130] - z[109]*z[79] + z[129]*z[97]) + z[166]*z[202] + z[167]*z[191] + z[191]*z[24] - z[197]*z[200];
  ar[42] = z[372];
  ar[43] = z[155] + z[166]*z[178]*z[180] + z[168]*z[180];
  ar[44] = -front_.Ixx*z[205] + z[153] + z[167]*z[184];
  ar[45] = z[353];
  ar[46] = z[148];
  ar[47] = z[145];
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = z[351];
  ar[52] = z[359];
  ar[53] = z[146];
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = z[335];
  ar[58] = z[257];
  ar[59] = 0;
  ar[60] = z[319];
  ar[61] = z[215];
  ar[62] = 0;
  ar[63] = z[352];
  ar[64] = z[360];
  ar[65] = z[350];
  ar[66] = z[373];
  ar[67] = z[375];
  ar[68] = z[371];
  ar[69] = z[358];
  ar[70] = z[363];
  ar[71] = z[355];
  ar[72] = z[158] + z[180]*z[41];
  ar[73] = z[156] + z[190]*z[24];
  ar[74] = z[154] + z[184]*z[40];
  ar[75] = z[372];
  ar[76] = z[155] - z[180]*z[26];
  ar[77] = z[153] + z[184]*z[24];
  ar[78] = z[0]*(-z[161]*(z[119]*z[94] + z[299]*z[67] + z[300]*z[68]) - z[163]*(z[55]*z[87] - z[59]*z[86]));
  ar[79] = z[0]*(-z[161]*(z[108]*z[94] - z[180]*z[67]*z[99] - z[184]*z[68]*z[99]) - z[163]*(-z[54]*z[59] - z[55]*z[56]));
  ar[80] = -z[0]*(z[161]*(-z[103]*z[67] + z[127]*z[94] + z[68]*(z[192]*z[227]*z[245]*z[28] - z[67])) + z[166]*z[180] + z[197]);
  ar[81] = z[331];
  ar[82] = z[329];
  ar[83] = z[330];
  ar[84] = z[313];
  ar[85] = z[295];
  ar[86] = 0;
  ar[87] = z[348];
  ar[88] = z[341];
  ar[89] = z[144];
  ar[90] = z[293];
  ar[91] = z[288];
  ar[92] = 0;
  ar[93] = z[291];
  ar[94] = z[310];
  ar[95] = 0;
  ar[96] = z[279];
  ar[97] = z[306];
  ar[98] = 0;
  ar[99] = z[349];
  ar[100] = z[344];
  ar[101] = z[347];
  ar[102] = z[370];
  ar[103] = z[368];
  ar[104] = z[367];
  ar[105] = z[340];
  ar[106] = z[333];
  ar[107] = z[334];
  ar[108] = z[152];
  ar[109] = z[150];
  ar[110] = z[357];
  ar[111] = z[353];
  ar[112] = z[148];
  ar[113] = z[145];
  ar[114] = z[331];
  ar[115] = z[329];
  ar[116] = z[330];
  ar[117] = z[162]*(z[111]*z[75] + z[241]*z[7]);
  ar[118] = -z[162]*(-z[105]*z[75] + z[190]*z[226]*z[7]);
  ar[119] = -z[162]*z[31]*(z[28]*z[7] - z[75]*z[83]);
  ar[120] = 0;
  ar[121] = 0;
  ar[122] = 0;
  ar[123] = z[311];
  ar[124] = z[309];
  ar[125] = z[286];
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = 0;
  ar[130] = 0;
  ar[131] = 0;
  ar[132] = 0;
  ar[133] = 0;
  ar[134] = 0;
  ar[135] = z[307];
  ar[136] = z[303];
  ar[137] = z[283];
  ar[138] = z[343];
  ar[139] = z[337];
  ar[140] = z[328];
  ar[141] = z[318];
  ar[142] = z[316];
  ar[143] = z[312];
  ar[144] = z[339];
  ar[145] = z[284];
  ar[146] = 0;
  ar[147] = 0;
  ar[148] = 0;
  ar[149] = 0;
  ar[150] = z[313];
  ar[151] = z[295];
  ar[152] = 0;
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = -z[0]*z[171]*z[20]*z[45]*z[82];
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = 0;
  ar[160] = 0;
  ar[161] = 0;
  ar[162] = z[293];
  ar[163] = 0;
  ar[164] = 0;
  ar[165] = 0;
  ar[166] = 0;
  ar[167] = 0;
  ar[168] = 0;
  ar[169] = 0;
  ar[170] = 0;
  ar[171] = 0;
  ar[172] = 0;
  ar[173] = 0;
  ar[174] = 0;
  ar[175] = 0;
  ar[176] = 0;
  ar[177] = 0;
  ar[178] = 0;
  ar[179] = 0;
  ar[180] = z[151];
  ar[181] = z[362];
  ar[182] = z[147];
  ar[183] = z[351];
  ar[184] = z[359];
  ar[185] = z[146];
  ar[186] = z[348];
  ar[187] = z[341];
  ar[188] = z[144];
  ar[189] = z[311];
  ar[190] = z[309];
  ar[191] = z[286];
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = -z[139]*z[162]*z[53];
  ar[196] = z[132]*z[162]*z[53];
  ar[197] = z[162]*z[240]*z[53]*(z[207]*z[245] - z[83]);
  ar[198] = 0;
  ar[199] = 0;
  ar[200] = 0;
  ar[201] = 0;
  ar[202] = 0;
  ar[203] = 0;
  ar[204] = 0;
  ar[205] = 0;
  ar[206] = 0;
  ar[207] = z[338];
  ar[208] = z[332];
  ar[209] = z[325];
  ar[210] = z[326];
  ar[211] = z[324];
  ar[212] = z[315];
  ar[213] = z[323];
  ar[214] = z[321];
  ar[215] = 0;
  ar[216] = z[320];
  ar[217] = z[281];
  ar[218] = 0;
  ar[219] = 0;
  ar[220] = 0;
  ar[221] = 0;
  ar[222] = z[293];
  ar[223] = z[288];
  ar[224] = 0;
  ar[225] = 0;
  ar[226] = 0;
  ar[227] = 0;
  ar[228] = z[293];
  ar[229] = 0;
  ar[230] = 0;
  ar[231] = 0;
  ar[232] = 0;
  ar[233] = 0;
  ar[234] = 0;
  ar[235] = 0;
  ar[236] = 0;
  ar[237] = 0;
  ar[238] = 0;
  ar[239] = 0;
  ar[240] = 0;
  ar[241] = 0;
  ar[242] = 0;
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = z[365];
  ar[253] = z[317];
  ar[254] = 0;
  ar[255] = z[335];
  ar[256] = z[257];
  ar[257] = 0;
  ar[258] = z[291];
  ar[259] = z[310];
  ar[260] = 0;
  ar[261] = 0;
  ar[262] = 0;
  ar[263] = 0;
  ar[264] = 0;
  ar[265] = 0;
  ar[266] = 0;
  ar[267] = 0;
  ar[268] = 0;
  ar[269] = 0;
  ar[270] = 0;
  ar[271] = 0;
  ar[272] = 0;
  ar[273] = z[0]*z[171]*(-z[101]*z[214]/z[36] - z[11]*z[176]/z[20] + z[201]/z[20]);
  ar[274] = 0;
  ar[275] = 0;
  ar[276] = z[322];
  ar[277] = 0;
  ar[278] = 0;
  ar[279] = 0;
  ar[280] = 0;
  ar[281] = 0;
  ar[282] = 0;
  ar[283] = 0;
  ar[284] = 0;
  ar[285] = 0;
  ar[286] = 0;
  ar[287] = 0;
  ar[288] = z[346];
  ar[289] = z[305];
  ar[290] = 0;
  ar[291] = z[319];
  ar[292] = z[215];
  ar[293] = 0;
  ar[294] = z[279];
  ar[295] = z[306];
  ar[296] = 0;
  ar[297] = 0;
  ar[298] = 0;
  ar[299] = 0;
  ar[300] = 0;
  ar[301] = 0;
  ar[302] = 0;
  ar[303] = 0;
  ar[304] = 0;
  ar[305] = 0;
  ar[306] = 0;
  ar[307] = 0;
  ar[308] = 0;
  ar[309] = z[322];
  ar[310] = 0;
  ar[311] = 0;
  ar[312] = z[170]*z[182]*(z[20] - 1);
  ar[313] = 0;
  ar[314] = 0;
  ar[315] = 0;
  ar[316] = 0;
  ar[317] = 0;
  ar[318] = 0;
  ar[319] = 0;
  ar[320] = 0;
  ar[321] = 0;
  ar[322] = 0;
  ar[323] = 0;
  ar[324] = z[361];
  ar[325] = z[356];
  ar[326] = z[342];
  ar[327] = z[352];
  ar[328] = z[360];
  ar[329] = z[350];
  ar[330] = z[349];
  ar[331] = z[344];
  ar[332] = z[347];
  ar[333] = z[307];
  ar[334] = z[303];
  ar[335] = z[283];
  ar[336] = 0;
  ar[337] = 0;
  ar[338] = 0;
  ar[339] = z[338];
  ar[340] = z[332];
  ar[341] = z[325];
  ar[342] = 0;
  ar[343] = 0;
  ar[344] = 0;
  ar[345] = 0;
  ar[346] = 0;
  ar[347] = 0;
  ar[348] = 0;
  ar[349] = 0;
  ar[350] = 0;
  ar[351] = z[162]*z[249]*(z[117] + z[60]);
  ar[352] = z[162]*z[192]*z[249]*(z[256]*z[44] + z[263]*z[44] - z[44]);
  ar[353] = -z[162]*z[240]*z[249]*(z[88] - 1);
  ar[354] = 0;
  ar[355] = 0;
  ar[356] = 0;
  ar[357] = 0;
  ar[358] = 0;
  ar[359] = 0;
  ar[360] = z[376];
  ar[361] = z[374];
  ar[362] = z[369];
  ar[363] = z[373];
  ar[364] = z[375];
  ar[365] = z[371];
  ar[366] = z[370];
  ar[367] = z[368];
  ar[368] = z[367];
  ar[369] = z[343];
  ar[370] = z[337];
  ar[371] = z[328];
  ar[372] = 0;
  ar[373] = 0;
  ar[374] = 0;
  ar[375] = z[326];
  ar[376] = z[324];
  ar[377] = z[315];
  ar[378] = 0;
  ar[379] = 0;
  ar[380] = 0;
  ar[381] = 0;
  ar[382] = 0;
  ar[383] = 0;
  ar[384] = 0;
  ar[385] = 0;
  ar[386] = 0;
  ar[387] = 0;
  ar[388] = 0;
  ar[389] = 0;
  ar[390] = -z[162]*(z[125] - z[207]*z[259]*z[60] + z[210]*z[261] + z[234]*z[259]*z[60] - z[241]*z[256] - z[241]*z[263] - z[243]*z[261]);
  ar[391] = -z[162]*(z[122] + z[178]*z[204]*z[261] + z[190]*z[226]*z[263] - z[192]*z[230]*z[261] - z[192]*z[234]*z[259]*z[44] - z[209]*z[224]*z[249] + z[209]*z[259]*z[44]);
  ar[392] = z[162]*z[240]*(-z[0]*z[234]*z[249] + z[0] + z[199]*z[200]*z[249] + z[207]*z[259] - z[234]*z[259] - z[261]);
  ar[393] = z[345];
  ar[394] = z[336];
  ar[395] = z[327];
  ar[396] = z[366];
  ar[397] = z[364];
  ar[398] = z[354];
  ar[399] = z[358];
  ar[400] = z[363];
  ar[401] = z[355];
  ar[402] = z[340];
  ar[403] = z[333];
  ar[404] = z[334];
  ar[405] = z[318];
  ar[406] = z[316];
  ar[407] = z[312];
  ar[408] = 0;
  ar[409] = 0;
  ar[410] = 0;
  ar[411] = z[323];
  ar[412] = z[321];
  ar[413] = 0;
  ar[414] = 0;
  ar[415] = 0;
  ar[416] = 0;
  ar[417] = 0;
  ar[418] = 0;
  ar[419] = 0;
  ar[420] = 0;
  ar[421] = 0;
  ar[422] = 0;
  ar[423] = 0;
  ar[424] = 0;
  ar[425] = 0;
  ar[426] = z[345];
  ar[427] = z[336];
  ar[428] = z[327];
  ar[429] = z[162]*(z[241] - z[60]);
  ar[430] = z[162]*z[192]*(-z[224] + z[44]);
  ar[431] = 0;
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gif_ud_zero(double ar[12]) const;
void Bicycle::gif_ud_zero(double ar[12]) const
{
  double z[92];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = state_[10] + state_[8]*z[0];
  z[11] = pow(z[10], 2);
  z[12] = -z[10];
  z[13] = z[7] + z[9];
  z[14] = state_[8]*z[3]*z[4] + state_[9]*z[1];
  z[15] = state_[8]*z[1]*z[3] - state_[9]*z[4];
  z[16] = -state_[12] - z[10];
  z[17] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[18] = -z[17];
  z[19] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[20] = sqrt(z[13]*z[8]);
  z[21] = -state_[11] - z[14];
  z[22] = z[7]*z[8] + z[8]*z[9];
  z[23] = sqrt(z[22]);
  z[24] = pow(z[22], 3.0L/2.0L);
  z[25] = state_[9]*z[0]*z[3]*z[7] + state_[9]*z[0]*z[3]*z[9];
  z[26] = -state_[10]*state_[8]*z[1]*z[3] + state_[10]*state_[9]*z[4] - state_[8]*state_[9]*z[0]*z[4];
  z[27] = -state_[10]*state_[8]*z[3]*z[4] - state_[10]*state_[9]*z[1] + state_[8]*state_[9]*z[0]*z[1];
  z[28] = -z[12]*z[5] + z[15]*z[2];
  z[29] = -z[12]*z[2] - z[15]*z[5];
  z[30] = state_[13] + z[28];
  z[31] = pow(z[28], 2);
  z[32] = rear_.a*z[14] + rear_.b*z[15];
  z[33] = -rear_.Ixx*z[15] + rear_.Ixz*z[14];
  z[34] = -rear_.Ixz*z[15] + rear_.Izz*z[14];
  z[35] = rear_.R*z[1]*z[3]/z[23] + rear_.r*z[1]*z[3];
  z[36] = -rear_.R*z[3]*z[4]/z[23] - rear_.r*z[3]*z[4];
  z[37] = -state_[10]*z[3]*z[4]*z[5] + state_[11]*z[0]*z[5] + state_[11]*z[1]*z[2]*z[3] + state_[9]*z[0]*z[1]*z[5] + state_[9]*z[2]*z[3];
  z[38] = state_[10]*z[2]*z[3]*z[4] - state_[11]*z[0]*z[2] + state_[11]*z[1]*z[3]*z[5] - state_[9]*z[0]*z[1]*z[2] + state_[9]*z[3]*z[5];
  z[39] = front_.Ixx*z[29] - front_.Ixz*z[21];
  z[40] = front_.Ixz*z[29] - front_.Izz*z[21];
  z[41] = -front_.R*z[3]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) - front_.r*z[3]*z[4];
  z[42] = -front_.a*z[21] - front_.b*z[29];
  z[43] = state_[11]*z[12]*z[2] + state_[11]*z[15]*z[5] + state_[8]*state_[9]*z[3]*z[5] - z[2]*z[27];
  z[44] = -state_[11]*z[12]*z[5] + state_[11]*z[15]*z[2] + state_[8]*state_[9]*z[2]*z[3] + z[27]*z[5];
  z[45] = -front_.R*z[18]/sqrt(pow(z[18], 2) + z[8]*z[9]) - front_.r*z[18];
  z[46] = state_[10]*z[1]*z[4]*z[8] + state_[9]*z[0]*z[3]*z[9] - z[18]*z[37];
  z[47] = rear_.Iyy*state_[8]*state_[9]*z[3] + z[14]*z[33] + z[15]*z[34];
  z[48] = rear_.Ixx*z[27] + rear_.Ixz*z[26] + rear_.Iyy*z[12]*z[14] - rear_.J*state_[12]*z[14] - z[12]*z[34];
  z[49] = rear_.R*state_[10]*z[1]*z[3]/z[23] + rear_.R*state_[9]*z[0]*z[4]/z[23] - rear_.R*z[25]*z[3]*z[4]/z[24] + rear_.r*state_[10]*z[1]*z[3] + rear_.r*state_[9]*z[0]*z[4];
  z[50] = rear_.R*state_[10]*z[3]*z[4]/z[23] - rear_.R*state_[9]*z[0]*z[1]/z[23] + rear_.R*z[1]*z[25]*z[3]/z[24] + rear_.r*state_[10]*z[3]*z[4] - rear_.r*state_[9]*z[0]*z[1];
  z[51] = rear_.r*z[0]*z[14] + state_[14]*z[3]*z[4]/z[23] + state_[15]*z[0]*z[1]*z[3]/z[23] - state_[16]*z[1]*z[3] - z[16]*z[36];
  z[52] = rear_.Ixz*z[27] + rear_.Iyy*z[12]*z[15] + rear_.Izz*z[26] - rear_.J*state_[12]*z[15] + z[12]*z[33];
  z[53] = rear_.r*z[0]*z[15] + state_[14]*z[1]*z[3]/z[23] - state_[15]*z[0]*z[3]*z[4]/z[23] + state_[16]*z[3]*z[4] + z[16]*z[35];
  z[54] = state_[15]*(z[7]*z[8]/z[23] + z[8]*z[9]/z[23]) + state_[16]*z[0] + z[14]*z[35] + z[15]*z[36];
  z[55] = front_.Iyy*z[43] - z[21]*z[39] - z[29]*z[40];
  z[56] = front_.R*state_[10]*z[1]*z[3]/sqrt(pow(z[18], 2) + z[8]*z[9]) + front_.R*state_[9]*z[0]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) - front_.R*z[3]*z[4]*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) + front_.r*state_[10]*z[1]*z[3] + front_.r*state_[9]*z[0]*z[4];
  z[57] = front_.r*z[19]*z[21] + state_[17]*z[3]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[18]*z[18]*z[19]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[19]*z[18] + z[30]*z[41];
  z[58] = front_.Ixx*z[44] + front_.Ixz*z[26] + front_.Iyy*z[21]*z[28] + front_.J*state_[13]*z[21] + z[28]*z[40];
  z[59] = front_.R*z[18]*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[37]/sqrt(pow(z[18], 2) + z[8]*z[9]) + front_.r*z[37];
  z[60] = front_.r*z[19]*z[29] - state_[17]*z[18]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[18]*z[19]*z[3]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[19]*z[3]*z[4] - z[30]*z[45];
  z[61] = front_.Ixz*z[44] + front_.Iyy*z[28]*z[29] + front_.Izz*z[26] + front_.J*state_[13]*z[29] - z[28]*z[39];
  z[62] = state_[18]*(pow(z[18], 2)/sqrt(pow(z[18], 2) + z[8]*z[9]) + z[8]*z[9]/sqrt(pow(z[18], 2) + z[8]*z[9])) - state_[19]*z[19] - z[21]*z[45] - z[29]*z[41];
  z[63] = rear_.a*z[11] - rear_.b*state_[8]*state_[9]*z[3] - rear_.r*state_[9]*z[14]*z[3] - rear_.r*z[0]*z[26] + state_[10]*state_[14]*z[1]*z[3]/z[23] - state_[10]*state_[15]*z[0]*z[3]*z[4]/z[23] + state_[10]*state_[16]*z[3]*z[4] + state_[14]*state_[9]*z[0]*z[4]/z[23] - state_[14]*z[25]*z[3]*z[4]/z[24] + state_[15]*state_[9]*z[1]*z[6]/z[23] - state_[15]*state_[9]*z[1]*z[8]/z[23] - state_[15]*z[0]*z[1]*z[25]*z[3]/z[24] - state_[16]*state_[9]*z[0]*z[1] - state_[8]*state_[9]*z[3]*z[36] + z[12]*z[53] + z[14]*z[32] + z[14]*z[54] + z[16]*z[49];
  z[64] = -rear_.a*state_[8]*state_[9]*z[3] - rear_.b*z[11] + rear_.r*state_[9]*z[15]*z[3] - rear_.r*z[0]*z[27] + state_[10]*state_[14]*z[3]*z[4]/z[23] + state_[10]*state_[15]*z[0]*z[1]*z[3]/z[23] - state_[10]*state_[16]*z[1]*z[3] - state_[14]*state_[9]*z[0]*z[1]/z[23] + state_[14]*z[1]*z[25]*z[3]/z[24] + state_[15]*state_[9]*z[4]*z[6]/z[23] - state_[15]*state_[9]*z[4]*z[8]/z[23] - state_[15]*z[0]*z[25]*z[3]*z[4]/z[24] - state_[16]*state_[9]*z[0]*z[4] - state_[8]*state_[9]*z[3]*z[35] + z[12]*z[51] - z[15]*z[32] - z[15]*z[54] + z[16]*z[50];
  z[65] = rear_.a*z[12]*z[15] + rear_.a*z[26] - rear_.b*z[12]*z[14] - rear_.b*z[27] - state_[15]*(2*state_[9]*z[0]*z[3]*z[7]/z[23] + 2*state_[9]*z[0]*z[3]*z[9]/z[23] - z[25]*z[7]*z[8]/z[24] - z[25]*z[8]*z[9]/z[24]) + state_[16]*state_[9]*z[3] + z[14]*z[50] + z[14]*z[51] + z[15]*z[49] + z[15]*z[53] + z[26]*z[35] - z[27]*z[36];
  z[66] = -front_.a*z[31] + front_.b*z[43] - front_.r*z[19]*z[26] - front_.r*z[21]*z[38] - state_[10]*state_[17]*z[1]*z[3]/sqrt(pow(z[18], 2) + z[8]*z[9]) - state_[17]*state_[9]*z[0]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[17]*z[3]*z[4]*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[18]*z[19]*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[18]*z[38]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[18]*z[19]*z[37]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[19]*z[37] + z[21]*z[42] + z[21]*z[62] + z[28]*z[60] + z[30]*z[56] + z[41]*z[43];
  z[67] = -front_.a*z[43] - front_.b*z[31] + front_.r*z[19]*z[44] - front_.r*z[29]*z[38] - state_[10]*state_[18]*z[1]*z[19]*z[3]/sqrt(pow(z[18], 2) + z[8]*z[9]) - state_[10]*state_[19]*z[1]*z[3] - state_[17]*z[18]*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*z[37]/sqrt(pow(z[18], 2) + z[8]*z[9]) - state_[18]*state_[9]*z[0]*z[19]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) + state_[18]*z[19]*z[3]*z[4]*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[3]*z[38]*z[4]/sqrt(pow(z[18], 2) + z[8]*z[9]) - state_[19]*state_[9]*z[0]*z[4] - z[28]*z[57] + z[29]*z[42] + z[29]*z[62] + z[30]*z[59] - z[43]*z[45];
  z[68] = -front_.a*z[26] - front_.a*z[28]*z[29] + front_.b*z[21]*z[28] + front_.b*z[44] - state_[18]*(-2*state_[10]*z[1]*z[4]*z[8]/sqrt(pow(z[18], 2) + z[8]*z[9]) - 2*state_[9]*z[0]*z[3]*z[9]/sqrt(pow(z[18], 2) + z[8]*z[9]) + pow(z[18], 2)*z[46]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L) + 2*z[18]*z[37]/sqrt(pow(z[18], 2) + z[8]*z[9]) + z[46]*z[8]*z[9]/pow(pow(z[18], 2) + z[8]*z[9], 3.0L/2.0L)) - state_[19]*z[38] + z[21]*z[57] - z[21]*z[59] - z[26]*z[45] + z[29]*z[56] + z[29]*z[60] + z[41]*z[44];
  z[69] = -front_.a;
  z[70] = -front_.b;
  z[71] = -rear_.b;
  z[72] = -front_.m;
  z[73] = -rear_.m;
  z[74] = -z[4]*z[69];
  z[75] = -z[2]*z[70];
  z[76] = -z[5]*z[70];
  z[77] = -z[3]*z[73];
  z[78] = rear_.r*z[0];
  z[79] = state_[9]*z[3];
  z[80] = -z[0];
  z[81] = -z[1];
  z[82] = -z[2];
  z[83] = -z[4];
  z[84] = -z[5];
  z[85] = -z[3]*z[81];
  z[86] = -z[3]*z[83];
  z[87] = z[8]*z[9];
  z[88] = -front_.r*z[19];
  z[89] = -z[80]/z[20];
  z[90] = -z[19]/sqrt(pow(z[18], 2) + z[87]);
  z[91] = z[41]*z[83];

  ar[0] = -z[18]*z[58] + z[19]*z[55] + z[47]*z[80] + z[48]*z[85] - z[52]*z[86] - z[61]*z[86] + z[72]*(z[66]*(-z[19]*z[41] + z[19]*z[70] + z[86]*z[88]) + z[67]*(-z[18]*z[88] + z[19]*z[45] - z[19]*z[69]) - z[68]*(-z[18]*z[41] + z[18]*z[70] + z[3]*z[74] + z[45]*z[86])) + z[73]*(-z[63]*(-z[36]*z[80] + z[71]*z[80] + z[78]*z[86]) - z[64]*(-rear_.a*z[80] - z[35]*z[80] - z[78]*z[85]) + z[65]*(rear_.a*z[86] + z[35]*z[86] + z[36]*z[85] - z[71]*z[85]));
  ar[1] = z[48]*z[83] + z[52]*z[81] + z[55]*z[82]*z[83] - z[58]*z[83]*z[84] + z[61]*z[81] + z[72]*(z[66]*(z[75]*z[83] - z[81]*z[88] - z[82]*z[91]) + z[67]*(z[45]*z[82]*z[83] - z[74]*z[82] - z[83]*z[84]*z[88]) - z[68]*(-z[45]*z[81] + z[69]*z[81] + z[76]*z[83] - z[84]*z[91])) + z[73]*(z[63]*z[78]*z[81] + z[64]*z[78]*z[83] + z[65]*(-rear_.a*z[81] - z[35]*z[81] + z[36]*z[83] - z[71]*z[83]));
  ar[2] = -z[47] + z[55]*z[84] + z[58]*z[82] + z[72]*(z[66]*(-z[41]*z[84] + z[76]) + z[67]*(z[45]*z[84] - z[69]*z[84] + z[82]*z[88]) + z[68]*(-z[41]*z[82] + z[75])) + z[73]*(z[63]*(-z[36] + z[71]) - z[64]*(rear_.a + z[35]));
  ar[3] = -z[61] + z[72]*(z[66]*z[88] + z[68]*(-z[45] + z[69]));
  ar[4] = -rear_.J*state_[8]*z[79] - z[73]*(z[35]*z[64] + z[36]*z[63]);
  ar[5] = -front_.J*z[43] + z[72]*(z[41]*z[66] - z[45]*z[67]);
  ar[6] = z[77]*(-z[63]*z[83] + z[64]*z[81])/z[20];
  ar[7] = -z[77]*(z[13]*z[3]*z[65]/z[23] + z[63]*z[81]*z[89] + z[64]*z[83]*z[89]);
  ar[8] = z[73]*(z[63]*z[85] + z[64]*z[86] - z[65]*z[80]);
  ar[9] = -z[72]*(z[18]*z[67] - z[66]*z[86])/sqrt(pow(z[18], 2) + z[87]);
  ar[10] = -z[72]*(z[18]*z[66]*z[90] + z[67]*z[86]*z[90] + z[68]*sqrt(pow(z[18], 2) + z[87]));
  ar[11] = z[72]*(z[18]*z[66] + z[19]*z[68] + z[67]*z[86]);
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gif_ud_zero_steady(double ar[12]) const;
void Bicycle::gif_ud_zero_steady(double ar[12]) const
{
  double z[77];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(state_[8], 2);
  z[7] = pow(z[0], 2);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[4], 2);
  z[11] = state_[12] + state_[8]*z[0];
  z[12] = z[10] + z[8];
  z[13] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[14] = -z[13];
  z[15] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[16] = state_[8]*z[0]*z[5] + state_[8]*z[1]*z[2]*z[3];
  z[17] = rear_.a*state_[8]*z[3]*z[4] + rear_.b*state_[8]*z[1]*z[3];
  z[18] = sqrt(z[12]*z[9]);
  z[19] = state_[8]*z[0]*z[2] - state_[8]*z[1]*z[3]*z[5];
  z[20] = rear_.Ixx*state_[8]*z[1]*z[3] - rear_.Ixz*state_[8]*z[3]*z[4];
  z[21] = rear_.Ixz*state_[8]*z[1]*z[3] - rear_.Izz*state_[8]*z[3]*z[4];
  z[22] = -z[16];
  z[23] = -state_[13] - z[16];
  z[24] = sqrt(z[10]*z[9] + z[8]*z[9]);
  z[25] = front_.Ixx*z[19] + front_.Ixz*state_[8]*z[3]*z[4];
  z[26] = front_.Ixz*z[19] + front_.Izz*state_[8]*z[3]*z[4];
  z[27] = front_.a*state_[8]*z[3]*z[4] - front_.b*z[19];
  z[28] = rear_.R*z[1]*z[3]/z[24] + rear_.r*z[1]*z[3];
  z[29] = -rear_.R*z[3]*z[4]/z[24] - rear_.r*z[3]*z[4];
  z[30] = -rear_.Iyy*state_[8]*z[0]*z[1]*z[3] - rear_.J*state_[12]*z[1]*z[3] + z[0]*z[20];
  z[31] = -rear_.Iyy*state_[8]*z[0]*z[3]*z[4] - rear_.J*state_[12]*z[3]*z[4] - z[0]*z[21];
  z[32] = front_.R*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[14], 2)) + front_.r*z[3]*z[4];
  z[33] = front_.R*z[14]/sqrt(z[10]*z[9] + pow(z[14], 2)) + front_.r*z[14];
  z[34] = -front_.Iyy*state_[8]*z[22]*z[3]*z[4] + front_.J*state_[13]*state_[8]*z[3]*z[4] + z[22]*z[26];
  z[35] = state_[8]*z[25]*z[3]*z[4] - z[19]*z[26];
  z[36] = -front_.Iyy*z[19]*z[22] + front_.J*state_[13]*z[19] + z[22]*z[25];
  z[37] = rear_.r*state_[8]*z[0]*z[1]*z[3] + state_[14]*z[1]*z[3]/z[24] - state_[15]*z[0]*z[3]*z[4]/z[24] + state_[16]*z[3]*z[4] - z[11]*z[28];
  z[38] = rear_.r*state_[8]*z[0]*z[3]*z[4] + state_[14]*z[3]*z[4]/z[24] + state_[15]*z[0]*z[1]*z[3]/z[24] - state_[16]*z[1]*z[3] + z[11]*z[29];
  z[39] = state_[15]*(z[10]*z[9]/z[24] + z[8]*z[9]/z[24]) + state_[16]*z[0] + state_[8]*z[1]*z[29]*z[3] + state_[8]*z[28]*z[3]*z[4];
  z[40] = -front_.r*state_[8]*z[15]*z[3]*z[4] + state_[17]*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[14], 2)) + state_[18]*z[14]*z[15]/sqrt(z[10]*z[9] + pow(z[14], 2)) + state_[19]*z[14] + z[23]*z[32];
  z[41] = front_.r*z[15]*z[19] - state_[17]*z[14]/sqrt(z[10]*z[9] + pow(z[14], 2)) + state_[18]*z[15]*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[14], 2)) + state_[19]*z[3]*z[4] - z[23]*z[33];
  z[42] = state_[18]*(z[10]*z[9]/sqrt(z[10]*z[9] + pow(z[14], 2)) + pow(z[14], 2)/sqrt(z[10]*z[9] + pow(z[14], 2))) - state_[19]*z[15] - state_[8]*z[3]*z[33]*z[4] + z[19]*z[32];
  z[43] = -rear_.a*state_[8]*z[0]*z[1] + rear_.b*state_[8]*z[0]*z[4] + z[1]*z[37] + z[38]*z[4];
  z[44] = -rear_.a*z[0]*z[1]*z[3]*z[6] + rear_.b*z[0]*z[3]*z[4]*z[6] + state_[8]*z[1]*z[3]*z[37] + state_[8]*z[3]*z[38]*z[4];
  z[45] = -rear_.a*state_[8]*z[7] + z[0]*z[37] - z[17]*z[3]*z[4] - z[3]*z[39]*z[4];
  z[46] = -rear_.b*state_[8]*z[7] - z[0]*z[38] - z[1]*z[17]*z[3] - z[1]*z[3]*z[39];
  z[47] = -rear_.a*z[6]*z[7] + state_[8]*z[0]*z[37] - state_[8]*z[17]*z[3]*z[4] - state_[8]*z[3]*z[39]*z[4];
  z[48] = -rear_.b*z[6]*z[7] - state_[8]*z[0]*z[38] - state_[8]*z[1]*z[17]*z[3] - state_[8]*z[1]*z[3]*z[39];
  z[49] = front_.a*z[19]*z[22] + front_.b*state_[8]*z[22]*z[3]*z[4] - state_[8]*z[3]*z[4]*z[40] + z[19]*z[41];
  z[50] = front_.b*pow(z[22], 2) - z[19]*z[27] - z[19]*z[42] - z[22]*z[40];
  z[51] = -front_.a*pow(z[22], 2) - state_[8]*z[27]*z[3]*z[4] - state_[8]*z[3]*z[4]*z[42] - z[22]*z[41];
  z[52] = -front_.a;
  z[53] = -rear_.a;
  z[54] = -front_.b;
  z[55] = -rear_.b;
  z[56] = -front_.m;
  z[57] = -rear_.m;
  z[58] = -state_[8];
  z[59] = -z[4]*z[52];
  z[60] = -z[2]*z[54];
  z[61] = -z[5]*z[54];
  z[62] = rear_.r*z[0];
  z[63] = -z[3]*z[58];
  z[64] = -z[1];
  z[65] = -z[4];
  z[66] = -z[5];
  z[67] = -z[6];
  z[68] = -z[3]*z[64];
  z[69] = -z[3]*z[65];
  z[70] = z[65]*z[66];
  z[71] = -z[67]*z[9];
  z[72] = z[10]*z[9];
  z[73] = -front_.r*z[15];
  z[74] = z[0]/z[18];
  z[75] = -z[14]*z[15];
  z[76] = z[2]*z[32];

  ar[0] = z[0]*z[3]*z[58]*(z[20]*z[65] + z[21]*z[64]) + z[14]*z[34] + z[15]*z[35] + z[30]*z[63]*z[65] - z[31]*z[63]*z[64] - z[36]*z[69] + z[56]*(-z[49]*(z[14]*z[32] + z[14]*z[54] + z[3]*z[59] - z[33]*z[69]) - z[50]*(-z[14]*z[73] - z[15]*z[33] - z[15]*z[52]) + z[51]*(z[15]*z[32] + z[15]*z[54] + z[69]*z[73])) + z[57]*(z[44]*(z[28]*z[69] + z[29]*z[68] - z[53]*z[69] - z[55]*z[68]) + z[47]*(z[0]*z[29] - z[0]*z[55] + z[62]*z[69]) - z[48]*(z[0]*z[28] - z[0]*z[53] - z[62]*z[68]));
  ar[1] = -z[2]*z[35]*z[65] - z[30]*z[58]*z[64] - z[31]*z[58]*z[65] + z[34]*z[70] + z[36]*z[64] + z[56]*(-z[49]*(z[32]*z[70] + z[33]*z[64] + z[52]*z[64] + z[61]*z[65]) - z[50]*(z[2]*z[33]*z[65] + z[2]*z[59] - z[70]*z[73]) + z[51]*(z[60]*z[65] - z[64]*z[73] - z[65]*z[76])) + z[57]*(z[44]*(-z[28]*z[64] + z[29]*z[65] + z[53]*z[64] - z[55]*z[65]) - z[47]*z[62]*z[64] + z[48]*z[62]*z[65]);
  ar[2] = z[2]*z[34] + z[35]*z[66] + z[56]*(z[49]*(z[60] - z[76]) + z[50]*(z[2]*z[73] + z[33]*z[66] + z[52]*z[66]) + z[51]*(z[32]*z[66] + z[61])) - z[57]*(z[47]*(-z[29] + z[55]) + z[48]*(z[28] - z[53])) - z[64]*z[71]*(rear_.Ixz*z[1] + rear_.Izz*z[65]) - z[65]*z[71]*(rear_.Ixx*z[1] + rear_.Ixz*z[65]);
  ar[3] = front_.Iyy*z[67]*z[75] + front_.J*state_[13]*z[14]*z[58] + z[15]*z[25]*z[58] + z[56]*(z[49]*(z[33] + z[52]) + z[51]*z[73]);
  ar[4] = -z[57]*z[63]*(rear_.R/z[24] + rear_.r)*(-z[45]*z[65] - z[46]*z[64]);
  ar[5] = z[56]*(front_.R/sqrt(pow(z[14], 2) + z[72]) + front_.r)*(-z[14]*z[50] - z[51]*z[69]);
  ar[6] = -z[57]*z[63]*(z[45]*z[65] + z[46]*z[64])/z[18];
  ar[7] = z[57]*z[63]*(z[12]*z[43]*z[9]/z[24] - z[45]*z[64]*z[74] + z[46]*z[65]*z[74]);
  ar[8] = -z[57]*z[63]*(-z[0]*z[43] - z[45]*z[64] + z[46]*z[65]);
  ar[9] = -z[56]*(-z[14]*z[50] - z[51]*z[69])/sqrt(pow(z[14], 2) + z[72]);
  ar[10] = -z[56]*(z[15]*z[50]*z[69]/sqrt(pow(z[14], 2) + z[72]) + z[49]*sqrt(pow(z[14], 2) + z[72]) + z[51]*z[75]/sqrt(pow(z[14], 2) + z[72]));
  ar[11] = z[56]*(z[14]*z[51] + z[15]*z[49] - z[50]*z[69]);
}

/** Computes the n-d array of shape (12, 7)
 *
 * @param[out] ar a C-array of with 84 elements
 */
//  void Bicycle::gif_ud_zero_steady_dudu(double ar[84]) const;
void Bicycle::gif_ud_zero_steady_dudu(double ar[84]) const
{
  double z[115];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = z[7] + z[9];
  z[11] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[12] = rear_.a*z[3]*z[4] + rear_.b*z[1]*z[3];
  z[13] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[14] = -z[13];
  z[15] = rear_.Ixx*z[1]*z[3] - rear_.Ixz*z[3]*z[4];
  z[16] = -z[11];
  z[17] = sqrt(z[10]*z[8]);
  z[18] = z[7]*z[8] + z[8]*z[9];
  z[19] = sqrt(z[18]);
  z[20] = front_.Ixx*z[14] + front_.Ixz*z[3]*z[4];
  z[21] = z[18] + z[6];
  z[22] = front_.a*z[3]*z[4] - front_.b*z[14];
  z[23] = rear_.R/z[19] + rear_.r;
  z[24] = rear_.R*z[1]*z[3]/z[19] + rear_.a;
  z[25] = -rear_.R*z[3]*z[4]/z[19] + rear_.b;
  z[26] = -front_.Ixz*z[14] + front_.Iyy*z[3]*z[4] - front_.Izz*z[3]*z[4];
  z[27] = front_.R/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.r;
  z[28] = rear_.R*z[1]*z[3]/z[19] + rear_.r*z[1]*z[3];
  z[29] = rear_.r*z[1]*z[3] + z[24];
  z[30] = -rear_.R*z[3]*z[4]/z[19] - rear_.r*z[3]*z[4];
  z[31] = -front_.R*z[3]*z[4]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.b;
  z[32] = rear_.r*z[3]*z[4] - z[25];
  z[33] = front_.R*z[3]*z[4]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.r*z[3]*z[4];
  z[34] = -front_.r*z[3]*z[4] + z[31];
  z[35] = rear_.r*z[0]*z[1]*z[3] - z[0]*z[28];
  z[36] = rear_.r*z[0]*z[3]*z[4] + z[0]*z[30];
  z[37] = front_.R*z[14]/sqrt(pow(z[14], 2) + z[8]*z[9]) - front_.a;
  z[38] = front_.b*z[2] - z[2]*z[33];
  z[39] = front_.b*z[5] - z[33]*z[5];
  z[40] = front_.R*z[14]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.r*z[14];
  z[41] = front_.r*z[14] + z[37];
  z[42] = -z[14]*(front_.Ixz*z[14] + front_.Izz*z[3]*z[4]) + z[20]*z[3]*z[4];
  z[43] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[16] + z[2]*z[33]*z[4];
  z[44] = z[1]*z[28] - z[30]*z[4];
  z[45] = -front_.r*z[16]*z[3]*z[4] + z[16]*z[33];
  z[46] = z[1]*z[3]*z[30] + z[28]*z[3]*z[4];
  z[47] = pow(z[14], 2)/sqrt(pow(z[14], 2) + z[8]*z[9]) + z[8]*z[9]/sqrt(pow(z[14], 2) + z[8]*z[9]);
  z[48] = rear_.a*z[1] - rear_.b*z[4] + z[44];
  z[49] = rear_.a*z[4] + rear_.b*z[1] + z[1]*z[30] + z[28]*z[4];
  z[50] = front_.a*z[5] - front_.r*z[16]*z[2] - z[40]*z[5];
  z[51] = front_.a*z[2]*z[4] + front_.r*z[16]*z[4]*z[5] - z[2]*z[4]*z[40];
  z[52] = front_.r*z[14]*z[16] - z[16]*z[40];
  z[53] = -rear_.a*z[0]*z[1] + rear_.b*z[0]*z[4] + z[1]*z[35] + z[36]*z[4];
  z[54] = -rear_.a*z[0]*z[1]*z[3] + rear_.b*z[0]*z[3]*z[4] + z[1]*z[3]*z[35] + z[3]*z[36]*z[4];
  z[55] = front_.a*z[1] - front_.b*z[4]*z[5] - z[1]*z[40] + z[33]*z[4]*z[5];
  z[56] = -z[14]*z[33] + z[3]*z[4]*z[40];
  z[57] = -z[14]*z[40] - z[3]*z[33]*z[4];
  z[58] = z[22] - z[56];
  z[59] = -rear_.a*z[6] + z[0]*z[35] - z[12]*z[3]*z[4] - z[3]*z[4]*z[46];
  z[60] = -rear_.b*z[6] - z[0]*z[36] - z[1]*z[12]*z[3] - z[1]*z[3]*z[46];
  z[61] = -front_.a*z[14]*z[16] - front_.b*z[16]*z[3]*z[4] - z[14]*z[52] + z[3]*z[4]*z[45];
  z[62] = -front_.b*pow(z[16], 2) + z[14]*z[22] - z[14]*z[56] + z[16]*z[45];
  z[63] = front_.a*pow(z[16], 2) + z[16]*z[52] + z[22]*z[3]*z[4] - z[3]*z[4]*z[56];
  z[64] = -front_.a;
  z[65] = -rear_.b;
  z[66] = -front_.m;
  z[67] = -rear_.m;
  z[68] = rear_.Ixz*z[1];
  z[69] = rear_.J*z[3];
  z[70] = -z[2]*z[64];
  z[71] = -z[0]*z[67];
  z[72] = -z[3]*z[67];
  z[73] = rear_.r*z[0];
  z[74] = -z[1];
  z[75] = -z[2];
  z[76] = -z[3];
  z[77] = -z[4];
  z[78] = -z[5];
  z[79] = z[74]*z[76];
  z[80] = z[76]*z[77];
  z[81] = rear_.r*z[6];
  z[82] = -z[76]*z[9];
  z[83] = z[8]*z[9];
  z[84] = z[10]*z[8];
  z[85] = -front_.r*z[16];
  z[86] = front_.J*z[14];
  z[87] = z[6]/z[10];
  z[88] = z[0]/z[17];
  z[89] = z[6]/z[17];
  z[90] = z[7]/z[17];
  z[91] = z[9]/z[17];
  z[92] = -1/z[19];
  z[93] = z[0]*(-rear_.Iyy*z[1]*z[3] + z[15]);
  z[94] = z[0]*(-rear_.Ixz*z[1]*z[3] - rear_.Iyy*z[3]*z[4] + rear_.Izz*z[3]*z[4]);
  z[95] = -z[21]*z[67];
  z[96] = -z[23]*z[76];
  z[97] = -z[14]*z[16];
  z[98] = -z[66]/sqrt(pow(z[14], 2) + z[83]);
  z[99] = z[23]*z[6];
  z[100] = -sqrt(pow(z[14], 2) + z[83]);
  z[101] = -z[24]*z[77];
  z[102] = -z[25]*z[74];
  z[103] = z[10]*z[76]*z[92];
  z[104] = -z[83]/z[100];
  z[105] = z[16]/z[100];
  z[106] = -z[105]*z[16];
  z[107] = -z[16]*z[26];
  z[108] = -z[34]*z[78];
  z[109] = pow(z[16], 2)*z[27];
  z[110] = -z[16]*(front_.Iyy*z[14] - z[20]);
  z[111] = z[16]*z[33];
  z[112] = -z[40]*z[75];
  z[113] = -z[16]*z[40];
  z[114] = -z[59]*z[74];

  ar[0] = z[0]*z[76]*(z[15]*z[77] + z[74]*(-rear_.Izz*z[80] - z[68]*z[76])) - z[110]*z[80] + z[16]*z[42] + z[26]*z[97] + z[66]*(z[58]*z[61] + z[62]*(-z[16]*z[64] + z[52]) - z[63]*(-front_.b*z[16] + z[45])) + z[67]*(z[54]*(z[12] + z[46]) + z[59]*(-z[0]*z[65] + z[36]) - z[60]*(rear_.a*z[0] - z[35])) + z[79]*z[94] - z[80]*z[93];
  ar[1] = z[72]*(z[101]*z[99] + z[102]*z[99] - z[44]*z[49]*z[76]);
  ar[2] = z[66]*(z[109]*z[37]*z[80] - z[16]*z[27]*z[31]*z[97] + z[57]*z[58]);
  ar[3] = -z[72]*(z[101]*z[89] + z[102]*z[89] - z[49]*z[84]*z[92]);
  ar[4] = -z[21]*z[71]*z[76]*z[92]*(-z[24]*z[74] + z[25]*z[77]);
  ar[5] = -z[66]*(z[100]*z[58] + z[105]*z[31]*z[97] + z[106]*z[37]*z[80]);
  ar[6] = -z[16]*z[98]*(-z[14]*z[37] + z[31]*z[80])*(pow(z[14], 2) + pow(z[16], 2) + z[83]);
  ar[7] = z[107]*z[77]*z[78] + z[110]*z[74] + z[42]*z[75]*z[77] + z[66]*(-z[43]*z[63] + z[51]*z[62] + z[55]*z[61]) + z[67]*(z[114]*z[73] + z[48]*z[54] + z[60]*z[73]*z[77]) + z[74]*z[93] + z[77]*z[94];
  ar[8] = -z[67]*(-z[28]*z[74]*z[81] + z[30]*z[77]*z[81] + z[48]*(z[28]*z[79] - z[30]*z[80])) + z[69]*z[7] + z[69]*z[9];
  ar[9] = -front_.J*z[78]*z[82] + z[66]*(-z[111]*z[51] + z[113]*z[43] + z[55]*z[57]) + z[74]*z[86];
  ar[10] = -z[72]*(z[103]*z[48] + z[81]*z[90] + z[81]*z[91]);
  ar[11] = 0;
  ar[12] = -z[66]*(z[100]*z[55] + z[105]*z[82]*(-z[112] + z[70] + z[78]*z[85]) - z[43]*z[97]/z[100]);
  ar[13] = -z[77]*z[98]*(z[14]*(z[112] - z[70] - z[78]*z[85]) - z[43]*z[76])*(pow(z[14], 2) + pow(z[16], 2) + z[83]);
  ar[14] = -z[107]*z[75] + z[42]*z[78] + z[66]*(-z[38]*z[61] - z[39]*z[63] - z[50]*z[62]) - z[67]*(z[29]*z[60] + z[32]*z[59]) - z[74]*z[8]*(rear_.Izz*z[77] + z[68]) - z[77]*z[8]*(rear_.Ixx*z[1] + rear_.Ixz*z[77]);
  ar[15] = -z[71]*z[96]*(z[29]*z[77] - z[32]*z[74]);
  ar[16] = -front_.J*z[75]*z[80] + z[66]*(z[111]*z[50] + z[113]*z[39] - z[38]*z[57]);
  ar[17] = z[71]*z[76]*(-z[29]*z[77] + z[32]*z[74])/z[17];
  ar[18] = z[21]*z[72]*z[92]*(-z[29]*z[74] - z[32]*z[77]);
  ar[19] = -z[66]*(z[100]*z[34]*z[75] - z[105]*z[50]*z[80] - z[108]*z[97]/z[100]);
  ar[20] = z[98]*(z[108]*z[80] + z[14]*z[50])*(pow(z[14], 2) + pow(z[16], 2) + z[83]);
  ar[21] = front_.Iyy*z[14]*z[16] - z[16]*z[20] + z[66]*(-z[41]*z[61] - z[63]*z[85]);
  ar[22] = 0;
  ar[23] = z[66]*(z[113]*z[85] - z[41]*z[57]) - z[86];
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = -z[66]*(-z[100]*z[41] - z[85]*z[97]/z[100]);
  ar[27] = -z[66]*z[80]*z[85]*(-z[100] + z[106]);
  ar[28] = z[23]*z[72]*(-z[59]*z[77] - z[60]*z[74]);
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = z[23]*z[84]*z[92]*z[95];
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = z[27]*z[66]*(z[14]*z[62] + z[63]*z[80]);
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = 0;
  ar[40] = 0;
  ar[41] = -z[100]*z[27]*z[66]*(pow(z[14], 2) + pow(z[16], 2) + z[83]);
  ar[42] = z[72]*(z[59]*z[77] + z[60]*z[74])/z[17];
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = -z[84]*z[92]*z[95]/z[17];
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = -z[72]*(z[114]*z[88] - z[53]*z[84]*z[92] + z[60]*z[77]*z[88]);
  ar[50] = -z[67]*z[8]*(z[103]*z[44] + z[23]*z[7]*z[89] + z[23]*z[89]*z[9]);
  ar[51] = 0;
  ar[52] = z[67]*(pow(z[10], 2)*pow(z[76], 4)/z[18] + z[7]*z[87] + z[87]*z[9]);
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = z[72]*(-z[0]*z[53] + z[114] + z[60]*z[77]);
  ar[57] = z[71]*z[76]*(z[23]*z[82] - z[44] + z[7]*z[96]);
  ar[58] = 0;
  ar[59] = z[71]*z[8]*(z[10]*z[92] + z[90] + z[91]);
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = z[98]*(z[14]*z[62] + z[63]*z[80]);
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[98]*(pow(z[14], 2)*(z[106] + z[47]) - z[83]*(-z[106] - z[47]));
  ar[70] = -z[66]*(z[100]*z[61] + z[105]*z[62]*z[80] + z[63]*z[97]/z[100]);
  ar[71] = 0;
  ar[72] = -z[66]*(z[100]*z[57] + z[104]*z[109] - z[27]*pow(z[97], 2)/z[100]);
  ar[73] = 0;
  ar[74] = 0;
  ar[75] = z[66]*(z[104]*z[106] + pow(z[14], 2) + z[83] + pow(z[97], 2)/pow(z[100], 2));
  ar[76] = 0;
  ar[77] = z[66]*(-z[14]*z[63] - z[16]*z[61] + z[62]*z[80]);
  ar[78] = 0;
  ar[79] = -z[16]*z[66]*(pow(z[14], 2)*z[27] + z[27]*z[83] + z[57]);
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = z[16]*z[66]*(z[100] + z[47]);
  ar[83] = 0;
}

/** Computes the n-d array of shape (7)
 *
 * @param[out] ar a C-array of with 7 elements
 */
//  void Bicycle::gif_ud_zero_steady_cross_terms(double ar[7]) const;
void Bicycle::gif_ud_zero_steady_cross_terms(double ar[7]) const
{

  ar[0] = pow(state_[8], 2);
  ar[1] = state_[12]*state_[8];
  ar[2] = state_[13]*state_[8];
  ar[3] = state_[14]*state_[8];
  ar[4] = state_[15]*state_[8];
  ar[5] = state_[17]*state_[8];
  ar[6] = state_[18]*state_[8];
}

/** Computes the n-d array of shape (12, 3)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::gif_ud_zero_dq(double ar[36]) const;
void Bicycle::gif_ud_zero_dq(double ar[36]) const
{
  double z[275];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = state_[10] + state_[8]*z[0];
  z[11] = pow(z[10], 2);
  z[12] = -z[10];
  z[13] = z[7] + z[9];
  z[14] = state_[8]*z[3]*z[4] + state_[9]*z[1];
  z[15] = state_[8]*z[1]*z[3] - state_[9]*z[4];
  z[16] = -state_[12] - z[10];
  z[17] = -z[14];
  z[18] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[19] = -z[18];
  z[20] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[21] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[22] = -z[0]*z[1]*z[5] - z[2]*z[3];
  z[23] = rear_.a*state_[8]*z[0]*z[4] + rear_.b*state_[8]*z[0]*z[1];
  z[24] = state_[8]*z[0]*z[1]*z[5] + state_[8]*z[2]*z[3];
  z[25] = sqrt(z[13]*z[8]);
  z[26] = pow(z[13]*z[8], 3.0L/2.0L);
  z[27] = pow(z[19], 3);
  z[28] = rear_.Ixx*state_[8]*z[0]*z[1] - rear_.Ixz*state_[8]*z[0]*z[4];
  z[29] = rear_.Ixz*state_[8]*z[0]*z[1] - rear_.Izz*state_[8]*z[0]*z[4];
  z[30] = state_[10]*state_[8]*z[0]*z[1] - state_[8]*state_[9]*z[3]*z[4];
  z[31] = state_[8]*z[0]*z[1]*z[2] - state_[8]*z[3]*z[5];
  z[32] = -state_[11] - z[14];
  z[33] = -state_[10]*state_[8]*z[0]*z[4] - state_[8]*state_[9]*z[1]*z[3];
  z[34] = z[7]*z[8] + z[8]*z[9];
  z[35] = z[0]*z[3]*z[7] + z[0]*z[3]*z[9];
  z[36] = sqrt(z[34]);
  z[37] = pow(z[34], 3.0L/2.0L);
  z[38] = pow(z[34], 5.0L/2.0L);
  z[39] = state_[9]*z[0]*z[3]*z[7] + state_[9]*z[0]*z[3]*z[9];
  z[40] = state_[9]*z[6]*z[9] - state_[9]*z[8]*z[9];
  z[41] = -state_[10]*state_[8]*z[1]*z[3] + state_[10]*state_[9]*z[4] - state_[8]*state_[9]*z[0]*z[4];
  z[42] = -state_[10]*state_[8]*z[3]*z[4] - state_[10]*state_[9]*z[1] + state_[8]*state_[9]*z[0]*z[1];
  z[43] = z[1]*z[3] + z[19]*z[5];
  z[44] = -z[12]*z[5] + z[15]*z[2];
  z[45] = front_.a*state_[8]*z[0]*z[4] + front_.b*z[24];
  z[46] = front_.Ixx*z[24] - front_.Ixz*state_[8]*z[0]*z[4];
  z[47] = front_.Ixz*z[24] - front_.Izz*state_[8]*z[0]*z[4];
  z[48] = -z[12]*z[2] - z[15]*z[5];
  z[49] = state_[10]*z[1]*z[2]*z[3] - state_[11]*z[3]*z[4]*z[5] + state_[9]*z[0]*z[2]*z[4];
  z[50] = -z[44];
  z[51] = -rear_.a*z[17] + rear_.b*z[15];
  z[52] = -state_[10]*z[1]*z[3]*z[5] - state_[11]*z[2]*z[3]*z[4] - state_[9]*z[0]*z[4]*z[5];
  z[53] = -rear_.Ixx*z[15] - rear_.Ixz*z[17];
  z[54] = -rear_.Ixz*z[15] - rear_.Izz*z[17];
  z[55] = -rear_.a*z[15] - rear_.b*z[17];
  z[56] = rear_.Ixx*z[17] - rear_.Ixz*z[15];
  z[57] = rear_.Ixz*z[17] - rear_.Izz*z[15];
  z[58] = -state_[13] - z[44];
  z[59] = -front_.a*z[15] - front_.b*z[17]*z[5];
  z[60] = z[1]*z[4]*z[8] + z[19]*z[3]*z[4]*z[5];
  z[61] = front_.Ixx*z[17]*z[5] - front_.Ixz*z[15];
  z[62] = front_.Ixz*z[17]*z[5] - front_.Izz*z[15];
  z[63] = rear_.R*z[1]*z[3]/z[36] + rear_.r*z[1]*z[3];
  z[64] = rear_.R*z[3]*z[4]/z[36] + rear_.r*z[3]*z[4];
  z[65] = rear_.a + z[63];
  z[66] = -rear_.Iyy*z[12]*z[17] + rear_.J*state_[12]*z[17];
  z[67] = -rear_.b + z[64];
  z[68] = state_[10]*z[0]*z[2]*z[4] + state_[11]*z[0]*z[1]*z[5] + state_[11]*z[2]*z[3] + state_[9]*z[0]*z[5] + state_[9]*z[1]*z[2]*z[3];
  z[69] = -z[0]*z[3]*z[9] - z[19]*z[22];
  z[70] = -state_[11]*z[17]*z[2] - z[41]*z[5];
  z[71] = -state_[10]*z[0]*z[4]*z[5] + state_[11]*z[0]*z[1]*z[2] - state_[11]*z[3]*z[5] + state_[9]*z[0]*z[2] - state_[9]*z[1]*z[3]*z[5];
  z[72] = -state_[10]*z[2]*z[3]*z[4] + state_[11]*z[0]*z[2] - state_[11]*z[1]*z[3]*z[5] + state_[9]*z[0]*z[1]*z[2] - state_[9]*z[3]*z[5];
  z[73] = state_[11]*z[17]*z[5] - z[2]*z[41];
  z[74] = state_[10]*z[3]*z[4]*z[5] - state_[11]*z[0]*z[5] - state_[11]*z[1]*z[2]*z[3] - state_[9]*z[0]*z[1]*z[5] - state_[9]*z[2]*z[3];
  z[75] = state_[11]*state_[8]*z[0]*z[1]*z[5] + state_[11]*state_[8]*z[2]*z[3] + state_[8]*state_[9]*z[0]*z[5] - z[2]*z[33];
  z[76] = front_.Ixx*z[48] - front_.Ixz*z[32];
  z[77] = -front_.R*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.r*z[3]*z[4];
  z[78] = state_[9]*z[6]*z[7] - state_[9]*z[7]*z[8] + z[40];
  z[79] = -front_.a*z[32] - front_.b*z[48];
  z[80] = state_[11]*state_[8]*z[0]*z[1]*z[2] - state_[11]*state_[8]*z[3]*z[5] + state_[8]*state_[9]*z[0]*z[2] + z[33]*z[5];
  z[81] = -front_.Ixz*z[48] + front_.Izz*z[32];
  z[82] = rear_.r*z[0]*z[3]*z[4] - z[0]*z[64];
  z[83] = front_.b*z[2] + z[2]*z[77];
  z[84] = front_.b*z[5] + z[5]*z[77];
  z[85] = rear_.a*z[0] - rear_.r*z[0]*z[1]*z[3] + z[0]*z[63];
  z[86] = rear_.b*z[0] + z[82];
  z[87] = -front_.b*z[4]*z[5] - z[4]*z[5]*z[77];
  z[88] = state_[11]*z[12]*z[2] + state_[11]*z[15]*z[5] + state_[8]*state_[9]*z[3]*z[5] - z[2]*z[42];
  z[89] = state_[11]*z[12]*z[5] - state_[11]*z[15]*z[2] - state_[8]*state_[9]*z[2]*z[3] - z[42]*z[5];
  z[90] = -front_.R*z[19]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.r*z[19];
  z[91] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[21] - z[2]*z[4]*z[77];
  z[92] = -front_.b*z[19] - z[19]*z[77];
  z[93] = state_[10]*z[1]*z[4]*z[8] + state_[9]*z[0]*z[3]*z[9] + z[19]*z[74];
  z[94] = rear_.R*z[0]*z[1]/z[36] - rear_.R*z[1]*z[3]*z[35]/z[37] + rear_.r*z[0]*z[1];
  z[95] = rear_.R*z[0]*z[4]/z[36] - rear_.R*z[3]*z[35]*z[4]/z[37] + rear_.r*z[0]*z[4];
  z[96] = -state_[19]*z[21] - z[48]*z[77];
  z[97] = rear_.a*z[1] - rear_.b*z[4] + z[1]*z[63] + z[4]*z[64];
  z[98] = -front_.a*z[5] + front_.r*z[2]*z[21] - z[5]*z[90];
  z[99] = -front_.b*z[21] - front_.r*z[21]*z[3]*z[4] - z[21]*z[77];
  z[100] = rear_.a*z[3]*z[4] + rear_.b*z[1]*z[3] - z[1]*z[3]*z[64] + z[3]*z[4]*z[63];
  z[101] = front_.a*z[2]*z[4] + front_.r*z[21]*z[4]*z[5] + z[2]*z[4]*z[90];
  z[102] = -z[19]*z[72] + z[21]*z[74];
  z[103] = front_.R*z[1]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.R*z[3]*z[4]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.r*z[1]*z[3];
  z[104] = front_.R*z[0]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.R*z[3]*z[4]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.r*z[0]*z[4];
  z[105] = front_.R*pow(z[19], 2)*z[21]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - front_.R*z[21]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.r*z[21];
  z[106] = state_[10]*z[7]*z[8] - state_[10]*z[8]*z[9] + 2*state_[9]*z[0]*z[1]*z[3]*z[4] - z[19]*z[52] + z[3]*z[4]*z[5]*z[74];
  z[107] = -rear_.Ixx*z[41] + rear_.Ixz*z[42] - rear_.Iyy*z[12]*z[15] + rear_.J*state_[12]*z[15] - z[12]*z[57];
  z[108] = rear_.Ixx*z[42] + rear_.Ixz*z[41] - z[12]*z[54] + z[66];
  z[109] = rear_.R*state_[10]*z[1]*z[3]/z[36] + rear_.R*state_[9]*z[0]*z[4]/z[36] - rear_.R*z[3]*z[39]*z[4]/z[37] + rear_.r*state_[10]*z[1]*z[3] + rear_.r*state_[9]*z[0]*z[4];
  z[110] = -front_.R*z[19]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[3]*z[4]*z[5]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.r*z[3]*z[4]*z[5];
  z[111] = -rear_.Ixz*z[41] + rear_.Izz*z[42] + z[12]*z[56] + z[66];
  z[112] = rear_.R*state_[10]*z[3]*z[4]/z[36] - rear_.R*state_[9]*z[0]*z[1]/z[36] + rear_.R*z[1]*z[3]*z[39]/z[37] + rear_.r*state_[10]*z[3]*z[4] - rear_.r*state_[9]*z[0]*z[1];
  z[113] = front_.a*z[21] + front_.r*z[19]*z[21] + z[21]*z[90];
  z[114] = -rear_.r*z[0]*z[17] + state_[14]*z[3]*z[4]/z[36] + state_[15]*z[0]*z[1]*z[3]/z[36] - state_[16]*z[1]*z[3] + z[16]*z[64];
  z[115] = front_.a*z[1] + z[1]*z[90] + z[87];
  z[116] = rear_.Ixz*z[42] + rear_.Iyy*z[12]*z[15] + rear_.Izz*z[41] - rear_.J*state_[12]*z[15] + z[12]*z[53];
  z[117] = -rear_.r*z[0]*z[15] - state_[14]*z[1]*z[3]/z[36] + state_[15]*z[0]*z[3]*z[4]/z[36] - state_[16]*z[3]*z[4] - z[16]*z[63];
  z[118] = -rear_.Ixx*z[33] + rear_.Ixz*z[30] - rear_.Iyy*state_[8]*z[0]*z[12]*z[4] + rear_.Iyy*state_[8]*z[17]*z[3] + rear_.J*state_[12]*state_[8]*z[0]*z[4] + state_[8]*z[3]*z[54] - z[12]*z[29];
  z[119] = -rear_.Ixz*z[33] - rear_.Iyy*state_[8]*z[0]*z[1]*z[12] - rear_.Iyy*state_[8]*z[15]*z[3] + rear_.Izz*z[30] + rear_.J*state_[12]*state_[8]*z[0]*z[1] - state_[8]*z[3]*z[53] + z[12]*z[28];
  z[120] = 2*state_[10]*z[0]*z[1]*z[3]*z[4] - z[19]*z[71] + z[22]*z[74] + z[40];
  z[121] = front_.R*z[19]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[22]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.r*z[22];
  z[122] = front_.a*z[3]*z[4] + z[3]*z[4]*z[90] + z[92];
  z[123] = state_[15]*(z[7]*z[8]/z[36] + z[8]*z[9]/z[36]) + state_[16]*z[0] - z[15]*z[64] - z[17]*z[63];
  z[124] = front_.Iyy*z[88] - z[32]*z[76] + z[48]*z[81];
  z[125] = -front_.R*state_[10]*z[1]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.R*state_[9]*z[0]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.R*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - front_.r*state_[10]*z[1]*z[3] - front_.r*state_[9]*z[0]*z[4];
  z[126] = front_.Ixx*z[88] + front_.Ixz*pow(z[50], 2) - front_.Iyy*z[32]*z[48] + z[48]*z[81];
  z[127] = front_.r*z[21]*z[32] + state_[17]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[19]*z[21]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[19]*z[19] - z[58]*z[77];
  z[128] = -front_.Ixx*z[89] + front_.Ixz*z[41] - front_.Iyy*z[32]*z[50] + front_.J*state_[13]*z[32] + z[50]*z[81];
  z[129] = front_.Ixx*z[32]*z[50] + front_.Ixz*z[48]*z[50] + front_.Iyy*z[89] - z[50]*z[81];
  z[130] = front_.R*z[19]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - front_.R*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.r*z[74];
  z[131] = front_.r*z[21]*z[48] - state_[17]*z[19]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[21]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[19]*z[3]*z[4] + z[58]*z[90];
  z[132] = -front_.Ixz*z[89] - front_.Iyy*z[48]*z[50] + front_.Izz*z[41] + front_.J*state_[13]*z[48] + z[50]*z[76];
  z[133] = state_[18]*(pow(z[19], 2)/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[8]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9])) - z[32]*z[90] + z[96];
  z[134] = -front_.Iyy*z[75] - state_[8]*z[0]*z[4]*z[76] + z[24]*z[81] - z[32]*z[46] - z[47]*z[48];
  z[135] = -front_.Ixx*z[80] + front_.Ixz*z[30] - front_.Iyy*state_[8]*z[0]*z[4]*z[50] - front_.Iyy*z[31]*z[32] + front_.J*state_[13]*state_[8]*z[0]*z[4] + z[31]*z[81] - z[47]*z[50];
  z[136] = -front_.Ixx*pow(z[50], 2) + front_.Ixz*z[88] - front_.Iyy*pow(z[48], 2) + front_.Iyy*pow(z[50], 2) - front_.J*state_[13]*z[50] + z[48]*z[76];
  z[137] = -front_.Iyy*z[73] - z[15]*z[76] + z[17]*z[5]*z[81] - z[32]*z[61] - z[48]*z[62];
  z[138] = front_.Ixx*z[70] + front_.Ixz*z[42] - front_.Iyy*z[15]*z[50] - front_.Iyy*z[17]*z[2]*z[32] + front_.J*state_[13]*z[15] + z[17]*z[2]*z[81] - z[50]*z[62];
  z[139] = front_.Ixz*z[70] - front_.Iyy*z[17]*z[2]*z[48] - front_.Iyy*z[17]*z[5]*z[50] + front_.Izz*z[42] + front_.J*state_[13]*z[17]*z[5] + z[17]*z[2]*z[76] + z[50]*z[61];
  z[140] = -front_.Ixz*z[80] - front_.Iyy*z[24]*z[50] - front_.Iyy*z[31]*z[48] + front_.Izz*z[30] + front_.J*state_[13]*z[24] + z[31]*z[76] + z[46]*z[50];
  z[141] = -rear_.r*state_[8]*z[4]*z[6] - rear_.r*z[17]*z[3] - state_[14]*z[0]*z[4]/z[36] + state_[14]*z[3]*z[35]*z[4]/z[37] + state_[15]*z[0]*z[1]*z[3]*z[35]/z[37] - state_[15]*z[1]*z[6]/z[36] + state_[15]*z[1]*z[8]/z[36] + state_[16]*z[0]*z[1] - state_[8]*z[3]*z[64] - z[16]*z[95];
  z[142] = -rear_.r*state_[8]*z[1]*z[6] + rear_.r*z[15]*z[3] - state_[14]*z[0]*z[1]/z[36] + state_[14]*z[1]*z[3]*z[35]/z[37] - state_[15]*z[0]*z[3]*z[35]*z[4]/z[37] + state_[15]*z[4]*z[6]/z[36] - state_[15]*z[4]*z[8]/z[36] - state_[16]*z[0]*z[4] - state_[8]*z[3]*z[63] - z[16]*z[94];
  z[143] = -rear_.R*state_[10]*z[0]*z[1]/z[36] + rear_.R*state_[10]*z[1]*z[3]*z[35]/z[37] + rear_.R*state_[9]*z[0]*z[35]*z[4]/z[37] + rear_.R*state_[9]*z[3]*z[4]/z[36] + rear_.R*z[0]*z[39]*z[4]/z[37] - 3*rear_.R*z[3]*z[35]*z[39]*z[4]/z[38] + rear_.R*z[3]*z[4]*z[78]/z[37] - rear_.r*state_[10]*z[0]*z[1] + rear_.r*state_[9]*z[3]*z[4];
  z[144] = -rear_.R*state_[10]*z[0]*z[4]/z[36] + rear_.R*state_[10]*z[3]*z[35]*z[4]/z[37] - rear_.R*state_[9]*z[0]*z[1]*z[35]/z[37] - rear_.R*state_[9]*z[1]*z[3]/z[36] - rear_.R*z[0]*z[1]*z[39]/z[37] + 3*rear_.R*z[1]*z[3]*z[35]*z[39]/z[38] - rear_.R*z[1]*z[3]*z[78]/z[37] - rear_.r*state_[10]*z[0]*z[4] - rear_.r*state_[9]*z[1]*z[3];
  z[145] = -rear_.a*z[12]*z[17] + rear_.a*z[42] + rear_.b*z[12]*z[15] + rear_.b*z[41];
  z[146] = front_.R*state_[10]*z[1]*z[19]*z[21]*z[3]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*state_[9]*z[0]*z[19]*z[21]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[102]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*front_.R*z[19]*z[21]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L);
  z[147] = front_.R*z[19]*z[21]*z[3]*z[4]*z[58]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.r*z[19]*z[32] + state_[17]*z[19]*z[21]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*pow(z[19], 2)*pow(z[21], 2)/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*pow(z[19], 2)/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*pow(z[21], 2)/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[96];
  z[148] = -state_[15]*(2*z[0]*z[3]*z[7]/z[36] + 2*z[0]*z[3]*z[9]/z[36] - z[35]*z[7]*z[8]/z[37] - z[35]*z[8]*z[9]/z[37]) + state_[16]*z[3] + state_[8]*z[0]*z[1]*z[64] - state_[8]*z[0]*z[4]*z[63] + z[15]*z[95] + z[17]*z[94];
  z[149] = front_.R*z[19]*z[21]*z[3]*z[4]*z[48]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*(z[19]*z[21]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[21]/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[21]*z[27]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L)) - state_[19]*z[19] + z[105]*z[32] + z[50]*z[77];
  z[150] = front_.a*pow(z[50], 2) - front_.b*z[88] + state_[19]*z[74] + z[131]*z[50] - z[77]*z[88];
  z[151] = front_.r*z[19]*z[48] - front_.r*z[21]*z[50] - state_[17]*pow(z[19], 2)*z[21]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[21]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[19]*pow(z[21], 2)*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[19]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - z[105]*z[58] + z[48]*z[90];
  z[152] = front_.r*z[15]*z[21] - front_.r*z[2]*z[3]*z[32]*z[4] - state_[17]*z[1]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[17]*z[3]*z[4]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[19]*z[2]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[19]*z[21]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[21]*z[3]*z[4]*z[5]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*z[3]*z[4]*z[5] - z[103]*z[58] - z[17]*z[2]*z[77];
  z[153] = front_.r*z[17]*z[21]*z[5] - front_.r*z[2]*z[3]*z[4]*z[48] - state_[17]*z[19]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[3]*z[4]*z[5]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[1]*z[21]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[2]*z[8]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[21]*z[3]*z[4]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[19]*z[1]*z[3] + z[110]*z[58] + z[17]*z[2]*z[90];
  z[154] = front_.r*state_[8]*z[0]*z[21]*z[4] + front_.r*z[20]*z[32] - state_[17]*z[0]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[17]*z[3]*z[4]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[19]*z[20]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[19]*z[21]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[21]*z[22]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*z[22] - z[104]*z[58] - z[31]*z[77];
  z[155] = front_.R*z[106]*z[19]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*front_.R*z[19]*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + front_.R*z[3]*z[4]*z[5]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[52]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.R*z[60]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.r*z[52];
  z[156] = front_.R*z[102]*z[19]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*front_.R*pow(z[19], 2)*z[21]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + front_.R*z[19]*z[21]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[21]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.r*z[72];
  z[157] = front_.R*state_[10]*z[1]*z[3]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*state_[10]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.R*state_[9]*z[0]*z[1]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.R*state_[9]*z[0]*z[4]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[1]*z[3]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[106]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*front_.R*z[3]*z[4]*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + front_.r*state_[10]*z[3]*z[4] - front_.r*state_[9]*z[0]*z[1];
  z[158] = front_.r*z[20]*z[48] + front_.r*z[21]*z[24] + state_[17]*z[19]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[22]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[0]*z[21]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[20]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[21]*z[3]*z[4]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[19]*z[0]*z[4] + z[121]*z[58] + z[31]*z[90];
  z[159] = state_[18]*(-2*z[1]*z[4]*z[8]/sqrt(pow(z[19], 2) + z[8]*z[9]) + pow(z[19], 2)*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[3]*z[4]*z[5]/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[60]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L)) + state_[19]*z[2]*z[3]*z[4] - z[103]*z[48] - z[110]*z[32] - z[15]*z[90] - z[17]*z[5]*z[77];
  z[160] = -front_.R*state_[10]*z[0]*z[1]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.R*state_[10]*z[1]*z[3]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - front_.R*state_[9]*z[0]*z[4]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*state_[9]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.R*z[0]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[120]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*front_.R*z[3]*z[4]*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - front_.r*state_[10]*z[0]*z[1] + front_.r*state_[9]*z[3]*z[4];
  z[161] = front_.R*z[120]*z[19]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*front_.R*z[19]*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + front_.R*z[22]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - front_.R*z[69]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + front_.R*z[71]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.r*z[71];
  z[162] = -rear_.r*state_[9]*z[17]*z[3] + rear_.r*z[0]*z[41] - state_[10]*state_[14]*z[1]*z[3]/z[36] + state_[10]*state_[15]*z[0]*z[3]*z[4]/z[36] - state_[10]*state_[16]*z[3]*z[4] - state_[14]*state_[9]*z[0]*z[4]/z[36] + state_[14]*z[3]*z[39]*z[4]/z[37] - state_[15]*state_[9]*z[1]*z[6]/z[36] + state_[15]*state_[9]*z[1]*z[8]/z[36] + state_[15]*z[0]*z[1]*z[3]*z[39]/z[37] + state_[16]*state_[9]*z[0]*z[1] - state_[8]*state_[9]*z[3]*z[64] - z[109]*z[16] + z[123]*z[17] + z[17]*z[51];
  z[163] = state_[18]*(-2*z[0]*z[3]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) - pow(z[19], 2)*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[22]/sqrt(pow(z[19], 2) + z[8]*z[9]) - z[69]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L)) - state_[19]*z[20] - state_[8]*z[0]*z[4]*z[90] - z[104]*z[48] - z[121]*z[32] - z[24]*z[77];
  z[164] = -rear_.r*state_[9]*z[15]*z[3] + rear_.r*z[0]*z[42] - state_[10]*state_[14]*z[3]*z[4]/z[36] - state_[10]*state_[15]*z[0]*z[1]*z[3]/z[36] + state_[10]*state_[16]*z[1]*z[3] + state_[14]*state_[9]*z[0]*z[1]/z[36] - state_[14]*z[1]*z[3]*z[39]/z[37] - state_[15]*state_[9]*z[4]*z[6]/z[36] + state_[15]*state_[9]*z[4]*z[8]/z[36] + state_[15]*z[0]*z[3]*z[39]*z[4]/z[37] + state_[16]*state_[9]*z[0]*z[4] + state_[8]*state_[9]*z[3]*z[63] - z[112]*z[16] - z[114]*z[12] + z[123]*z[15] + z[15]*z[51];
  z[165] = -rear_.a*z[11] + rear_.b*state_[8]*state_[9]*z[3] + z[117]*z[12] + z[162];
  z[166] = -rear_.a*state_[8]*state_[9]*z[3] - rear_.b*z[11] - z[164];
  z[167] = z[164] + z[17]*z[55];
  z[168] = z[117]*z[12] - z[15]*z[55] + z[162];
  z[169] = rear_.a*z[12]*z[15] + rear_.a*z[41] + rear_.b*z[12]*z[17] - rear_.b*z[42] - state_[15]*(2*state_[9]*z[0]*z[3]*z[7]/z[36] + 2*state_[9]*z[0]*z[3]*z[9]/z[36] - z[39]*z[7]*z[8]/z[37] - z[39]*z[8]*z[9]/z[37]) + state_[16]*state_[9]*z[3] + z[109]*z[15] - z[112]*z[17] - z[114]*z[17] - z[117]*z[15] + z[41]*z[63] + z[42]*z[64];
  z[170] = front_.r*z[21]*z[41] - front_.r*z[32]*z[72] + state_[10]*state_[17]*z[1]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[17]*state_[9]*z[0]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[17]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[19]*z[21]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[19]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[21]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - z[125]*z[58] - z[133]*z[32] + z[150] - z[32]*z[79];
  z[171] = -rear_.a*state_[8]*z[0]*z[1]*z[12] - rear_.a*state_[8]*z[15]*z[3] + rear_.a*z[30] + rear_.b*state_[8]*z[0]*z[12]*z[4] - rear_.b*state_[8]*z[17]*z[3] + rear_.b*z[33] - state_[16]*state_[9]*z[0] - state_[8]*z[0]*z[1]*z[109] + state_[8]*z[0]*z[1]*z[117] - state_[8]*z[0]*z[112]*z[4] - state_[8]*z[0]*z[114]*z[4] - z[141]*z[17] + z[143]*z[15] + z[30]*z[63] - z[33]*z[64] - z[41]*z[94] - z[42]*z[95];
  z[172] = -front_.a*z[88] - front_.b*pow(z[50], 2) - front_.r*z[21]*z[89] + front_.r*z[48]*z[72] - state_[10]*state_[18]*z[1]*z[21]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[10]*state_[19]*z[1]*z[3] - state_[17]*z[19]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*state_[9]*z[0]*z[21]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[21]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[3]*z[4]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*state_[9]*z[0]*z[4] + z[127]*z[50] - z[130]*z[58] + z[133]*z[48] + z[48]*z[79] - z[88]*z[90];
  z[173] = -front_.a*z[41] + front_.a*z[48]*z[50] - front_.b*z[32]*z[50] - front_.b*z[89] - state_[18]*(-2*state_[10]*z[1]*z[4]*z[8]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*state_[9]*z[0]*z[3]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) + pow(z[19], 2)*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[8]*z[9]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L)) + state_[19]*z[72] - z[125]*z[48] + z[127]*z[32] - z[130]*z[32] + z[131]*z[48] - z[41]*z[90] - z[77]*z[89];
  z[174] = 2*rear_.a*state_[8]*z[12]*z[3] - rear_.b*state_[8]*state_[9]*z[0] - rear_.r*state_[8]*state_[9]*z[0]*z[3]*z[4] + rear_.r*state_[9]*z[0]*z[17] + rear_.r*z[0]*z[30] + rear_.r*z[3]*z[41] + state_[10]*state_[14]*z[0]*z[1]/z[36] - state_[10]*state_[14]*z[1]*z[3]*z[35]/z[37] + state_[10]*state_[15]*z[0]*z[3]*z[35]*z[4]/z[37] - state_[10]*state_[15]*z[4]*z[6]/z[36] + state_[10]*state_[15]*z[4]*z[8]/z[36] + state_[10]*state_[16]*z[0]*z[4] - state_[14]*state_[9]*z[0]*z[35]*z[4]/z[37] - state_[14]*state_[9]*z[3]*z[4]/z[36] - state_[14]*z[0]*z[39]*z[4]/z[37] + 3*state_[14]*z[3]*z[35]*z[39]*z[4]/z[38] - state_[14]*z[3]*z[4]*z[78]/z[37] - 4*state_[15]*state_[9]*z[0]*z[1]*z[3]/z[36] - state_[15]*state_[9]*z[1]*z[35]*z[6]/z[37] + state_[15]*state_[9]*z[1]*z[35]*z[8]/z[37] + 3*state_[15]*z[0]*z[1]*z[3]*z[35]*z[39]/z[38] - state_[15]*z[0]*z[1]*z[3]*z[78]/z[37] - state_[15]*z[1]*z[39]*z[6]/z[37] + state_[15]*z[1]*z[39]*z[8]/z[37] + state_[16]*state_[9]*z[1]*z[3] + state_[8]*state_[9]*z[0]*z[64] + state_[8]*state_[9]*z[3]*z[95] + state_[8]*z[0]*z[123]*z[4] + state_[8]*z[0]*z[4]*z[51] + state_[8]*z[109]*z[3] - state_[8]*z[117]*z[3] - z[12]*z[142] - z[143]*z[16] + z[148]*z[17] - z[17]*z[23];
  z[175] = rear_.a*state_[8]*state_[9]*z[0] + 2*rear_.b*state_[8]*z[12]*z[3] - rear_.r*state_[8]*state_[9]*z[0]*z[1]*z[3] - rear_.r*state_[9]*z[0]*z[15] + rear_.r*z[0]*z[33] - rear_.r*z[3]*z[42] - state_[10]*state_[14]*z[0]*z[4]/z[36] + state_[10]*state_[14]*z[3]*z[35]*z[4]/z[37] + state_[10]*state_[15]*z[0]*z[1]*z[3]*z[35]/z[37] - state_[10]*state_[15]*z[1]*z[6]/z[36] + state_[10]*state_[15]*z[1]*z[8]/z[36] + state_[10]*state_[16]*z[0]*z[1] - state_[14]*state_[9]*z[0]*z[1]*z[35]/z[37] - state_[14]*state_[9]*z[1]*z[3]/z[36] - state_[14]*z[0]*z[1]*z[39]/z[37] + 3*state_[14]*z[1]*z[3]*z[35]*z[39]/z[38] - state_[14]*z[1]*z[3]*z[78]/z[37] + 4*state_[15]*state_[9]*z[0]*z[3]*z[4]/z[36] + state_[15]*state_[9]*z[35]*z[4]*z[6]/z[37] - state_[15]*state_[9]*z[35]*z[4]*z[8]/z[37] - 3*state_[15]*z[0]*z[3]*z[35]*z[39]*z[4]/z[38] + state_[15]*z[0]*z[3]*z[4]*z[78]/z[37] + state_[15]*z[39]*z[4]*z[6]/z[37] - state_[15]*z[39]*z[4]*z[8]/z[37] - state_[16]*state_[9]*z[3]*z[4] + state_[8]*state_[9]*z[0]*z[63] + state_[8]*state_[9]*z[3]*z[94] + state_[8]*z[0]*z[1]*z[123] + state_[8]*z[0]*z[1]*z[51] - state_[8]*z[112]*z[3] - state_[8]*z[114]*z[3] + z[12]*z[141] + z[144]*z[16] - z[148]*z[15] + z[15]*z[23];
  z[176] = -state_[15]*(2*state_[9]*z[0]*z[3]*z[35]*z[7]/z[37] + 2*state_[9]*z[0]*z[3]*z[35]*z[9]/z[37] - 2*state_[9]*z[6]*z[7]/z[36] - 2*state_[9]*z[6]*z[9]/z[36] + 2*state_[9]*z[7]*z[8]/z[36] + 2*state_[9]*z[8]*z[9]/z[36] + 2*z[0]*z[3]*z[39]*z[7]/z[37] + 2*z[0]*z[3]*z[39]*z[9]/z[37] - 3*z[35]*z[39]*z[7]*z[8]/z[38] - 3*z[35]*z[39]*z[8]*z[9]/z[38] + z[7]*z[78]*z[8]/z[37] + z[78]*z[8]*z[9]/z[37]) + z[142]*z[15] - z[144]*z[17] + z[171];
  z[177] = state_[15]*(-2*state_[9]*z[0]*z[3]*z[35]*z[7]/z[37] - 2*state_[9]*z[0]*z[3]*z[35]*z[9]/z[37] + 2*state_[9]*z[6]*z[7]/z[36] + 2*state_[9]*z[6]*z[9]/z[36] - 2*state_[9]*z[7]*z[8]/z[36] - 2*state_[9]*z[8]*z[9]/z[36] - 2*z[0]*z[3]*z[39]*z[7]/z[37] - 2*z[0]*z[3]*z[39]*z[9]/z[37] + 3*z[35]*z[39]*z[7]*z[8]/z[38] + 3*z[35]*z[39]*z[8]*z[9]/z[38] - z[7]*z[78]*z[8]/z[37] - z[78]*z[8]*z[9]/z[37]) + z[142]*z[15] - z[144]*z[17] + z[171];
  z[178] = -front_.R*z[19]*z[21]*z[3]*z[4]*z[88]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*front_.a*z[48]*z[50] + front_.b*z[32]*z[50] + front_.b*z[89] - front_.r*z[19]*z[41] - front_.r*z[32]*z[74] - state_[10]*state_[17]*z[1]*z[19]*z[21]*z[3]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*state_[9]*z[0]*z[19]*z[21]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*z[102]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[17]*z[19]*z[21]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - state_[18]*z[102]*z[19]*z[21]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[18]*pow(z[19], 2)*pow(z[21], 2)*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[18]*pow(z[19], 2)*z[21]*z[72]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*pow(z[19], 2)*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[19]*pow(z[21], 2)*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*state_[18]*z[19]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*pow(z[21], 2)*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*state_[18]*z[21]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*z[72] + z[125]*z[48] - z[131]*z[48] - z[146]*z[58] + z[149]*z[32] - z[151]*z[50] + z[77]*z[89];
  z[179] = -front_.R*z[19]*z[21]*z[3]*z[4]*z[89]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - front_.a*pow(z[48], 2) + front_.b*z[32]*z[48] + state_[18]*(-2*state_[10]*z[1]*z[19]*z[21]*z[4]*z[8]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*state_[9]*z[0]*z[19]*z[21]*z[3]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - z[102]*pow(z[19], 2)/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - z[102]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*pow(z[19], 2)*z[21]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*z[19]*z[21]*z[8]*z[9]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - 2*z[19]*z[21]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) + 3*z[21]*z[27]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + 2*z[21]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9])) - z[105]*z[41] - z[125]*z[50] - z[146]*z[48] - z[147]*z[32] + z[150] - z[151]*z[48] - z[156]*z[32];
  z[180] = -front_.a*z[89] - front_.b*z[48]*z[50] - front_.r*z[19]*z[89] + front_.r*z[21]*z[88] - front_.r*z[48]*z[74] - front_.r*z[50]*z[72] - state_[10]*state_[18]*z[1]*z[19]*pow(z[21], 2)*z[3]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[10]*state_[18]*z[1]*z[19]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[17]*z[102]*z[19]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*state_[17]*pow(z[19], 2)*z[21]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[17]*z[19]*z[21]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[21]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*state_[9]*z[0]*z[19]*pow(z[21], 2)*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*state_[9]*z[0]*z[19]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[102]*z[21]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[18]*z[19]*pow(z[21], 2)*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[18]*z[19]*z[21]*z[3]*z[4]*z[72]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[19]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[3]*z[4]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[105]*z[88] + z[127]*z[48] - z[130]*z[48] - z[133]*z[50] + z[147]*z[50] + z[149]*z[48] + z[156]*z[58] - z[50]*z[79] - z[89]*z[90];
  z[181] = -2*front_.a*z[17]*z[2]*z[50] - front_.b*z[73] + front_.r*z[15]*z[72] + front_.r*z[2]*z[3]*z[4]*z[41] - front_.r*z[21]*z[42] + front_.r*z[32]*z[49] - state_[10]*state_[17]*z[1]*z[3]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[10]*state_[17]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[17]*state_[9]*z[0]*z[1]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[17]*state_[9]*z[0]*z[4]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*z[1]*z[3]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*z[106]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[17]*z[3]*z[4]*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - state_[18]*z[106]*z[19]*z[21]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[19]*z[2]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[18]*z[19]*z[21]*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[18]*z[19]*z[49]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[19]*z[60]*z[72]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[2]*z[3]*z[4]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[21]*z[3]*z[4]*z[5]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[21]*z[52]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[21]*z[60]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[3]*z[4]*z[5]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*z[52] + z[103]*z[88] + z[125]*z[17]*z[2] - z[131]*z[17]*z[2] + z[133]*z[15] + z[15]*z[79] - z[153]*z[50] - z[157]*z[58] + z[159]*z[32] + z[32]*z[59] - z[73]*z[77];
  z[182] = front_.a*z[73] - 2*front_.b*z[17]*z[2]*z[50] + front_.r*z[17]*z[5]*z[72] + front_.r*z[2]*z[3]*z[4]*z[89] + front_.r*z[21]*z[70] + front_.r*z[48]*z[49] + state_[10]*state_[18]*z[1]*z[2]*z[4]*z[8]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[10]*state_[18]*z[1]*z[21]*z[3]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[10]*state_[18]*z[21]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[10]*state_[19]*z[3]*z[4] + state_[17]*z[106]*z[19]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*state_[17]*z[19]*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[17]*z[3]*z[4]*z[5]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[52]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[17]*z[60]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*state_[9]*z[0]*z[1]*z[21]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*state_[9]*z[0]*z[2]*z[3]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*state_[9]*z[0]*z[21]*z[4]*z[60]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[1]*z[21]*z[3]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[1]*z[3]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[106]*z[21]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[2]*z[8]*z[9]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[18]*z[21]*z[3]*z[4]*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[18]*z[3]*z[4]*z[49]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[3]*z[4]*z[60]*z[72]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[19]*state_[9]*z[0]*z[1] - z[110]*z[88] + z[127]*z[17]*z[2] - z[130]*z[17]*z[2] + z[133]*z[17]*z[5] + z[152]*z[50] + z[155]*z[58] + z[159]*z[48] + z[17]*z[5]*z[79] + z[48]*z[59] + z[73]*z[90];
  z[183] = -2*front_.a*z[31]*z[50] - front_.b*z[75] + front_.r*state_[8]*z[0]*z[4]*z[72] - front_.r*z[20]*z[41] - front_.r*z[21]*z[30] + front_.r*z[32]*z[68] + state_[10]*state_[17]*z[0]*z[1]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[10]*state_[17]*z[1]*z[3]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*state_[9]*z[0]*z[4]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*state_[9]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[17]*z[0]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*z[120]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*state_[17]*z[3]*z[4]*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - state_[18]*z[120]*z[19]*z[21]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[19]*z[20]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*state_[18]*z[19]*z[21]*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[18]*z[19]*z[68]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[19]*z[69]*z[72]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[20]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[21]*z[22]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[21]*z[69]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[21]*z[71]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[22]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*z[71] + state_[8]*z[0]*z[133]*z[4] + state_[8]*z[0]*z[4]*z[79] + z[104]*z[88] + z[125]*z[31] - z[131]*z[31] - z[158]*z[50] - z[160]*z[58] + z[163]*z[32] - z[32]*z[45] - z[75]*z[77];
  z[184] = front_.a*z[75] - 2*front_.b*z[31]*z[50] - front_.r*z[20]*z[89] - front_.r*z[21]*z[80] + front_.r*z[24]*z[72] + front_.r*z[48]*z[68] + state_[10]*state_[18]*z[0]*z[1]*z[21]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[10]*state_[18]*z[1]*z[20]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[10]*state_[18]*z[1]*z[21]*z[3]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[10]*state_[19]*z[0]*z[1] + state_[17]*z[120]*z[19]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*state_[17]*z[19]*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[17]*z[22]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[17]*z[69]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[17]*z[71]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*state_[9]*z[0]*z[20]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*state_[9]*z[0]*z[21]*z[4]*z[69]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*state_[9]*z[21]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[0]*z[21]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[18]*z[0]*z[4]*z[72]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[120]*z[21]*z[3]*z[4]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + state_[18]*z[20]*z[3]*z[4]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*state_[18]*z[21]*z[3]*z[4]*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) + state_[18]*z[3]*z[4]*z[68]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*z[3]*z[4]*z[69]*z[72]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - state_[19]*state_[9]*z[3]*z[4] - z[121]*z[88] + z[127]*z[31] - z[130]*z[31] + z[133]*z[24] + z[154]*z[50] + z[161]*z[58] + z[163]*z[48] + z[24]*z[79] - z[45]*z[48] + z[75]*z[90];
  z[185] = -front_.a*z[17]*z[2]*z[48] - front_.a*z[17]*z[5]*z[50] + front_.a*z[42] + front_.b*z[15]*z[50] + front_.b*z[17]*z[2]*z[32] - front_.b*z[70] + state_[18]*(-2*state_[10]*z[1]*z[4]*z[60]*z[8]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 2*state_[10]*z[7]*z[8]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*state_[10]*z[8]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) + 4*state_[9]*z[0]*z[1]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*state_[9]*z[0]*z[3]*z[60]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[1]*z[4]*z[8]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - z[106]*pow(z[19], 2)/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - z[106]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 3*pow(z[19], 2)*z[60]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - 2*z[19]*z[3]*z[4]*z[5]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[52]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*z[19]*z[60]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 2*z[3]*z[4]*z[5]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) + 3*z[60]*z[8]*z[9]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L)) - state_[19]*z[49] + z[103]*z[89] + z[110]*z[41] + z[125]*z[17]*z[5] - z[127]*z[15] + z[130]*z[15] - z[131]*z[17]*z[5] - z[152]*z[32] - z[153]*z[48] - z[155]*z[32] - z[157]*z[48] + z[42]*z[90] - z[70]*z[77];
  z[186] = -front_.a*z[24]*z[50] + front_.a*z[30] - front_.a*z[31]*z[48] + front_.b*state_[8]*z[0]*z[4]*z[50] + front_.b*z[31]*z[32] + front_.b*z[80] + state_[18]*(4*state_[10]*z[0]*z[1]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + 2*state_[10]*z[1]*z[4]*z[69]*z[8]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 2*state_[9]*z[0]*z[3]*z[69]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 2*state_[9]*z[6]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*state_[9]*z[8]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*z[0]*z[3]*z[9]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - z[120]*pow(z[19], 2)/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - z[120]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 3*pow(z[19], 2)*z[69]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L) - 2*z[19]*z[22]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) + 2*z[19]*z[69]*z[74]/pow(pow(z[19], 2) + z[8]*z[9], 3.0L/2.0L) - 2*z[19]*z[71]/sqrt(pow(z[19], 2) + z[8]*z[9]) + 2*z[22]*z[74]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 3*z[69]*z[8]*z[9]*z[93]/pow(pow(z[19], 2) + z[8]*z[9], 5.0L/2.0L)) - state_[19]*z[68] - state_[8]*z[0]*z[127]*z[4] + state_[8]*z[0]*z[130]*z[4] + z[104]*z[89] + z[121]*z[41] + z[125]*z[24] - z[131]*z[24] - z[154]*z[32] - z[158]*z[48] - z[160]*z[48] - z[161]*z[32] + z[30]*z[90] + z[77]*z[80];
  z[187] = -front_.Iyy;
  z[188] = -front_.a;
  z[189] = -front_.b;
  z[190] = -rear_.b;
  z[191] = -front_.m;
  z[192] = -rear_.m;
  z[193] = -front_.r;
  z[194] = -state_[10];
  z[195] = -state_[15];
  z[196] = -state_[19];
  z[197] = -state_[8];
  z[198] = -state_[9];
  z[199] = -rear_.Iyy*z[198];
  z[200] = z[197]*z[198];
  z[201] = -z[188]*z[2];
  z[202] = -z[188]*z[4];
  z[203] = -z[189]*z[2];
  z[204] = -z[189]*z[5];
  z[205] = -z[190]*z[3];
  z[206] = -z[193]*z[2];
  z[207] = -z[193]*z[4];
  z[208] = rear_.r*z[0];
  z[209] = rear_.r*z[3];
  z[210] = -z[0]*z[194];
  z[211] = -z[0]*z[197];
  z[212] = -z[0]*z[198];
  z[213] = -z[1]*z[198];
  z[214] = -z[0];
  z[215] = -2*z[214];
  z[216] = -z[1];
  z[217] = -z[2];
  z[218] = -z[3];
  z[219] = -z[4];
  z[220] = -z[5];
  z[221] = z[214]*z[216];
  z[222] = z[214]*z[218];
  z[223] = z[214]*z[219];
  z[224] = z[216]*z[217];
  z[225] = z[216]*z[218];
  z[226] = z[216]*z[220];
  z[227] = z[217]*z[218];
  z[228] = z[217]*z[219];
  z[229] = z[218]*z[219];
  z[230] = z[218]*z[220];
  z[231] = rear_.r*z[6];
  z[232] = rear_.r*z[8];
  z[233] = -z[6];
  z[234] = z[219]*z[233];
  z[235] = -z[216]*z[8];
  z[236] = z[8]*z[9];
  z[237] = z[13]*z[8];
  z[238] = z[193]*z[21];
  z[239] = -z[19]*z[193];
  z[240] = -z[193]*z[20];
  z[241] = z[21]*z[220];
  z[242] = -z[19]*z[219];
  z[243] = -z[19]*z[220];
  z[244] = -pow(z[21], 2);
  z[245] = -z[192]/z[25];
  z[246] = state_[14]/z[36];
  z[247] = -z[195]/z[36];
  z[248] = -z[218]/z[36];
  z[249] = -z[19]*z[21];
  z[250] = front_.R/pow(pow(z[19], 2) + z[236], 3.0L/2.0L);
  z[251] = -z[191]/sqrt(pow(z[19], 2) + z[236]);
  z[252] = -z[19]*z[244];
  z[253] = -1/pow(pow(z[19], 2) + z[236], 3.0L/2.0L);
  z[254] = -sqrt(pow(z[19], 2) + z[236]);
  z[255] = z[35]/z[34];
  z[256] = z[21]*z[253];
  z[257] = z[21]/z[254];
  z[258] = -z[35]/z[37];
  z[259] = -z[19]*z[253];
  z[260] = -z[39]/z[37];
  z[261] = pow(z[19], 2)/pow(z[254], 2);
  z[262] = 3*z[35]*z[39]/z[38];
  z[263] = z[219]*z[90];
  z[264] = -z[69]/pow(z[254], 2);
  z[265] = -z[103]*z[220];
  z[266] = -z[104]*z[220];
  z[267] = -z[128]*z[220];
  z[268] = z[165]*z[216];
  z[269] = -z[165]/z[25];
  z[270] = -z[166]/z[25];
  z[271] = -z[170]/pow(z[254], 2);
  z[272] = z[170]/z[254];
  z[273] = z[172]*z[43];
  z[274] = -z[172]/z[254];

  ar[0] = -z[108]*z[221] + z[116]*z[223] + z[118]*z[225] - z[119]*z[229] + z[124]*z[20] + z[128]*z[22] + z[132]*z[223] + z[134]*z[21] - z[135]*z[19] - z[140]*z[229] + z[191]*(z[113]*z[184] + z[122]*z[186] - z[170]*(-z[104]*z[21] + z[189]*z[20] + z[20]*z[207]*z[218] - z[20]*z[77] - z[207]*z[21]*z[214]) + z[172]*(z[121]*z[21] - z[188]*z[20] + z[20]*z[239] + z[20]*z[90] + z[22]*z[238]) - z[173]*(-z[104]*z[19] + z[121]*z[229] - z[189]*z[22] + z[202]*z[214] + z[22]*z[77] - z[223]*z[90]) + z[183]*z[99]) + z[192]*(z[100]*z[177] + z[165]*(z[205] - z[214]*z[95] + z[218]*z[64] + z[219]*z[231] - z[219]*z[232]) + z[166]*(rear_.a*z[218] - z[214]*z[94] + z[216]*z[231] - z[216]*z[232] + z[218]*z[63]) + z[169]*(rear_.a*z[0]*z[219] - z[0]*z[190]*z[216] + z[221]*z[64] - z[223]*z[63] + z[225]*z[95] - z[229]*z[94]) + z[174]*z[86] - z[175]*z[85]) + z[214]*(z[15]*z[29] - z[17]*z[28] - z[199]*z[211] + z[211]*z[216]*z[54] + z[211]*z[219]*z[53]) + z[218]*(z[15]*z[54] - z[17]*z[53] - z[197]*z[199]*z[3]);
  ar[1] = z[107]*z[225] + z[108]*z[229] - z[111]*z[229] + z[116]*z[225] + z[124]*z[219]*z[227] + z[132]*z[225] + z[137]*z[21] - z[138]*z[19] - z[139]*z[229] + z[191]*(z[113]*z[182] + z[122]*z[185] - z[170]*(-z[103]*z[21] + z[203]*z[229] + z[206]*z[236] - z[219]*z[227]*z[77] - z[225]*z[238]) + z[172]*(z[110]*z[21] - z[19]*z[206]*z[229] - z[201]*z[229] - z[207]*z[21]*z[230] + z[227]*z[263]) - z[173]*(-z[103]*z[19] + z[110]*z[229] + z[188]*z[225] + z[204]*z[229] - z[220]*z[229]*z[77] - z[225]*z[90]) + z[181]*z[99]) + z[192]*(z[100]*z[145] - z[165]*(z[208]*z[225] + z[214]*z[63]) + z[166]*z[82] + z[167]*z[86] - z[168]*z[85] + z[169]*(rear_.a*z[1]*z[218] - z[205]*z[219])) + z[214]*(-z[15]*z[53] + z[15]*z[57] - z[17]*z[54] - z[17]*z[56]) + z[229]*z[267];
  ar[2] = z[124]*z[19] - z[126]*z[19] + z[128]*z[21] + z[129]*z[21] - z[136]*z[229] + z[191]*(z[113]*z[180] + z[122]*z[179] - z[170]*(z[19]*z[207]*z[218] + z[229]*z[250]*z[252] + z[92]) + z[172]*(-z[105]*z[21] - z[188]*z[19] + z[19]*z[239] + z[19]*z[90] + z[21]*z[238]) - z[173]*(-z[105]*z[229] - z[189]*z[21] - z[19]*z[229]*z[249]*z[250] + z[21]*z[77]) + z[178]*z[99]);
  ar[3] = z[118]*z[219] + z[119]*z[216] + z[134]*z[228] - z[135]*z[219]*z[220] + z[140]*z[216] + z[191]*(z[101]*z[184] + z[115]*z[186] - z[170]*(-z[104]*z[228] + z[216]*z[240]) + z[172]*(z[121]*z[228] - z[20]*z[207]*z[220]) - z[173]*(-z[121]*z[216] + z[219]*z[266]) + z[183]*z[91]) + z[192]*(-z[165]*z[209]*z[216] + z[166]*z[209]*z[219] + z[169]*(z[216]*z[94] + z[219]*z[95]) - z[174]*z[208]*z[216] + z[175]*z[208]*z[219] + z[177]*z[97]);
  ar[4] = z[107]*z[219] - z[108]*z[216] + z[111]*z[216] + z[116]*z[219] - z[124]*z[224] + z[128]*z[226] + z[132]*z[219] + z[137]*z[228] - z[138]*z[219]*z[220] + z[139]*z[216] + z[191]*(z[101]*z[182] + z[115]*z[185] - z[170]*(-z[103]*z[228] - z[203]*z[216] - z[206]*z[219]*z[225] - z[207]*z[21] + z[224]*z[77]) + z[172]*(z[110]*z[228] + z[201]*z[216] - z[206]*z[230]*z[9] - z[224]*z[90] + z[226]*z[238]) - z[173]*(-z[110]*z[216] + z[202] - z[204]*z[216] + z[219]*z[265] + z[226]*z[77] - z[263]) + z[181]*z[91]) + z[192]*(z[145]*z[97] - z[165]*z[208]*z[219] - z[166]*z[208]*z[216] - z[167]*z[208]*z[216] + z[168]*z[208]*z[219] + z[169]*(rear_.a*z[4] - z[1]*z[190]));
  ar[5] = z[124]*z[219]*z[220] - z[126]*z[219]*z[220] + z[128]*z[228] + z[129]*z[228] + z[136]*z[216] + z[191]*(z[101]*z[180] + z[115]*z[179] - z[170]*(z[216]*z[239] - z[227]*z[249]*z[250]*z[9] + z[87]) + z[172]*(-z[105]*z[228] - z[202]*z[220] + z[206]*z[21]*z[219] + z[207]*z[243] + z[220]*z[263]) - z[173]*(z[105]*z[216] - z[203]*z[219] + z[228]*z[77] - z[230]*z[249]*z[250]*z[9]) + z[178]*z[91]);
  ar[6] = z[134]*z[220] + z[135]*z[217] - z[15]*z[211]*(rear_.Ixz*z[1] + rear_.Izz*z[219]) + z[17]*z[211]*(rear_.Ixx*z[1] + rear_.Ixz*z[219]) + z[191]*(-z[104]*z[173]*z[217] - z[170]*z[266] + z[172]*(z[121]*z[220] + z[20]*z[206]) + z[183]*z[84] + z[184]*z[98] - z[186]*z[83]) + z[192]*(z[165]*z[95] + z[166]*z[94] - z[174]*z[67] - z[175]*z[65]) + z[199]*z[211] - z[211]*z[216]*z[54] - z[211]*z[219]*z[53];
  ar[7] = z[137]*z[220] + z[138]*z[217] + z[15]*z[53] - z[15]*z[57] + z[17]*z[54] + z[17]*z[56] + z[191]*(-z[103]*z[173]*z[217] - z[170]*z[265] - z[172]*(-z[110]*z[220] - z[206]*z[219]*z[227]) + z[181]*z[84] + z[182]*z[98] - z[185]*z[83]) + z[192]*(z[165]*z[63] - z[166]*z[64] - z[167]*z[67] - z[168]*z[65]);
  ar[8] = -z[124]*z[217] + z[126]*z[217] + z[129]*z[220] + z[191]*(-z[170]*(z[19]*z[229]*z[241]*z[250] - z[83]) + z[172]*(-z[105]*z[220] + z[19]*z[206] + z[201] - z[217]*z[90] + z[220]*z[238]) - z[173]*(z[21]*z[227]*z[242]*z[250] - z[84]) + z[178]*z[84] - z[179]*z[83] + z[180]*z[98]) - z[267];
  ar[9] = front_.Ixz*z[80] + front_.Izz*z[197]*(-z[198]*z[219]*z[3] - z[210]*z[216]) - front_.J*state_[13]*z[197]*z[22] + z[187]*z[197]*z[20]*z[48] - z[187]*z[197]*z[22]*z[50] + z[191]*(-z[121]*z[173] + z[170]*z[240] + z[183]*z[238] - z[186]*(z[188] - z[90])) + z[197]*z[20]*z[76] - z[46]*z[50];
  ar[10] = -z[139] + z[191]*(-z[110]*z[173] - z[170]*z[206]*z[229] + z[181]*z[238] - z[185]*(z[188] - z[90]));
  ar[11] = -z[136] + z[191]*(z[105]*z[173] + z[170]*z[239] + z[178]*z[238] - z[179]*(z[188] - z[90]));
  ar[12] = -rear_.J*z[200]*z[214] - z[192]*(-z[165]*z[95] - z[166]*z[94] + z[174]*z[64] + z[175]*z[63]);
  ar[13] = z[192]*z[218]*(rear_.R/z[36] + rear_.r)*(-z[166]*z[219] - z[167]*z[219] - z[168]*z[216] + z[268]);
  ar[14] = 0;
  ar[15] = front_.J*z[75] + z[191]*(-z[104]*z[170] - z[121]*z[172] + z[183]*z[77] - z[184]*z[90]);
  ar[16] = front_.J*z[73] + z[191]*(-z[103]*z[170] - z[110]*z[172] + z[181]*z[77] - z[182]*z[90]);
  ar[17] = -front_.J*z[89] + z[191]*(z[105]*z[172] - z[170]*z[229]*z[249]*z[250] + z[178]*z[77] - z[180]*z[90]);
  ar[18] = z[218]*z[245]*(-z[174]*z[219] - z[175]*z[216]);
  ar[19] = z[218]*z[245]*(-z[166]*z[219] - z[167]*z[219] - z[168]*z[216] + z[268]);
  ar[20] = 0;
  ar[21] = z[192]*(-z[13]*z[165]*z[233]*z[235]/z[26] - z[166]*z[234]*z[237]/z[26] - z[169]*z[248]*(z[215]*z[7] + z[215]*z[9] + z[218]*z[255]*z[7] + z[218]*z[255]*z[9]) - z[174]*z[218]*z[221]/z[25] + z[175]*z[219]*z[222]/z[25] + z[176]*z[237]/z[36] - z[219]*z[270]*z[8] - z[233]*z[268]/z[25] - z[234]*z[270] - z[235]*z[269]);
  ar[22] = -z[192]*z[218]*(z[13]*z[145]*z[248] + z[167]*z[221]/z[25] - z[168]*z[223]/z[25] - z[221]*z[270] - z[223]*z[269]);
  ar[23] = 0;
  ar[24] = z[192]*(z[165]*z[221] - z[166]*z[223] - z[169]*z[218] - z[174]*z[225] + z[175]*z[229] - z[176]*z[214]);
  ar[25] = -z[192]*(z[145]*z[214] + z[165]*z[229] + z[166]*z[225] + z[167]*z[225] - z[168]*z[229]);
  ar[26] = 0;
  ar[27] = z[251]*(-z[170]*z[223] + z[170]*z[229]*z[264] - z[172]*z[22] - z[183]*z[229] + z[184]*z[19] + z[19]*z[274]*z[69]/z[254]);
  ar[28] = z[251]*(-z[170]*z[225] + z[172]*z[220]*z[229] - z[181]*z[229] + z[182]*z[19] + z[19]*z[229]*z[273]/pow(z[254], 2) - z[236]*z[271]*z[43]);
  ar[29] = z[251]*(-z[172]*z[21] - z[178]*z[229] + z[180]*z[19] + z[19]*z[249]*z[274]/z[254] + z[229]*z[249]*z[271]);
  ar[30] = -z[191]*(-z[170]*z[249]*z[253]*z[69] - z[172]*z[223]*z[257] - z[172]*z[229]*z[256]*z[69] - z[173]*(-2*z[19]*z[22] - 2*z[222]*z[9] + z[236]*z[264] - z[261]*z[69])/z[254] - z[183]*z[249]/z[254] + z[184]*z[229]*z[257] + z[186]*z[254] - z[19]*z[20]*z[272] - z[20]*z[229]*z[274] + z[21]*z[22]*z[272]);
  ar[31] = -z[191]*(z[170]*z[229]*z[249]*z[253]*z[43] - z[172]*z[225]*z[257] - z[173]*(-2*z[216]*z[219]*z[8] - 2*z[229]*z[243] + z[236]*z[60]/pow(z[254], 2) + z[261]*z[60])/z[254] - z[181]*z[249]/z[254] + z[182]*z[229]*z[257] + z[185]*z[254] - z[217]*z[236]*z[274] + z[227]*z[242]*z[272] - z[229]*z[241]*z[272] + z[236]*z[256]*z[273]);
  ar[32] = z[191]*(z[170]*pow(z[19], 2)/z[254] - z[170]*z[252]*z[259] - z[172]*z[229]*z[252]*z[253] - z[173]*z[249]*(z[236]/pow(z[254], 2) + z[261] - 2)/z[254] + z[178]*z[249]/z[254] - z[179]*z[254] - z[180]*z[229]*z[257] + z[19]*z[229]*z[274] + z[244]*z[272]);
  ar[33] = z[191]*(z[170]*z[22] - z[172]*z[223] + z[173]*z[20] + z[183]*z[19] + z[184]*z[229] - z[186]*z[21]);
  ar[34] = z[191]*(-z[170]*z[220]*z[229] - z[172]*z[225] + z[173]*z[219]*z[227] + z[181]*z[19] + z[182]*z[229] - z[185]*z[21]);
  ar[35] = z[191]*(z[170]*z[21] + z[173]*z[19] + z[178]*z[19] - z[179]*z[21] + z[180]*z[229]);
}

/** Computes the n-d array of shape (12, 12)
 *
 * @param[out] ar a C-array of with 144 elements
 */
//  void Bicycle::gif_ud_zero_du(double ar[144]) const;
void Bicycle::gif_ud_zero_du(double ar[144]) const
{
  double z[250];

  z[0] = -2;
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = sin(state_[3]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = cos(state_[3]);
  z[7] = pow(z[1], -z[0]);
  z[8] = pow(z[2], -z[0]);
  z[9] = pow(z[4], -z[0]);
  z[10] = pow(z[5], -z[0]);
  z[11] = state_[10] + state_[8]*z[1];
  z[12] = state_[12] + z[11];
  z[13] = -z[11];
  z[14] = rear_.Ixx*z[5] + rear_.Ixz*z[2];
  z[15] = rear_.Ixz*z[5] + rear_.Izz*z[2];
  z[16] = z[10] + z[8];
  z[17] = rear_.a*z[2] - rear_.b*z[5];
  z[18] = front_.Ixx*z[5]*z[6] + front_.Ixz*z[2];
  z[19] = front_.Ixz*z[5]*z[6] + front_.Izz*z[2];
  z[20] = state_[8]*z[4]*z[5] + state_[9]*z[2];
  z[21] = front_.a*z[2] - front_.b*z[5]*z[6];
  z[22] = state_[10]*z[2] - state_[8]*z[1]*z[2];
  z[23] = state_[10]*z[5] - state_[8]*z[1]*z[5];
  z[24] = state_[8]*z[2]*z[4] - state_[9]*z[5];
  z[25] = rear_.a*z[4]*z[5] + rear_.b*z[2]*z[4];
  z[26] = -z[20];
  z[27] = z[1]*z[3] - z[2]*z[4]*z[6];
  z[28] = rear_.Ixx*z[2]*z[4] - rear_.Ixz*z[4]*z[5];
  z[29] = rear_.Ixz*z[2]*z[4] - rear_.Izz*z[4]*z[5];
  z[30] = state_[10]*z[4]*z[5] - state_[9]*z[1]*z[2];
  z[31] = z[1]*z[2]*z[3] - z[4]*z[6];
  z[32] = state_[11] + z[26];
  z[33] = -z[1]*z[6] - z[2]*z[3]*z[4];
  z[34] = -state_[10]*z[2]*z[4] - state_[9]*z[1]*z[5];
  z[35] = -z[1]*z[2]*z[6] - z[3]*z[4];
  z[36] = sqrt(z[16]*z[9]);
  z[37] = pow(z[27], -z[0]);
  z[38] = -state_[11] - z[20];
  z[39] = z[10]*z[9] + z[8]*z[9];
  z[40] = z[1]*z[10]*z[4] + z[1]*z[4]*z[8];
  z[41] = state_[11]*z[3] + z[26]*z[3];
  z[42] = state_[11]*z[6] + z[26]*z[6];
  z[43] = sqrt(z[39]);
  z[44] = pow(z[39], 3.0L/2.0L);
  z[45] = state_[9]*z[1]*z[10]*z[4] + state_[9]*z[1]*z[4]*z[8];
  z[46] = state_[11]*z[1]*z[6] + state_[11]*z[2]*z[3]*z[4] + state_[9]*z[3]*z[4];
  z[47] = -state_[11]*z[1]*z[3] + state_[11]*z[2]*z[4]*z[6] + state_[9]*z[4]*z[6];
  z[48] = front_.Ixx*z[27] + front_.Ixz*z[4]*z[5];
  z[49] = front_.Ixz*z[27] + front_.Izz*z[4]*z[5];
  z[50] = front_.a*z[4]*z[5] - front_.b*z[27];
  z[51] = rear_.R/z[43] + rear_.r;
  z[52] = -z[13]*z[6] + z[24]*z[3];
  z[53] = -z[13]*z[3] - z[24]*z[6];
  z[54] = z[10]*z[9] + z[37];
  z[55] = state_[13] + z[52];
  z[56] = -z[52];
  z[57] = -rear_.a*z[26] + rear_.b*z[24];
  z[58] = sqrt(z[54]);
  z[59] = pow(z[54], 3.0L/2.0L);
  z[60] = -rear_.Ixx*z[24] - rear_.Ixz*z[26];
  z[61] = -rear_.Ixz*z[24] - rear_.Izz*z[26];
  z[62] = rear_.R*z[2]*z[4]/z[43] + rear_.a;
  z[63] = -state_[11]*z[5]*z[6] + state_[8]*z[4]*z[6] + z[22]*z[3];
  z[64] = -rear_.R*z[4]*z[5]/z[43] + rear_.b;
  z[65] = -state_[11]*z[3]*z[5] + state_[8]*z[3]*z[4] - z[22]*z[6];
  z[66] = z[2]*z[5]*z[9] + z[27]*z[4]*z[5]*z[6];
  z[67] = front_.R/z[58] + front_.r;
  z[68] = -z[2]*z[24] + z[26]*z[5];
  z[69] = state_[9] + z[2]*z[26] + z[24]*z[5];
  z[70] = -rear_.R*z[2]*z[4]/z[43] - rear_.r*z[2]*z[4];
  z[71] = -rear_.R*z[4]*z[5]/z[43] - rear_.r*z[4]*z[5];
  z[72] = -front_.R*z[4]*z[5]/z[58] + front_.b;
  z[73] = rear_.r*z[4]*z[5] - z[64];
  z[74] = -state_[10]*z[4]*z[5]*z[6] + state_[9]*z[1]*z[2]*z[6] + z[46];
  z[75] = -z[1]*z[10]*z[4] - z[27]*z[35];
  z[76] = -rear_.r*z[2]*z[4] - z[62];
  z[77] = z[3]*z[30] + z[47];
  z[78] = -z[30]*z[6] + z[46];
  z[79] = state_[10]*z[3]*z[4]*z[5] - state_[9]*z[1]*z[2]*z[3] + z[47];
  z[80] = -z[1]*z[26] + z[13]*z[4]*z[5] + z[30];
  z[81] = -z[1]*z[24] - z[13]*z[2]*z[4] + z[34];
  z[82] = front_.Ixx*z[53] - front_.Ixz*z[38];
  z[83] = front_.Ixz*z[53] - front_.Izz*z[38];
  z[84] = -front_.R*z[4]*z[5]/z[58] - front_.r*z[4]*z[5];
  z[85] = -front_.a*z[38] - front_.b*z[53];
  z[86] = -front_.r*z[4]*z[5] + z[72];
  z[87] = -front_.R*z[27]/z[58] + front_.a;
  z[88] = rear_.r*z[1]*z[2]*z[4] + z[1]*z[70];
  z[89] = rear_.r*z[1]*z[4]*z[5] + z[1]*z[71];
  z[90] = front_.b*z[3] + z[3]*z[84];
  z[91] = front_.b*z[6] + z[6]*z[84];
  z[92] = rear_.b*z[1] + z[89];
  z[93] = -rear_.a*z[1] + z[88];
  z[94] = rear_.Ixx*z[26] + rear_.Ixz*z[0]*z[24] + rear_.Iyy*z[26] - rear_.Izz*z[26];
  z[95] = z[27]*z[53] - z[38]*z[4]*z[5];
  z[96] = rear_.Ixx*z[24] - rear_.Ixz*z[0]*z[26] - rear_.Iyy*z[24] - rear_.Izz*z[24];
  z[97] = front_.R*z[27]/z[58] + front_.r*z[27];
  z[98] = z[10]*z[9]/z[43] + z[8]*z[9]/z[43];
  z[99] = -rear_.Ixz*z[22] - rear_.Iyy*z[13]*z[5] + rear_.Izz*z[23] + rear_.J*state_[12]*z[5] + z[13]*z[14];
  z[100] = -rear_.Ixx*z[22] + rear_.Ixz*z[23] + rear_.Iyy*z[13]*z[2] - rear_.J*state_[12]*z[2] - z[13]*z[15];
  z[101] = -front_.r*z[2]*z[33] - z[3]*z[5]*z[84];
  z[102] = front_.r*z[27] - z[87];
  z[103] = front_.b*z[3]*z[5] - z[101];
  z[104] = z[13]*z[4]*z[5] + z[2]*z[4]*z[45]/z[39] + z[30];
  z[105] = -z[2]*z[70] - z[5]*z[71];
  z[106] = state_[10]*z[2]*z[5]*z[9] + state_[9]*z[1]*z[10]*z[4] - z[27]*z[74];
  z[107] = -front_.r*z[33]*z[4]*z[5] - z[33]*z[84];
  z[108] = z[2]*z[4]*z[71] - z[4]*z[5]*z[70];
  z[109] = rear_.R*z[1]*z[2]/z[43] - rear_.R*z[2]*z[4]*z[40]/z[44] + rear_.r*z[1]*z[2];
  z[110] = rear_.R*z[1]*z[5]/z[43] - rear_.R*z[4]*z[40]*z[5]/z[44] + rear_.r*z[1]*z[5];
  z[111] = z[10]*z[9]/z[58] + z[37]/z[58];
  z[112] = -front_.r*z[3]*z[33] - z[6]*z[97];
  z[113] = z[105] + z[17];
  z[114] = rear_.a*z[5] + rear_.b*z[2] + z[2]*z[71] - z[5]*z[70];
  z[115] = front_.a*z[6] + z[112];
  z[116] = -front_.Ixx*z[56] + front_.Iyy*z[56] - front_.Izz*z[56] - front_.J*state_[13];
  z[117] = front_.r*z[33]*z[5]*z[6] - z[3]*z[5]*z[97];
  z[118] = -front_.b*z[33] + z[107];
  z[119] = z[108] + z[25];
  z[120] = -z[24]*z[70] + z[26]*z[71];
  z[121] = front_.a*z[3]*z[5] + z[117];
  z[122] = -z[33]*z[38] - z[4]*z[5]*z[56] + z[74];
  z[123] = z[27]*z[56] - z[33]*z[53] + z[34];
  z[124] = z[27]*z[38] + z[4]*z[5]*z[53] - z[79];
  z[125] = front_.Ixx*z[53] + front_.Ixz*z[0]*z[38] - front_.Iyy*z[53] - front_.Izz*z[53];
  z[126] = front_.r*z[27]*z[33] - z[33]*z[97];
  z[127] = front_.R*z[2]*z[4]/z[58] - front_.R*z[4]*z[5]*z[66]/z[59] + front_.r*z[2]*z[4];
  z[128] = -z[2]*z[97] - z[5]*z[6]*z[84];
  z[129] = front_.R*z[1]*z[5]/z[58] + front_.R*z[4]*z[5]*z[75]/z[59] + front_.r*z[1]*z[5];
  z[130] = -front_.Ixx*z[3]*z[38] - front_.Ixz*z[3]*z[53] - front_.Iyy*z[41] - z[3]*z[83];
  z[131] = front_.R*z[33]*z[37]/z[59] - front_.R*z[33]/z[58] - front_.r*z[33];
  z[132] = rear_.R*state_[10]*z[2]*z[4]/z[43] + rear_.R*state_[9]*z[1]*z[5]/z[43] - rear_.R*z[4]*z[45]*z[5]/z[44] + rear_.r*state_[10]*z[2]*z[4] + rear_.r*state_[9]*z[1]*z[5];
  z[133] = -front_.R*z[27]*z[66]/z[59] + front_.R*z[4]*z[5]*z[6]/z[58] + front_.r*z[4]*z[5]*z[6];
  z[134] = rear_.R*state_[10]*z[4]*z[5]/z[43] - rear_.R*state_[9]*z[1]*z[2]/z[43] + rear_.R*z[2]*z[4]*z[45]/z[44] + rear_.r*state_[10]*z[4]*z[5] - rear_.r*state_[9]*z[1]*z[2];
  z[135] = front_.a*z[33] + z[126];
  z[136] = -rear_.r*z[1]*z[26] + state_[14]*z[4]*z[5]/z[43] + state_[15]*z[1]*z[2]*z[4]/z[43] - state_[16]*z[2]*z[4] + z[12]*z[71];
  z[137] = z[128] + z[21];
  z[138] = rear_.r*z[1]*z[24] + state_[14]*z[2]*z[4]/z[43] - state_[15]*z[1]*z[4]*z[5]/z[43] + state_[16]*z[4]*z[5] + z[12]*z[70];
  z[139] = z[27]*z[84] + z[4]*z[5]*z[97];
  z[140] = rear_.a*z[0]*z[24] + rear_.b*z[0]*z[26] - z[120];
  z[141] = -rear_.Ixx*z[30] + rear_.Ixz*z[34] + rear_.Iyy*z[1]*z[26] + rear_.Iyy*z[13]*z[4]*z[5] - rear_.J*state_[12]*z[4]*z[5] + z[1]*z[61] + z[13]*z[29];
  z[142] = -rear_.Ixz*z[30] - rear_.Iyy*z[1]*z[24] + rear_.Iyy*z[13]*z[2]*z[4] + rear_.Izz*z[34] - rear_.J*state_[12]*z[2]*z[4] - z[1]*z[60] - z[13]*z[28];
  z[143] = front_.Ixx*z[42] - front_.Ixz*z[24] - front_.Ixz*z[3]*z[56] + front_.Iyy*z[38]*z[6] + z[6]*z[83];
  z[144] = front_.R*z[27]*z[75]/z[59] + front_.R*z[35]/z[58] + front_.r*z[35];
  z[145] = -z[38]*z[84] - z[53]*z[97];
  z[146] = -z[139] + z[50];
  z[147] = -state_[9]*z[0]*z[1]*z[10] - state_[9]*z[0]*z[1]*z[8] + z[1]*z[2]*z[26] + z[1]*z[24]*z[5] - z[10]*z[4]*z[45]/z[39] - z[4]*z[45]*z[8]/z[39];
  z[148] = state_[17]*z[4]*z[5]/z[58] + state_[18]*z[27]*z[33]/z[58] + z[55]*z[84];
  z[149] = state_[15]*z[98] + state_[16]*z[1] + z[24]*z[71] + z[26]*z[70];
  z[150] = -z[13]*z[70] + z[132];
  z[151] = z[13]*z[71] - z[134];
  z[152] = z[106]*z[4]*z[5]/z[54] + z[27]*z[56] + z[34];
  z[153] = -rear_.a*z[0]*z[13] + z[150];
  z[154] = rear_.b*z[0]*z[13] - z[151];
  z[155] = front_.Ixx*z[3]*z[56] + front_.Ixz*z[42] - front_.Iyy*z[3]*z[56] + front_.Iyy*z[53]*z[6] - front_.Izz*z[24] + front_.J*state_[13]*z[3] - z[6]*z[82];
  z[156] = front_.Ixx*z[65] + front_.Ixz*z[23] + front_.Iyy*z[2]*z[56] - front_.Iyy*z[3]*z[38]*z[5] - front_.J*state_[13]*z[2] - z[19]*z[56] - z[3]*z[5]*z[83];
  z[157] = front_.Iyy*z[63] - z[18]*z[38] - z[19]*z[53] + z[2]*z[82] - z[5]*z[6]*z[83];
  z[158] = -z[106]*z[27]/z[54] + z[4]*z[5]*z[56] - z[74];
  z[159] = front_.R*state_[10]*z[2]*z[4]/z[58] + front_.R*state_[9]*z[1]*z[5]/z[58] - front_.R*z[106]*z[4]*z[5]/z[59] + front_.r*state_[10]*z[2]*z[4] + front_.r*state_[9]*z[1]*z[5];
  z[160] = front_.Ixz*z[65] - front_.Iyy*z[3]*z[5]*z[53] - front_.Iyy*z[5]*z[56]*z[6] + front_.Izz*z[23] + front_.J*state_[13]*z[5]*z[6] + z[18]*z[56] + z[3]*z[5]*z[82];
  z[161] = front_.r*z[33]*z[38] + state_[19]*z[27] + z[148];
  z[162] = front_.R*z[106]*z[27]/z[59] + front_.R*z[74]/z[58] + front_.r*z[74];
  z[163] = front_.r*z[33]*z[53] - state_[17]*z[27]/z[58] + state_[18]*z[33]*z[4]*z[5]/z[58] + state_[19]*z[4]*z[5] + z[55]*z[97];
  z[164] = front_.Ixx*z[78] + front_.Ixz*z[34] - front_.Iyy*z[33]*z[38] + front_.Iyy*z[4]*z[5]*z[56] - front_.J*state_[13]*z[4]*z[5] - z[33]*z[83] - z[49]*z[56];
  z[165] = front_.Iyy*z[77] - z[27]*z[83] - z[38]*z[48] + z[4]*z[5]*z[82] - z[49]*z[53];
  z[166] = state_[18]*z[111] - state_[19]*z[33] + z[38]*z[97] - z[53]*z[84];
  z[167] = -state_[10]*z[1]*z[2]*z[4]/z[43] - state_[9]*z[5]*z[7]/z[43] + state_[9]*z[5]*z[9]/z[43] - z[1]*z[13]*z[2]*z[4]/z[43] + z[1]*z[4]*z[45]*z[5]/z[44] + z[24]*z[98];
  z[168] = state_[10]*z[1]*z[4]*z[5]/z[43] - state_[9]*z[2]*z[7]/z[43] + state_[9]*z[2]*z[9]/z[43] + z[1]*z[13]*z[4]*z[5]/z[43] + z[1]*z[2]*z[4]*z[45]/z[44] + z[26]*z[98];
  z[169] = front_.Ixz*z[78] - front_.Iyy*z[27]*z[56] - front_.Iyy*z[33]*z[53] + front_.Izz*z[34] + front_.J*state_[13]*z[27] + z[33]*z[82] + z[48]*z[56];
  z[170] = z[159] - z[56]*z[97];
  z[171] = z[162] + z[56]*z[84];
  z[172] = z[150]*z[5] + z[151]*z[2];
  z[173] = z[153]*z[5] - z[154]*z[2];
  z[174] = state_[10]*z[0]*z[2]*z[5]*z[9] + state_[9]*z[0]*z[1]*z[10]*z[4] - z[0]*z[27]*z[74] + z[10]*z[106]*z[9]/z[54] + z[106]*z[37]/z[54] - z[27]*z[33]*z[38] - z[33]*z[4]*z[5]*z[53];
  z[175] = z[106]*z[27]*z[33]/z[59] + z[111]*z[38] - z[27]*z[79]/z[58] - z[33]*z[4]*z[5]*z[56]/z[58] + z[33]*z[74]/z[58];
  z[176] = -state_[10]*z[2]*z[33]*z[4]/z[58] - state_[9]*z[1]*z[33]*z[5]/z[58] + z[106]*z[33]*z[4]*z[5]/z[59] + z[111]*z[53] + z[27]*z[33]*z[56]/z[58] - z[4]*z[5]*z[79]/z[58];
  z[177] = -z[167]*z[2] + z[168]*z[5];
  z[178] = -front_.R*z[27]*z[33]*z[4]*z[5]*z[55]/z[59] - front_.a*z[0]*z[38] + front_.r*z[27]*z[38] + front_.r*z[79] + state_[17]*z[27]*z[33]*z[4]*z[5]/z[59] - state_[18]*z[111] + state_[18]*z[37]*pow(-z[33], -z[0])/z[59] + state_[18]*z[37]/z[58] - state_[18]*pow(-z[33], -z[0])/z[58] + z[0]*z[38]*z[97];
  z[179] = -front_.a*z[0]*z[53] + front_.r*z[0]*z[33]*z[56] + front_.r*z[27]*z[53] - state_[17]*z[33]*z[37]/z[59] + state_[17]*z[33]/z[58] + state_[18]*z[27]*z[4]*z[5]*pow(-z[33], -z[0])/z[59] + state_[18]*z[27]*z[4]*z[5]/z[58] + z[0]*z[53]*z[97] + z[131]*z[55];
  z[180] = -z[170]*z[4]*z[5] + z[171]*z[27];
  z[181] = rear_.b*state_[8]*z[4] + rear_.r*state_[9]*z[2]*z[4] + rear_.r*z[1]*z[13]*z[5] + rear_.r*z[1]*z[23] - rear_.r*z[26]*z[4] - state_[14]*z[1]*z[5]/z[43] + state_[14]*z[4]*z[40]*z[5]/z[44] + state_[15]*z[1]*z[2]*z[4]*z[40]/z[44] - state_[15]*z[2]*z[7]/z[43] + state_[15]*z[2]*z[9]/z[43] + state_[16]*z[1]*z[2] + state_[8]*z[4]*z[71] + z[105]*z[26] + z[110]*z[12] - z[149]*z[2] + z[17]*z[26] - z[2]*z[57];
  z[182] = -rear_.a*state_[8]*z[4] - rear_.r*state_[9]*z[4]*z[5] + rear_.r*z[1]*z[13]*z[2] + rear_.r*z[1]*z[22] + rear_.r*z[24]*z[4] - state_[14]*z[1]*z[2]/z[43] + state_[14]*z[2]*z[4]*z[40]/z[44] - state_[15]*z[1]*z[4]*z[40]*z[5]/z[44] + state_[15]*z[5]*z[7]/z[43] - state_[15]*z[5]*z[9]/z[43] - state_[16]*z[1]*z[5] + state_[8]*z[4]*z[70] - z[105]*z[24] + z[109]*z[12] + z[149]*z[5] - z[17]*z[24] + z[5]*z[57];
  z[183] = -rear_.a*z[0]*z[1]*z[13] + rear_.b*state_[9]*z[4] + rear_.r*state_[9]*z[5]*z[9] + rear_.r*z[1]*z[34] + state_[9]*z[4]*z[71] + z[1]*z[132] + z[1]*z[138] + z[108]*z[26] - z[13]*z[88] - z[149]*z[4]*z[5] + z[25]*z[26] - z[4]*z[5]*z[57];
  z[184] = -rear_.a*state_[9]*z[4] - rear_.b*z[0]*z[1]*z[13] + rear_.r*state_[9]*z[2]*z[9] + rear_.r*z[1]*z[30] + state_[9]*z[4]*z[70] - z[1]*z[134] - z[1]*z[136] - z[108]*z[24] + z[13]*z[89] - z[149]*z[2]*z[4] - z[2]*z[4]*z[57] - z[24]*z[25];
  z[185] = -rear_.a*z[1]*z[24] + rear_.a*z[13]*z[2]*z[4] + rear_.a*z[34] - rear_.b*z[1]*z[26] - rear_.b*z[13]*z[4]*z[5] + rear_.b*z[30] + z[132]*z[2]*z[4] + z[134]*z[4]*z[5] + z[136]*z[4]*z[5] + z[138]*z[2]*z[4] + z[24]*z[88] - z[26]*z[89] + z[30]*z[71] - z[34]*z[70];
  z[186] = front_.R*z[27]*z[33]*z[4]*z[5]*z[53]/z[59] - front_.r*z[0]*z[33]*z[38] + state_[18]*(z[0]*z[27]*z[33]/z[58] + z[10]*z[27]*z[33]*z[9]/z[59] + pow(z[27], 3)*z[33]/z[59]) + z[131]*z[38] + z[148] - z[162] + z[56]*z[84];
  z[187] = -rear_.a*z[13]*z[5] + rear_.a*z[23] - rear_.b*z[13]*z[2] + rear_.b*z[22] - rear_.r*z[1]*z[2]*z[26] - rear_.r*z[1]*z[24]*z[5] - state_[15]*(-z[0]*z[1]*z[10]*z[4]/z[43] - z[0]*z[1]*z[4]*z[8]/z[43] - z[10]*z[40]*z[9]/z[44] - z[40]*z[8]*z[9]/z[44]) + state_[16]*z[4] + z[109]*z[26] + z[110]*z[24] - z[132]*z[5] + z[134]*z[2] + z[136]*z[2] - z[138]*z[5] + z[22]*z[71] - z[23]*z[70];
  z[188] = -front_.a*z[0]*z[56]*z[6] - front_.b*z[3]*z[38] - front_.b*z[41] + front_.r*z[24]*z[33] - front_.r*z[3]*z[38]*z[4]*z[5] - state_[17]*z[2]*z[4]/z[58] + state_[17]*z[4]*z[5]*z[66]/z[59] - state_[18]*z[27]*z[3]*z[4]*z[5]/z[58] + state_[18]*z[27]*z[33]*z[66]/z[59] - state_[18]*z[33]*z[4]*z[5]*z[6]/z[58] - state_[19]*z[4]*z[5]*z[6] + z[112]*z[56] + z[127]*z[55] + z[159]*z[6] + z[163]*z[6] - z[3]*z[38]*z[84] - z[41]*z[84];
  z[189] = front_.a*z[0]*z[33]*z[56] + front_.b*z[77] - front_.r*z[33]*z[34] + front_.r*z[4]*z[5]*z[79] - z[126]*z[56] - z[139]*z[38] - z[159]*z[33] - z[163]*z[33] - z[166]*z[4]*z[5] + z[38]*z[50] - z[4]*z[5]*z[85] + z[77]*z[84];
  z[190] = front_.a*z[24] + front_.a*z[3]*z[56] - front_.a*z[53]*z[6] + front_.b*z[38]*z[6] + front_.b*z[42] - state_[18]*(z[0]*z[2]*z[5]*z[9]/z[58] + z[0]*z[27]*z[4]*z[5]*z[6]/z[58] + z[10]*z[66]*z[9]/z[59] + z[37]*z[66]/z[59]) - state_[19]*z[3]*z[4]*z[5] - z[112]*z[53] + z[127]*z[53] + z[133]*z[38] + z[159]*z[3] + z[163]*z[3] - z[24]*z[97] + z[38]*z[6]*z[84] + z[42]*z[84];
  z[191] = -front_.a*z[77] + front_.b*z[0]*z[33]*z[56] - front_.r*z[27]*z[79] + front_.r*z[33]*z[78] + z[107]*z[56] - z[139]*z[53] + z[161]*z[33] - z[162]*z[33] + z[166]*z[27] + z[27]*z[85] + z[50]*z[53] + z[77]*z[97];
  z[192] = front_.a*z[27]*z[56] + front_.a*z[33]*z[53] - front_.a*z[34] - front_.b*z[33]*z[38] + front_.b*z[4]*z[5]*z[56] + front_.b*z[78] + z[107]*z[38] + z[126]*z[53] + z[159]*z[27] - z[161]*z[4]*z[5] + z[162]*z[4]*z[5] + z[163]*z[27] + z[34]*z[97] + z[78]*z[84];
  z[193] = front_.a*z[41] - front_.b*z[0]*z[56]*z[6] - front_.b*z[3]*z[53] - front_.r*z[3]*z[4]*z[5]*z[53] - front_.r*z[3]*z[79] + front_.r*z[33]*z[42] - state_[17]*z[27]*z[66]/z[59] + state_[17]*z[4]*z[5]*z[6]/z[58] - state_[18]*z[10]*z[3]*z[9]/z[58] - state_[18]*z[2]*z[33]*z[4]/z[58] + state_[18]*z[33]*z[4]*z[5]*z[66]/z[59] - state_[19]*z[2]*z[4] - z[133]*z[55] - z[161]*z[6] + z[162]*z[6] + z[166]*z[3] - z[3]*z[53]*z[84] + z[3]*z[85] - z[41]*z[97] + z[56]*z[6]*z[84];
  z[194] = front_.a*z[0]*z[3]*z[5]*z[56] + front_.b*z[63] + front_.r*z[2]*z[79] - front_.r*z[23]*z[33] + front_.r*z[31]*z[38] - state_[17]*z[1]*z[5]/z[58] - state_[17]*z[4]*z[5]*z[75]/z[59] + state_[18]*z[27]*z[31]/z[58] - state_[18]*z[27]*z[33]*z[75]/z[59] - state_[18]*z[33]*z[35]/z[58] - state_[19]*z[35] - z[117]*z[56] + z[128]*z[38] + z[129]*z[55] - z[159]*z[3]*z[5] - z[163]*z[3]*z[5] - z[166]*z[2] - z[2]*z[85] + z[21]*z[38] + z[63]*z[84];
  z[195] = -front_.a*z[63] + front_.b*z[0]*z[3]*z[5]*z[56] + front_.r*z[31]*z[53] + front_.r*z[33]*z[65] - front_.r*z[5]*z[6]*z[79] + state_[17]*z[27]*z[75]/z[59] + state_[17]*z[35]/z[58] - state_[18]*z[1]*z[33]*z[5]/z[58] + state_[18]*z[31]*z[4]*z[5]/z[58] - state_[18]*z[33]*z[4]*z[5]*z[75]/z[59] - state_[19]*z[1]*z[5] + z[101]*z[56] + z[128]*z[53] - z[144]*z[55] + z[161]*z[3]*z[5] - z[162]*z[3]*z[5] + z[166]*z[5]*z[6] + z[21]*z[53] + z[5]*z[6]*z[85] + z[63]*z[97];
  z[196] = front_.a*z[23] - front_.a*z[3]*z[5]*z[53] - front_.a*z[5]*z[56]*z[6] - front_.b*z[2]*z[56] + front_.b*z[3]*z[38]*z[5] - front_.b*z[65] + state_[18]*(z[0]*z[1]*z[10]*z[4]/z[58] + z[0]*z[27]*z[35]/z[58] - z[10]*z[75]*z[9]/z[59] - z[37]*z[75]/z[59]) - state_[19]*z[31] - z[101]*z[38] - z[117]*z[53] - z[129]*z[53] - z[144]*z[38] - z[159]*z[5]*z[6] + z[161]*z[2] - z[162]*z[2] - z[163]*z[5]*z[6] - z[23]*z[97] - z[65]*z[84];
  z[197] = -front_.Iyy;
  z[198] = -front_.a;
  z[199] = -front_.b;
  z[200] = -front_.m;
  z[201] = -rear_.m;
  z[202] = -state_[8];
  z[203] = -state_[9];
  z[204] = front_.J*state_[13];
  z[205] = rear_.Iyy*z[4];
  z[206] = -z[201]*z[4];
  z[207] = rear_.r*z[1];
  z[208] = state_[10]*z[5];
  z[209] = -z[1]*z[203];
  z[210] = -z[1];
  z[211] = -z[2];
  z[212] = -z[3];
  z[213] = -z[4];
  z[214] = -z[5];
  z[215] = -z[6];
  z[216] = z[210]*z[211];
  z[217] = z[210]*z[214];
  z[218] = z[211]*z[213];
  z[219] = z[212]*z[214];
  z[220] = z[213]*z[214];
  z[221] = z[214]*z[215];
  z[222] = z[13]*z[218];
  z[223] = -front_.J*z[38];
  z[224] = z[16]*z[9];
  z[225] = -front_.r*z[33];
  z[226] = -z[201]/z[36];
  z[227] = rear_.R/z[43];
  z[228] = -1/z[43];
  z[229] = z[197]*z[56];
  z[230] = -z[197]*z[53];
  z[231] = front_.J*z[53];
  z[232] = -z[27]*z[33];
  z[233] = -z[200]/z[58];
  z[234] = -z[16]*z[228];
  z[235] = -z[210]*z[62];
  z[236] = -z[210]*z[64];
  z[237] = -z[200]*z[67];
  z[238] = -z[228]/z[36];
  z[239] = -z[33]/z[58];
  z[240] = z[45]/z[39];
  z[241] = -z[211]*z[80];
  z[242] = -z[212]*z[86];
  z[243] = -z[33]*z[87];
  z[244] = -z[211]*(-z[220]*z[240] + z[222] - z[34]);
  z[245] = z[114]*z[9];
  z[246] = -z[214]*(-front_.a*z[3] - front_.r*z[33]*z[6] + z[3]*z[97]);
  z[247] = -z[168]*z[211];
  z[248] = z[174]/z[58];
  z[249] = z[176]*z[27];

  ar[0] = z[141]*z[218] - z[142]*z[220] - z[164]*z[27] + z[165]*z[33] - z[169]*z[220] + z[200]*(z[118]*z[189] + z[135]*z[191] - z[146]*z[192]) + z[201]*(z[119]*z[185] + z[183]*z[92] + z[184]*z[93]) + z[210]*(-z[203]*z[205] + z[218]*z[61] + z[220]*z[60] - z[24]*z[29] + z[26]*z[28]);
  ar[1] = z[100]*z[218] - z[156]*z[27] + z[157]*z[33] - z[160]*z[220] + z[200]*(z[118]*z[194] + z[135]*z[195] + z[146]*z[196]) + z[201]*(z[119]*z[187] + z[181]*z[92] + z[182]*z[93]) + z[210]*(-z[14]*z[26] + z[15]*z[24] - z[202]*z[205] - z[211]*z[60] + z[214]*z[61]) - z[220]*z[99];
  ar[2] = z[130]*z[33] - z[143]*z[27] - z[155]*z[220] + z[200]*(z[118]*z[188] + z[135]*z[193] - z[146]*z[190]) + z[201]*(z[119]*z[140] + z[153]*z[92] - z[154]*z[93]) + z[218]*z[94] - z[220]*z[96];
  ar[3] = -z[116]*z[27] + z[125]*z[33] + z[200]*(z[118]*z[178] + z[135]*z[179] + z[146]*z[186]);
  ar[4] = rear_.J*z[218]*z[26] + rear_.J*z[220]*z[24] + z[201]*(-z[119]*z[120] + z[150]*z[92] + z[151]*z[93]);
  ar[5] = z[200]*(z[118]*z[170] + z[135]*z[171] + z[145]*z[146]) - z[220]*z[231] + z[223]*z[27];
  ar[6] = z[226]*(z[104]*z[235] + z[236]*(-z[220]*z[240] + z[222] - z[34]) + z[245]*z[68]);
  ar[7] = z[201]*(z[114]*z[147]*z[228]*z[9] + z[167]*z[235] + z[168]*z[236]);
  ar[8] = -z[201]*(z[235]*z[81] + z[236]*z[80] - z[245]*z[69]);
  ar[9] = -z[233]*(z[146]*z[95] - z[152]*z[33]*z[72] - z[158]*z[243]);
  ar[10] = z[200]*(z[146]*z[248] - z[175]*z[33]*z[72] - z[176]*z[243]);
  ar[11] = z[200]*(-z[122]*z[33]*z[72] - z[123]*z[243] - z[124]*z[146]);
  ar[12] = z[141]*z[214] + z[142]*z[211] - z[164]*z[221] + z[165]*z[219] + z[169]*z[211] + z[200]*(-z[103]*z[189] + z[121]*z[191] - z[137]*z[192]) + z[201]*(z[113]*z[185] - z[183]*z[207]*z[211] + z[184]*z[207]*z[214]);
  ar[13] = z[100]*z[214] - z[156]*z[221] + z[157]*z[219] + z[160]*z[211] + z[200]*(-z[103]*z[194] + z[121]*z[195] + z[137]*z[196]) + z[201]*(z[113]*z[187] - z[181]*z[207]*z[211] + z[182]*z[207]*z[214]) + z[211]*z[99];
  ar[14] = z[130]*z[219] - z[143]*z[221] + z[155]*z[211] + z[200]*(-z[103]*z[188] + z[121]*z[193] - z[137]*z[190]) + z[201]*(z[113]*z[140] - z[153]*z[207]*z[211] - z[154]*z[207]*z[214]) + z[211]*z[96] + z[214]*z[94];
  ar[15] = -z[116]*z[221] + z[125]*z[219] + z[200]*(-z[103]*z[178] + z[121]*z[179] + z[137]*z[186]);
  ar[16] = -rear_.J*z[211]*z[24] + rear_.J*z[214]*z[26] - z[201]*(z[113]*z[120] + z[150]*z[207]*z[211] - z[151]*z[207]*z[214]);
  ar[17] = z[200]*(-z[103]*z[170] + z[121]*z[171] + z[137]*z[145]) + z[211]*z[231] + z[221]*z[223];
  ar[18] = z[226]*(-z[104]*z[207]*z[214] - z[113]*z[213]*z[68] + z[207]*z[244]);
  ar[19] = z[201]*(-z[113]*z[147]*z[213]*z[228] - z[167]*z[207]*z[214] + z[207]*z[247]);
  ar[20] = -z[201]*(z[113]*z[213]*z[69] - z[207]*z[214]*z[81] + z[207]*z[241]);
  ar[21] = -z[233]*(-z[103]*z[152] + z[137]*z[95] - z[158]*z[246]);
  ar[22] = z[200]*(-z[103]*z[175] + z[137]*z[248] - z[176]*z[246]);
  ar[23] = z[200]*(-z[103]*z[122] - z[123]*z[246] - z[124]*z[137]);
  ar[24] = z[164]*z[212] + z[165]*z[215] + z[200]*(-z[115]*z[191] + z[189]*z[91] + z[192]*z[90]) + z[201]*(-z[183]*z[73] + z[184]*z[76]) + z[203]*z[205] - z[213]*z[24]*(rear_.Ixz*z[2] + rear_.Izz*z[214]) + z[213]*z[26]*(rear_.Ixx*z[2] - rear_.Ixz*z[5]) - z[218]*z[61] - z[220]*z[60];
  ar[25] = z[14]*z[26] - z[15]*z[24] + z[156]*z[212] + z[157]*z[215] + z[200]*(-z[115]*z[195] + z[194]*z[91] - z[196]*z[90]) + z[201]*(-z[181]*z[73] + z[182]*z[76]) + z[202]*z[205] + z[211]*z[60] - z[214]*z[61];
  ar[26] = z[130]*z[215] + z[143]*z[212] + z[200]*(-z[115]*z[193] + z[188]*z[91] + z[190]*z[90]) + z[201]*(-z[153]*z[73] - z[154]*z[76]);
  ar[27] = z[116]*z[212] + z[125]*z[215] + z[200]*(-z[115]*z[179] + z[178]*z[91] - z[186]*z[90]);
  ar[28] = -z[201]*(z[150]*z[73] - z[151]*z[76]);
  ar[29] = z[200]*(-z[115]*z[171] - z[145]*z[90] + z[170]*z[91]) - z[212]*z[223];
  ar[30] = z[226]*(-z[104]*z[76] - z[73]*(-z[220]*z[240] + z[222] - z[34]));
  ar[31] = -z[201]*(z[167]*z[76] + z[168]*z[73]);
  ar[32] = -z[201]*(-z[73]*z[80] - z[76]*z[81]);
  ar[33] = z[233]*(z[115]*z[158] + z[152]*z[215]*z[86] + z[242]*z[95]);
  ar[34] = -z[200]*(z[115]*z[176] + z[175]*z[215]*z[86] + z[242]*z[248]);
  ar[35] = z[200]*(-z[115]*z[123] - z[122]*z[215]*z[86] + z[124]*z[242]);
  ar[36] = -z[169] + z[200]*(z[102]*z[192] + z[189]*z[225]);
  ar[37] = -front_.Ixz*z[65] + front_.Izz*z[214]*(state_[10] + z[1]*z[202]) - z[18]*z[56] + z[200]*(-z[102]*z[196] + z[194]*z[225]) - z[204]*z[221] + z[219]*z[230] - z[219]*z[82] - z[221]*z[229];
  ar[38] = front_.Ixx*z[212]*z[56] + front_.Ixz*z[215]*z[32] + front_.Izz*z[24] + z[200]*(z[102]*z[190] + z[188]*z[225]) + z[204]*z[212] + z[212]*z[229] + z[215]*z[230] - z[215]*z[82];
  ar[39] = z[200]*(-z[102]*z[186] + z[178]*z[225]);
  ar[40] = 0;
  ar[41] = z[200]*(-z[102]*z[145] + z[170]*z[225]) - z[231];
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = z[233]*(z[102]*z[95] - z[152]*z[225]);
  ar[46] = -z[200]*(z[102]*z[248] - z[175]*z[225]);
  ar[47] = z[200]*(z[102]*z[124] + z[122]*z[225]);
  ar[48] = rear_.J*z[203]*z[4] - z[201]*(-z[183]*z[71] - z[184]*z[70]);
  ar[49] = rear_.J*z[202]*z[4] + z[201]*(z[181]*z[71] + z[182]*z[70]);
  ar[50] = z[173]*z[206]*z[51];
  ar[51] = 0;
  ar[52] = z[172]*z[206]*z[51];
  ar[53] = 0;
  ar[54] = z[206]*z[51]*(-z[104]*z[211] + z[214]*(-z[220]*z[240] + z[222] - z[34]))/z[36];
  ar[55] = z[177]*z[206]*z[51];
  ar[56] = z[206]*z[51]*(-z[211]*z[81] + z[214]*z[80]);
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = -front_.J*z[77] + z[200]*(z[189]*z[84] + z[191]*z[97]);
  ar[61] = -front_.J*z[63] + z[200]*(z[194]*z[84] + z[195]*z[97]);
  ar[62] = -front_.J*z[212]*z[32] + z[200]*(z[188]*z[84] + z[193]*z[97]);
  ar[63] = z[200]*(z[178]*z[84] + z[179]*z[97]) + z[231];
  ar[64] = 0;
  ar[65] = -z[180]*z[237];
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[233]*z[67]*(z[152]*z[220] - z[158]*z[27]);
  ar[70] = -z[237]*(-z[175]*z[220] + z[249]);
  ar[71] = z[237]*(z[122]*z[220] - z[123]*z[27]);
  ar[72] = z[206]*(z[183]*z[214] + z[184]*z[211])/z[36];
  ar[73] = -z[206]*(-z[181]*z[214] - z[182]*z[211])/z[36];
  ar[74] = -z[173]*z[206]/z[36];
  ar[75] = 0;
  ar[76] = -z[172]*z[206]/z[36];
  ar[77] = 0;
  ar[78] = z[206]*(z[104]*z[211] - z[214]*(-z[220]*z[240] + z[222] - z[34]))/z[224];
  ar[79] = -z[177]*z[206]/z[36];
  ar[80] = z[206]*(z[211]*z[81] - z[214]*z[80])/z[36];
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = -z[206]*(z[183]*z[216]/z[36] - z[184]*z[217]/z[36] - z[185]*z[213]*z[234]);
  ar[85] = -z[206]*(z[181]*z[216]/z[36] - z[182]*z[217]/z[36] - z[187]*z[213]*z[234]);
  ar[86] = -z[206]*(-z[140]*z[213]*z[234] + z[153]*z[216]/z[36] + z[154]*z[217]/z[36]);
  ar[87] = 0;
  ar[88] = z[206]*(-z[120]*z[213]*z[234] - z[150]*z[216]/z[36] + z[151]*z[217]/z[36]);
  ar[89] = 0;
  ar[90] = z[206]*(z[104]*z[217]*z[238] + z[216]*z[238]*(-z[220]*z[240] + z[222] - z[34]) + z[224]*z[68]/z[39]);
  ar[91] = -z[206]*(-z[147]*z[224]/z[39] + z[167]*z[217]/z[36] + z[168]*z[216]/z[36]);
  ar[92] = z[206]*(z[216]*z[80]/z[36] + z[217]*z[81]/z[36] + z[224]*z[228]*z[69]);
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
  ar[96] = z[201]*(-z[183]*z[218] + z[184]*z[220] - z[185]*z[210]);
  ar[97] = z[201]*(-z[181]*z[218] + z[182]*z[220] - z[187]*z[210]);
  ar[98] = -z[201]*(z[140]*z[210] + z[153]*z[218] + z[154]*z[220]);
  ar[99] = 0;
  ar[100] = -z[201]*(-z[120]*z[210] + z[150]*z[218] - z[151]*z[220]);
  ar[101] = 0;
  ar[102] = -z[206]*(-z[104]*z[214] + z[210]*z[68] + z[244])/z[36];
  ar[103] = z[206]*(z[147]*z[210]*z[228] - z[167]*z[214] + z[247]);
  ar[104] = -z[206]*(-z[210]*z[69] - z[214]*z[81] + z[241]);
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = z[233]*(-z[189]*z[220] + z[191]*z[27]);
  ar[109] = z[233]*(-z[194]*z[220] + z[195]*z[27]);
  ar[110] = z[233]*(-z[188]*z[220] + z[193]*z[27]);
  ar[111] = z[233]*(-z[178]*z[220] + z[179]*z[27]);
  ar[112] = 0;
  ar[113] = z[180]*z[233];
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = z[200]*(z[152]*z[220] - z[158]*z[27])/z[54];
  ar[118] = z[233]*(-z[175]*z[220] + z[249]);
  ar[119] = z[233]*(-z[122]*z[220] + z[123]*z[27]);
  ar[120] = -z[200]*(z[189]*z[232]/z[58] + z[191]*z[220]*z[239] + z[192]*z[58]);
  ar[121] = -z[200]*(z[194]*z[232]/z[58] + z[195]*z[220]*z[239] - z[196]*z[58]);
  ar[122] = -z[200]*(z[188]*z[232]/z[58] + z[190]*z[58] + z[193]*z[220]*z[239]);
  ar[123] = -z[200]*(z[178]*z[232]/z[58] + z[179]*z[220]*z[239] - z[186]*z[58]);
  ar[124] = 0;
  ar[125] = -z[200]*(-z[145]*z[58] + z[170]*z[232]/z[58] + z[171]*z[220]*z[239]);
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = z[200]*(-z[152]*z[232]/z[54] + z[158]*z[220]*z[33]/z[54] + z[95]);
  ar[130] = z[200]*(z[174] - z[175]*z[232]/z[58] - z[176]*z[220]*z[239]);
  ar[131] = -z[200]*(z[122]*z[232]/z[58] + z[123]*z[220]*z[239] + z[124]*z[58]);
  ar[132] = z[200]*(z[189]*z[27] + z[191]*z[220] + z[192]*z[33]);
  ar[133] = z[200]*(z[194]*z[27] + z[195]*z[220] - z[196]*z[33]);
  ar[134] = z[200]*(z[188]*z[27] + z[190]*z[33] + z[193]*z[220]);
  ar[135] = z[200]*(z[178]*z[27] + z[179]*z[220] - z[186]*z[33]);
  ar[136] = 0;
  ar[137] = z[200]*(-z[145]*z[33] + z[170]*z[27] + z[171]*z[220]);
  ar[138] = 0;
  ar[139] = 0;
  ar[140] = 0;
  ar[141] = -z[233]*(z[152]*z[27] + z[158]*z[220] - z[33]*z[95]);
  ar[142] = z[200]*(z[174]*z[239] + z[175]*z[27] + z[176]*z[220]);
  ar[143] = z[200]*(z[122]*z[27] + z[123]*z[220] + z[124]*z[33]);
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gaf(double ar[12]) const;
void Bicycle::gaf(double ar[12]) const
{
  double z[73];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = front_.Tz + steer_torque_;
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = front_.Tw - front_.Ty;
  z[11] = rear_.Tz - steer_torque_;
  z[12] = z[7] + z[9];
  z[13] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[14] = -z[13];
  z[15] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[16] = sqrt(z[12]*z[8]);
  z[17] = z[7]*z[8] + z[8]*z[9];
  z[18] = sqrt(z[17]);
  z[19] = pow(z[0], 2) + z[17];
  z[20] = rear_.R*z[1]*z[3]/z[18] + rear_.a;
  z[21] = front_.R/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.r;
  z[22] = rear_.R*z[1]*z[3]/z[18] + rear_.r*z[1]*z[3];
  z[23] = rear_.R*z[3]*z[4]/z[18] + rear_.r*z[3]*z[4];
  z[24] = rear_.r*z[1]*z[3] + z[20];
  z[25] = front_.Gx*z[14] - front_.Gy*z[15]*z[3]*z[4];
  z[26] = front_.Gx*z[3]*z[4] + front_.Gy*z[14]*z[15];
  z[27] = -front_.R*z[3]*z[4]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.b;
  z[28] = -rear_.b + z[23];
  z[29] = front_.R*z[3]*z[4]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.r*z[3]*z[4];
  z[30] = -front_.r*z[3]*z[4] + z[27];
  z[31] = -front_.R*z[14]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.a;
  z[32] = front_.R*z[14]/sqrt(pow(z[14], 2) + z[8]*z[9]) + front_.r*z[14];
  z[33] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[15] + z[2]*z[29]*z[4];
  z[34] = -front_.a*z[5] + front_.r*z[15]*z[2] + z[32]*z[5];
  z[35] = front_.a*z[1] - front_.b*z[4]*z[5] - z[1]*z[32] + z[29]*z[4]*z[5];
  z[36] = z[14]*z[29] - z[3]*z[32]*z[4];
  z[37] = front_.a*z[3]*z[4] - front_.b*z[14] + z[36];
  z[38] = -rear_.Fx;
  z[39] = -front_.a;
  z[40] = -rear_.b;
  z[41] = g_*front_.m;
  z[42] = g_*rear_.m;
  z[43] = -z[1]*z[38];
  z[44] = -z[38]*z[4];
  z[45] = rear_.Fy*z[3];
  z[46] = rear_.Fz*z[1];
  z[47] = rear_.a*z[1];
  z[48] = rear_.a*z[4];
  z[49] = -z[1]*z[40];
  z[50] = rear_.r*z[0];
  z[51] = rear_.r*z[3];
  z[52] = -z[0];
  z[53] = -z[1];
  z[54] = -z[2];
  z[55] = -z[4];
  z[56] = -z[5];
  z[57] = -z[3]*z[53];
  z[58] = z[54]*z[55];
  z[59] = -z[3]*z[55];
  z[60] = z[55]*z[56];
  z[61] = z[8]*z[9];
  z[62] = -front_.r*z[15];
  z[63] = front_.Fx*z[14];
  z[64] = -z[52]/z[16];
  z[65] = -z[3]*(rear_.R/z[18] + rear_.r);
  z[66] = front_.Fz/sqrt(pow(z[14], 2) + z[61]);
  z[67] = (rear_.Gx*z[4] + rear_.Gy*z[0]*z[1])/z[18];
  z[68] = (rear_.Gx*z[1] - rear_.Gy*z[0]*z[4])/z[18];
  z[69] = -z[22]*z[53];
  z[70] = -z[23]*z[53];
  z[71] = z[25]/(pow(z[14], 2) + z[61]);
  z[72] = z[26]/(pow(z[14], 2) + z[61]);

  ar[0] = -front_.Fx*z[15]*z[27] + front_.Fy*z[37] + front_.Fz*z[15]*z[31] + rear_.Fz*z[20]*z[52] - rear_.Tw*z[52] + front_.Tx*z[14] - rear_.Tx*z[57] + z[10]*z[15] + z[11]*z[59] + z[38]*z[52]*(-rear_.R*z[59]/z[18] - z[40]) + z[41]*(z[14]*(-front_.b*z[15] + z[15]*z[29] + z[59]*z[62]) - z[15]*z[37] - z[59]*(z[14]*z[62] + z[15]*z[32] + z[15]*z[39])) - z[42]*(z[52]*(z[22]*z[59] - z[23]*z[57] + z[3]*z[48] + z[3]*z[49]) + z[57]*(z[23]*z[52] + z[40]*z[52] + z[50]*z[59]) + z[59]*(-rear_.a*z[52] - z[22]*z[52] - z[50]*z[57])) + z[45]*(-z[22]*z[55] + z[48] + z[49] - z[70]) + z[52]*(rear_.Tw - rear_.Ty) + z[59]*z[6];
  ar[1] = front_.Fx*z[33] + front_.Fy*z[35] + rear_.Fy*(-z[23]*z[55] - z[40]*z[55] + z[47] + z[69]) + front_.Fz*z[55]*(-z[32]*z[54] - z[39]*z[54] - z[56]*z[62]) + rear_.Fz*z[50]*z[55] + front_.Tx*z[60] - rear_.Tx*z[55] + z[10]*z[58] - z[11]*z[53] + z[41]*(z[14]*z[33] - z[15]*z[35] - z[59]*(z[32]*z[58] + z[39]*z[58] + z[60]*z[62])) + z[42]*z[52]*(z[23]*z[55] + z[40]*z[55] - z[47] + z[51]*z[7] + z[51]*z[9] - z[69]) + z[43]*z[50] - z[53]*z[6];
  ar[2] = -front_.Fx*z[30]*z[56] + front_.Fy*z[30]*z[54] + front_.Fz*z[34] - rear_.Fz*z[24] - front_.Tx*z[54] + rear_.Ty + z[10]*z[56] + z[28]*z[38] - z[3]*z[42]*(-z[24]*z[55] + z[28]*z[53]) + z[41]*(z[14]*(front_.b*z[5] + z[29]*z[56]) + z[15]*(front_.b*z[2] + z[29]*z[54]) + z[34]*z[59]);
  ar[3] = front_.Fx*z[62] - front_.Fy*(front_.r*z[14] - z[31]) - z[15]*z[31]*z[41] + z[6];
  ar[4] = rear_.Tw + z[3]*z[42]*(z[22]*z[55] + z[70]) + z[44]*z[65] + z[46]*z[65];
  ar[5] = -front_.Fx*z[21]*z[59] + front_.Fz*z[14]*z[21] + front_.Tw - z[36]*z[41];
  ar[6] = z[3]*(z[44] + z[46] + z[57]*z[68] + z[59]*z[67])/z[16];
  ar[7] = z[3]*(rear_.Fz*z[55]*z[64] + rear_.Gy*pow(z[12], 2)*pow(z[3], 3)/z[17] + z[12]*z[45]/z[18] + z[43]*z[64] + z[57]*z[64]*z[67] - z[59]*z[64]*z[68]);
  ar[8] = -rear_.Fy*z[52] + rear_.Fz*z[59] + rear_.Gy*z[0]*z[12]*z[8]/z[18] + rear_.Gz*z[19] + z[19]*z[42] - z[3]*z[43] + z[53]*z[67]*z[8] - z[55]*z[68]*z[8];
  ar[9] = front_.Fx*z[59]/sqrt(pow(z[14], 2) + z[61]) - z[14]*z[66] + z[14]*z[71] + z[59]*z[72];
  ar[10] = front_.Fy*sqrt(pow(z[14], 2) + z[61]) + front_.Gy*(pow(z[14], 2) + z[61]) + z[14]*z[15]*z[72] + z[15]*z[59]*z[66] - z[15]*z[59]*z[71] + z[15]*z[63]/sqrt(pow(z[14], 2) + z[61]);
  ar[11] = -front_.Fy*z[15] + front_.Fz*z[59] - front_.Gy*z[15]*sqrt(pow(z[14], 2) + z[61]) + front_.Gz*(pow(z[14], 2) + pow(z[15], 2) + z[61]) + z[14]*z[26]/sqrt(pow(z[14], 2) + z[61]) - z[25]*z[59]/sqrt(pow(z[14], 2) + z[61]) + z[41]*(pow(z[14], 2) + pow(z[15], 2) + z[61]) + z[63];
}

/** Computes the n-d array of shape (12, 3)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::gaf_dq(double ar[36]) const;
void Bicycle::gaf_dq(double ar[36]) const
{
  double z[195];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = front_.Tz + steer_torque_;
  z[7] = pow(z[0], 2);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[3], 3);
  z[11] = pow(z[4], 2);
  z[12] = front_.Tw - front_.Ty;
  z[13] = rear_.Tz - steer_torque_;
  z[14] = rear_.Fx*z[4] + rear_.Fz*z[1];
  z[15] = rear_.a*z[4] + rear_.b*z[1];
  z[16] = z[11] + z[8];
  z[17] = rear_.a*z[1] - rear_.b*z[4];
  z[18] = z[16] - 1;
  z[19] = rear_.Gx*z[4] + rear_.Gy*z[0]*z[1];
  z[20] = rear_.Gx*z[1] - rear_.Gy*z[0]*z[4];
  z[21] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[22] = -z[21];
  z[23] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[24] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[25] = -z[0]*z[1]*z[5] - z[2]*z[3];
  z[26] = sqrt(z[16]*z[9]);
  z[27] = pow(z[22], 3);
  z[28] = z[11]*z[9] + z[8]*z[9];
  z[29] = z[0]*z[11]*z[3] + z[0]*z[3]*z[8];
  z[30] = sqrt(z[28]);
  z[31] = pow(z[28], 3.0L/2.0L);
  z[32] = z[1]*z[3] + z[22]*z[5];
  z[33] = z[1]*z[4]*z[9] + z[22]*z[3]*z[4]*z[5];
  z[34] = rear_.R*z[1]*z[3]/z[30] + rear_.r*z[1]*z[3];
  z[35] = rear_.R*z[3]*z[4]/z[30] + rear_.r*z[3]*z[4];
  z[36] = rear_.a + z[34];
  z[37] = front_.Gx*z[3]*z[4] + front_.Gy*z[22]*z[24];
  z[38] = -rear_.b + z[35];
  z[39] = -front_.Gx*z[22] + front_.Gy*z[24]*z[3]*z[4];
  z[40] = -z[0]*z[11]*z[3] - z[22]*z[25];
  z[41] = z[2]*z[24] + z[32];
  z[42] = front_.R*z[3]*z[4]/sqrt(z[11]*z[9] + pow(z[22], 2)) + front_.r*z[3]*z[4];
  z[43] = rear_.r*z[0]*z[3]*z[4] - z[0]*z[35];
  z[44] = front_.b*z[2] - z[2]*z[42];
  z[45] = front_.b*z[5] - z[42]*z[5];
  z[46] = rear_.a*z[0] - rear_.r*z[0]*z[1]*z[3] + z[0]*z[34];
  z[47] = rear_.b*z[0] + z[43];
  z[48] = -front_.b*z[2]*z[4] + z[2]*z[4]*z[42];
  z[49] = -front_.r*z[22]*z[23] + front_.r*z[24]*z[25];
  z[50] = -front_.R*z[22]/sqrt(z[11]*z[9] + pow(z[22], 2)) - front_.r*z[22];
  z[51] = -front_.r*z[1]*z[24] + z[48];
  z[52] = -front_.b*z[24] + z[24]*z[42];
  z[53] = -front_.b*z[22] + z[22]*z[42];
  z[54] = z[1]*z[34] + z[35]*z[4];
  z[55] = rear_.R*z[0]/z[30] - rear_.R*z[29]*z[3]/z[31] + rear_.r*z[0];
  z[56] = -z[0]*z[1]*z[35] + z[0]*z[34]*z[4];
  z[57] = rear_.R*z[0]*z[1]/z[30] - rear_.R*z[1]*z[29]*z[3]/z[31] + rear_.r*z[0]*z[1];
  z[58] = rear_.R*z[0]*z[4]/z[30] - rear_.R*z[29]*z[3]*z[4]/z[31] + rear_.r*z[0]*z[4];
  z[59] = z[11]*z[9]/sqrt(z[11]*z[9] + pow(z[22], 2)) + pow(z[22], 2)/sqrt(z[11]*z[9] + pow(z[22], 2));
  z[60] = z[11]*z[9]/(z[11]*z[9] + pow(z[22], 2)) + pow(z[22], 2)/(z[11]*z[9] + pow(z[22], 2)) - 2;
  z[61] = front_.a*z[5] - front_.r*z[2]*z[24] + z[5]*z[50];
  z[62] = -front_.r*z[24]*z[3]*z[4] + z[52];
  z[63] = -front_.a*z[2]*z[4] - front_.r*z[24]*z[4]*z[5] - z[2]*z[4]*z[50];
  z[64] = front_.R*z[1]/sqrt(z[11]*z[9] + pow(z[22], 2)) - front_.R*z[33]*z[4]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.r*z[1];
  z[65] = front_.R*z[1]*z[3]/sqrt(z[11]*z[9] + pow(z[22], 2)) - front_.R*z[3]*z[33]*z[4]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.r*z[1]*z[3];
  z[66] = front_.R*z[0]/sqrt(z[11]*z[9] + pow(z[22], 2)) + front_.R*z[3]*z[40]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.r*z[0];
  z[67] = -front_.R*z[2]*z[22]*z[24]*z[3]*z[4]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + z[45];
  z[68] = -front_.R*z[22]*z[24]*z[3]*z[4]*z[5]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - z[44];
  z[69] = 2*z[0]*z[11] + 2*z[0]*z[8] - z[11]*z[29]*z[3]/z[28] - z[29]*z[3]*z[8]/z[28];
  z[70] = front_.R*z[0]*z[4]/sqrt(z[11]*z[9] + pow(z[22], 2)) + front_.R*z[3]*z[4]*z[40]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.r*z[0]*z[4];
  z[71] = front_.R*pow(z[22], 2)*z[24]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - front_.R*z[24]/sqrt(z[11]*z[9] + pow(z[22], 2)) - front_.r*z[24];
  z[72] = -rear_.Gx*z[0]*z[4] + rear_.Gx*z[29]*z[3]*z[4]/z[28] + rear_.Gy*z[0]*z[1]*z[29]*z[3]/z[28] - rear_.Gy*z[1]*z[7] + rear_.Gy*z[1]*z[9];
  z[73] = -front_.a*z[24] - front_.r*z[22]*z[24] - z[24]*z[50];
  z[74] = -front_.R*z[22]*z[33]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.R*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[22], 2)) + front_.r*z[3]*z[4]*z[5];
  z[75] = front_.a*z[1] - front_.b*z[4]*z[5] + z[1]*z[50] + z[4]*z[42]*z[5];
  z[76] = front_.r*pow(z[2], 2)*z[3]*z[4] + z[5]*z[74];
  z[77] = -front_.R*z[11]*z[2]*z[22]*z[24]*z[3]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.b*z[4]*z[5] + front_.r*z[1]*z[22] - z[4]*z[42]*z[5];
  z[78] = front_.r*z[1]*z[23] + z[2]*z[4]*z[70];
  z[79] = front_.R*z[22]*z[40]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.R*z[25]/sqrt(z[11]*z[9] + pow(z[22], 2)) + front_.r*z[25];
  z[80] = rear_.a*z[3] + rear_.r*z[1]*z[7] - rear_.r*z[1]*z[9] - z[0]*z[57] + z[3]*z[34];
  z[81] = rear_.b*z[3] - rear_.r*z[4]*z[7] + rear_.r*z[4]*z[9] + z[0]*z[58] - z[3]*z[35];
  z[82] = front_.a*z[3]*z[4] + z[3]*z[4]*z[50] + z[53];
  z[83] = rear_.Fx*z[4]*z[55] + rear_.Fz*z[1]*z[55];
  z[84] = -front_.Gx*pow(z[22], 2)*z[24]/(z[11]*z[9] + pow(z[22], 2)) + front_.Gx*z[24] + front_.Gy*z[22]*pow(z[24], 2)*z[3]*z[4]/(z[11]*z[9] + pow(z[22], 2)) + front_.Gy*z[22]*z[3]*z[4];
  z[85] = -front_.Gx*z[22]*z[24]*z[3]*z[4]/(z[11]*z[9] + pow(z[22], 2)) - front_.Gy*pow(z[22], 2)*pow(z[24], 2)/(z[11]*z[9] + pow(z[22], 2)) - front_.Gy*pow(z[22], 2) + front_.Gy*pow(z[24], 2);
  z[86] = front_.r*z[2]*z[23] - z[5]*z[79];
  z[87] = z[1]*z[57] + z[4]*z[58];
  z[88] = -z[1]*z[3]*z[58] + z[3]*z[4]*z[57];
  z[89] = -2*z[1]*z[4]*z[9] + z[11]*z[33]*z[9]/(z[11]*z[9] + pow(z[22], 2)) + pow(z[22], 2)*z[33]/(z[11]*z[9] + pow(z[22], 2)) - 2*z[22]*z[3]*z[4]*z[5];
  z[90] = front_.r*z[2]*z[22]*z[3]*z[4] + front_.r*z[24]*z[3]*z[4]*z[5] - z[24]*z[74];
  z[91] = -front_.R*pow(z[22], 2)*z[24]*z[3]*z[4]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + z[3]*z[4]*z[71];
  z[92] = front_.b*z[1]*z[2] + front_.r*z[1]*z[2]*z[3]*z[4] - front_.r*z[24]*z[4] - z[1]*z[2]*z[42] - z[2]*z[4]*z[65];
  z[93] = front_.Gx*z[22]*z[33]/(z[11]*z[9] + pow(z[22], 2)) - front_.Gx*z[3]*z[4]*z[5] + front_.Gy*z[1]*z[24]*z[3] + front_.Gy*z[11]*z[2]*z[9] - front_.Gy*z[24]*z[3]*z[33]*z[4]/(z[11]*z[9] + pow(z[22], 2));
  z[94] = -2*z[0]*z[11]*z[3] - z[11]*z[40]*z[9]/(z[11]*z[9] + pow(z[22], 2)) - pow(z[22], 2)*z[40]/(z[11]*z[9] + pow(z[22], 2)) - 2*z[22]*z[25];
  z[95] = front_.Gx*z[1]*z[3] - front_.Gx*z[3]*z[33]*z[4]/(z[11]*z[9] + pow(z[22], 2)) + front_.Gy*z[2]*z[22]*z[3]*z[4] - front_.Gy*z[22]*z[24]*z[33]/(z[11]*z[9] + pow(z[22], 2)) + front_.Gy*z[24]*z[3]*z[4]*z[5];
  z[96] = front_.b*z[2]*z[3]*z[4] + front_.r*z[1]*z[24]*z[3] + front_.r*z[11]*z[2]*z[9] - z[2]*z[3]*z[4]*z[42] - z[24]*z[65];
  z[97] = front_.Gx*z[22]*z[40]/(z[11]*z[9] + pow(z[22], 2)) + front_.Gx*z[25] - front_.Gy*z[0]*z[24]*z[4] + front_.Gy*z[23]*z[3]*z[4] - front_.Gy*z[24]*z[3]*z[4]*z[40]/(z[11]*z[9] + pow(z[22], 2));
  z[98] = front_.a*z[2] + front_.r*z[2]*z[22] + front_.r*z[24]*z[5] + z[2]*z[50] + z[5]*z[71];
  z[99] = -front_.a*z[1]*z[2] - front_.r*z[1]*z[24]*z[5] - front_.r*z[11]*z[2]*z[3]*z[5] - z[1]*z[2]*z[50] + z[2]*z[4]*z[74];
  z[100] = -front_.Gx*z[0]*z[4] - front_.Gx*z[3]*z[4]*z[40]/(z[11]*z[9] + pow(z[22], 2)) + front_.Gy*z[22]*z[23] - front_.Gy*z[22]*z[24]*z[40]/(z[11]*z[9] + pow(z[22], 2)) - front_.Gy*z[24]*z[25];
  z[101] = -front_.R*z[11]*z[22]*z[24]*z[3]*z[5]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + z[1]*z[71] + z[48];
  z[102] = front_.b*z[23] - front_.r*z[0]*z[24]*z[4] + front_.r*z[23]*z[3]*z[4] - z[23]*z[42] + z[24]*z[70];
  z[103] = z[0]*z[4]*z[50] + z[22]*z[70] + z[25]*z[42];
  z[104] = front_.a*z[2]*z[3]*z[4] + z[2]*z[3]*z[4]*z[50] + z[90];
  z[105] = z[52] + z[91];
  z[106] = front_.a*z[22] + front_.r*pow(z[22], 2) - front_.r*pow(z[24], 2) + z[22]*z[50] - z[24]*z[71];
  z[107] = rear_.a*z[0]*z[4] + rear_.b*z[0]*z[1] + z[56] + z[88];
  z[108] = z[1]*z[79] - z[4]*z[5]*z[70];
  z[109] = -front_.a*z[23] - z[23]*z[50] - z[24]*z[79] + z[49];
  z[110] = front_.a*z[4] + front_.b*z[1]*z[5] - z[1]*z[42]*z[5] + z[1]*z[74] - z[4]*z[5]*z[65] + z[4]*z[50];
  z[111] = z[1]*z[3]*z[50] + z[22]*z[65] + z[3]*z[4]*z[42]*z[5] - z[3]*z[4]*z[74];
  z[112] = front_.a*z[1]*z[3] - front_.b*z[3]*z[4]*z[5] + z[111];
  z[113] = front_.a*z[0]*z[4] - front_.b*z[25] + z[103] - z[3]*z[4]*z[79];
  z[114] = -z[0]*z[11]*z[29]*z[9]/z[31] - z[0]*z[29]*z[8]*z[9]/z[31] - z[0]*(2*z[0]*z[11]*z[3]/z[30] + 2*z[0]*z[3]*z[8]/z[30] - z[11]*z[29]*z[9]/z[31] - z[29]*z[8]*z[9]/z[31]) - z[10]*z[11]/z[30] - z[10]*z[8]/z[30] + 2*z[11]*z[3]*z[7]/z[30] + z[3]*(z[11]*z[9]/z[30] + z[8]*z[9]/z[30]) + 2*z[3]*z[7]*z[8]/z[30];
  z[115] = z[11]*z[22]*pow(z[24], 2)*z[9]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + z[11]*z[22]*z[9]/sqrt(z[11]*z[9] + pow(z[22], 2)) - 2*z[22]*pow(z[24], 2)/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[22]*z[59] + pow(z[24], 2)*z[27]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + z[24]*(-z[11]*z[22]*z[24]*z[9]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + 2*z[22]*z[24]/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[24]*z[27]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L)) + z[27]/sqrt(z[11]*z[9] + pow(z[22], 2));
  z[116] = -2*z[1]*z[24]*z[4]*z[9]/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[10]*z[2]*pow(z[4], 3)/sqrt(z[11]*z[9] + pow(z[22], 2)) + z[11]*z[24]*z[33]*z[9]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - z[2]*pow(z[22], 2)*z[3]*z[4]/sqrt(z[11]*z[9] + pow(z[22], 2)) + z[2]*z[3]*z[4]*z[59] + pow(z[22], 2)*z[24]*z[33]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - 2*z[22]*z[24]*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[24]*(-2*z[1]*z[4]*z[9]/sqrt(z[11]*z[9] + pow(z[22], 2)) + z[11]*z[33]*z[9]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + pow(z[22], 2)*z[33]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - 2*z[22]*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[22], 2)));
  z[117] = -2*z[0]*z[11]*z[24]*z[3]/sqrt(z[11]*z[9] + pow(z[22], 2)) + z[11]*z[23]*z[9]/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[11]*z[24]*z[40]*z[9]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + pow(z[22], 2)*z[23]/sqrt(z[11]*z[9] + pow(z[22], 2)) - pow(z[22], 2)*z[24]*z[40]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - 2*z[22]*z[24]*z[25]/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[23]*z[59] - z[24]*(-2*z[0]*z[11]*z[3]/sqrt(z[11]*z[9] + pow(z[22], 2)) - z[11]*z[40]*z[9]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - pow(z[22], 2)*z[40]/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) - 2*z[22]*z[25]/sqrt(z[11]*z[9] + pow(z[22], 2)));
  z[118] = -front_.Fx;
  z[119] = -front_.Fy;
  z[120] = -rear_.Fy;
  z[121] = -front_.Fz;
  z[122] = 2*front_.Gy;
  z[123] = -front_.a;
  z[124] = -front_.b;
  z[125] = -rear_.b;
  z[126] = g_*front_.m;
  z[127] = g_*rear_.m;
  z[128] = rear_.Fx*z[1];
  z[129] = -z[120]*z[3];
  z[130] = -z[121]*z[4];
  z[131] = rear_.Fz*z[4];
  z[132] = front_.Tx*z[5];
  z[133] = rear_.Tx*z[1];
  z[134] = front_.r*z[2];
  z[135] = front_.r*z[4];
  z[136] = front_.r*z[5];
  z[137] = rear_.r*z[0];
  z[138] = -z[0];
  z[139] = -z[1];
  z[140] = -z[3];
  z[141] = -z[4];
  z[142] = -z[5];
  z[143] = z[138]*z[139];
  z[144] = z[138]*z[140];
  z[145] = z[138]*z[141];
  z[146] = z[139]*z[140];
  z[147] = -z[140]*z[2];
  z[148] = -z[141]*z[2];
  z[149] = z[140]*z[141];
  z[150] = z[140]*z[142];
  z[151] = z[141]*z[142];
  z[152] = rear_.r*z[7];
  z[153] = rear_.r*z[9];
  z[154] = -z[10];
  z[155] = z[11]*z[9];
  z[156] = rear_.Gy*z[16];
  z[157] = -z[139]*z[19];
  z[158] = z[16]*z[9];
  z[159] = z[118]*z[24];
  z[160] = -front_.Gy*z[24];
  z[161] = front_.r*z[22];
  z[162] = z[140]*z[24];
  z[163] = -z[141]*z[22];
  z[164] = -z[142]*z[22];
  z[165] = z[7]/pow(z[16]*z[9], 3.0L/2.0L);
  z[166] = z[7]/z[26];
  z[167] = z[9]/z[26];
  z[168] = rear_.R/z[30];
  z[169] = -z[140]/z[30];
  z[170] = -z[154]/z[30];
  z[171] = -z[140]*(rear_.R/z[30] + rear_.r);
  z[172] = -z[121]/sqrt(z[155] + pow(z[22], 2));
  z[173] = front_.R/pow(z[155] + pow(z[22], 2), 3.0L/2.0L);
  z[174] = -pow(z[22], 2)*z[24];
  z[175] = -1/(z[155] + pow(z[22], 2));
  z[176] = -sqrt(z[155] + pow(z[22], 2));
  z[177] = z[20]/z[30];
  z[178] = z[22]*z[32];
  z[179] = z[24]/z[176];
  z[180] = z[25]/z[176];
  z[181] = -z[175]*z[22];
  z[182] = -z[22]/z[176];
  z[183] = z[39]/z[176];
  z[184] = pow(z[175], 2)*z[37];
  z[185] = pow(z[175], 2)*z[39];
  z[186] = -z[175]*z[39];
  z[187] = z[175]*z[37];
  z[188] = z[40]/pow(z[176], 3);
  z[189] = -z[24]*(-front_.R*pow(z[22], 2)/pow(z[11]*z[9] + pow(z[22], 2), 3.0L/2.0L) + front_.R/sqrt(z[11]*z[9] + pow(z[22], 2)) + front_.r);
  z[190] = -z[118]*z[64];
  z[191] = -z[118]*z[66];
  z[192] = (rear_.Gx*z[0]*z[1] - rear_.Gx*z[1]*z[29]*z[3]/z[28] + rear_.Gy*z[0]*z[29]*z[3]*z[4]/z[28] - rear_.Gy*z[4]*z[7] + rear_.Gy*z[4]*z[9])/z[30];
  z[193] = z[72]/z[30];
  z[194] = -z[89]/z[176];

  ar[0] = rear_.Fx*z[81] - rear_.Fz*z[80] - rear_.Tw*z[140] - front_.Tx*z[25] + z[102]*z[118] + z[107]*z[120] + z[109]*z[121] + z[113]*z[119] + z[12]*z[23] + z[126]*(-z[102]*z[22] - z[109]*z[149] + z[113]*z[24] + z[145]*z[73] - z[23]*z[82] - z[25]*z[62]) + z[127]*(z[107]*z[138] - z[140]*(-rear_.a*z[141]*z[3] + z[1]*z[125]*z[140] - z[146]*z[35] + z[149]*z[34]) + z[143]*z[47] + z[145]*z[46] - z[146]*z[81] - z[149]*z[80]) - z[13]*z[145] - z[133]*z[138] + z[140]*(rear_.Tw - rear_.Ty) - z[145]*z[6];
  ar[1] = -rear_.Tx*z[149] + z[104]*z[121] + z[112]*z[119] - z[118]*z[96] + z[12]*z[141]*z[147] + z[126]*(-z[104]*z[149] + z[112]*z[24] - z[141]*z[147]*z[82] + z[142]*z[149]*z[62] + z[146]*z[73] + z[22]*z[96]) + z[127]*(z[138]*(-rear_.a*z[1]*z[140] + z[125]*z[140]*z[141]) + z[146]*z[46] + z[146]*(z[137]*z[146] + z[138]*z[34]) + z[149]*z[43] - z[149]*z[47]) + z[128]*z[144]*z[168] - z[129]*z[17] - z[13]*z[146] - z[131]*z[144]*z[168] - z[132]*z[149] - z[146]*z[6];
  ar[2] = -front_.Tx*z[24] + z[105]*z[119] - z[106]*z[121] - z[118]*z[22]*(front_.R*z[149]/sqrt(z[155] + pow(z[22], 2)) + z[124] + z[149]*z[173]*pow(z[24], 2)) + z[12]*z[22] + z[126]*(z[105]*z[24] + z[106]*z[149] - z[22]*z[82] + z[22]*(z[135]*z[140]*z[22] + z[149]*z[173]*z[22]*pow(z[24], 2) + z[53]) - z[24]*z[62]);
  ar[3] = -rear_.r*z[128]*z[140] + rear_.r*z[131]*z[140] - z[108]*z[119] + z[118]*z[78] + z[120]*z[87] + z[126]*(-z[108]*z[24] + z[145]*z[63] + z[149]*(-z[135]*z[142]*z[23] + z[148]*z[79]) - z[22]*z[78] - z[23]*z[75] - z[25]*z[51]) + z[127]*(z[11]*z[152] - z[11]*z[153] + z[138]*z[87] - z[140]*(z[17] + z[54]) + z[152]*z[8] - z[153]*z[8]) + z[130]*(z[136]*z[23] + z[2]*z[79]);
  ar[4] = rear_.Fx*z[137]*z[4] + rear_.Fz*z[1]*z[137] - z[110]*z[119] - z[118]*z[92] + z[12]*z[139]*z[2] - z[120]*z[15] - z[121]*z[99] + z[126]*(-z[110]*z[24] - z[141]*z[147]*z[75] + z[142]*z[149]*z[51] + z[146]*z[63] + z[149]*z[99] + z[22]*z[92]) - z[127]*z[138]*z[15] - z[13]*z[141] + z[132]*z[139] - z[133] - z[141]*z[6];
  ar[5] = -front_.Tx*z[148] + z[101]*z[119] + z[118]*z[77] + z[12]*z[151] + z[126]*(z[101]*z[24] + z[149]*(z[123]*z[142]*z[4] + z[134]*z[141]*z[24] + z[135]*z[164] - z[148]*z[71] + z[151]*z[50]) - z[22]*z[75] - z[22]*z[77] - z[24]*z[51]) + z[130]*(z[136]*z[22] - z[2]*z[71] + z[61]);
  ar[6] = z[119]*z[148]*z[66] - z[121]*z[86] + z[126]*(z[145]*z[61] + z[149]*z[86] + z[164]*z[70] + z[2]*z[24]*z[70] + z[23]*z[44] - z[25]*z[45]) + z[127]*(-z[143]*z[38] + z[145]*z[36] + z[88]) + z[151]*z[191] + z[83];
  ar[7] = z[119]*z[147]*z[64] + z[121]*z[76] - z[126]*(-z[141]*z[147]*z[44] - z[142]*z[149]*z[45] - z[146]*z[61] + z[149]*z[76] - z[164]*z[65] - z[2]*z[24]*z[65]) + z[127]*z[140]*(z[139]*z[36] + z[141]*z[38] + z[54]) + z[128]*z[171] - z[131]*z[171] + z[150]*z[190];
  ar[8] = -z[118]*z[68] + z[119]*z[67] + z[12]*z[2] - z[121]*z[98] + z[126]*(z[149]*z[98] + z[22]*z[44] + z[22]*z[68] - z[24]*z[45] + z[24]*z[67]) + z[132];
  ar[9] = front_.r*z[118]*z[23] - z[119]*z[79] + z[126]*(z[23]*(z[123] - z[50]) - z[24]*z[79] + z[49]);
  ar[10] = -z[118]*z[134]*z[149] - z[119]*z[74] + z[126]*(z[141]*z[147]*(z[123] - z[50]) + z[90]);
  ar[11] = z[118]*z[161] + z[119]*z[189] + z[126]*(front_.r*pow(z[24], 2) - z[161]*z[22] + z[22]*(z[123] - z[50]) + z[24]*z[71]);
  ar[12] = z[127]*(z[56] + z[88]) + z[83];
  ar[13] = z[171]*(z[128] - z[131]);
  ar[14] = 0;
  ar[15] = z[121]*z[79] + z[126]*(z[103] - z[149]*z[79]) - z[141]*z[191];
  ar[16] = z[111]*z[126] + z[121]*z[74] - z[140]*z[190];
  ar[17] = -z[121]*z[189] + z[126]*(z[24]*z[42] + z[91]) + z[149]*z[159]*z[173]*z[22];
  ar[18] = (-z[146]*z[192] + z[149]*z[193])/z[26];
  ar[19] = -z[140]*(-z[128] + z[131])/z[26];
  ar[20] = 0;
  ar[21] = rear_.Gz*z[114] + z[114]*z[127] + z[128]*z[158]*z[165] - z[128]*z[166] + z[128]*z[167] - z[129]*z[69]/z[30] - z[131]*z[158]*z[165] + z[131]*z[166] - z[131]*z[167] - z[141]*z[144]*z[192]/z[26] + z[141]*z[16]*z[165]*z[170]*z[20] + z[141]*z[170]*z[20]/z[26] + z[143]*z[169]*z[72]/z[26] - z[146]*z[166]*z[19]/z[30] + z[149]*z[166]*z[177] + 2*z[154]*z[156]*z[69]/z[28] + z[157]*z[16]*z[165]*z[170] + z[157]*z[170]/z[26];
  ar[22] = z[14]*z[144]/z[26];
  ar[23] = 0;
  ar[24] = -rear_.Gy*z[0]*z[169]*z[69] - 2*rear_.Gz*z[144]*z[18] - 2*z[127]*z[144]*z[18] - z[128]*z[138] + z[129] + z[131]*z[138] + z[141]*z[144]*z[177] + z[143]*z[169]*z[19] - z[146]*z[193] - z[149]*z[192] + z[156]*z[170];
  ar[25] = z[14]*z[140];
  ar[26] = 0;
  ar[27] = -z[100]*z[149]*z[175] - z[118]*z[145]/z[176] - z[118]*z[149]*z[188] + z[145]*z[187] - z[149]*z[184]*z[40] + z[172]*z[181]*z[40] + z[172]*z[25] + z[181]*z[186]*z[40] - z[181]*z[97] + z[186]*z[25];
  ar[28] = -z[118]*z[146]/z[176] + z[118]*z[155]*z[32]/pow(z[176], 3) - z[130]*z[140]*z[178]/pow(z[176], 3) - z[130]*z[150]/z[176] - z[142]*z[149]*z[186] + z[146]*z[187] + z[149]*z[175]*z[95] - z[149]*z[178]*z[185] + z[155]*z[184]*z[32] + z[181]*z[93];
  ar[29] = -z[149]*z[159]*z[182]/pow(z[176], 2) + z[149]*z[175]*z[85] - z[149]*z[181]*z[187]*z[24] - z[172]*z[174]*z[175] + z[172]*z[24] + z[174]*z[185] - z[181]*z[84] + z[186]*z[24];
  ar[30] = front_.Gz*z[117] + z[100]*z[181]*z[24] + z[117]*z[126] - z[118]*z[182]*z[23] + z[119]*z[94]/z[176] + z[122]*z[94] - z[130]*z[138]*z[179] + z[130]*z[140]*z[23]/z[176] - z[130]*z[162]*z[188] - z[145]*z[186]*z[24] - z[149]*z[175]*z[24]*z[97] - z[149]*z[185]*z[24]*z[40] + z[149]*z[186]*z[23] - z[159]*z[180] + z[159]*z[182]*z[40]/pow(z[176], 2) + z[181]*z[187]*z[24]*z[40] + z[181]*z[23]*z[37] + z[187]*z[24]*z[25];
  ar[31] = front_.Gz*z[116] + z[116]*z[126] - z[118]*z[147]*z[163]/z[176] - z[119]*z[194] + z[122]*z[89] + z[142]*z[149]*z[159]/z[176] - z[142]*z[149]*z[187]*z[24] - z[146]*z[172]*z[24] - z[146]*z[186]*z[24] + z[147]*z[163]*z[187] + z[149]*z[159]*z[178]/pow(z[176], 3) + z[149]*z[175]*z[24]*z[93] + z[149]*z[178]*z[184]*z[24] - z[155]*z[172]*z[175]*z[24]*z[32] - z[155]*z[172]*z[2] + z[155]*z[185]*z[24]*z[32] - z[155]*z[186]*z[2] - z[181]*z[24]*z[95];
  ar[32] = front_.Gz*z[115] + z[115]*z[126] - z[118]*z[182]*z[22] + z[119]*z[179]*z[22]*z[60] + z[122]*z[22]*z[24]*z[60] - z[130]*z[140]*z[182] + z[130]*z[162]*z[22]*z[24]/pow(z[176], 3) - z[149]*z[175]*z[24]*z[84] + z[149]*z[181]*z[186]*pow(z[24], 2) + z[149]*z[181]*z[39] - z[159]*z[174]/pow(z[176], 3) - z[159]*z[179] - z[174]*z[184]*z[24] + z[181]*z[22]*z[37] - z[181]*z[24]*z[85] + z[187]*pow(z[24], 2);
  ar[33] = front_.Gy*z[176]*z[23] - 2*front_.Gz*(-z[23]*z[24] - z[40]) + z[100]*z[182] + z[118]*z[25] + z[119]*z[23] - 2*z[126]*(-z[23]*z[24] - z[40]) + z[130]*z[138] + z[145]*z[183] - z[149]*z[97]/z[176] - z[160]*z[94]/z[176] + z[180]*z[37];
  ar[34] = -front_.Gy*z[149]*z[176]*z[2] - 2*front_.Gz*z[149]*z[41] - z[118]*z[142]*z[149] + z[119]*z[141]*z[147] + z[121]*z[146] - 2*z[126]*z[149]*z[41] - z[142]*z[149]*z[37]/z[176] + z[146]*z[183] + z[149]*z[93]/z[176] + z[160]*z[194] - z[182]*z[95];
  ar[35] = front_.Gy*z[176]*z[22] + z[119]*z[22] - z[149]*z[84]/z[176] + z[159] + z[160]*z[182]*z[24]*z[60] + z[179]*z[37] - z[182]*z[85];
}

/** Computes the n-d array of shape (12, 22)
 *
 * @param[out] ar a C-array of with 264 elements
 */
//  void Bicycle::gaf_dr(double ar[264]) const;
void Bicycle::gaf_dr(double ar[264]) const
{
  double z[70];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = rear_.a + rear_.r*z[1]*z[3];
  z[11] = z[7] + z[9];
  z[12] = front_.a*z[1] - front_.b*z[4]*z[5];
  z[13] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[14] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[15] = -z[13];
  z[16] = sqrt(z[11]*z[8]);
  z[17] = pow(z[14], 2);
  z[18] = z[7]*z[8] + z[8]*z[9];
  z[19] = sqrt(z[18]);
  z[20] = -rear_.R/z[16] - rear_.r;
  z[21] = z[18] + z[6];
  z[22] = front_.a*z[3]*z[4] - front_.b*z[14];
  z[23] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[15];
  z[24] = z[17] + z[8]*z[9];
  z[25] = -rear_.R/z[19] - rear_.r;
  z[26] = sqrt(z[24]);
  z[27] = front_.R/z[26] + front_.r;
  z[28] = rear_.R*z[1]*z[3]/z[19] + rear_.r*z[1]*z[3];
  z[29] = -rear_.R*z[3]*z[4]/z[19] - rear_.r*z[3]*z[4];
  z[30] = front_.b - z[27]*z[3]*z[4];
  z[31] = front_.R*z[3]*z[4]/z[26] + front_.r*z[3]*z[4];
  z[32] = -front_.R*z[14]/z[26] + front_.a;
  z[33] = front_.R*z[14]/z[26] + front_.r*z[14];
  z[34] = -front_.a;
  z[35] = -rear_.a;
  z[36] = -front_.b;
  z[37] = -rear_.b;
  z[38] = -rear_.m;
  z[39] = -z[35]*z[4];
  z[40] = -z[1]*z[37];
  z[41] = rear_.r*z[0];
  z[42] = rear_.r*z[3];
  z[43] = -z[1];
  z[44] = -z[2];
  z[45] = -z[4];
  z[46] = -z[5];
  z[47] = z[44]*z[45];
  z[48] = -z[3]*z[45];
  z[49] = z[45]*z[46];
  z[50] = z[3]*z[43];
  z[51] = front_.r*z[48];
  z[52] = -z[42]*z[45];
  z[53] = z[0]*z[8];
  z[54] = z[8]*z[9];
  z[55] = -front_.r*z[15];
  z[56] = z[6]/z[11];
  z[57] = -front_.r*z[14];
  z[58] = rear_.R/z[16];
  z[59] = z[0]/z[16];
  z[60] = z[7]/z[16];
  z[61] = z[9]/z[16];
  z[62] = -z[25]*z[3];
  z[63] = -1/z[26];
  z[64] = z[11]/z[19];
  z[65] = z[27]*z[3]*z[9];
  z[66] = pow(z[15], 2)/z[24];
  z[67] = z[14]*z[27];
  z[68] = z[53]*(-z[60] - z[61] + z[64]);
  z[69] = -z[15]*(z[17]*z[63] + z[26] + z[54]*z[63]);

  ar[0] = 0;
  ar[1] = z[50];
  ar[2] = z[0];
  ar[3] = z[48];
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = z[0]*(z[25]*z[48] - z[37] + z[52]);
  ar[8] = z[3]*(z[39] + z[40]);
  ar[9] = z[0]*(-z[25]*z[50] + z[35] - z[42]*z[43]);
  ar[10] = z[15];
  ar[11] = z[14];
  ar[12] = z[13];
  ar[13] = z[48];
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = -z[15]*(z[30] + z[51]);
  ar[18] = z[22];
  ar[19] = -z[15]*(z[34] + z[57] + z[67]);
  ar[20] = 0;
  ar[21] = front_.m*(z[14]*(z[15]*z[31] + z[15]*z[36] - z[15]*z[51]) - z[15]*(z[14]*z[31] + z[22] - z[33]*z[48]) - z[48]*(z[14]*z[55] + z[15]*z[33] + z[15]*z[34])) + z[38]*(-z[0]*(z[28]*z[48] - z[29]*z[50] + z[3]*z[39] + z[3]*z[40]) + z[48]*(z[0]*z[28] - z[0]*z[35] + z[41]*z[50]) - z[50]*(z[0]*z[29] - z[0]*z[37] + z[41]*z[48]));
  ar[22] = 0;
  ar[23] = z[4];
  ar[24] = 0;
  ar[25] = z[1];
  ar[26] = 0;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = -z[41]*z[43];
  ar[30] = z[35]*z[43] - z[37]*z[45] + z[62]*z[7] + z[62]*z[9];
  ar[31] = z[41]*z[45];
  ar[32] = z[47];
  ar[33] = z[49];
  ar[34] = -z[47];
  ar[35] = z[1];
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = z[23] - z[44]*z[65];
  ar[40] = z[12] + z[43]*z[67] - z[46]*z[65];
  ar[41] = -z[45]*(z[34]*z[44] + z[44]*z[67] + z[46]*z[55]);
  ar[42] = 0;
  ar[43] = front_.m*(z[14]*(z[23] + z[31]*z[47]) - z[15]*(z[12] + z[31]*z[49] + z[33]*z[43]) - z[48]*(z[33]*z[47] + z[34]*z[47] + z[49]*z[55])) + z[0]*z[38]*(z[28]*z[43] - z[29]*z[45] - z[35]*z[43] + z[37]*z[45] + z[42]*z[7] + z[42]*z[9]);
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 1;
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = rear_.b - z[48]*z[58] - z[52];
  ar[52] = 0;
  ar[53] = -z[10] + z[50]*z[58];
  ar[54] = z[46];
  ar[55] = z[2];
  ar[56] = z[5];
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = -z[30]*z[46];
  ar[62] = z[30]*z[44];
  ar[63] = -z[34]*z[46] + z[44]*z[55] - z[46]*z[67];
  ar[64] = 0;
  ar[65] = front_.m*(z[14]*(z[31]*z[46] + z[36]*z[46]) + z[15]*(z[31]*z[44] + z[36]*z[44]) - z[48]*(z[33]*z[46] + z[34]*z[46] - z[44]*z[55])) + z[3]*z[38]*(z[43]*(-z[29] + z[37]) - z[45]*(-rear_.R*z[50]/z[19] + z[10]));
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = 0;
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = 0;
  ar[73] = 0;
  ar[74] = 0;
  ar[75] = 0;
  ar[76] = 0;
  ar[77] = 0;
  ar[78] = 0;
  ar[79] = 1;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = z[55];
  ar[84] = z[32] + z[57];
  ar[85] = 0;
  ar[86] = 1;
  ar[87] = -front_.m*z[15]*z[32];
  ar[88] = 1;
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = 0;
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = z[20]*z[48];
  ar[96] = 0;
  ar[97] = -z[20]*z[50];
  ar[98] = 0;
  ar[99] = 0;
  ar[100] = 0;
  ar[101] = 0;
  ar[102] = 0;
  ar[103] = 0;
  ar[104] = 0;
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = 0;
  ar[109] = 0;
  ar[110] = 0;
  ar[111] = 0;
  ar[112] = 0;
  ar[113] = 0;
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = 0;
  ar[118] = 0;
  ar[119] = 0;
  ar[120] = 1;
  ar[121] = 0;
  ar[122] = 0;
  ar[123] = 0;
  ar[124] = 0;
  ar[125] = 0;
  ar[126] = 0;
  ar[127] = -z[27]*z[48];
  ar[128] = 0;
  ar[129] = z[67];
  ar[130] = 0;
  ar[131] = 0;
  ar[132] = 0;
  ar[133] = 0;
  ar[134] = 0;
  ar[135] = 0;
  ar[136] = 1;
  ar[137] = 0;
  ar[138] = 0;
  ar[139] = z[48]/z[16];
  ar[140] = 0;
  ar[141] = -z[50]/z[16];
  ar[142] = 0;
  ar[143] = 0;
  ar[144] = 0;
  ar[145] = 0;
  ar[146] = 0;
  ar[147] = 0;
  ar[148] = 0;
  ar[149] = 0;
  ar[150] = 0;
  ar[151] = 0;
  ar[152] = 0;
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = 0;
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = pow(z[11], 2)*pow(z[3], 4)/z[18] + z[56]*z[7] + z[56]*z[9];
  ar[160] = z[68];
  ar[161] = -z[50]*z[59];
  ar[162] = z[11]*z[8]/z[16];
  ar[163] = -z[48]*z[59];
  ar[164] = 0;
  ar[165] = 0;
  ar[166] = 0;
  ar[167] = 0;
  ar[168] = 0;
  ar[169] = 0;
  ar[170] = 0;
  ar[171] = 0;
  ar[172] = 0;
  ar[173] = 0;
  ar[174] = 0;
  ar[175] = z[38]*z[53]*(z[60] + z[61] - z[64]);
  ar[176] = 0;
  ar[177] = 0;
  ar[178] = 0;
  ar[179] = 0;
  ar[180] = 0;
  ar[181] = z[68];
  ar[182] = z[21];
  ar[183] = z[50];
  ar[184] = z[0];
  ar[185] = z[48];
  ar[186] = 0;
  ar[187] = 0;
  ar[188] = 0;
  ar[189] = 0;
  ar[190] = 0;
  ar[191] = 0;
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = 0;
  ar[196] = 0;
  ar[197] = -z[21]*z[38];
  ar[198] = 0;
  ar[199] = 0;
  ar[200] = 0;
  ar[201] = 0;
  ar[202] = 0;
  ar[203] = 0;
  ar[204] = 0;
  ar[205] = 0;
  ar[206] = 0;
  ar[207] = 0;
  ar[208] = 0;
  ar[209] = 0;
  ar[210] = 0;
  ar[211] = 0;
  ar[212] = 1;
  ar[213] = 0;
  ar[214] = 0;
  ar[215] = -z[48]*z[63];
  ar[216] = 0;
  ar[217] = z[14]*z[63];
  ar[218] = 0;
  ar[219] = 0;
  ar[220] = 0;
  ar[221] = 0;
  ar[222] = 0;
  ar[223] = 0;
  ar[224] = 0;
  ar[225] = 0;
  ar[226] = 0;
  ar[227] = 0;
  ar[228] = 0;
  ar[229] = 0;
  ar[230] = 0;
  ar[231] = 0;
  ar[232] = 0;
  ar[233] = 0;
  ar[234] = 0;
  ar[235] = z[17]*z[66] + z[24] + z[54]*z[66];
  ar[236] = z[69];
  ar[237] = -z[14]*z[15]*z[63];
  ar[238] = z[26];
  ar[239] = -z[15]*z[48]*z[63];
  ar[240] = 0;
  ar[241] = front_.m*z[15]*(-z[17]*z[63] - z[26] - z[54]*z[63]);
  ar[242] = 0;
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = 0;
  ar[253] = 0;
  ar[254] = 0;
  ar[255] = 0;
  ar[256] = 0;
  ar[257] = z[69];
  ar[258] = pow(z[13], 2) + z[24];
  ar[259] = z[14];
  ar[260] = z[13];
  ar[261] = z[48];
  ar[262] = 0;
  ar[263] = front_.m*(pow(z[15], 2) + z[24]);
}

}
