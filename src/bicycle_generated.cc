#include <cmath>
#include "bicycle.h"

namespace bicycle {

using ::std::sin;
using ::std::cos;
using ::std::sqrt;
using ::std::pow;

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::gc_r_ogl(double ar[16]) const;
void Bicycle::gc_r_ogl(double ar[16]) const
{
  double * z = new double[40];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(twist);
  z[5] = cos(azimuth);
  z[6] = cos(elevation);
  z[7] = cos(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = cos(twist);
  z[10] = cam_x + cam_z;
  z[11] = pow(z[3], 2);
  z[12] = pow(z[7], 2);
  z[13] = pow(z[8], 2);
  z[14] = z[11] + z[13];
  z[15] = z[0]*z[8] + z[2]*z[3]*z[5];
  z[16] = z[0]*z[1]*z[7] + z[2]*z[6];
  z[17] = z[0]*z[2]*z[8] + z[3]*z[5];
  z[18] = z[0]*z[3] - z[2]*z[5]*z[8];
  z[19] = z[0]*z[2]*z[3] - z[5]*z[8];
  z[20] = z[1]*z[7]*z[8] + z[17]*z[6];
  z[21] = z[1]*z[3]*z[7] + z[19]*z[6];
  z[22] = z[1]*z[19] - z[3]*z[6]*z[7];
  z[23] = z[18]*z[9] + z[4]*(-z[1]*z[17] + z[6]*z[7]*z[8]);
  z[24] = -z[15]*z[9] - z[22]*z[4];
  z[25] = z[15]*z[4] - z[22]*z[9];
  z[26] = z[18]*z[4] - z[9]*(-z[1]*z[17] + z[6]*z[7]*z[8]);
  z[27] = -z[1];
  z[28] = -z[3];
  z[29] = -z[4];
  z[30] = -z[5];
  z[31] = -z[6];
  z[32] = -z[0]*z[29];
  z[33] = z[0]*z[9];
  z[34] = z[2]*z[8];
  z[35] = -z[30]*z[9];
  z[36] = -1/sqrt(z[12]*z[14]);
  z[37] = -z[2]*z[36];
  z[38] = -z[36]*z[7];
  z[39] = z[14]*z[7]/sqrt(z[11]*z[12] + z[12]*z[13]);

  ar[0] = z[38]*(-z[23]*z[28] - z[24]*z[8]);
  ar[1] = z[38]*(z[25]*z[8] - z[26]*z[28]);
  ar[2] = z[38]*(z[20]*z[28] + z[21]*z[8]);
  ar[3] = 0;
  ar[4] = z[7]*(z[23]*z[34]*z[36] + z[24]*z[28]*z[37] + z[39]*(-z[16]*z[29] + z[35]*z[7]));
  ar[5] = z[7]*(-z[25]*z[28]*z[37] + z[26]*z[34]*z[36] + z[39]*(-z[16]*z[9] + z[29]*z[30]*z[7]));
  ar[6] = z[7]*(-z[20]*z[34]*z[36] - z[21]*z[28]*z[37] + z[39]*(-z[0]*z[31]*z[7] + z[2]*z[27]));
  ar[7] = 0;
  ar[8] = z[29]*z[31];
  ar[9] = z[31]*z[9];
  ar[10] = z[27];
  ar[11] = 0;
  ar[12] = -cam_y*(-z[27]*z[32] + z[35]) - z[10]*(z[27]*z[29]*z[30] + z[33]);
  ar[13] = cam_y*(-z[27]*z[33] - z[29]*z[30]) - z[10]*(-z[27]*z[35] + z[32]);
  ar[14] = z[31]*(cam_y*z[0] + z[10]*z[30]);
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::wc_r_ogl(double ar[16]) const;
void Bicycle::wc_r_ogl(double ar[16]) const
{
  double * z = new double[32];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(twist);
  z[5] = cos(azimuth);
  z[6] = cos(elevation);
  z[7] = cos(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = cos(state_[4]);
  z[10] = cos(twist);
  z[11] = pow(z[7], 2);
  z[12] = -cam_x - cam_z;
  z[13] = z[0]*z[4] + z[1]*z[10]*z[5];
  z[14] = z[0]*z[1]*z[4] + z[10]*z[5];
  z[15] = z[0]*z[2]*z[6] + z[1]*z[7];
  z[16] = z[0]*z[10] - z[1]*z[4]*z[5];
  z[17] = z[0]*z[1]*z[10] - z[4]*z[5];
  z[18] = z[0]*z[6]*z[7] - z[1]*z[2];
  z[19] = z[14]*z[7] + z[2]*z[4]*z[6];
  z[20] = z[15]*z[8] + z[3]*z[5]*z[6];
  z[21] = z[14]*z[2] - z[4]*z[6]*z[7];
  z[22] = -z[15]*z[3] + z[5]*z[6]*z[8];
  z[23] = -z[10]*z[2]*z[6] - z[17]*z[7];
  z[24] = z[16]*z[3] - z[21]*z[8];
  z[25] = z[13]*z[8] + z[3]*(z[10]*z[6]*z[7] - z[17]*z[2]);
  z[26] = -z[16]*z[8] - z[21]*z[3];
  z[27] = z[13]*z[3] - z[8]*(z[10]*z[6]*z[7] - z[17]*z[2]);
  z[28] = rear_.r*z[2];
  z[29] = -z[3];
  z[30] = -sin(state_[4]);
  z[31] = z[7]*(rear_.R/sqrt(z[11]*pow(z[3], 2) + z[11]*pow(z[8], 2)) + rear_.r);

  ar[0] = z[24]*z[30] - z[26]*z[9];
  ar[1] = z[25]*z[9] + z[27]*z[30];
  ar[2] = -z[20]*z[30] - z[22]*z[9];
  ar[3] = 0;
  ar[4] = z[19];
  ar[5] = z[23];
  ar[6] = z[18];
  ar[7] = 0;
  ar[8] = z[24]*z[9] + z[26]*z[30];
  ar[9] = -z[25]*z[30] + z[27]*z[9];
  ar[10] = -z[20]*z[9] + z[22]*z[30];
  ar[11] = 0;
  ar[12] = -cam_y*z[14] + z[12]*z[16] - z[19]*z[28] - z[24]*z[31]*z[8] + z[26]*z[29]*z[31];
  ar[13] = cam_y*z[17] + z[12]*z[13] - z[23]*z[28] - z[25]*z[29]*z[31] - z[27]*z[31]*z[8];
  ar[14] = -cam_y*z[0]*z[6] - z[12]*z[5]*z[6] - z[18]*z[28] + z[20]*z[31]*z[8] + z[22]*z[29]*z[31];
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::mc_r_ogl(double ar[16]) const;
void Bicycle::mc_r_ogl(double ar[16]) const
{
  double * z = new double[32];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(twist);
  z[5] = cos(azimuth);
  z[6] = cos(elevation);
  z[7] = cos(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = cos(twist);
  z[10] = pow(z[7], 2);
  z[11] = -cam_x - cam_z;
  z[12] = z[0]*z[4] + z[1]*z[5]*z[9];
  z[13] = z[0]*z[1]*z[4] + z[5]*z[9];
  z[14] = z[0]*z[2]*z[6] + z[1]*z[7];
  z[15] = z[0]*z[9] - z[1]*z[4]*z[5];
  z[16] = z[0]*z[1]*z[9] - z[4]*z[5];
  z[17] = z[0]*z[6]*z[7] - z[1]*z[2];
  z[18] = sqrt(z[10]*pow(z[3], 2) + z[10]*pow(z[8], 2));
  z[19] = z[13]*z[7] + z[2]*z[4]*z[6];
  z[20] = z[14]*z[8] + z[3]*z[5]*z[6];
  z[21] = z[13]*z[2] - z[4]*z[6]*z[7];
  z[22] = -z[16]*z[7] - z[2]*z[6]*z[9];
  z[23] = rear_.R*z[3]*z[7]/z[18] + rear_.a + rear_.r*z[3]*z[7];
  z[24] = rear_.R*z[7]*z[8]/z[18] - rear_.b + rear_.r*z[7]*z[8];
  z[25] = z[12]*z[8] + z[3]*(-z[16]*z[2] + z[6]*z[7]*z[9]);
  z[26] = z[12]*z[3] - z[8]*(-z[16]*z[2] + z[6]*z[7]*z[9]);
  z[27] = rear_.r*z[2];
  z[28] = -z[3];
  z[29] = -z[8];
  z[30] = z[5]*z[6];
  z[31] = -z[14]*z[28];

  ar[0] = -z[15]*z[29] - z[21]*z[28];
  ar[1] = z[25];
  ar[2] = z[29]*z[30] + z[31];
  ar[3] = 0;
  ar[4] = z[19];
  ar[5] = z[22];
  ar[6] = z[17];
  ar[7] = 0;
  ar[8] = -z[15]*z[28] + z[21]*z[29];
  ar[9] = z[26];
  ar[10] = -z[20];
  ar[11] = 0;
  ar[12] = -cam_y*z[13] + z[11]*z[15] - z[19]*z[27] - z[23]*(z[15]*z[29] + z[21]*z[28]) - z[24]*(-z[15]*z[28] + z[21]*z[29]);
  ar[13] = cam_y*z[16] + z[11]*z[12] - z[22]*z[27] + z[23]*z[25] - z[24]*z[26];
  ar[14] = -cam_y*z[0]*z[6] - z[11]*z[30] - z[17]*z[27] + z[20]*z[24] - z[23]*(-z[29]*z[30] - z[31]);
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::gc_f_ogl(double ar[16]) const;
void Bicycle::gc_f_ogl(double ar[16]) const
{
  double * z = new double[63];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[3]);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = cos(elevation);
  z[8] = cos(state_[1]);
  z[9] = cos(state_[2]);
  z[10] = cos(state_[3]);
  z[11] = cos(twist);
  z[12] = pow(z[8], 2);
  z[13] = -cam_x - cam_z;
  z[14] = z[0]*z[5] + z[1]*z[11]*z[6];
  z[15] = z[10]*z[2] + z[3]*z[4]*z[8];
  z[16] = z[0]*z[1]*z[5] + z[11]*z[6];
  z[17] = z[0]*z[2]*z[7] + z[1]*z[8];
  z[18] = z[0]*z[2]*z[9] + z[3]*z[6];
  z[19] = z[10]*z[2]*z[3] + z[4]*z[8];
  z[20] = z[0]*z[3] - z[2]*z[6]*z[9];
  z[21] = z[0]*z[11] - z[1]*z[5]*z[6];
  z[22] = -z[10]*z[3]*z[8] + z[2]*z[4];
  z[23] = z[0]*z[1]*z[11] - z[5]*z[6];
  z[24] = z[0]*z[7]*z[8] - z[1]*z[2];
  z[25] = -z[10]*z[8] + z[2]*z[3]*z[4];
  z[26] = sqrt(z[12]*pow(z[3], 2) + z[12]*pow(z[9], 2));
  z[27] = z[16]*z[8] + z[2]*z[5]*z[7];
  z[28] = z[17]*z[9] + z[3]*z[6]*z[7];
  z[29] = z[1]*z[8]*z[9] + z[18]*z[7];
  z[30] = z[0]*z[10]*z[9] + z[19]*z[6];
  z[31] = z[16]*z[2] - z[5]*z[7]*z[8];
  z[32] = -z[17]*z[3] + z[6]*z[7]*z[9];
  z[33] = -z[1]*z[18] + z[7]*z[8]*z[9];
  z[34] = z[0]*z[19] - z[10]*z[6]*z[9];
  z[35] = -z[11]*z[2]*z[7] - z[23]*z[8];
  z[36] = -z[0]*z[4]*z[9] - z[25]*z[6];
  z[37] = front_.R/sqrt(z[12]*pow(z[9], 2) + pow(z[22], 2)) + front_.r;
  z[38] = rear_.R*z[3]*z[8]/z[26] + rear_.c + rear_.r*z[3]*z[8];
  z[39] = rear_.R*z[8]*z[9]/z[26] - ls_ + rear_.r*z[8]*z[9];
  z[40] = z[11]*z[20] + z[33]*z[5];
  z[41] = z[1]*(-z[0]*z[25] + z[4]*z[6]*z[9]) + z[15]*z[7];
  z[42] = z[1]*z[34] + z[22]*z[7];
  z[43] = z[21]*z[3] - z[31]*z[9];
  z[44] = -z[1]*z[22] + z[34]*z[7];
  z[45] = z[14]*z[9] + z[3]*(z[11]*z[7]*z[8] - z[2]*z[23]);
  z[46] = -z[21]*z[9] - z[3]*z[31];
  z[47] = z[14]*z[3] - z[9]*(z[11]*z[7]*z[8] - z[2]*z[23]);
  z[48] = front_.R*z[22]/sqrt(z[12]*pow(z[9], 2) + pow(z[22], 2)) - front_.c + front_.r*z[22];
  z[49] = -z[11]*z[30] - z[42]*z[5];
  z[50] = rear_.r*z[2];
  z[51] = -z[1];
  z[52] = -z[4];
  z[53] = -z[9];
  z[54] = -z[10];
  z[55] = -z[11];
  z[56] = -z[53]*z[8];
  z[57] = front_.r*z[15];
  z[58] = z[20]*z[5];
  z[59] = z[30]*z[5];
  z[60] = -z[33]*z[55];
  z[61] = -sqrt(z[12]*pow(z[53], 2) + pow(z[22], 2));
  z[62] = -z[15]/z[61];

  ar[0] = -(-z[22]*z[40] - z[49]*z[56])/z[61];
  ar[1] = -(-z[22]*(z[58] - z[60]) + z[56]*(z[42]*z[55] + z[59]))/z[61];
  ar[2] = (-z[22]*z[29] - z[44]*z[56])/z[61];
  ar[3] = 0;
  ar[4] = z[22]*z[49]*z[62] - z[40]*z[56]*z[62] - z[61]*(-z[36]*z[55] + z[41]*z[5]);
  ar[5] = -z[22]*z[62]*(z[42]*z[55] + z[59]) - z[56]*z[62]*(z[58] - z[60]) - z[61]*(z[36]*z[5] + z[41]*z[55]);
  ar[6] = -z[22]*z[44]*z[62] + z[29]*z[56]*z[62] - z[61]*(z[15]*z[51] + z[7]*(-z[0]*z[25] + z[52]*z[53]*z[6]));
  ar[7] = 0;
  ar[8] = z[5]*z[7];
  ar[9] = z[55]*z[7];
  ar[10] = z[51];
  ar[11] = 0;
  ar[12] = -cam_y*z[16] + z[13]*z[21] - z[27]*z[50] + z[37]*z[43]*z[56] - z[38]*z[46] - z[39]*z[43] + z[48]*(-z[27]*z[52] + z[46]*z[54]) - z[57]*(z[27]*z[54] + z[46]*z[52]);
  ar[13] = cam_y*z[23] + z[13]*z[14] - z[35]*z[50] + z[37]*z[47]*z[56] + z[38]*z[45] - z[39]*z[47] + z[48]*(-z[35]*z[52] - z[45]*z[54]) - z[57]*(z[35]*z[54] - z[45]*z[52]);
  ar[14] = -cam_y*z[0]*z[7] - z[13]*z[6]*z[7] - z[24]*z[50] - z[28]*z[37]*z[56] + z[28]*z[39] - z[32]*z[38] + z[48]*(-z[24]*z[52] + z[32]*z[54]) + z[57]*(-z[24]*z[54] - z[32]*z[52]);
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::wc_f_ogl(double ar[16]) const;
void Bicycle::wc_f_ogl(double ar[16]) const
{
  double * z = new double[42];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[3]);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = cos(elevation);
  z[8] = cos(state_[1]);
  z[9] = cos(state_[2]);
  z[10] = cos(state_[3]);
  z[11] = cos(state_[5]);
  z[12] = cos(twist);
  z[13] = cam_x + cam_z;
  z[14] = pow(z[8], 2);
  z[15] = z[0]*z[5] + z[1]*z[12]*z[6];
  z[16] = z[0]*z[1]*z[5] + z[12]*z[6];
  z[17] = z[0]*z[2]*z[7] + z[1]*z[8];
  z[18] = z[0]*z[12] - z[1]*z[5]*z[6];
  z[19] = z[0]*z[1]*z[12] - z[5]*z[6];
  z[20] = z[0]*z[7]*z[8] - z[1]*z[2];
  z[21] = sqrt(z[14]*pow(z[3], 2) + z[14]*pow(z[9], 2));
  z[22] = z[16]*z[8] + z[2]*z[5]*z[7];
  z[23] = z[16]*z[2] - z[5]*z[7]*z[8];
  z[24] = -z[17]*z[3] + z[6]*z[7]*z[9];
  z[25] = z[12]*z[7]*z[8] - z[19]*z[2];
  z[26] = -z[17]*z[9] - z[3]*z[6]*z[7];
  z[27] = -z[12]*z[2]*z[7] - z[19]*z[8];
  z[28] = rear_.R*z[3]*z[8]/z[21] + rear_.c + rear_.r*z[3]*z[8];
  z[29] = rear_.R*z[8]*z[9]/z[21] - ls_ + rear_.r*z[8]*z[9];
  z[30] = z[15]*z[9] + z[25]*z[3];
  z[31] = -z[18]*z[9] - z[23]*z[3];
  z[32] = -z[18]*z[9] - z[23]*z[3];
  z[33] = z[18]*z[3] - z[23]*z[9];
  z[34] = z[15]*z[3] - z[25]*z[9];
  z[35] = -z[10]*z[24] + z[20]*z[4];
  z[36] = -z[10]*z[31] + z[22]*z[4];
  z[37] = z[10]*(z[15]*z[9] + z[25]*z[3]) + z[27]*z[4];
  z[38] = rear_.r*z[2];
  z[39] = -sin(state_[5]);
  z[40] = -z[9];
  z[41] = -z[10];

  ar[0] = z[11]*z[36] + z[33]*z[39];
  ar[1] = z[11]*z[37] + z[34]*z[39];
  ar[2] = z[11]*z[35] + z[26]*z[39];
  ar[3] = 0;
  ar[4] = -z[22]*z[41] + z[31]*z[4];
  ar[5] = -z[27]*z[41] - z[30]*z[4];
  ar[6] = -z[20]*z[41] + z[24]*z[4];
  ar[7] = 0;
  ar[8] = z[11]*z[33] - z[36]*z[39];
  ar[9] = z[11]*z[34] - z[37]*z[39];
  ar[10] = z[11]*z[26] - z[35]*z[39];
  ar[11] = 0;
  ar[12] = -front_.c*(z[22]*z[4] + z[32]*z[41]) - cam_y*z[16] - z[13]*z[18] - z[22]*z[38] - z[28]*z[32] - z[29]*(z[18]*z[3] + z[23]*z[40]);
  ar[13] = -front_.c*(z[27]*z[4] - z[30]*z[41]) + cam_y*z[19] - z[13]*z[15] - z[27]*z[38] + z[28]*z[30] - z[29]*(z[15]*z[3] + z[25]*z[40]);
  ar[14] = -front_.c*(z[20]*z[4] + z[24]*z[41]) - cam_y*z[0]*z[7] + z[13]*z[6]*z[7] - z[20]*z[38] - z[24]*z[28] - z[26]*z[29];
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::mc_f_ogl(double ar[16]) const;
void Bicycle::mc_f_ogl(double ar[16]) const
{
  double * z = new double[41];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = sin(state_[3]);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = cos(elevation);
  z[8] = cos(state_[1]);
  z[9] = cos(state_[2]);
  z[10] = cos(state_[3]);
  z[11] = cos(twist);
  z[12] = pow(z[8], 2);
  z[13] = front_.a - front_.c;
  z[14] = -cam_x - cam_z;
  z[15] = z[0]*z[5] + z[1]*z[11]*z[6];
  z[16] = z[0]*z[1]*z[5] + z[11]*z[6];
  z[17] = z[0]*z[2]*z[7] + z[1]*z[8];
  z[18] = z[0]*z[11] - z[1]*z[5]*z[6];
  z[19] = z[0]*z[1]*z[11] - z[5]*z[6];
  z[20] = z[0]*z[7]*z[8] - z[1]*z[2];
  z[21] = sqrt(z[12]*pow(z[3], 2) + z[12]*pow(z[9], 2));
  z[22] = z[16]*z[8] + z[2]*z[5]*z[7];
  z[23] = z[17]*z[9] + z[3]*z[6]*z[7];
  z[24] = z[16]*z[2] - z[5]*z[7]*z[8];
  z[25] = -z[17]*z[3] + z[6]*z[7]*z[9];
  z[26] = z[11]*z[7]*z[8] - z[19]*z[2];
  z[27] = -z[11]*z[2]*z[7] - z[19]*z[8];
  z[28] = rear_.R*z[3]*z[8]/z[21] + rear_.c + rear_.r*z[3]*z[8];
  z[29] = rear_.R*z[8]*z[9]/z[21] - ls_ + rear_.r*z[8]*z[9];
  z[30] = z[18]*z[3] - z[24]*z[9];
  z[31] = z[15]*z[9] + z[26]*z[3];
  z[32] = -z[18]*z[9] - z[24]*z[3];
  z[33] = -z[18]*z[9] - z[24]*z[3];
  z[34] = z[15]*z[3] - z[26]*z[9];
  z[35] = z[10]*z[31] + z[27]*z[4];
  z[36] = rear_.r*z[2];
  z[37] = -z[10];
  z[38] = z[20]*z[4];
  z[39] = z[22]*z[4];
  z[40] = -z[25]*z[37];

  ar[0] = z[32]*z[37] + z[39];
  ar[1] = z[35];
  ar[2] = z[38] - z[40];
  ar[3] = 0;
  ar[4] = -z[22]*z[37] + z[32]*z[4];
  ar[5] = -z[37]*(-z[11]*z[2]*z[7] - z[19]*z[8]) - z[4]*(z[15]*z[9] + z[26]*z[3]);
  ar[6] = -z[20]*z[37] + z[25]*z[4];
  ar[7] = 0;
  ar[8] = z[30];
  ar[9] = z[34];
  ar[10] = -z[23];
  ar[11] = 0;
  ar[12] = front_.b*z[30] - cam_y*z[16] + z[13]*(z[33]*z[37] + z[39]) + z[14]*z[18] - z[22]*z[36] - z[28]*z[33] - z[29]*z[30];
  ar[13] = front_.b*z[34] + cam_y*z[19] + z[13]*z[35] + z[14]*z[15] - z[27]*z[36] + z[28]*z[31] - z[29]*z[34];
  ar[14] = -front_.b*z[23] - cam_y*z[0]*z[7] + z[13]*(z[38] - z[40]) - z[14]*z[6]*z[7] - z[20]*z[36] + z[23]*z[29] - z[25]*z[28];
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::N_ogl(double ar[16]) const;
void Bicycle::N_ogl(double ar[16]) const
{
  double * z = new double[21];

  z[0] = sin(azimuth);
  z[1] = sin(elevation);
  z[2] = sin(state_[0]);
  z[3] = sin(twist);
  z[4] = cos(azimuth);
  z[5] = cos(elevation);
  z[6] = cos(state_[0]);
  z[7] = cos(twist);
  z[8] = cam_x + cam_z;
  z[9] = z[0]*z[6] - z[2]*z[4];
  z[10] = z[0]*z[3] + z[1]*z[4]*z[7];
  z[11] = z[0]*z[1]*z[3] + z[4]*z[7];
  z[12] = z[0]*z[7] - z[1]*z[3]*z[4];
  z[13] = z[0]*z[1]*z[7] - z[3]*z[4];
  z[14] = z[10]*z[6] + z[13]*z[2];
  z[15] = z[11]*z[6] + z[12]*z[2];
  z[16] = z[10]*z[2] - z[13]*z[6];
  z[17] = -z[11]*z[2] + z[12]*z[6];
  z[18] = -z[4];
  z[19] = z[0]*z[2];
  z[20] = -z[18]*z[6];

  ar[0] = z[17];
  ar[1] = z[14];
  ar[2] = z[5]*(-z[19] - z[20]);
  ar[3] = 0;
  ar[4] = z[15];
  ar[5] = z[16];
  ar[6] = z[5]*z[9];
  ar[7] = 0;
  ar[8] = z[3]*z[5];
  ar[9] = -z[5]*z[7];
  ar[10] = -z[1];
  ar[11] = 0;
  ar[12] = -cam_y*z[11] - state_[6]*z[17] - state_[7]*z[15] - z[12]*z[8];
  ar[13] = cam_y*z[13] - state_[6]*z[14] - state_[7]*z[16] - z[10]*z[8];
  ar[14] = -z[5]*(cam_y*z[0] - state_[6]*(z[19] + z[20]) + state_[7]*z[9] + z[18]*z[8]);
  ar[15] = 1;

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_wheel_center_point(double ar[3]) const;
void Bicycle::rear_wheel_center_point(double ar[3]) const
{
  double * z = new double[6];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[1]);
  z[2] = pow(sin(state_[2]), 2);
  z[3] = pow(z[1], 2);
  z[4] = pow(cos(state_[2]), 2);
  z[5] = rear_.R/sqrt(z[2]*z[3] + z[3]*z[4]) + rear_.r;

  ar[0] = 0;
  ar[1] = z[0]*z[1]*(-rear_.r + z[2]*z[5] + z[4]*z[5]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[2]*z[3]*z[5] - z[3]*z[4]*z[5];

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_mass_center_point(double ar[3]) const;
void Bicycle::rear_mass_center_point(double ar[3]) const
{
  double * z = new double[10];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = pow(z[2], 2);
  z[5] = sqrt(pow(z[1], 2)*z[4] + pow(z[3], 2)*z[4]);
  z[6] = rear_.R*z[1]*z[2]/z[5] + rear_.a + rear_.r*z[1]*z[2];
  z[7] = rear_.R*z[2]*z[3]/z[5] - rear_.b + rear_.r*z[2]*z[3];
  z[8] = z[1]*z[6];
  z[9] = z[3]*z[7];

  ar[0] = -z[1]*z[7] + z[3]*z[6];
  ar[1] = z[0]*(-rear_.r*z[2] + z[8] + z[9]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[2]*z[8] - z[2]*z[9];

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_steer_axis_point(double ar[3]) const;
void Bicycle::rear_steer_axis_point(double ar[3]) const
{
  double * z = new double[11];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = pow(z[2], 2);
  z[5] = pow(z[3], 2);
  z[6] = sqrt(pow(z[1], 2)*z[4] + z[4]*z[5]);
  z[7] = rear_.R/z[6] + rear_.r;
  z[8] = rear_.R*z[1]*z[2]/z[6] + rear_.c + rear_.r*z[1]*z[2];
  z[9] = -z[1];
  z[10] = -z[2]*z[9];

  ar[0] = -z[3]*(z[10]*z[7] - z[8]);
  ar[1] = z[0]*(-rear_.r*z[2] + z[2]*z[5]*z[7] - z[8]*z[9]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[10]*z[8] - z[4]*z[5]*z[7];

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_wheel_center_point(double ar[3]) const;
void Bicycle::front_wheel_center_point(double ar[3]) const
{
  double * z = new double[12];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[3], 2);
  z[7] = sqrt(pow(z[1], 2)*z[6] + pow(z[4], 2)*z[6]);
  z[8] = rear_.R*z[3]*z[4]/z[7] - ls_ + rear_.r*z[3]*z[4];
  z[9] = -rear_.R*z[1]*z[3]/z[7] - rear_.c - rear_.r*z[1]*z[3];
  z[10] = z[1]*z[5];
  z[11] = z[4]*z[8];

  ar[0] = -front_.c*z[4]*z[5] - z[1]*z[8] - z[4]*z[9];
  ar[1] = -front_.c*(z[0]*z[10] + z[2]*z[3]) - rear_.r*z[0]*z[3] - z[0]*z[1]*z[9] + z[0]*z[11];
  ar[2] = -front_.c*(z[0]*z[2] - z[10]*z[3]) - rear_.r*pow(z[0], 2) + z[1]*z[3]*z[9] - z[11]*z[3];

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_mass_center_point(double ar[3]) const;
void Bicycle::front_mass_center_point(double ar[3]) const
{
  double * z = new double[15];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[3], 2);
  z[7] = front_.a - front_.c;
  z[8] = sqrt(pow(z[1], 2)*z[6] + pow(z[4], 2)*z[6]);
  z[9] = rear_.R*z[1]*z[3]/z[8] + rear_.c + rear_.r*z[1]*z[3];
  z[10] = rear_.R*z[3]*z[4]/z[8] - ls_ + rear_.r*z[3]*z[4];
  z[11] = -front_.b*z[4];
  z[12] = z[1]*z[5];
  z[13] = z[1]*z[9];
  z[14] = z[10]*z[4];

  ar[0] = front_.b*z[1] - z[1]*z[10] + z[4]*z[5]*z[7] + z[4]*z[9];
  ar[1] = -rear_.r*z[0]*z[3] + z[0]*z[11] + z[0]*z[13] + z[0]*z[14] + z[7]*(z[0]*z[12] + z[2]*z[3]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[11]*z[3] - z[13]*z[3] - z[14]*z[3] + z[7]*(z[0]*z[2] - z[12]*z[3]);

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_steer_axis_point(double ar[3]) const;
void Bicycle::front_steer_axis_point(double ar[3]) const
{
  double * z = new double[10];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = cos(state_[2]);
  z[4] = pow(z[2], 2);
  z[5] = sqrt(pow(z[1], 2)*z[4] + pow(z[3], 2)*z[4]);
  z[6] = rear_.R*z[1]*z[2]/z[5] + rear_.c + rear_.r*z[1]*z[2];
  z[7] = rear_.R*z[2]*z[3]/z[5] - ls_ + rear_.r*z[2]*z[3];
  z[8] = z[1]*z[6];
  z[9] = z[3]*z[7];

  ar[0] = -z[1]*z[7] + z[3]*z[6];
  ar[1] = z[0]*(-rear_.r*z[2] + z[8] + z[9]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[2]*z[8] - z[2]*z[9];

  delete [] z;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_ground_contact_point(double ar[3]) const;
void Bicycle::front_ground_contact_point(double ar[3]) const
{
  double * z = new double[20];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[3], 2);
  z[7] = pow(z[4], 2);
  z[8] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[9] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[10] = sqrt(pow(z[1], 2)*z[6] + z[6]*z[7]);
  z[11] = sqrt(z[6]*z[7] + pow(z[9], 2));
  z[12] = front_.R/z[11] + front_.r;
  z[13] = rear_.R*z[1]*z[3]/z[10] + rear_.c + rear_.r*z[1]*z[3];
  z[14] = rear_.R*z[3]*z[4]/z[10] - ls_ + rear_.r*z[3]*z[4];
  z[15] = front_.R*z[9]/z[11] - front_.c + front_.r*z[9];
  z[16] = -z[1];
  z[17] = -z[4];
  z[18] = -z[16]*z[3];
  z[19] = front_.r*z[8];

  ar[0] = -z[12]*z[17]*z[18] - z[13]*z[17] + z[14]*z[16] - z[15]*z[17]*z[5] + z[17]*z[19]*z[2];
  ar[1] = -rear_.r*z[0]*z[3] - z[0]*z[12]*z[3]*z[7] - z[0]*z[13]*z[16] - z[0]*z[14]*z[17] + z[15]*(-z[0]*z[16]*z[5] + z[2]*z[3]) - z[19]*(-z[0]*z[16]*z[2] - z[3]*z[5]);
  ar[2] = -rear_.r*pow(z[0], 2) + z[12]*z[6]*z[7] - z[13]*z[18] + z[14]*z[17]*z[3] + z[15]*z[9] + z[19]*z[8];

  delete [] z;
}

/** Computes the n-d array of shape (1)
 *
 * @param[out] ar a C-array of with 1 elements
 */
//  void Bicycle::f_c(double ar[1]) const;
void Bicycle::f_c(double ar[1]) const
{
  double * z = new double[14];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[3], 2);
  z[7] = pow(z[4], 2);
  z[8] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[9] = rear_.r*z[3];
  z[10] = z[1]*z[3];
  z[11] = z[3]*z[4];
  z[12] = rear_.R/sqrt(pow(z[1], 2)*z[6] + z[6]*z[7]);
  z[13] = front_.R/sqrt(z[6]*z[7] + pow(z[8], 2));

  ar[0] = front_.r*pow(z[0]*z[5] + z[10]*z[2], 2) - rear_.r*pow(z[0], 2) - z[10]*(rear_.c + z[1]*z[9] + z[10]*z[12]) - z[11]*(-ls_ + z[11]*z[12] + z[4]*z[9]) + z[6]*z[7]*(front_.r + z[13]) + z[8]*(-front_.c + front_.r*z[8] + z[13]*z[8]);

  delete [] z;
}

/** Computes the n-d array of shape (8)
 *
 * @param[out] ar a C-array of with 8 elements
 */
//  void Bicycle::f_c_dq(double ar[8]) const;
void Bicycle::f_c_dq(double ar[8]) const
{
  double * z = new double[31];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[3], 2);
  z[8] = pow(z[4], 2);
  z[9] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[10] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[11] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[12] = -z[11];
  z[13] = z[6]*z[7] + z[7]*z[8];
  z[14] = sqrt(z[13]);
  z[15] = z[1]*z[4]*z[7] + z[12]*z[3]*z[4]*z[5];
  z[16] = front_.R/sqrt(pow(z[12], 2) + z[7]*z[8]) + front_.r;
  z[17] = rear_.R*z[1]*z[3]/z[14] + rear_.c + rear_.r*z[1]*z[3];
  z[18] = rear_.R*z[3]*z[4]/z[14] - ls_ + rear_.r*z[3]*z[4];
  z[19] = front_.R*z[12]/sqrt(pow(z[12], 2) + z[7]*z[8]) - front_.c + front_.r*z[12];
  z[20] = 2*z[0];
  z[21] = -z[3];
  z[22] = -z[0]*z[21];
  z[23] = -z[2]*z[21];
  z[24] = -z[21]*z[4];
  z[25] = z[24]*z[5];
  z[26] = z[7]*z[8];
  z[27] = -2*front_.r*z[9];
  z[28] = front_.R/pow(pow(z[12], 2) + z[26], 3.0/2.0);
  z[29] = front_.R/sqrt(pow(z[12], 2) + z[26]);
  z[30] = -z[21]*(rear_.R*z[0]/z[14] - rear_.R*z[3]*(z[0]*z[3]*z[6] + z[0]*z[3]*z[8])/pow(z[13], 3.0/2.0) + rear_.r*z[0]);

  ar[0] = 0;
  ar[1] = 2*rear_.r*z[0]*z[21] + z[0]*z[1]*z[17] + z[0]*z[18]*z[4] + z[10]*z[19] + z[12]*(front_.r*z[10] + z[10]*z[29] - z[12]*z[28]*(z[10]*z[12] - z[22]*z[8])) - z[16]*z[22]*z[8] - z[24]*z[4]*(front_.r*z[20] + z[20]*z[29] - z[21]*z[28]*(z[12]*(z[1]*z[20]*z[5] + 2*z[23]) + z[20]*z[21]*z[8]))/2 + z[27]*(z[0]*z[1]*z[2] + z[21]*z[5]) + z[30]*z[6] + z[30]*z[8];
  ar[2] = -z[1]*z[16]*z[4]*z[7] - z[1]*z[18]*z[21] - z[12]*(front_.r*z[25] - z[12]*z[15]*z[28] + z[25]*z[29]) - z[17]*z[24] - z[19]*z[25] - z[23]*z[27]*z[4] - z[4]*z[7]*(front_.r*z[1] + z[1]*z[29] - z[15]*z[28]*z[4]);
  ar[3] = -z[9]*(front_.c + front_.r*z[12] + z[12]*z[26]*z[28] - z[12]*z[29] - z[12]*(-pow(z[12], 2)*z[28] + z[16]));
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;

  delete [] z;
}

/** Computes the n-d array of shape (3, 12)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::f_v_du(double ar[36]) const;
void Bicycle::f_v_du(double ar[36]) const
{
  double * z = new double[44];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[3], 2);
  z[8] = pow(z[4], 2);
  z[9] = z[6] + z[8];
  z[10] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[11] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[12] = sqrt(z[7]*z[9]);
  z[13] = rear_.R/z[12] + rear_.r;
  z[14] = sqrt(z[6]*z[7] + z[7]*z[8]);
  z[15] = sqrt(pow(z[11], 2) + z[7]*z[8]);
  z[16] = -rear_.R*z[3]*z[4]/z[14] + ls_;
  z[17] = front_.R/z[15] + front_.r;
  z[18] = rear_.R*z[1]*z[3]/z[14] + rear_.r*z[1]*z[3];
  z[19] = rear_.R*z[3]*z[4]/z[14] + rear_.r*z[3]*z[4];
  z[20] = -rear_.r*z[3]*z[4] + z[16] + z[17]*z[3]*z[4];
  z[21] = rear_.c*z[1] - ls_*z[4] + z[1]*z[18] + z[19]*z[4];
  z[22] = rear_.c*z[4] + ls_*z[1] - z[1]*z[19] + z[18]*z[4];
  z[23] = -front_.c;
  z[24] = -front_.r;
  z[25] = -rear_.r;
  z[26] = -z[0]*z[25];
  z[27] = -z[0];
  z[28] = -z[1];
  z[29] = -z[2];
  z[30] = -z[4];
  z[31] = -z[5];
  z[32] = z[27]*z[29];
  z[33] = z[27]*z[31];
  z[34] = -z[28]*z[3];
  z[35] = -z[29]*z[3];
  z[36] = -z[3]*z[30];
  z[37] = -z[3]*z[31];
  z[38] = -z[11]*z[24];
  z[39] = z[9]/z[14];
  z[40] = z[17]*z[8];
  z[41] = z[17]*z[36];
  z[42] = z[11]/z[15];
  z[43] = z[11]*z[17];

  ar[0] = z[10]*z[24]*z[36] + z[10]*z[41] + z[16]*z[33] + z[22]*z[35];
  ar[1] = -z[10]*z[24]*z[28] - z[21]*z[29] + z[26]*z[28]*z[31] - z[35]*z[40];
  ar[2] = -z[20]*z[31];
  ar[3] = z[10]*z[24];
  ar[4] = z[13]*z[31]*z[36];
  ar[5] = z[41];
  ar[6] = -z[31]*z[36]/z[12];
  ar[7] = z[3]*(z[35]*z[39] - z[28]*z[33]/z[12]);
  ar[8] = z[11];
  ar[9] = -z[36]/z[15];
  ar[10] = z[10]*z[42];
  ar[11] = -z[11];
  ar[12] = -z[16]*z[32] + z[22]*z[37] + z[23]*z[36];
  ar[13] = -z[21]*z[31] - z[23]*z[28] - z[26]*z[28]*z[29] - z[28]*z[43] - z[37]*z[40];
  ar[14] = z[20]*z[29];
  ar[15] = front_.R*z[11]/z[15] + z[23] + z[38];
  ar[16] = -z[13]*z[30]*z[35];
  ar[17] = 0;
  ar[18] = z[30]*z[35]/z[12];
  ar[19] = z[3]*(z[37]*z[39] + z[28]*z[32]/z[12]);
  ar[20] = z[10];
  ar[21] = 0;
  ar[22] = -z[15];
  ar[23] = -z[10];
  ar[24] = rear_.c*z[27] - z[10]*z[23] + z[10]*z[38] - z[10]*z[43] + z[26]*z[34] + z[27]*z[34]*(rear_.R/z[14] - z[25]);
  ar[25] = z[30]*(-z[10]*z[24]*z[31] + z[23]*z[29] + z[26] + z[29]*z[43]);
  ar[26] = -rear_.R*z[34]/z[12] - rear_.c + z[10]*z[24]*z[29] + z[23]*z[31] + z[25]*z[34] + z[31]*z[43];
  ar[27] = 0;
  ar[28] = -z[13]*z[34];
  ar[29] = -z[43];
  ar[30] = z[34]/z[12];
  ar[31] = z[27]*z[36]/z[12];
  ar[32] = z[36];
  ar[33] = z[42];
  ar[34] = z[10]*z[36]/z[15];
  ar[35] = -z[36];

  delete [] z;
}

/** Computes the n-d array of shape (3, 12, 3)
 *
 * @param[out] ar a C-array of with 108 elements
 */
//  void Bicycle::f_v_dudq(double ar[108]) const;
void Bicycle::f_v_dudq(double ar[108]) const
{
  double * z = new double[114];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = rear_.c*z[4] + ls_*z[1];
  z[11] = z[7] + z[9];
  z[12] = rear_.c*z[1] - ls_*z[4];
  z[13] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[14] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[15] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[16] = -z[15];
  z[17] = -z[0]*z[1]*z[2] + z[3]*z[5];
  z[18] = -z[17];
  z[19] = -z[12]*z[3];
  z[20] = -z[13];
  z[21] = sqrt(z[11]*z[8]);
  z[22] = pow(z[11]*z[8], 3.0/2.0);
  z[23] = z[7]*z[8] + z[8]*z[9];
  z[24] = z[0]*z[3]*z[7] + z[0]*z[3]*z[9];
  z[25] = rear_.R/z[21] + rear_.r;
  z[26] = sqrt(z[23]);
  z[27] = pow(z[23], 3.0/2.0);
  z[28] = z[1]*z[3] + z[16]*z[5];
  z[29] = rear_.R/z[26] + rear_.r;
  z[30] = -rear_.R*z[3]*z[4]/z[26] + ls_;
  z[31] = z[1]*z[4]*z[8] + z[16]*z[3]*z[4]*z[5];
  z[32] = rear_.R*z[1]*z[3]/z[26] + rear_.r*z[1]*z[3];
  z[33] = rear_.R*z[3]*z[4]/z[26] + rear_.r*z[3]*z[4];
  z[34] = -front_.R/sqrt(pow(z[16], 2) + z[8]*z[9]) - front_.r;
  z[35] = rear_.r*z[3]*z[4] - z[30];
  z[36] = -z[0]*z[3]*z[9] + z[14]*z[16];
  z[37] = -front_.R*z[1]/sqrt(pow(z[16], 2) + z[8]*z[9]) - front_.r*z[1];
  z[38] = -rear_.R*z[11]*z[8]/z[22] + z[25];
  z[39] = front_.R*z[14]/sqrt(pow(z[16], 2) + z[8]*z[9]) + front_.r*z[14];
  z[40] = rear_.R*z[0]/z[26] - rear_.R*z[24]*z[3]/z[27] + rear_.r*z[0];
  z[41] = rear_.R*z[0]*z[1]/z[26] - rear_.R*z[1]*z[24]*z[3]/z[27] + rear_.r*z[0]*z[1];
  z[42] = rear_.R*z[0]*z[4]/z[26] - rear_.R*z[24]*z[3]*z[4]/z[27] + rear_.r*z[0]*z[4];
  z[43] = z[1]*z[32] + z[12] + z[33]*z[4];
  z[44] = -z[1]*z[33] + z[10] + z[32]*z[4];
  z[45] = -front_.R*z[31]*z[4]/pow(pow(z[16], 2) + z[8]*z[9], 3.0/2.0) - z[37];
  z[46] = front_.R*z[0]/sqrt(pow(z[16], 2) + z[8]*z[9]) + front_.R*z[3]*z[36]/pow(pow(z[16], 2) + z[8]*z[9], 3.0/2.0) + front_.r*z[0];
  z[47] = -front_.R*z[16]*z[31]/pow(pow(z[16], 2) + z[8]*z[9], 3.0/2.0) + front_.R*z[3]*z[4]*z[5]/sqrt(pow(z[16], 2) + z[8]*z[9]) + front_.r*z[3]*z[4]*z[5];
  z[48] = -front_.R*z[16]*z[36]/pow(pow(z[16], 2) + z[8]*z[9], 3.0/2.0) + z[39];
  z[49] = -z[48];
  z[50] = ls_*z[3] - rear_.r*z[4]*z[6] + rear_.r*z[4]*z[8] + z[0]*z[42] - z[3]*z[33];
  z[51] = z[40] - z[46];
  z[52] = -front_.r;
  z[53] = -rear_.r;
  z[54] = front_.c*z[2];
  z[55] = front_.c*z[4];
  z[56] = rear_.c*z[4];
  z[57] = ls_*z[1];
  z[58] = -z[5]*z[52];
  z[59] = -z[0]*z[53];
  z[60] = -z[3]*z[53];
  z[61] = -z[0];
  z[62] = -z[1];
  z[63] = -z[2];
  z[64] = -z[3];
  z[65] = -2*z[64];
  z[66] = -z[4];
  z[67] = -z[5];
  z[68] = z[1]*z[52];
  z[69] = z[61]*z[62];
  z[70] = z[61]*z[63];
  z[71] = z[61]*z[64];
  z[72] = z[61]*z[66];
  z[73] = z[62]*z[63];
  z[74] = z[62]*z[64];
  z[75] = z[62]*z[67];
  z[76] = z[63]*z[64];
  z[77] = z[63]*z[66];
  z[78] = z[64]*z[66];
  z[79] = z[64]*z[67];
  z[80] = z[66]*z[67];
  z[81] = -z[59]*z[62];
  z[82] = -z[62]*z[8];
  z[83] = -z[64]*z[9];
  z[84] = z[8]*z[9];
  z[85] = z[61]*z[65]*z[9];
  z[86] = z[11]*z[8];
  z[87] = -z[16]*z[52];
  z[88] = -z[18]*z[52];
  z[89] = z[20]*z[63];
  z[90] = z[20]*z[64];
  z[91] = z[20]*z[66];
  z[92] = z[20]*z[67];
  z[93] = -z[16]*z[63];
  z[94] = -z[16]*z[66];
  z[95] = rear_.R/z[21];
  z[96] = -z[67]/z[21];
  z[97] = rear_.R/z[26];
  z[98] = -z[16]*z[20];
  z[99] = front_.R/pow(pow(z[16], 2) + z[84], 3.0/2.0);
  z[100] = front_.R/sqrt(pow(z[16], 2) + z[84]);
  z[101] = z[11]/z[26];
  z[102] = -z[64]/sqrt(pow(z[16], 2) + z[84]);
  z[103] = -z[66]/sqrt(pow(z[16], 2) + z[84]);
  z[104] = z[16]*z[28];
  z[105] = pow(z[16], 2)/(pow(z[16], 2) + z[84]);
  z[106] = pow(z[16], 2)*z[99];
  z[107] = -z[16]*z[34];
  z[108] = z[28]/(pow(z[16], 2) + z[84]);
  z[109] = -z[36]/(pow(z[16], 2) + z[84]);
  z[110] = -z[36]/(pow(z[16], 2) + z[84]);
  z[111] = -z[20]*(-z[106] - z[34]);
  z[112] = z[46]*z[9];
  z[113] = (2*z[0]*z[7] + 2*z[0]*z[9] - z[24]*z[3]*z[7]/z[23] - z[24]*z[3]*z[9]/z[23])/z[26];

  ar[0] = -z[0]*z[52]*z[91] + z[18]*z[34]*z[78] - z[46]*z[91] - z[50]*z[67] - z[63]*(-z[32]*z[72] + z[33]*z[69] - z[41]*z[78] + z[42]*z[74] + z[56]*z[61] + z[57]*z[61]) + z[78]*z[88];
  ar[1] = -z[19]*z[63] + z[34]*z[63]*z[84] - z[45]*z[90] - z[52]*z[63]*z[84] - z[68]*z[90] + z[69]*z[79]*z[97];
  ar[2] = -z[107]*z[78] + z[20]*z[78]*z[98]*z[99] - z[30]*z[70] + z[44]*z[79] + z[78]*z[87];
  ar[3] = -z[112]*z[63] - z[18]*z[68] + z[60]*z[75] - z[63]*(z[41]*z[62] + z[42]*z[66]);
  ar[4] = -z[10]*z[63] - z[34]*z[73]*z[78] - z[45]*z[66]*z[76] + z[52]*z[91] + z[59]*z[80] - z[66]*z[68]*z[76];
  ar[5] = -z[16]*z[68] + z[34]*z[79]*z[9] - z[43]*z[67] - z[59]*z[73] + z[76]*z[9]*z[98]*z[99];
  ar[6] = z[51]*z[80];
  ar[7] = z[79]*(-z[29]*z[62] - z[45]);
  ar[8] = -z[16]*z[78]*z[92]*z[99] - z[34]*z[66]*z[76] - z[35]*z[63];
  ar[9] = z[88];
  ar[10] = -z[52]*z[66]*z[76];
  ar[11] = z[87];
  ar[12] = -z[38]*z[67]*z[72];
  ar[13] = -z[25]*z[67]*z[74];
  ar[14] = -z[25]*z[66]*z[76];
  ar[15] = z[46]*z[66];
  ar[16] = -z[64]*(z[28]*z[83]*z[99] + z[37]);
  ar[17] = -z[78]*z[98]*z[99];
  ar[18] = 0;
  ar[19] = -z[74]*z[96];
  ar[20] = z[66]*z[76]/z[21];
  ar[21] = -z[113]*z[76] + z[6]*z[75]*z[86]/z[22] - z[6]*z[75]/z[21] + z[75]*z[8]/z[21];
  ar[22] = z[71]*z[80]/z[21];
  ar[23] = -z[64]*(z[101]*z[79] + z[63]*z[69]/z[21]);
  ar[24] = z[14];
  ar[25] = z[67]*z[78];
  ar[26] = z[13];
  ar[27] = -z[103]*(-z[102]*z[36]/sqrt(pow(z[16], 2) + z[84]) + z[61]);
  ar[28] = -z[102]*(z[108]*z[83] + z[62]);
  ar[29] = z[78]*z[98]/pow(pow(z[16], 2) + z[84], 3.0/2.0);
  ar[30] = (z[110]*z[98] - z[14]*z[20] - z[16]*z[18])/sqrt(pow(z[16], 2) + z[84]);
  ar[31] = z[78]*(z[108]*z[98] - z[92] + z[93])/sqrt(pow(z[16], 2) + z[84]);
  ar[32] = -(pow(z[16], 2) - pow(z[20], 2) + pow(z[98], 2)/(pow(z[16], 2) + z[84]))/sqrt(pow(z[16], 2) + z[84]);
  ar[33] = -z[14];
  ar[34] = -z[67]*z[78];
  ar[35] = z[20];
  ar[36] = -z[107]*z[72] + z[14]*z[34]*z[78] + z[46]*z[94] - z[49]*z[78] + z[50]*z[63] - z[55]*z[61] - z[67]*(-z[32]*z[72] + z[33]*z[69] - z[41]*z[78] + z[42]*z[74] + z[56]*z[61] + z[57]*z[61]);
  ar[37] = front_.c*z[74] - z[107]*z[74] - z[16]*z[45]*z[64] - z[19]*z[67] + z[34]*z[67]*z[84] - z[47]*z[78] - z[69]*z[76]*z[97];
  ar[38] = z[111]*z[78] + z[16]*z[78]*z[98]*z[99] - z[20]*z[34]*z[78] - z[30]*z[61]*z[67] - z[44]*z[76];
  ar[39] = -z[112]*z[67] + z[49]*z[62] - z[60]*z[73] - z[67]*(z[41]*z[62] + z[42]*z[66]);
  ar[40] = -z[10]*z[67] - z[34]*z[74]*z[80] - z[34]*z[94] - z[45]*z[67]*z[78] + z[47]*z[62] - z[55] - z[59]*z[77];
  ar[41] = -z[111]*z[62] - z[34]*z[76]*z[9] + z[43]*z[63] - z[59]*z[75] + z[79]*z[9]*z[98]*z[99];
  ar[42] = -z[51]*z[77];
  ar[43] = z[76]*(z[29]*z[62] + z[45]);
  ar[44] = z[16]*z[76]*z[91]*z[99] - z[34]*z[67]*z[78] - z[35]*z[67];
  ar[45] = z[48];
  ar[46] = z[78]*(z[100]*z[67] + z[104]*z[99] - z[58]);
  ar[47] = z[111];
  ar[48] = z[38]*z[66]*z[70];
  ar[49] = z[25]*z[64]*z[73];
  ar[50] = -z[25]*z[67]*z[78];
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = -z[64]*z[73]/z[21];
  ar[56] = -z[78]*z[96];
  ar[57] = -z[113]*z[79] - z[6]*z[73]*z[86]/z[22] + z[6]*z[73]/z[21] - z[73]*z[8]/z[21];
  ar[58] = -z[70]*z[78]/z[21];
  ar[59] = -z[64]*(-z[101]*z[76] + z[67]*z[69]/z[21]);
  ar[60] = z[17];
  ar[61] = -z[66]*z[76];
  ar[62] = z[15];
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = -(-z[105]*z[36] + z[109]*z[84] + 2*z[14]*z[16] + z[85])/sqrt(pow(z[16], 2) + z[84]);
  ar[67] = -z[78]*(z[104]*z[16]/(pow(z[16], 2) + z[84]) + z[108]*z[84] + 2*z[16]*z[67] + z[62]*z[65])/sqrt(pow(z[16], 2) + z[84]);
  ar[68] = z[98]*(z[105] + z[84]/(pow(z[16], 2) + z[84]) - 2)/sqrt(pow(z[16], 2) + z[84]);
  ar[69] = z[18];
  ar[70] = z[66]*z[76];
  ar[71] = z[16];
  ar[72] = -front_.c*z[18] + rear_.c*z[64] + z[107]*z[18] + z[14]*z[20]*z[52] - z[18]*z[87] - z[20]*z[49] - z[29]*z[82] + z[40]*z[69] - z[53]*z[6]*z[62] - z[53]*z[82];
  ar[73] = -z[20]*z[47] + z[20]*z[58]*z[78] + z[29]*z[66]*z[71] + z[34]*z[76]*z[94] + z[54]*z[78] + z[59]*z[78] - z[66]*z[76]*z[87];
  ar[74] = -front_.c*z[16] + z[107]*z[16] + z[111]*z[20] - z[16]*z[87] - pow(z[20], 2)*z[52];
  ar[75] = z[66]*(z[18]*z[58] - z[49]*z[63] + z[60]);
  ar[76] = -z[107]*z[73] - z[47]*z[77] - z[54]*z[62] + z[58]*z[76]*z[9] + z[68]*z[92] + z[81];
  ar[77] = z[66]*(-front_.c*z[67] + z[107]*z[67] + z[16]*z[58] - z[52]*z[89] - z[89]*(-z[106] - z[34]));
  ar[78] = -rear_.R*z[69]*z[86]/z[22] + z[63]*z[88] - z[67]*(z[16]*z[99]*(z[16]*(-2*z[61]*z[75] + 2*z[76]) + z[85])/2 - z[39]) + z[69]*z[95] + z[81];
  ar[79] = -z[47]*z[67] - z[52]*z[76]*z[77] + z[60]*z[66] - z[78]*z[95];
  ar[80] = -z[20]*z[58] - z[34]*z[93] - z[54] + z[63]*z[87] - z[92]*(-z[106] - z[34]);
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[38]*z[69];
  ar[85] = -z[25]*z[78];
  ar[86] = 0;
  ar[87] = -z[48];
  ar[88] = z[78]*(-z[100]*z[67] - z[104]*z[99] + z[58]);
  ar[89] = -z[20]*(z[106] + z[34]);
  ar[90] = 0;
  ar[91] = z[78]/z[21];
  ar[92] = 0;
  ar[93] = z[66]*z[8]/z[21];
  ar[94] = -z[64]*z[69]/z[21];
  ar[95] = 0;
  ar[96] = -z[72];
  ar[97] = -z[74];
  ar[98] = 0;
  ar[99] = (z[110]*z[16] + z[14])/sqrt(pow(z[16], 2) + z[84]);
  ar[100] = z[78]*(z[104]/(pow(z[16], 2) + z[84]) + z[67])/sqrt(pow(z[16], 2) + z[84]);
  ar[101] = z[20]*(z[105] - 1)/sqrt(pow(z[16], 2) + z[84]);
  ar[102] = -z[103]*(-z[109]*z[90] - z[18]*z[64] + z[20]*z[61]);
  ar[103] = z[102]*(-z[108]*z[20]*z[83] - z[20]*z[62] + z[76]*z[9]);
  ar[104] = -z[16]*z[78]*(pow(z[20], 2)/(pow(z[16], 2) + z[84]) + 1)/sqrt(pow(z[16], 2) + z[84]);
  ar[105] = z[72];
  ar[106] = z[74];
  ar[107] = 0;

  delete [] z;
}

/** Computes the n-d array of shape (3, 12, 3, 3)
 *
 * @param[out] ar a C-array of with 324 elements
 */
//  void Bicycle::f_v_dudqdq(double ar[324]) const;
void Bicycle::f_v_dudqdq(double ar[324]) const
{
  double * z = new double[333];

  z[0] = -2;
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = sin(state_[3]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = cos(state_[3]);
  z[7] = pow(z[1], -z[0]);
  z[8] = pow(z[1], 3);
  z[9] = pow(z[2], -z[0]);
  z[10] = pow(z[3], -z[0]);
  z[11] = pow(z[4], -z[0]);
  z[12] = pow(z[4], 3);
  z[13] = pow(z[5], -z[0]);
  z[14] = pow(z[6], -z[0]);
  z[15] = z[13] + z[9];
  z[16] = rear_.c*z[2] - ls_*z[5];
  z[17] = -rear_.c*z[5] - ls_*z[2];
  z[18] = pow(z[15], -z[0]);
  z[19] = -z[16];
  z[20] = z[1]*z[6] + z[2]*z[3]*z[4];
  z[21] = z[1]*z[2]*z[6] + z[3]*z[4];
  z[22] = -z[1]*z[3] + z[2]*z[4]*z[6];
  z[23] = -z[22];
  z[24] = -z[1]*z[2]*z[3] + z[4]*z[6];
  z[25] = -z[24];
  z[26] = -z[16]*z[4];
  z[27] = -z[20];
  z[28] = -z[0]*z[1]*z[2]*z[3] + z[0]*z[4]*z[6];
  z[29] = -z[21];
  z[30] = -z[0]*z[1]*z[2]*z[6] - z[0]*z[3]*z[4];
  z[31] = sqrt(z[11]*z[15]);
  z[32] = pow(z[11]*z[15], 3.0/2.0);
  z[33] = pow(z[11]*z[15], 5.0/2.0);
  z[34] = pow(z[23], -z[0]);
  z[35] = pow(z[23], 3);
  z[36] = rear_.r*z[11]*z[5] - rear_.r*z[5]*z[7];
  z[37] = z[11]*z[13] + z[11]*z[9];
  z[38] = z[1]*z[13]*z[4] + z[1]*z[4]*z[9];
  z[39] = rear_.R/z[31] + rear_.r;
  z[40] = -z[0]*z[11]*z[13] + z[0]*z[13]*z[7];
  z[41] = sqrt(z[37]);
  z[42] = pow(z[37], 3.0/2.0);
  z[43] = pow(z[37], -z[0]);
  z[44] = pow(z[37], 5.0/2.0);
  z[45] = pow(z[38], -z[0]);
  z[46] = 3*z[1]*z[13]*z[4] + 3*z[1]*z[4]*z[9];
  z[47] = z[2]*z[4] + z[23]*z[6];
  z[48] = rear_.R/z[41] + rear_.r;
  z[49] = pow(z[47], -z[0]);
  z[50] = z[11]*z[13] + z[34];
  z[51] = -front_.r*z[2]*z[27] - rear_.r*z[1]*z[2]*z[6];
  z[52] = sqrt(z[50]);
  z[53] = pow(z[50], 3.0/2.0);
  z[54] = pow(z[50], -z[0]);
  z[55] = pow(z[50], 5.0/2.0);
  z[56] = rear_.R*z[2]*z[4]/z[31] + rear_.r*z[2]*z[4];
  z[57] = -rear_.R*z[4]*z[5]/z[41] + ls_;
  z[58] = z[11]*z[2]*z[5] + z[23]*z[4]*z[5]*z[6];
  z[59] = front_.R/z[52] + front_.r;
  z[60] = pow(z[58], -z[0]);
  z[61] = rear_.R*z[2]*z[4]/z[41] + rear_.r*z[2]*z[4];
  z[62] = rear_.R*z[4]*z[5]/z[41] + rear_.r*z[4]*z[5];
  z[63] = z[23]*z[3] + z[27]*z[6];
  z[64] = rear_.r*z[4]*z[5] - z[57];
  z[65] = -z[1]*z[13]*z[4] - z[23]*z[29];
  z[66] = z[13]*z[7] - z[37] + z[7]*z[9];
  z[67] = -z[65];
  z[68] = pow(z[65], -z[0]);
  z[69] = z[0]*z[1]*z[13]*z[4] + z[23]*z[30];
  z[70] = front_.R*z[1]*z[2]/z[52] + front_.r*z[1]*z[2];
  z[71] = -z[4]*z[5]*z[63];
  z[72] = 3*z[1]*z[13]*z[4] + 3*z[23]*z[29];
  z[73] = z[23]*z[3]*z[4]*z[5] + z[27]*z[4]*z[5]*z[6];
  z[74] = -z[0]*z[1]*z[2]*z[4] + z[1]*z[23]*z[6] + z[29]*z[4]*z[6];
  z[75] = -z[13]*z[14]*z[4] + z[13]*z[4] - z[2]*z[23]*z[6] - z[4]*z[9];
  z[76] = z[4]*z[75];
  z[77] = -z[5]*z[74];
  z[78] = -rear_.R*z[11]*z[15]/z[32] + z[39];
  z[79] = -z[0]*z[1]*z[2]*z[4]*z[5] + z[1]*z[23]*z[5]*z[6] + z[29]*z[4]*z[5]*z[6];
  z[80] = -z[13]*z[7] + z[50] - pow(-z[29], -z[0]);
  z[81] = z[11]*z[13]*z[14] - z[11]*z[13] + z[11]*z[9] + z[2]*z[23]*z[4]*z[6];
  z[82] = -z[23]*z[25] + z[27]*z[29];
  z[83] = z[82];
  z[84] = 1 - z[7]/z[11] + z[66]/(z[11]*z[15]);
  z[85] = rear_.R*z[1]/z[41] - rear_.R*z[38]*z[4]/z[42] + rear_.r*z[1];
  z[86] = -rear_.R*z[1]*z[11]*z[15]*z[5]/z[32] + rear_.R*z[1]*z[5]/z[31] - front_.r*z[1]*z[10]*z[5] + rear_.r*z[1]*z[5];
  z[87] = -front_.R*z[34]/z[53] + z[59];
  z[88] = rear_.R*z[1]*z[2]/z[41] - rear_.R*z[2]*z[38]*z[4]/z[42] + rear_.r*z[1]*z[2];
  z[89] = rear_.R*z[1]*z[5]/z[41] - rear_.R*z[38]*z[4]*z[5]/z[42] + rear_.r*z[1]*z[5];
  z[90] = z[16] + z[2]*z[61] + z[5]*z[62];
  z[91] = z[34] + 3*z[34]*pow(-z[27], -z[0])/z[50] - pow(-z[27], -z[0]);
  z[92] = front_.R*z[2]/z[52] - front_.R*z[5]*z[58]/z[53] + front_.r*z[2];
  z[93] = -3*z[34]*pow(-z[27], -z[0])/z[54] + 3*pow(-z[27], -z[0])/z[50];
  z[94] = front_.R*z[1]/z[52] + front_.R*z[4]*z[65]/z[53] + front_.r*z[1];
  z[95] = -z[0]*z[1]*z[13] - z[0]*z[1]*z[9] - z[13]*z[38]*z[4]/z[37] - z[38]*z[4]*z[9]/z[37];
  z[96] = -rear_.R*z[0]*z[1]*z[38]*z[5]/z[42] + rear_.R*z[4]*z[5]*z[66]/z[42];
  z[97] = -front_.R*z[2]*z[4]*z[65]/z[53] - z[70];
  z[98] = -3*z[13]*z[23]*z[27]*z[4]*z[47]/z[50] + z[2]*z[23]*z[27];
  z[99] = -front_.R*z[23]*z[58]/z[53] + front_.R*z[4]*z[5]*z[6]/z[52] + front_.r*z[4]*z[5]*z[6];
  z[100] = -z[1]*z[23]*z[27] - 3*z[23]*z[27]*z[4]*z[65]/z[50];
  z[101] = -z[2]*z[48]*z[6] + z[6]*z[92];
  z[102] = -rear_.r*z[11]*z[2] + rear_.r*z[2]*z[7] - z[1]*z[88] + z[4]*z[61];
  z[103] = front_.R*z[23]*z[65]/z[53] + front_.R*z[29]/z[52] + front_.r*z[29];
  z[104] = ls_*z[4] + z[1]*z[89] + z[36] - z[4]*z[62];
  z[105] = front_.r*z[1]*z[2]*z[3] + front_.r*z[25] + rear_.r*z[4]*z[6] - z[2]*z[3]*z[94];
  z[106] = front_.R*z[23]*z[69]/(2*z[53]) + front_.R*z[29]/z[52] + front_.r*z[29];
  z[107] = -rear_.R*z[0]*z[15]*z[7]/z[32] - 3*rear_.R*z[11]*z[18]*z[7]/z[33] + rear_.R*z[66]/z[32] + z[39];
  z[108] = z[2]*z[23]*z[27] - 3*z[23]*z[27]*z[5]*z[58]/z[50] + z[5]*z[73];
  z[109] = -z[2]*z[88] - z[5]*z[89];
  z[110] = 3*z[27]*z[34]*z[65]/z[54] - z[27]*z[65]/z[50];
  z[111] = front_.r*z[25]*z[6] - front_.r*z[29]*z[3] + z[103]*z[3];
  z[112] = -front_.r*z[25]*z[3] - front_.r*z[29]*z[6] + z[103]*z[6];
  z[113] = 3*front_.R*z[27]*z[34]*z[47]/z[55] - front_.R*z[27]*z[47]/z[53] + front_.R*z[3]/z[52] + front_.r*z[3];
  z[114] = -rear_.R*z[0]*z[1]*z[38]/z[42] - 3*rear_.R*z[4]*z[45]/z[44] + rear_.R*z[4]*z[66]/z[42] + rear_.R*z[4]/z[41] + rear_.r*z[4];
  z[115] = -3*front_.R*z[34]*pow(-z[27], -z[0])/z[55] + 3*front_.R*pow(-z[27], -z[0])/z[53] + z[87];
  z[116] = -z[100] + z[4]*z[82];
  z[117] = -front_.r*z[1]*z[13]*z[3]*z[6] + front_.r*z[2]*z[25]*z[6] + rear_.r*z[2]*z[4] + z[106]*z[2]*z[3];
  z[118] = -3*rear_.R*z[4]*z[45]*z[5]/z[44] + z[62] + z[96];
  z[119] = -front_.r*z[2]*z[4]*z[5]*z[6] + front_.r*z[23]*z[5] - rear_.r*z[1]*z[3]*z[5] - z[17]*z[6] + z[2]*z[4]*z[5]*z[59]*z[6] + z[4]*z[5]*z[6]*z[92];
  z[120] = 3*front_.R*z[27]*z[34]*z[58]/z[55] - front_.R*z[27]*z[58]/z[53] + front_.R*z[3]*z[4]*z[5]/z[52] + front_.r*z[3]*z[4]*z[5];
  z[121] = -z[0]*z[1]*z[13]*z[23]*z[27]*z[4]/z[50] - z[0]*z[23]*z[25] - z[0]*z[23]*z[27]*z[67]/z[50] + z[0]*z[27]*z[29];
  z[122] = -z[11]*z[15]*z[2]*z[6]*z[7]/z[32] - z[11]*z[2]*z[6]/z[31] + z[2]*z[6]*z[7]/z[31] + z[3]*z[4]*z[95]/z[41];
  z[123] = -z[11]*z[15]*z[2]*z[3]*z[7]/z[32] - z[11]*z[2]*z[3]/z[31] + z[2]*z[3]*z[7]/z[31] - z[4]*z[6]*z[95]/z[41];
  z[124] = -front_.R*z[5]*(z[0]*z[1]*z[23]*z[27] - 3*z[23]*z[27]*z[4]*z[69]/z[50] - z[4]*(-z[23]*z[28] - z[27]*z[30]))/(2*z[53]);
  z[125] = front_.R*z[25]/z[52] + 3*front_.R*z[27]*z[34]*z[65]/z[55] - front_.R*z[27]*z[65]/z[53] + front_.r*z[25];
  z[126] = z[1]*z[5]*z[6] + z[23]*z[77]/z[50] - z[29]*z[4]*z[47]*z[5]/z[50] - z[4]*z[5]*z[6]*z[67]/z[50];
  z[127] = -front_.R*z[0]*z[2]*z[58]/z[53] - 3*front_.R*z[5]*z[60]/z[55] + front_.R*z[5]*z[81]/z[53] + front_.R*z[5]/z[52] + front_.r*z[5];
  z[128] = rear_.r*z[1]*z[5]*z[6] - z[17]*z[3] + z[2]*z[3]*z[4]*z[5]*z[59] + z[27]*z[5]*z[87] + z[3]*z[4]*z[5]*z[92];
  z[129] = -rear_.c*z[1]*z[5] - ls_*z[1]*z[2] + z[1]*z[2]*z[62] - z[1]*z[5]*z[61] + z[2]*z[4]*z[89] - z[4]*z[5]*z[88];
  z[130] = -front_.R*z[0]*z[1]*z[65]/z[53] + 3*front_.R*z[4]*z[68]/z[55] + front_.R*z[4]*z[80]/z[53] - front_.R*z[4]/z[52] - front_.r*z[4];
  z[131] = -z[1]*z[23] - z[1]*z[23]*pow(-z[27], -z[0])/z[50] - 3*z[23]*z[4]*z[65]*pow(-z[27], -z[0])/z[54] - z[23]*z[4]*z[65]/z[50] - z[29]*z[4];
  z[132] = -z[127] + z[48]*z[5];
  z[133] = -front_.R*z[0]*z[4]*z[5]*z[58]*z[6]/z[53] - front_.R*z[2]*z[4]*z[6]/z[52] - 3*front_.R*z[23]*z[60]/z[55] + front_.R*z[23]*z[81]/z[53] - front_.r*z[2]*z[4]*z[6];
  z[134] = z[133];
  z[135] = rear_.r*z[2]*z[4]*z[6] + z[109]*z[3] + z[13]*z[3]*z[94];
  z[136] = -z[5]*(-front_.R*z[0]*z[4]*(z[23]*(-z[0]*z[1]*z[3] + z[0]*z[2]*z[4]*z[6]) + z[29]*z[30] + z[40])/z[53] + 4*front_.R*z[1]*z[69]/z[53] + 3*front_.R*z[4]*pow(z[69], -z[0])/z[55] - 4*front_.R*z[4]/z[52] - 4*front_.r*z[4])/4;
  z[137] = front_.R*z[1]*z[5]*z[6]/z[52] - 3*front_.R*z[23]*z[58]*z[69]/(2*z[55]) - front_.R*z[29]*z[58]/z[53] + front_.R*z[4]*z[5]*z[6]*z[69]/(2*z[53]) + front_.r*z[1]*z[5]*z[6];
  z[138] = z[0]*z[23]*z[29] + z[0]*z[25]*z[27] - 3*z[34]*z[65]*pow(-z[27], -z[0])/z[54] - z[34]*z[65]/z[50] + z[65]*pow(-z[27], -z[0])/z[50];
  z[139] = front_.R*z[0]*z[23]*z[27]*z[4]*z[5]*z[6]/z[53] - front_.R*z[3]*z[34]*z[4]*z[5]/z[53] + z[120];
  z[140] = front_.R*z[0]*z[29]*z[65]/z[53] - 3*front_.R*z[23]*z[68]/z[55] - front_.R*z[23]*z[80]/z[53] + front_.R*z[23]/z[52] + front_.r*z[23];
  z[141] = -ls_*z[1] - 4*rear_.r*z[1]*z[4]*z[5] - z[0]*z[4]*z[89] + z[1]*z[118] + z[1]*z[62];
  z[142] = -(-z[1]*z[13]*z[4]*z[47]/z[50] + z[1]*z[2] - 3*z[11]*z[13]*z[47]*z[65]/z[54] - z[13]*z[4]*z[74]/z[50] + z[2]*z[4]*z[65]/z[50])/z[52];
  z[143] = front_.R*z[23]*z[27]*z[4]*z[5]*z[6]/z[53] + front_.R*z[23]*z[73]/z[53] - z[120];
  z[144] = front_.R*z[23]*z[27]*z[4]*z[5]*z[6]/z[53] + front_.R*z[23]*z[73]/z[53] - z[120];
  z[145] = -front_.R*z[0]*z[23]*z[27]*z[29]/z[53] - front_.R*z[25]*z[34]/z[53] + z[125];
  z[146] = front_.R*z[1]*z[5]*z[58]/z[53] + 3*front_.R*z[4]*z[5]*z[58]*z[65]/z[55] + front_.R*z[4]*z[5]*z[79]/z[53] + z[97];
  z[147] = front_.R*z[1]*z[5]*z[58]/z[53] - front_.R*z[2]*z[4]*z[69]/(2*z[53]) + 3*front_.R*z[4]*z[5]*z[58]*z[69]/(2*z[55]) + front_.R*z[4]*z[5]*z[79]/z[53] - z[70];
  z[148] = -z[5]*(front_.R*z[1]*z[6]/z[52] - 3*front_.R*z[23]*z[4]*z[47]*z[65]/z[55] - front_.R*z[23]*z[74]/z[53] - front_.R*z[29]*z[4]*z[47]/z[53] + front_.R*z[4]*z[6]*z[65]/z[53] + front_.r*z[1]*z[6]);
  z[149] = -front_.c*z[29] + front_.r*z[0]*z[23]*z[29] + front_.r*z[0]*z[25]*z[27] + z[103]*z[23] + z[23]*z[29]*z[59] + z[25]*z[27]*z[87];
  z[150] = -(-z[0]*z[11]*z[9] + z[0]*z[7]*z[9] + 4*z[1]*z[13]*z[38]*z[4]/z[37] + 4*z[1]*z[38]*z[4]*z[9]/z[37] - 3*z[11]*z[13]*z[45]/z[43] + z[11]*z[13]*z[66]/z[37] - 3*z[11]*z[45]*z[9]/z[43] + z[11]*z[66]*z[9]/z[37] + z[40])/z[41];
  z[151] = front_.R*z[23]*z[79]/z[53] - z[137];
  z[152] = front_.R*z[23]*z[27]*z[29]/z[53] + front_.R*z[23]*z[82]/z[53] + z[125];
  z[153] = front_.R*z[23]*(-z[0]*z[1]*z[23]*z[5]*z[6] + 4*z[1]*z[2]*z[4]*z[5] - z[30]*z[4]*z[5]*z[6])/(2*z[53]) - z[137];
  z[154] = -z[118]*z[5] + z[2]*(rear_.R*z[0]*z[1]*z[2]*z[38]/z[42] + rear_.R*z[2]*z[38]*z[4]*z[46]/z[44] - rear_.R*z[2]*z[4]*z[66]/z[42] - z[61]);
  z[155] = z[146] + z[2]*z[85];
  z[156] = -z[155]*z[6];
  z[157] = z[0]*z[1]*z[13]*z[3]*z[4] + z[1]*z[13]*z[27]*z[4]*z[47]/z[50] - z[1]*z[2]*z[27] - z[11]*z[13]*z[25]*z[47]/z[50] + z[11]*z[13]*z[3]*z[67]/z[50] + z[2]*z[25]*z[4] + z[2]*z[27]*z[4]*z[67]/z[50] - z[27]*z[4]*z[5]*z[77]/z[50];
  z[158] = -z[1]*z[23]*z[3]*z[5] - z[1]*z[27]*z[5]*z[6] - z[23]*z[25]*z[4]*z[47]*z[5]/z[50] - z[23]*z[27]*z[77]/z[50] + z[23]*z[3]*z[4]*z[5]*z[67]/z[50] + z[25]*z[4]*z[5]*z[6] + z[27]*z[29]*z[4]*z[47]*z[5]/z[50] + z[27]*z[4]*z[5]*z[6]*z[67]/z[50] - z[29]*z[3]*z[4]*z[5];
  z[159] = -front_.c*z[1]*z[3]*z[5] - front_.r*z[1]*z[23]*z[3]*z[5] - front_.r*z[1]*z[27]*z[5]*z[6] + front_.r*z[25]*z[4]*z[5]*z[6] - front_.r*z[29]*z[3]*z[4]*z[5] + z[1]*z[23]*z[3]*z[5]*z[59] + z[1]*z[5]*z[85] + z[106]*z[3]*z[4]*z[5] - z[11]*z[48]*z[5] - z[25]*z[99];
  z[160] = -front_.r*z[1]*z[23]*z[5] - front_.r*z[29]*z[4]*z[5] - z[104]*z[3] + z[129]*z[6] + z[23]*z[5]*z[94] + z[29]*z[4]*z[5]*z[59];
  z[161] = -rear_.c*z[4]*z[5] - ls_*z[2]*z[4] + z[0]*z[1]*z[2]*z[89] - z[0]*z[1]*z[5]*z[88] + z[2]*z[4]*z[62] + z[2]*z[4]*(-rear_.R*z[38]*z[4]*z[46]*z[5]/z[44] + z[62] + z[96]) - z[4]*z[5]*z[61] + z[4]*z[5]*(rear_.R*z[0]*z[1]*z[2]*z[38]/z[42] + rear_.R*z[2]*z[38]*z[4]*z[46]/z[44] - rear_.R*z[2]*z[4]*z[66]/z[42] - z[61]);
  z[162] = -z[5]*(z[0]*z[1]*z[11]*z[13]*z[47]/z[50] - z[0]*z[1]*z[23]*z[6] - z[0]*z[11]*z[2]*z[65]/z[50] + z[0]*z[23]*z[29]*z[4]*z[47]/z[50] - z[0]*z[23]*z[4]*z[6]*z[65]/z[50] - z[0]*z[29]*z[4]*z[6] + 4*z[1]*z[2]*z[4] - z[11]*z[13]*z[74]/z[50] - 3*z[12]*z[13]*z[47]*z[65]/z[54] - 3*z[34]*z[4]*z[47]*z[65]/z[54] - z[34]*z[74]/z[50])/z[52];
  z[163] = -front_.c*z[1]*z[2] - z[1]*z[13]*z[4]*z[59]*z[6] + z[1]*z[16]*z[6] + z[1]*z[2]*z[23]*z[59] + z[1]*z[5]*z[99] - z[102]*z[3] + z[106]*z[2]*z[4] - z[13]*z[4]*z[6]*z[94] - z[29]*z[4]*z[92];
  z[164] = -front_.r*z[0]*z[1]*z[13]*z[3]*z[4] + front_.r*z[1]*z[2]*z[27] - front_.r*z[2]*z[25]*z[4] - z[1]*z[13]*z[3]*z[4]*z[59] + z[1]*z[16]*z[3] + z[102]*z[6] - z[13]*z[3]*z[4]*z[94] + z[146]*z[27] + z[25]*z[4]*z[92];
  z[165] = -rear_.r*z[3]*z[4]*z[5] - z[103]*z[5] + z[146]*z[5]*z[6] - z[2]*z[5]*z[6]*z[94] - z[2]*(-front_.R*z[1]*z[5]*z[6]/z[52] + 3*front_.R*z[23]*z[58]*z[65]/z[55] + front_.R*z[23]*z[79]/z[53] + front_.R*z[29]*z[58]/z[53] - front_.R*z[4]*z[5]*z[6]*z[65]/z[53] - front_.r*z[1]*z[5]*z[6]);
  z[166] = rear_.R*z[5];
  z[167] = front_.c*z[2];
  z[168] = front_.c*z[3];
  z[169] = front_.c*z[5];
  z[170] = front_.r*z[1];
  z[171] = front_.r*z[2];
  z[172] = front_.r*z[3];
  z[173] = front_.r*z[5];
  z[174] = rear_.r*z[1];
  z[175] = rear_.r*z[4];
  z[176] = -z[1];
  z[177] = z[0]*z[176];
  z[178] = -4*z[176];
  z[179] = -z[2];
  z[180] = z[0]*z[179];
  z[181] = -z[3];
  z[182] = z[0]*z[181];
  z[183] = -z[4];
  z[184] = z[0]*z[183];
  z[185] = -z[5];
  z[186] = -z[6];
  z[187] = z[0]*z[186];
  z[188] = front_.r*z[183];
  z[189] = z[176]*z[179];
  z[190] = z[176]*z[185];
  z[191] = z[179]*z[181];
  z[192] = z[179]*z[183];
  z[193] = z[179]*z[186];
  z[194] = z[181]*z[183];
  z[195] = z[181]*z[185];
  z[196] = z[183]*z[185];
  z[197] = z[185]*z[186];
  z[198] = -z[189];
  z[199] = -z[176]*z[181];
  z[200] = -z[176]*z[186];
  z[201] = -z[196];
  z[202] = -z[183]*z[186];
  z[203] = -z[7];
  z[204] = -z[11];
  z[205] = z[179]*z[204];
  z[206] = -z[13]*z[181];
  z[207] = -z[13]*z[183];
  z[208] = -z[13]*z[186];
  z[209] = z[181]*z[198];
  z[210] = z[185]*z[199];
  z[211] = -z[186]*z[190];
  z[212] = -z[183]*z[191];
  z[213] = -z[186]*z[192];
  z[214] = -z[185]*z[194];
  z[215] = z[186]*z[201];
  z[216] = -z[210];
  z[217] = -z[211];
  z[218] = -z[212];
  z[219] = -z[213];
  z[220] = -z[214];
  z[221] = -z[215];
  z[222] = z[170]*z[195];
  z[223] = z[174]*z[191];
  z[224] = -z[204]*pow(z[5], 3);
  z[225] = z[13]*z[176]*z[183];
  z[226] = z[173]*z[202];
  z[227] = z[13]*z[204];
  z[228] = -front_.r*z[27];
  z[229] = -front_.r*z[29];
  z[230] = z[179]*z[27];
  z[231] = z[181]*z[27];
  z[232] = z[183]*z[27];
  z[233] = z[185]*z[27];
  z[234] = z[186]*z[27];
  z[235] = z[183]*z[29];
  z[236] = -z[179]*z[23];
  z[237] = -z[181]*z[23];
  z[238] = -z[186]*z[23];
  z[239] = -z[183]*z[25];
  z[240] = -pow(-z[27], -z[0]);
  z[241] = z[0]*z[240];
  z[242] = -3*z[240];
  z[243] = -z[13]*z[27];
  z[244] = -z[14]*z[27];
  z[245] = z[0]*z[34];
  z[246] = -z[34];
  z[247] = z[10]*z[23];
  z[248] = z[13]*z[23];
  z[249] = z[181]*z[246];
  z[250] = -z[204]/z[31];
  z[251] = -z[13]*z[246];
  z[252] = rear_.R/z[41];
  z[253] = z[205]/z[31];
  z[254] = -z[218]/z[31];
  z[255] = -z[219]/z[31];
  z[256] = -z[220]/z[31];
  z[257] = z[221]/z[31];
  z[258] = z[197]*z[250];
  z[259] = -z[195]*z[250];
  z[260] = -z[199]*z[201]/z[31];
  z[261] = z[190]*z[202]/z[31];
  z[262] = z[27]*z[29];
  z[263] = -z[221]*z[39];
  z[264] = -z[23]*z[27];
  z[265] = -z[23]*z[29];
  z[266] = z[0]*z[262];
  z[267] = z[218]*z[39];
  z[268] = z[219]*z[39];
  z[269] = z[220]*z[39];
  z[270] = z[23]*z[25];
  z[271] = front_.R/z[55];
  z[272] = front_.R/z[53];
  z[273] = front_.R/z[52];
  z[274] = -z[23]*z[240];
  z[275] = z[246]*z[27];
  z[276] = z[15]*z[8]/z[32];
  z[277] = z[12]*z[15]/z[32];
  z[278] = 3/z[50];
  z[279] = 3*z[271];
  z[280] = z[15]/z[41];
  z[281] = -z[183]/z[53];
  z[282] = -z[185]/z[53];
  z[283] = -z[183]/z[50];
  z[284] = -z[183]/z[52];
  z[285] = -z[185]/z[52];
  z[286] = -z[176]*z[23]*z[27];
  z[287] = z[13]*z[59];
  z[288] = -z[27]*z[47];
  z[289] = -z[185]*z[61];
  z[290] = -z[179]*z[62];
  z[291] = 3*z[12]*z[18]*z[8]/z[33];
  z[292] = z[23]*z[47];
  z[293] = z[194]*z[287];
  z[294] = -z[27]/z[50];
  z[295] = z[202]*z[287];
  z[296] = z[23]/z[54];
  z[297] = z[23]/z[50];
  z[298] = z[25]/z[50];
  z[299] = -z[240]/z[50];
  z[300] = -z[246]/z[54];
  z[301] = -z[246]/z[50];
  z[302] = z[35]/z[54];
  z[303] = z[23]*z[59];
  z[304] = z[25]*z[59];
  z[305] = z[246]*z[272];
  z[306] = -z[201]*z[27]*z[59];
  z[307] = z[47]/z[54];
  z[308] = z[47]/z[50];
  z[309] = 3*z[49]/z[54];
  z[310] = z[66]/z[32];
  z[311] = z[190]*z[78];
  z[312] = z[209]*z[78];
  z[313] = -z[186]*z[198]*z[78];
  z[314] = z[216]*z[78];
  z[315] = z[217]*z[78];
  z[316] = -z[65]/z[50];
  z[317] = z[67]/z[54];
  z[318] = z[67]/z[50];
  z[319] = 3*z[317];
  z[320] = z[71]/z[50];
  z[321] = z[23]*z[262]*z[272];
  z[322] = 3*pow(-z[65], -z[0])/z[54];
  z[323] = z[72]/z[54];
  z[324] = z[80]/z[50];
  z[325] = z[82]/z[50];
  z[326] = -z[27]*z[87];
  z[327] = -z[181]*z[94];
  z[328] = z[317]*z[72];
  z[329] = z[115]*z[23];
  z[330] = -z[183]*(-z[171]*z[186] - z[184]*z[208]*z[272]*z[47] + z[193]*z[273] + z[207]*z[23]*z[279]*z[49] + z[23]*z[272]*z[75]);
  z[331] = -z[201]*(z[113] + z[23]*z[234]*z[272] - z[23]*z[272]*z[63]);
  z[332] = -z[185]*(-z[170]*z[186] + z[183]*z[279]*z[292]*z[65] - z[200]*z[273] - z[202]*z[272]*z[65] - z[23]*z[272]*z[74] + z[235]*z[272]*z[47]);

  ar[0] = -z[0]*z[170]*z[185]*z[25] + z[0]*z[185]*z[25]*z[94] + z[136]*z[27] - z[141]*z[186] - z[161]*z[181] - z[173]*z[184]*z[27] + z[306];
  ar[1] = z[164];
  ar[2] = z[124]*z[27] + z[160] - z[201]*z[25]*z[264]*z[272];
  ar[3] = z[164];
  ar[4] = z[183]*(-z[127]*z[27] + z[166]*z[200]/z[41] + z[17]*z[181] + 3*z[171]*z[220] + z[173]*z[27] - z[182]*z[201]*z[92] - z[191]*z[201]*z[59]);
  ar[5] = z[183]*(-z[108]*z[27]*z[272] - z[16]*z[186] + z[171]*z[23] - z[188]*z[208] + z[194]*z[23]*z[243]*z[272] + z[209]*z[252] - z[23]*z[92] + z[295]);
  ar[6] = z[160] + z[184]*z[233]*z[270]*z[272] + z[190]*z[272]*z[274] + z[201]*z[240]*z[272]*z[29] - z[201]*z[274]*z[279]*z[65];
  ar[7] = -front_.r*z[13]*z[186]*z[204] + z[171]*z[183]*z[23] + z[182]*z[227]*z[264]*z[272] - z[183]*z[23]*z[92] - z[186]*z[26] + z[192]*z[272]*z[274] + z[194]*z[198]*z[252] + z[204]*z[208]*z[240]*z[272] - z[204]*z[208]*z[59] + z[227]*z[242]*z[271]*z[292];
  ar[8] = z[173]*z[232] - z[194]*(-z[17] + z[289] - z[290]) + z[200]*z[57] - z[201]*pow(z[27], 3)*z[272] - z[201]*pow(z[27], 2)*z[275]*z[279] - 3*z[201]*z[272]*z[275] + z[306];
  ar[9] = z[136]*z[195] - z[154]*z[181] + z[51];
  ar[10] = -z[185]*(z[105] - z[146]*z[181]);
  ar[11] = -z[109]*z[186] + z[124]*z[195] - z[171]*z[29] - z[175]*z[191] + z[208]*z[94];
  ar[12] = -z[185]*(z[105] - z[147]*z[181]);
  ar[13] = -z[127]*z[220] - z[13]*z[172]*z[184] - z[172]*z[183]*z[9] - z[180]*z[194]*z[92] - z[181]*z[19] + z[293] + z[51];
  ar[14] = -z[108]*z[220]*z[272] + z[119] + z[191]*z[201]*z[264]*z[272];
  ar[15] = -z[109]*z[186] - z[171]*z[29] - z[175]*z[191] - z[194]*z[23]*z[243]*z[279]*z[65] - z[194]*z[243]*z[272]*z[29] - z[194]*z[248]*z[25]*z[272] + z[199]*z[23]*z[243]*z[272] + z[208]*z[94];
  ar[16] = z[119] + z[180]*z[220]*z[264]*z[272] + z[186]*z[224]*z[231]*z[272] + z[224]*z[231]*z[279]*z[292] + z[224]*z[247]*z[272];
  ar[17] = -z[13]*z[194]*z[240]*z[272] + z[181]*z[90] + z[184]*z[208]*z[264]*z[272] - z[194]*z[242]*z[251]*z[271] - z[194]*z[251]*z[272] + z[293] + z[51];
  ar[18] = -z[186]*(-z[114]*z[185] - z[136]);
  ar[19] = z[156];
  ar[20] = z[185]*(-z[116]*z[186]*z[272] - z[181]*z[85] - z[327]);
  ar[21] = z[156];
  ar[22] = -z[132]*z[202];
  ar[23] = z[183]*(-z[108]*z[186]*z[272] + z[181]*z[92] + z[191]*z[48]);
  ar[24] = -z[185]*(z[181]*z[85] - z[200]*z[264]*z[272] + z[202]*z[262]*z[272] - z[202]*z[264]*z[279]*z[65] - z[202]*z[270]*z[272] + z[327]);
  ar[25] = -z[183]*(-z[181]*z[92] - z[191]*z[48] + z[193]*z[264]*z[272] - z[194]*z[208]*z[23]*z[272] + z[202]*z[243]*z[279]*z[292] + z[207]*z[244]*z[272]);
  ar[26] = -z[182]*z[201]*z[264]*z[272] - z[186]*z[64] - z[221]*z[240]*z[246]*z[279] - z[221]*z[240]*z[272] + z[221]*z[305] + z[221]*z[59];
  ar[27] = z[228];
  ar[28] = z[222];
  ar[29] = z[229];
  ar[30] = z[222];
  ar[31] = z[171]*z[194];
  ar[32] = z[226];
  ar[33] = z[229];
  ar[34] = z[226];
  ar[35] = z[228];
  ar[36] = -z[107]*z[221];
  ar[37] = z[313];
  ar[38] = z[314];
  ar[39] = z[313];
  ar[40] = z[263];
  ar[41] = z[267];
  ar[42] = z[314];
  ar[43] = z[267];
  ar[44] = z[263];
  ar[45] = -z[130]*z[185];
  ar[46] = -z[207]*z[272]*z[74] - z[225]*z[272]*z[47] + z[227]*z[279]*z[47]*z[65] - z[97];
  ar[47] = -z[185]*z[272]*(z[100] + z[183]*z[83]);
  ar[48] = -z[207]*z[272]*z[74] - z[225]*z[272]*z[47] + z[227]*z[279]*z[47]*z[65] - z[97];
  ar[49] = z[201]*(-z[180]*z[183]*z[272]*z[47] + z[183]*z[272]*z[75] + z[227]*z[279]*z[49] + z[59]);
  ar[50] = z[183]*z[272]*(z[207]*z[63] + z[98]);
  ar[51] = -z[185]*z[272]*(z[100] + z[23]*z[239] + z[232]*z[29]);
  ar[52] = -z[183]*z[272]*(-z[194]*z[248] - z[202]*z[243] - z[98]);
  ar[53] = -z[201]*z[272]*z[91];
  ar[54] = z[257]*z[84];
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = 0;
  ar[58] = z[257];
  ar[59] = z[254];
  ar[60] = 0;
  ar[61] = z[254];
  ar[62] = z[257];
  ar[63] = -z[150]*z[181] + z[177]*z[193]*z[277] + z[180]*z[202]*z[276] + z[193]*z[291] - z[198]*z[202]*z[310] - 4*z[198]*z[202]/z[31];
  ar[64] = z[258];
  ar[65] = z[123];
  ar[66] = z[258];
  ar[67] = -z[198]*z[202]/z[31];
  ar[68] = z[260];
  ar[69] = z[123];
  ar[70] = z[260];
  ar[71] = -z[183]*(-z[186]*z[198]/z[31] - z[194]*z[280]);
  ar[72] = z[22];
  ar[73] = z[211];
  ar[74] = z[24];
  ar[75] = z[211];
  ar[76] = z[213];
  ar[77] = z[214];
  ar[78] = z[24];
  ar[79] = z[214];
  ar[80] = z[22];
  ar[81] = -z[285]*(-z[177]*z[316] - z[183]*z[322] + z[183] + z[283]*z[80]);
  ar[82] = z[142];
  ar[83] = z[282]*(-z[183]*z[83] + z[23]*z[232]*z[278]*z[67] + z[286]);
  ar[84] = z[142];
  ar[85] = z[201]*(-z[180]*z[283]*z[47] - z[227]*z[309] + z[283]*z[75] - 1)/z[52];
  ar[86] = -z[281]*(-z[207]*z[63] - z[98]);
  ar[87] = z[282]*(-z[23]*z[239] - z[232]*z[29] + z[232]*z[297]*z[72] + z[286]);
  ar[88] = z[281]*(z[194]*z[248] + z[202]*z[243] + z[98]);
  ar[89] = z[201]*z[91]/z[53];
  ar[90] = (-z[0]*z[25]*z[29] + z[0]*z[264] + z[0]*z[270]*z[318] + z[264]*z[324] + z[264]*z[328] - z[266]*z[318])/z[52];
  ar[91] = (z[158] - 3*z[201]*z[264]*z[307]*z[67])/z[52];
  ar[92] = -(z[138] + z[264]*z[325] + z[265]*z[299] - z[275]*z[298])/z[52];
  ar[93] = (z[158] - z[201]*z[264]*z[307]*z[72])/z[52];
  ar[94] = (z[182]*z[204]*z[208] - z[182]*z[227]*z[292]/z[50] + z[187]*z[227]*z[288]/z[50] + z[218]*z[23] + z[219]*z[27] - z[227]*z[264]*z[309] + z[264]*z[76]/z[50])/z[52];
  ar[95] = (z[182]*z[201]*z[27] + z[184]*z[197]*z[23] + z[201]*z[242]*z[300]*z[47] - z[201]*z[299]*z[47] + z[201]*z[301]*z[47] + z[220]*z[275]/z[50] - z[221]*z[274]/z[50] + z[264]*z[320])/z[52];
  ar[96] = -(z[138] + z[241]*z[265]/z[50] + z[245]*z[25]*z[294])/z[52];
  ar[97] = z[201]*(z[182]*z[27] + z[182]*z[275]/z[50] - z[187]*z[23] - z[187]*z[274]/z[50] + z[242]*z[300]*z[47] - z[299]*z[47] + z[301]*z[47])/z[52];
  ar[98] = -z[264]*(z[246]*z[278] + z[93] + 4)/z[52];
  ar[99] = z[23];
  ar[100] = z[217];
  ar[101] = z[25];
  ar[102] = z[217];
  ar[103] = z[219];
  ar[104] = z[220];
  ar[105] = z[25];
  ar[106] = z[220];
  ar[107] = z[23];
  ar[108] = -z[0]*z[185]*z[29]*z[94] - z[106]*z[177]*z[185] + z[136]*z[23] + z[140]*z[201] + z[141]*z[181] - z[161]*z[186] - z[169]*z[183];
  ar[109] = z[146]*z[23] + z[153]*z[201] + z[163];
  ar[110] = z[104]*z[186] + z[124]*z[23] + z[129]*z[181] - z[190]*z[326] - z[201]*z[304] - z[201]*z[321] + z[201]*(z[125] + z[23]*z[272]*(-z[23]*z[28]/2 - z[27]*z[30]/2) + z[321]) + z[233]*z[94];
  ar[111] = z[147]*z[23] + z[151]*z[201] + z[163];
  ar[112] = z[183]*(-z[127]*z[23] - z[133]*z[185] - z[166]*z[199]/z[41] - z[169] + z[17]*z[186] - z[180]*z[99] + z[184]*z[197]*z[92] - z[185]*z[23]*z[59] + z[192]*z[197]*z[59]);
  ar[113] = z[183]*(-z[108]*z[23]*z[272] - z[144]*z[185] + z[16]*z[181] + z[186]*z[198]*z[252] - z[202]*z[23]*z[243]*z[272] + z[230]*z[87] + z[27]*z[92] + z[293]);
  ar[114] = z[104]*z[186] + z[145]*z[201] + z[181]*(rear_.c*z[176]*z[5] + ls_*z[176]*z[2] - z[190]*z[61] + z[192]*z[89] - z[198]*z[62] + z[201]*z[88]) + z[184]*z[233]*z[265]*z[272] - z[190]*z[272]*z[275] - z[190]*z[326] - z[201]*z[25]*z[305] + z[201]*z[275]*z[279]*z[65] - z[201]*z[304] + z[233]*z[94];
  ar[115] = -z[139]*z[201] + z[181]*z[26] + z[187]*z[227]*z[264]*z[272] - z[192]*z[272]*z[275] - z[192]*z[326] - z[198]*z[202]*z[252] + z[204]*z[206]*z[305] + z[204]*z[206]*z[59] - z[227]*z[275]*z[279]*z[47] + z[232]*z[92];
  ar[116] = -z[199]*z[57] - z[201]*z[23]*z[242]*z[272] - z[201]*z[240]*z[279]*z[35] + z[201]*z[272]*z[35] - z[201]*z[303] + z[201]*z[329] + z[202]*(-z[17] + z[289] - z[290]);
  ar[117] = z[136]*z[197] + z[140]*z[179] - z[154]*z[186] + z[223];
  ar[118] = z[165];
  ar[119] = z[116]*z[208]*z[272] - z[135] + z[152]*z[179];
  ar[120] = z[165];
  ar[121] = -z[0]*z[185]*z[99] - z[127]*z[221] + z[134]*z[179] + z[167] + z[180]*z[202]*z[92] - z[186]*z[19] + z[223] - z[236]*z[59] - z[295];
  ar[122] = -z[108]*z[221]*z[272] - z[128] + z[144]*z[179] - z[192]*z[197]*z[264]*z[272];
  ar[123] = -z[135] + z[145]*z[179] + z[200]*z[23]*z[243]*z[272] + z[202]*z[23]*z[243]*z[279]*z[65] + z[202]*z[243]*z[272]*z[29] + z[202]*z[248]*z[25]*z[272];
  ar[124] = -z[128] - z[139]*z[179] + z[180]*z[221]*z[264]*z[272] - z[186]*z[224]*z[237]*z[272] + z[224]*z[234]*z[279]*z[292] - z[224]*z[244]*z[272];
  ar[125] = -z[115]*z[236] + z[13]*z[202]*z[240]*z[272] - z[182]*z[207]*z[264]*z[272] + z[186]*z[90] - z[202]*z[240]*z[251]*z[279] + z[202]*z[251]*z[272] + z[223] - z[295];
  ar[126] = -z[195]*(z[114] + z[130]);
  ar[127] = -z[155]*z[181];
  ar[128] = -z[124]*z[181] - z[197]*z[85] + z[197]*z[94];
  ar[129] = -z[181]*(z[147] - z[179]*z[85]);
  ar[130] = -z[132]*z[194];
  ar[131] = -z[183]*(z[101] - z[108]*z[181]*z[272]);
  ar[132] = z[185]*(-z[186]*z[85] + z[186]*z[94] - z[194]*z[262]*z[272] + z[194]*z[264]*z[279]*z[65] + z[194]*z[270]*z[272] - z[199]*z[264]*z[272]);
  ar[133] = -z[183]*(z[101] - z[191]*z[264]*z[272] + z[194]*z[208]*z[27]*z[272] + z[194]*z[243]*z[279]*z[292] + z[207]*z[247]*z[272]);
  ar[134] = z[181]*z[64] + z[184]*z[197]*z[264]*z[272] + z[220]*z[240]*z[246]*z[279] + z[220]*z[240]*z[272] - z[220]*z[305] - z[220]*z[59];
  ar[135] = -z[140];
  ar[136] = z[332];
  ar[137] = -z[152];
  ar[138] = z[332];
  ar[139] = z[330];
  ar[140] = z[331];
  ar[141] = -z[145];
  ar[142] = -z[201]*(z[113] + z[187]*z[264]*z[272] - z[249]*z[272]);
  ar[143] = -z[329];
  ar[144] = z[107]*z[220];
  ar[145] = z[312];
  ar[146] = z[315];
  ar[147] = z[312];
  ar[148] = z[269];
  ar[149] = z[268];
  ar[150] = z[315];
  ar[151] = z[268];
  ar[152] = z[269];
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = 0;
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = 0;
  ar[160] = 0;
  ar[161] = 0;
  ar[162] = z[256]*z[84];
  ar[163] = 0;
  ar[164] = 0;
  ar[165] = 0;
  ar[166] = z[256];
  ar[167] = z[255];
  ar[168] = 0;
  ar[169] = z[255];
  ar[170] = z[256];
  ar[171] = -z[150]*z[186] - z[177]*z[191]*z[277] + z[178]*z[254] + z[180]*z[194]*z[276] - z[191]*z[291] - z[194]*z[198]*z[310];
  ar[172] = z[259];
  ar[173] = z[122];
  ar[174] = z[259];
  ar[175] = -z[194]*z[198]/z[31];
  ar[176] = z[261];
  ar[177] = z[122];
  ar[178] = z[261];
  ar[179] = -z[183]*(z[202]*z[280] + z[209]/z[31]);
  ar[180] = z[27];
  ar[181] = z[216];
  ar[182] = z[29];
  ar[183] = z[216];
  ar[184] = z[218];
  ar[185] = z[215];
  ar[186] = z[29];
  ar[187] = z[215];
  ar[188] = z[27];
  ar[189] = 0;
  ar[190] = 0;
  ar[191] = 0;
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = 0;
  ar[196] = 0;
  ar[197] = 0;
  ar[198] = -(-z[0]*pow(-z[29], -z[0]) - z[178]*z[207]*z[316] - z[227]*z[322] - z[227]*z[324] + z[245] + 4*z[265]*z[316] + 3*z[300]*pow(-z[65], -z[0]) + z[301]*z[80] - z[40])/z[52];
  ar[199] = z[162];
  ar[200] = (z[121] - z[227]*z[264]*z[319] - z[227]*z[83]/z[50] - z[245]*z[262]/z[50] - 3*z[27]*z[302]*z[67] + z[301]*z[83])/z[52];
  ar[201] = z[162];
  ar[202] = -z[284]*(z[12]*pow(z[185], 4)*z[309] + z[13]*z[14]*z[184] - z[13]*z[184] - 4*z[13]*z[205]*z[47]/z[50] + z[180]*z[238] + z[184]*z[9] + 4*z[202]*z[248]*z[308] + 3*z[207]*z[300]*z[49] - z[227]*z[75]/z[50] + z[301]*z[75]);
  ar[203] = z[201]*(-z[0]*z[264]*z[308] + z[180]*z[232]*z[297] + z[182]*z[23] + z[187]*z[27] + z[187]*z[275]/z[50] + 3*z[227]*z[264]*z[307] + z[227]*z[63]/z[50] - 3*z[288]*z[302] - z[301]*z[63])/z[52];
  ar[204] = (z[121] - z[227]*z[262]/z[50] - z[227]*z[264]*z[323] + z[227]*z[270]/z[50] - z[246]*z[262]*z[278] - z[27]*z[302]*z[72] - z[298]*z[35])/z[52];
  ar[205] = -z[201]*(z[0]*z[264]*z[308] - z[180]*z[232]*z[297] - z[181]*z[35]/z[50] - z[182]*z[23] - z[187]*z[27] - z[204]*z[206]*z[297] + z[204]*z[208]*z[294] - 3*z[227]*z[264]*z[307] + z[234]*z[246]*z[278] + 3*z[288]*z[302])/z[52];
  ar[206] = -(3*z[227]*z[240]*z[300] + z[227]*z[299] - z[227]*z[301] + pow(z[23], 3)*z[242]*z[296] + pow(z[23], 3)*z[297] + z[241] + z[245] + 5*z[246]*z[299])/z[52];
  ar[207] = z[20];
  ar[208] = z[210];
  ar[209] = z[21];
  ar[210] = z[210];
  ar[211] = z[212];
  ar[212] = z[221];
  ar[213] = z[21];
  ar[214] = z[221];
  ar[215] = z[20];
  ar[216] = front_.c*z[27] - rear_.c*z[176] + z[0]*z[103]*z[25] + z[0]*z[228]*z[23] + z[0]*z[229]*z[25] - z[114]*z[198] - z[140]*z[27] - 4*z[174]*z[192] - z[180]*z[183]*z[85] + z[183]*z[198]*z[48] + z[264]*z[59];
  ar[217] = -z[153]*z[27] + z[159] + z[36];
  ar[218] = -z[149] - z[152]*z[27];
  ar[219] = -z[151]*z[27] + z[159] + z[36];
  ar[220] = -z[134]*z[27] - z[167]*z[194] - z[171]*z[194]*z[23] + z[171]*z[202]*z[27] + z[172]*z[187]*z[227] - z[174]*z[192] - z[182]*z[201]*z[99] + z[183]*z[198]*z[48] - z[218]*z[303];
  ar[221] = -z[143]*z[27] - z[169]*z[202] + z[172]*z[184]*z[233] + z[173]*z[184]*z[238] + z[220]*z[326] + z[221]*z[303] - z[23]*z[99];
  ar[222] = -z[145]*z[27] - z[149];
  ar[223] = z[139]*z[27] - z[169]*z[202] + z[172]*z[184]*z[233] + z[173]*z[184]*z[238] + z[220]*z[326] + z[221]*z[303] - z[23]*z[99];
  ar[224] = z[27]*(front_.c + 4*front_.r*z[23] + z[0]*z[23]*z[87] - z[303] - z[329]);
  ar[225] = z[185]*(-z[140]*z[181] - z[174] - z[186]*z[228]);
  ar[226] = z[117] - z[153]*z[195];
  ar[227] = z[185]*(z[112] - z[152]*z[181]);
  ar[228] = z[117] - z[151]*z[195];
  ar[229] = -z[133]*z[195] - z[168]*z[185] - 3*z[171]*z[194]*z[197] - z[173]*z[234] - z[174]*z[185] - z[180]*z[181]*z[99] - z[195]*z[303];
  ar[230] = z[10]*z[13]*z[188] - z[13]*z[14]*z[188] - z[144]*z[195] - z[167]*z[186] + z[171]*z[231] + z[171]*z[238] - z[191]*z[326] - z[193]*z[303] - z[197]*z[99];
  ar[231] = z[185]*(z[112] - z[145]*z[181]);
  ar[232] = z[10]*z[13]*z[188] - z[13]*z[14]*z[188] + z[139]*z[195] - z[167]*z[186] + z[171]*z[231] + z[171]*z[238] - z[191]*z[326] - z[193]*z[303] - z[197]*z[99];
  ar[233] = -z[185]*(-z[0]*z[172]*z[23] - z[115]*z[237] + z[168] - z[187]*z[228] + z[187]*z[326] - z[237]*z[59]);
  ar[234] = -3*rear_.R*z[12]*z[179]*z[18]*z[203]/z[33] + rear_.R*z[15]*z[180]*z[183]*z[203]/z[32] + rear_.R*z[192]*z[310] - z[140]*z[186] + z[172]*z[27] + z[56];
  ar[235] = -z[153]*z[186] + z[86];
  ar[236] = -z[111] - z[152]*z[186];
  ar[237] = -z[151]*z[186] + z[86];
  ar[238] = z[10]*z[171]*z[183] - z[134]*z[186] + z[56];
  ar[239] = -z[143]*z[186] + z[172]*z[184]*z[197] + z[181]*z[99];
  ar[240] = -z[111] - z[145]*z[186];
  ar[241] = z[139]*z[186] + z[172]*z[184]*z[197] + z[181]*z[99];
  ar[242] = -front_.c*z[6] - front_.r*z[187]*z[23] - z[0]*z[172]*z[27] + z[115]*z[238] + z[182]*z[326] + z[238]*z[59];
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = z[107]*z[192];
  ar[253] = z[311];
  ar[254] = 0;
  ar[255] = z[311];
  ar[256] = z[192]*z[39];
  ar[257] = 0;
  ar[258] = 0;
  ar[259] = 0;
  ar[260] = 0;
  ar[261] = z[140];
  ar[262] = z[148];
  ar[263] = z[125] + z[23]*z[272]*z[83] + z[321];
  ar[264] = z[148];
  ar[265] = -z[330];
  ar[266] = -z[331];
  ar[267] = z[145];
  ar[268] = -z[201]*(-z[113] - z[187]*z[264]*z[272] + z[249]*z[272]);
  ar[269] = z[329];
  ar[270] = -z[192]*z[84]/z[31];
  ar[271] = 0;
  ar[272] = 0;
  ar[273] = 0;
  ar[274] = -z[192]/z[31];
  ar[275] = 0;
  ar[276] = 0;
  ar[277] = 0;
  ar[278] = 0;
  ar[279] = -z[183]*z[190]*(-z[0] + z[84] - 1)/z[31];
  ar[280] = z[253];
  ar[281] = 0;
  ar[282] = z[253];
  ar[283] = -z[183]*z[190]/z[31];
  ar[284] = 0;
  ar[285] = 0;
  ar[286] = 0;
  ar[287] = 0;
  ar[288] = z[201];
  ar[289] = z[189];
  ar[290] = 0;
  ar[291] = z[189];
  ar[292] = z[201];
  ar[293] = 0;
  ar[294] = 0;
  ar[295] = 0;
  ar[296] = 0;
  ar[297] = (z[0]*z[29]*z[318] - z[23] + z[296]*z[67]*z[72] + z[297]*z[80])/z[52];
  ar[298] = (z[126] - z[201]*z[292]*z[319])/z[52];
  ar[299] = -(z[110] + z[25] + z[262]*z[297] + z[297]*z[82])/z[52];
  ar[300] = (z[126] - z[201]*z[292]*z[323])/z[52];
  ar[301] = (z[187]*z[227]*z[308] - z[219] - 3*z[227]*z[296]*z[49] + z[297]*z[76])/z[52];
  ar[302] = (3*z[201]*z[275]*z[307] - z[201]*z[288]/z[50] - z[220] - z[221]*z[264]/z[50] + z[297]*z[71])/z[52];
  ar[303] = -(z[110] + z[246]*z[298] + z[25] - z[266]*z[297])/z[52];
  ar[304] = -z[201]*(-z[181] + z[187]*z[264]/z[50] - z[249]/z[50] - 3*z[275]*z[307] + z[288]/z[50])/z[52];
  ar[305] = -z[23]*(-z[301] + z[93] + 1)/z[52];
  ar[306] = z[285]*(z[177]*z[25] - z[177]*z[294]*z[67] + z[184]*z[27] - z[184]*z[298]*z[67] + z[232]*z[324] + z[232]*z[328]);
  ar[307] = (z[157] - z[227]*z[288]*z[319])/z[52];
  ar[308] = -z[285]*(z[131] - z[232]*z[270]/z[50] + z[232]*z[325]);
  ar[309] = (z[157] - z[227]*z[288]*z[323])/z[52];
  ar[310] = -z[201]*(-z[180]*z[232]*z[308] - z[182]*z[227]*z[308] + z[200] + 4*z[218] + z[227]*z[27]*z[309] + z[294]*z[76])/z[52];
  ar[311] = z[284]*(-z[13]*z[202] - z[194]*z[243]*z[297] - 3*z[207]*z[274]*z[307] - z[207]*z[292]/z[50] + z[233]*z[320] + z[236]*z[299] + z[236]);
  ar[312] = -z[285]*(z[131] - z[184]*z[264]*z[298] + z[235]*z[299]);
  ar[313] = -z[284]*(z[13]*z[202]*z[299] + z[13]*z[202] + z[182]*z[207]*z[264]/z[50] + z[207]*z[242]*z[292]/z[54] + z[207]*z[292]/z[50] - z[236]*z[299] - z[236]);
  ar[314] = z[201]*z[27]*(z[242]*z[300] - z[246]*z[278] - z[299] - 1)/z[52];
  ar[315] = z[196];
  ar[316] = z[198];
  ar[317] = 0;
  ar[318] = z[198];
  ar[319] = z[196];
  ar[320] = 0;
  ar[321] = 0;
  ar[322] = 0;
  ar[323] = 0;

  delete [] z;
}

/** Computes the n-d array of shape (8)
 *
 * @param[out] ar a C-array of with 8 elements
 */
//  void Bicycle::f_1(double ar[8]) const;
void Bicycle::f_1(double ar[8]) const
{
  double * z = new double[21];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[2], 2);
  z[7] = pow(z[4], 2);
  z[8] = pow(z[5], 2);
  z[9] = z[6]*z[7] + z[7]*z[8];
  z[10] = sqrt(z[9]);
  z[11] = pow(z[9], 3.0/2.0);
  z[12] = state_[9]*z[1]*z[4]*z[6] + state_[9]*z[1]*z[4]*z[8];
  z[13] = rear_.R*state_[10]*z[4]*z[5]/z[10] - rear_.R*state_[9]*z[1]*z[2]/z[10] + rear_.R*z[12]*z[2]*z[4]/z[11] + rear_.r*state_[10]*z[4]*z[5] - rear_.r*state_[9]*z[1]*z[2] + state_[12]*(rear_.R*z[4]*z[5]/z[10] + rear_.r*z[4]*z[5]);
  z[14] = -rear_.R*state_[10]*z[2]*z[4]/z[10] - rear_.R*state_[9]*z[1]*z[5]/z[10] + rear_.R*z[12]*z[4]*z[5]/z[11] - rear_.r*state_[10]*z[2]*z[4] - rear_.r*state_[9]*z[1]*z[5] - state_[12]*(rear_.R*z[2]*z[4]/z[10] + rear_.r*z[2]*z[4]);
  z[15] = -state_[9];
  z[16] = z[0]*z[2];
  z[17] = z[0]*z[5];
  z[18] = z[2]*z[3];
  z[19] = rear_.r*z[7];
  z[20] = -z[3]*z[5];

  ar[0] = -state_[8];
  ar[1] = z[15];
  ar[2] = -state_[10];
  ar[3] = -state_[11];
  ar[4] = -state_[12];
  ar[5] = -state_[13];
  ar[6] = -z[0]*z[15]*z[19] - z[13]*(z[1]*z[16] + z[20]) - z[14]*(z[1]*z[17] + z[18]);
  ar[7] = z[13]*(z[1]*z[18] + z[17]) - z[14]*(z[1]*z[20] + z[16]) + z[15]*z[19]*z[3];

  delete [] z;
}

/** Computes the n-d array of shape (8, 8)
 *
 * @param[out] ar a C-array of with 64 elements
 */
//  void Bicycle::f_1_dq(double ar[64]) const;
void Bicycle::f_1_dq(double ar[64]) const
{
  double * z = new double[47];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[1], 2);
  z[7] = pow(z[2], 2);
  z[8] = pow(z[4], 2);
  z[9] = pow(z[5], 2);
  z[10] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[11] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[12] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[13] = z[7]*z[8] + z[8]*z[9];
  z[14] = z[1]*z[4]*z[7] + z[1]*z[4]*z[9];
  z[15] = sqrt(z[13]);
  z[16] = pow(z[13], 3.0/2.0);
  z[17] = pow(z[13], 5.0/2.0);
  z[18] = state_[9]*z[1]*z[4]*z[7] + state_[9]*z[1]*z[4]*z[9];
  z[19] = state_[9]*z[6]*z[7] + state_[9]*z[6]*z[9] - state_[9]*z[7]*z[8] - state_[9]*z[8]*z[9];
  z[20] = rear_.R*state_[10]*z[2]*z[4]/z[15] + rear_.R*state_[9]*z[1]*z[5]/z[15] - rear_.R*z[18]*z[4]*z[5]/z[16] + rear_.r*state_[10]*z[2]*z[4] + rear_.r*state_[9]*z[1]*z[5] + state_[12]*(rear_.R*z[2]*z[4]/z[15] + rear_.r*z[2]*z[4]);
  z[21] = rear_.R*state_[10]*z[4]*z[5]/z[15] - rear_.R*state_[9]*z[1]*z[2]/z[15] + rear_.R*z[18]*z[2]*z[4]/z[16] + rear_.r*state_[10]*z[4]*z[5] - rear_.r*state_[9]*z[1]*z[2] + state_[12]*(rear_.R*z[4]*z[5]/z[15] + rear_.r*z[4]*z[5]);
  z[22] = -z[20];
  z[23] = -z[20];
  z[24] = rear_.R*state_[10]*z[1]*z[5]/z[15] - rear_.R*state_[10]*z[14]*z[4]*z[5]/z[16] + rear_.R*state_[9]*z[1]*z[14]*z[2]/z[16] + rear_.R*state_[9]*z[2]*z[4]/z[15] + rear_.R*z[1]*z[18]*z[2]/z[16] - 3*rear_.R*z[14]*z[18]*z[2]*z[4]/z[17] + rear_.R*z[19]*z[2]*z[4]/z[16] + rear_.r*state_[10]*z[1]*z[5] + rear_.r*state_[9]*z[2]*z[4] + state_[12]*(rear_.R*z[1]*z[5]/z[15] - rear_.R*z[14]*z[4]*z[5]/z[16] + rear_.r*z[1]*z[5]);
  z[25] = -state_[9];
  z[26] = rear_.r*z[1];
  z[27] = rear_.r*z[4];
  z[28] = state_[10]*z[2];
  z[29] = -z[25]*z[5];
  z[30] = -z[1];
  z[31] = -z[5];
  z[32] = -2*z[25]*z[4];
  z[33] = z[0]*z[2];
  z[34] = -z[3]*z[31];
  z[35] = -rear_.r*z[25]*z[8];
  z[36] = rear_.R/z[15];
  z[37] = rear_.R*z[18];
  z[38] = -z[31]/z[16];
  z[39] = -z[30]*z[36];
  z[40] = z[36]*z[4];
  z[41] = rear_.R*z[14]/z[16];
  z[42] = 3*z[14]*z[4]/z[17];
  z[43] = -z[4]*z[41];
  z[44] = rear_.R*z[19]*z[4];
  z[45] = state_[12]*(rear_.R*z[1]*z[2]/z[15] - rear_.R*z[14]*z[2]*z[4]/z[16] + rear_.r*z[1]*z[2]);
  z[46] = z[21]*z[4];

  ar[0] = 0;
  ar[1] = 0;
  ar[2] = 0;
  ar[3] = 0;
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
  ar[8] = 0;
  ar[9] = 0;
  ar[10] = 0;
  ar[11] = 0;
  ar[12] = 0;
  ar[13] = 0;
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = 0;
  ar[18] = 0;
  ar[19] = 0;
  ar[20] = 0;
  ar[21] = 0;
  ar[22] = 0;
  ar[23] = 0;
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = 0;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = 0;
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = 0;
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = 0;
  ar[40] = 0;
  ar[41] = 0;
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 0;
  ar[47] = 0;
  ar[48] = z[12]*z[21] + z[22]*(z[30]*z[34] + z[33]) + z[3]*z[35];
  ar[49] = z[0]*z[23]*z[31]*z[4] - z[0]*z[26]*z[32] - z[10]*(z[26]*z[28] - z[27]*z[29] + z[28]*z[39] + z[28]*z[43] + z[29]*z[30]*z[41] - z[29]*z[40] + z[30]*z[37]*z[38] - z[31]*z[37]*z[42] - z[38]*z[44] + z[45]) + z[11]*z[24] - z[33]*z[46];
  ar[50] = z[11]*(z[22] - z[23]);
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = z[0]*z[35] - z[10]*z[23] - z[11]*z[21];
  ar[57] = z[12]*z[24] + z[2]*z[3]*z[46] + z[22]*z[34]*z[4] + z[26]*z[3]*z[32] + (-z[30]*z[34] - z[33])*(z[26]*z[28] - z[27]*z[29] + z[28]*z[39] + z[28]*z[43] + z[29]*z[30]*z[41] - z[29]*z[40] + z[30]*z[37]*z[38] - z[31]*z[37]*z[42] - z[38]*z[44] + z[45]);
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = 0;

  delete [] z;
}

/** Computes the n-d array of shape (8, 12)
 *
 * @param[out] ar a C-array of with 96 elements
 */
//  void Bicycle::f_1_du(double ar[96]) const;
void Bicycle::f_1_du(double ar[96]) const
{
  double * z = new double[22];

  z[0] = sin(state_[0]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[0]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = pow(z[2], 2);
  z[7] = pow(z[4], 2);
  z[8] = pow(z[5], 2);
  z[9] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[10] = z[0]*z[1]*z[5] + z[2]*z[3];
  z[11] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[12] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[13] = z[6]*z[7] + z[7]*z[8];
  z[14] = sqrt(z[13]);
  z[15] = rear_.R/z[14] + rear_.r;
  z[16] = -z[15]*z[4]*(-z[10]*z[2] + z[12]*z[5]);
  z[17] = rear_.R*z[1]/z[14] - rear_.R*z[4]*(z[1]*z[4]*z[6] + z[1]*z[4]*z[8])/pow(z[13], 3.0/2.0) + rear_.r*z[1];
  z[18] = rear_.r*z[7];
  z[19] = z[15]*z[4]*(z[11]*z[2] + z[5]*z[9]);
  z[20] = z[17]*z[2];
  z[21] = z[17]*z[5];

  ar[0] = -1;
  ar[1] = 0;
  ar[2] = 0;
  ar[3] = 0;
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
  ar[8] = 0;
  ar[9] = 0;
  ar[10] = 0;
  ar[11] = 0;
  ar[12] = 0;
  ar[13] = -1;
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = 0;
  ar[18] = 0;
  ar[19] = 0;
  ar[20] = 0;
  ar[21] = 0;
  ar[22] = 0;
  ar[23] = 0;
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = -1;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = 0;
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = 0;
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = -1;
  ar[40] = 0;
  ar[41] = 0;
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 0;
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = 0;
  ar[52] = -1;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = -1;
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = 0;
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = 0;
  ar[73] = z[0]*z[18] + z[10]*z[21] + z[12]*z[20];
  ar[74] = z[16];
  ar[75] = 0;
  ar[76] = z[16];
  ar[77] = 0;
  ar[78] = 0;
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = 0;
  ar[85] = z[11]*z[21] - z[18]*z[3] - z[20]*z[9];
  ar[86] = z[19];
  ar[87] = 0;
  ar[88] = z[19];
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = 0;
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;

  delete [] z;
}

/** Computes the n-d array of shape (12, 12)
 *
 * @param[out] ar a C-array of with 144 elements
 */
//  void Bicycle::gif_dud(double ar[144]) const;
void Bicycle::gif_dud(double ar[144]) const
{
  double * z = new double[130];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = 0;
  z[7] = pow(z[0], 2);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[2], 2);
  z[10] = pow(z[3], 2);
  z[11] = pow(z[4], 2);
  z[12] = rear_.Ixx*z[4] + rear_.Ixz*z[1];
  z[13] = rear_.Ixz*z[4] + rear_.Izz*z[1];
  z[14] = z[11] + z[8];
  z[15] = rear_.Ixx*z[1] - rear_.Ixz*z[4];
  z[16] = rear_.Ixz*z[1] - rear_.Izz*z[4];
  z[17] = front_.Ixx*z[4]*z[5] + front_.Ixz*z[1];
  z[18] = front_.Ixz*z[4]*z[5] + front_.Izz*z[1];
  z[19] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[20] = -z[19];
  z[21] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[22] = sqrt(z[10]*z[14]);
  z[23] = z[10]*z[11] + z[10]*z[8];
  z[24] = sqrt(z[23]);
  z[25] = front_.Ixx*z[20] + front_.Ixz*z[3]*z[4];
  z[26] = front_.Ixz*z[20] + front_.Izz*z[3]*z[4];
  z[27] = rear_.R*z[1]*z[3]/z[24] + rear_.a;
  z[28] = -rear_.R*z[3]*z[4]/z[24] + rear_.b;
  z[29] = front_.R/sqrt(z[10]*z[11] + pow(z[20], 2)) + front_.r;
  z[30] = rear_.R*z[1]*z[3]/z[24] + rear_.r*z[1]*z[3];
  z[31] = rear_.r*z[1]*z[3] + z[27];
  z[32] = -rear_.R*z[3]*z[4]/z[24] - rear_.r*z[3]*z[4];
  z[33] = -front_.R*z[3]*z[4]/sqrt(z[10]*z[11] + pow(z[20], 2)) + front_.b;
  z[34] = rear_.r*z[3]*z[4] - z[28];
  z[35] = front_.R*z[3]*z[4]/sqrt(z[10]*z[11] + pow(z[20], 2)) + front_.r*z[3]*z[4];
  z[36] = -front_.r*z[3]*z[4] + z[33];
  z[37] = front_.R*z[20]/sqrt(z[10]*z[11] + pow(z[20], 2)) - front_.a;
  z[38] = front_.b*z[2] - z[2]*z[35];
  z[39] = front_.b*z[5] - z[35]*z[5];
  z[40] = rear_.a*z[0] - rear_.r*z[0]*z[1]*z[3] + z[0]*z[30];
  z[41] = rear_.b*z[0] + rear_.r*z[0]*z[3]*z[4] + z[0]*z[32];
  z[42] = -front_.R*z[20]/sqrt(z[10]*z[11] + pow(z[20], 2)) - front_.r*z[20];
  z[43] = front_.r*z[20] + z[37];
  z[44] = front_.b*z[2]*z[4] + front_.r*z[1]*z[21] - z[2]*z[35]*z[4];
  z[45] = -z[1]*z[34] + z[31]*z[4];
  z[46] = rear_.a*z[1] - rear_.b*z[4] + z[1]*z[30] - z[32]*z[4];
  z[47] = front_.a*z[2] + front_.r*z[21]*z[5] + z[2]*z[42];
  z[48] = -front_.a*z[5] + front_.r*z[2]*z[21] - z[42]*z[5];
  z[49] = z[48];
  z[50] = -front_.b*z[21] - front_.r*z[21]*z[3]*z[4] + z[21]*z[35];
  z[51] = rear_.a*z[3]*z[4] + rear_.b*z[1]*z[3] + z[1]*z[3]*z[32] + z[3]*z[30]*z[4];
  z[52] = front_.a*z[2]*z[4] + front_.r*z[21]*z[4]*z[5] + z[2]*z[4]*z[42];
  z[53] = front_.a*z[21] + front_.r*z[20]*z[21] + z[21]*z[42];
  z[54] = front_.a*z[1] - front_.b*z[4]*z[5] + z[1]*z[42] + z[35]*z[4]*z[5];
  z[55] = front_.a*z[3]*z[4] - front_.b*z[20] + z[20]*z[35] + z[3]*z[4]*z[42];
  z[56] = -rear_.J - rear_.m*(z[30]*z[31] - z[32]*z[34]);
  z[57] = -rear_.J*z[0] + rear_.m*(-z[30]*z[40] - z[32]*z[41]);
  z[58] = -front_.Ixz*z[2] - front_.m*(-front_.r*z[21]*z[39] + z[38]*z[43]);
  z[59] = -front_.J*z[5] + front_.m*(z[35]*z[39] + z[42]*z[48]);
  z[60] = front_.J*z[2]*z[4] - front_.m*(z[35]*z[44] - z[42]*z[52]);
  z[61] = -front_.m*(front_.r*z[21]*z[44] - z[43]*z[54]) - z[18];
  z[62] = front_.J*z[21] + front_.m*(z[35]*z[50] + z[42]*z[53]);
  z[63] = -front_.m*(-front_.r*z[21]*z[50] - z[43]*z[55]) - z[26];
  z[64] = -front_.Iyy*z[2]*z[4]*z[5] + front_.m*(-z[38]*z[54] - z[39]*z[44] + z[48]*z[52]) + rear_.m*rear_.r*z[0]*z[45];
  z[65] = -front_.Iyy*z[21]*z[5] + rear_.Iyy*z[0] + front_.m*(-z[38]*z[55] + z[39]*z[50] + z[48]*z[53]) + rear_.m*(z[31]*z[40] - z[34]*z[41]);
  z[66] = front_.Iyy*z[2]*z[21]*z[4] + front_.m*(-z[44]*z[50] + z[52]*z[53] + z[54]*z[55]) + rear_.m*(rear_.r*z[0]*z[1]*z[41] + rear_.r*z[0]*z[4]*z[40] + z[46]*z[51]);
  z[67] = -front_.m;
  z[68] = -rear_.m;
  z[69] = front_.Ixx*z[2];
  z[70] = rear_.a*z[4];
  z[71] = rear_.b*z[1];
  z[72] = rear_.r*z[3];
  z[73] = -z[1];
  z[74] = -z[2];
  z[75] = -z[4];
  z[76] = -z[5];
  z[77] = z[6]*z[67];
  z[78] = z[6]*z[68];
  z[79] = -z[3]*z[73];
  z[80] = -z[3]*z[75];
  z[81] = z[75]*z[76];
  z[82] = rear_.r*z[7];
  z[83] = pow(rear_.r, 2)*z[7];
  z[84] = z[10]*z[11];
  z[85] = z[10]*z[14];
  z[86] = -front_.r*z[21];
  z[87] = z[7]/z[14];
  z[88] = z[3]/z[22];
  z[89] = z[7]/z[22];
  z[90] = z[8]/z[22];
  z[91] = z[11]/z[22];
  z[92] = -sqrt(pow(z[20], 2) + z[84]);
  z[93] = z[14]/z[24];
  z[94] = -z[27]*z[75];
  z[95] = -z[28]*z[73];
  z[96] = z[32]*z[73];
  z[97] = z[21]/z[92];
  z[98] = pow(z[97], 2);
  z[99] = -z[21]*z[97];
  z[100] = -z[67]*z[80]*z[86]/z[92];
  z[101] = z[20]*z[33];
  z[102] = -z[29]*z[67]*z[80]*z[86];
  z[103] = -z[68]*z[85]*(rear_.R/z[24] + rear_.r)/z[22];
  z[104] = z[21]*z[37];
  z[105] = -z[20]*z[36]*z[76];
  z[106] = z[104]*z[67];
  z[107] = z[29]*z[67]*z[92];
  z[108] = -z[45]*z[68];
  z[109] = -z[0]*z[10]*z[68]*(z[90] + z[91] - z[93]);
  z[110] = z[108]*z[3];
  z[111] = -z[20]*z[44];
  z[112] = -z[0]*z[68]*z[88]*(-z[27]*z[73] + z[28]*z[75]);
  z[113] = -z[68]*z[88]*(-z[31]*z[73] - z[34]*z[75]);
  z[114] = -z[0]*z[108]*z[88];
  z[115] = -z[0]*z[68]*(z[11]*z[72] - z[46] + z[72]*z[8]);
  z[116] = z[21]*z[67]*(-pow(z[20], 2)/z[92] - z[84]/z[92] + z[92]);
  z[117] = -z[67]*z[97]*(z[20]*z[37] - z[33]*z[80]);
  z[118] = z[67]*(-z[20]*z[86]*z[97] + z[43]*z[92]);
  z[119] = -z[0]*z[3]*z[68]*(z[30]*z[75] - z[70] - z[71] + z[94] + z[95] + z[96]);
  z[120] = z[3]*z[68]*(z[3]*z[46]*z[93] + z[82]*z[90] + z[82]*z[91]);
  z[121] = -z[67]*(-z[20]*z[49] - z[36]*z[76]*z[80])/z[92];
  z[122] = -z[67]*z[75]*(z[20]*z[47] + z[3]*z[44])/z[92];
  z[123] = z[67]*(z[105] - z[21]*z[36]*z[74] + z[49]*z[80]);
  z[124] = z[3]*z[68]*(z[89]*z[94] + z[89]*z[95] + z[85]*(-z[30]*z[75] + z[70] + z[71] - z[96])/z[24]);
  z[125] = z[67]*(-z[101]*z[21] - z[104]*z[80] - z[21]*z[55]);
  z[126] = z[67]*(-z[105]*z[97] - z[36]*z[74]*z[92] - z[48]*z[80]*z[97]);
  z[127] = z[67]*(z[111] - z[21]*z[54] - z[47]*z[75]*z[80]);
  z[128] = z[67]*(-z[101]*z[99] - z[37]*z[80]*z[99] - z[55]*z[92]);
  z[129] = z[67]*(-z[11]*z[3]*z[47]*z[97] - z[111]*z[97] - z[54]*z[92]);

  ar[0] = -front_.Iyy*pow(z[21], 2) - rear_.Iyy*z[7] + z[10]*z[15]*z[73] - z[10]*z[16]*z[75] - z[20]*z[25] - z[26]*z[80] + z[67]*(pow(z[50], 2) + pow(z[53], 2) + pow(z[55], 2)) + z[68]*(pow(z[40], 2) + pow(z[41], 2) + pow(z[51], 2));
  ar[1] = z[12]*z[79] - z[13]*z[80] - z[17]*z[20] - z[18]*z[80] - z[66];
  ar[2] = -front_.Ixz*z[2]*z[80] - z[20]*z[69] - z[65];
  ar[3] = z[63];
  ar[4] = z[57];
  ar[5] = z[62];
  ar[6] = z[112];
  ar[7] = z[124];
  ar[8] = z[119];
  ar[9] = z[117];
  ar[10] = z[128];
  ar[11] = z[125];
  ar[12] = z[15]*z[80] + z[16]*z[79] - z[25]*z[81] + z[26]*z[73] - z[66];
  ar[13] = -front_.Iyy*z[11]*z[9] + z[12]*z[75] + z[13]*z[73] - z[17]*z[81] + z[18]*z[73] + z[67]*(pow(z[44], 2) + pow(z[52], 2) + pow(z[54], 2)) + z[68]*(z[11]*z[83] + pow(z[46], 2) + z[8]*z[83]);
  ar[14] = front_.Ixz*z[1]*z[74] - z[64] - z[69]*z[81];
  ar[15] = z[61];
  ar[16] = 0;
  ar[17] = z[60];
  ar[18] = 0;
  ar[19] = z[120];
  ar[20] = z[115];
  ar[21] = z[122];
  ar[22] = z[129];
  ar[23] = z[127];
  ar[24] = z[25]*z[74] - z[65];
  ar[25] = z[17]*z[74] - z[64];
  ar[26] = -front_.Ixx*z[9] + front_.Iyy*z[5]*z[76] - rear_.Iyy + z[67]*(pow(z[38], 2) + pow(z[39], 2) + pow(z[48], 2)) + z[68]*(pow(z[31], 2) + pow(z[34], 2));
  ar[27] = z[58];
  ar[28] = z[56];
  ar[29] = z[59];
  ar[30] = z[113];
  ar[31] = z[114];
  ar[32] = z[110];
  ar[33] = z[121];
  ar[34] = z[126];
  ar[35] = z[123];
  ar[36] = z[63];
  ar[37] = z[61];
  ar[38] = z[58];
  ar[39] = -front_.Izz + z[67]*(pow(z[43], 2) + pow(z[86], 2));
  ar[40] = 0;
  ar[41] = z[102];
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = z[100];
  ar[46] = z[118];
  ar[47] = z[106];
  ar[48] = z[57];
  ar[49] = 0;
  ar[50] = z[56];
  ar[51] = 0;
  ar[52] = -rear_.J + z[68]*(pow(z[30], 2) + pow(z[32], 2));
  ar[53] = 0;
  ar[54] = z[103];
  ar[55] = 0;
  ar[56] = z[78];
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = z[62];
  ar[61] = z[60];
  ar[62] = z[59];
  ar[63] = z[102];
  ar[64] = 0;
  ar[65] = -front_.J + z[67]*(pow(z[35], 2) + pow(z[42], 2));
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[107];
  ar[70] = 0;
  ar[71] = z[77];
  ar[72] = z[112];
  ar[73] = 0;
  ar[74] = z[113];
  ar[75] = 0;
  ar[76] = z[103];
  ar[77] = 0;
  ar[78] = z[68];
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[124];
  ar[85] = z[120];
  ar[86] = z[114];
  ar[87] = 0;
  ar[88] = 0;
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = z[68]*(z[11]*z[87] + pow(z[14], 2)*pow(z[3], 4)/z[23] + z[8]*z[87]);
  ar[92] = z[109];
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
  ar[96] = z[119];
  ar[97] = z[115];
  ar[98] = z[110];
  ar[99] = 0;
  ar[100] = z[78];
  ar[101] = 0;
  ar[102] = 0;
  ar[103] = z[109];
  ar[104] = z[68]*(z[23] + z[7]);
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = z[117];
  ar[109] = z[122];
  ar[110] = z[121];
  ar[111] = z[100];
  ar[112] = 0;
  ar[113] = z[107];
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = z[67];
  ar[118] = 0;
  ar[119] = 0;
  ar[120] = z[128];
  ar[121] = z[129];
  ar[122] = z[126];
  ar[123] = z[118];
  ar[124] = 0;
  ar[125] = 0;
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = 0;
  ar[130] = z[67]*(pow(z[20], 2)*z[98] + pow(z[20], 2) + z[84]*z[98] + z[84]);
  ar[131] = z[116];
  ar[132] = z[125];
  ar[133] = z[127];
  ar[134] = z[123];
  ar[135] = z[106];
  ar[136] = 0;
  ar[137] = z[77];
  ar[138] = 0;
  ar[139] = 0;
  ar[140] = 0;
  ar[141] = 0;
  ar[142] = z[116];
  ar[143] = z[67]*(pow(z[20], 2) + pow(z[21], 2) + z[84]);

  delete [] z;
}

/** Computes the n-d array of shape (12, 12, 3)
 *
 * @param[out] ar a C-array of with 432 elements
 */
//  void Bicycle::gif_dud_dq(double ar[432]) const;
void Bicycle::gif_dud_dq(double ar[432]) const
{
  double * z = new double[396];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(front_.r, 2);
  z[7] = pow(rear_.r, 2);
  z[8] = pow(z[0], 2);
  z[9] = pow(z[0], 3);
  z[10] = pow(z[1], 2);
  z[11] = pow(z[2], 2);
  z[12] = pow(z[3], 2);
  z[13] = pow(z[4], 2);
  z[14] = pow(z[4], 3);
  z[15] = pow(z[5], 2);
  z[16] = rear_.Ixx*z[4] + rear_.Ixz*z[1];
  z[17] = rear_.Ixz*z[4] + rear_.Izz*z[1];
  z[18] = rear_.a*z[4] + rear_.b*z[1];
  z[19] = z[10] + z[13];
  z[20] = rear_.Ixx*z[1] - rear_.Ixz*z[4];
  z[21] = rear_.Ixz*z[1] - rear_.Izz*z[4];
  z[22] = rear_.a*z[1] - rear_.b*z[4];
  z[23] = front_.Ixx*z[4]*z[5] + front_.Ixz*z[1];
  z[24] = front_.Ixz*z[4]*z[5] + front_.Izz*z[1];
  z[25] = front_.Ixx*z[1]*z[5] - front_.Ixz*z[4];
  z[26] = front_.Ixz*z[1]*z[5] - front_.Izz*z[4];
  z[27] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[28] = -z[27];
  z[29] = -rear_.a*z[1]*z[3] + rear_.b*z[3]*z[4];
  z[30] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[31] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[32] = 2*z[0]*z[5] + 2*z[1]*z[2]*z[3];
  z[33] = -z[0]*z[1]*z[5] - z[2]*z[3];
  z[34] = 2*z[0]*z[1]*z[5] + 2*z[2]*z[3];
  z[35] = sqrt(z[12]*z[19]);
  z[36] = pow(z[12]*z[19], 3.0/2.0);
  z[37] = pow(z[28], 3);
  z[38] = z[10]*z[12] + z[12]*z[13];
  z[39] = z[0]*z[10]*z[3] + z[0]*z[13]*z[3];
  z[40] = sqrt(z[38]);
  z[41] = pow(z[38], 3.0/2.0);
  z[42] = front_.Ixx*z[28] + front_.Ixz*z[3]*z[4];
  z[43] = -front_.Ixx*z[33] - front_.Ixz*z[0]*z[4];
  z[44] = front_.Ixz*z[28] + front_.Izz*z[3]*z[4];
  z[45] = -front_.Ixz*z[33] - front_.Izz*z[0]*z[4];
  z[46] = z[1]*z[3] + z[28]*z[5];
  z[47] = rear_.R/z[40] + rear_.r;
  z[48] = rear_.R*z[1]*z[3]/z[40] + rear_.a;
  z[49] = -rear_.R*z[3]*z[4]/z[40] + rear_.b;
  z[50] = z[1]*z[12]*z[4] + z[28]*z[3]*z[4]*z[5];
  z[51] = rear_.R*z[1]*z[3]/z[40] + rear_.r*z[1]*z[3];
  z[52] = -front_.R/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.r;
  z[53] = rear_.r*z[1]*z[3] + z[48];
  z[54] = -rear_.R*z[3]*z[4]/z[40] - rear_.r*z[3]*z[4];
  z[55] = front_.r*pow(z[28], 2) - front_.r*pow(z[31], 2);
  z[56] = -front_.R*z[3]*z[4]/sqrt(z[12]*z[13] + pow(z[28], 2)) + front_.b;
  z[57] = rear_.r*z[3]*z[4] - z[49];
  z[58] = -z[0]*z[13]*z[3] - z[28]*z[33];
  z[59] = -2*z[0]*z[13]*z[3] - 2*z[28]*z[33];
  z[60] = -z[58];
  z[61] = front_.R*z[0]*z[4]/sqrt(z[12]*z[13] + pow(z[28], 2)) + front_.r*z[0]*z[4];
  z[62] = -z[0]*z[13]*z[3] + z[28]*z[34]/2;
  z[63] = -z[59];
  z[64] = -front_.R*z[3]*z[4]/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.r*z[3]*z[4];
  z[65] = -z[62];
  z[66] = -front_.r*z[3]*z[4] + z[56];
  z[67] = rear_.r*z[0]*z[1]*z[3] - z[0]*z[51];
  z[68] = rear_.r*z[0]*z[3]*z[4] + z[0]*z[54];
  z[69] = front_.R*z[28]/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.a;
  z[70] = front_.b*z[2] + z[2]*z[64];
  z[71] = front_.b*z[5] + z[5]*z[64];
  z[72] = rear_.a*z[0] - z[67];
  z[73] = rear_.b*z[0] + z[68];
  z[74] = -front_.b*z[2]*z[4] - z[2]*z[4]*z[64];
  z[75] = -front_.b*z[4]*z[5] - z[4]*z[5]*z[64];
  z[76] = -front_.R*z[31]/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.r*z[31];
  z[77] = -front_.r*z[28]*z[30] + front_.r*z[31]*z[33];
  z[78] = front_.R*z[33]/sqrt(z[12]*z[13] + pow(z[28], 2)) + front_.r*z[33];
  z[79] = -z[31]*z[69];
  z[80] = -front_.R*z[28]/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.r*z[28];
  z[81] = front_.r*z[28] + z[69];
  z[82] = z[10]*z[3]*z[47] + z[13]*z[3]*z[47];
  z[83] = z[1]*z[49] + z[4]*z[48];
  z[84] = -front_.r*z[1]*z[31] + z[74];
  z[85] = -front_.b*z[31] - z[31]*z[64];
  z[86] = front_.r*z[1]*z[28] - z[75];
  z[87] = -front_.b*z[28] - z[28]*z[64];
  z[88] = z[1]*z[51] - z[4]*z[54];
  z[89] = rear_.R*z[0]/z[40] - rear_.R*z[3]*z[39]/z[41] + rear_.r*z[0];
  z[90] = z[1]*z[57] - z[4]*z[53];
  z[91] = -z[1]*z[53] - z[4]*z[57];
  z[92] = rear_.R*z[0]*z[4]/z[40] - rear_.R*z[3]*z[39]*z[4]/z[41] + rear_.r*z[0]*z[4];
  z[93] = -rear_.R*z[0]*z[1]/z[40] + rear_.R*z[1]*z[3]*z[39]/z[41] - rear_.r*z[0]*z[1];
  z[94] = z[12]*z[13]/(z[12]*z[13] + pow(z[28], 2)) + pow(z[28], 2)/(z[12]*z[13] + pow(z[28], 2));
  z[95] = z[22] + z[88];
  z[96] = z[1]*z[54] + z[18] + z[4]*z[51];
  z[97] = front_.R*z[3]*pow(z[31], 2)*z[4]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[56];
  z[98] = front_.a*z[2] + front_.r*z[31]*z[5] + z[2]*z[80];
  z[99] = -front_.a*z[5] + front_.r*z[2]*z[31] - z[5]*z[80];
  z[100] = -front_.r*z[3]*z[31]*z[4] + z[85];
  z[101] = z[4]*z[98];
  z[102] = rear_.a*z[3]*z[4] + rear_.b*z[1]*z[3] + z[1]*z[3]*z[54] + z[3]*z[4]*z[51];
  z[103] = front_.a*z[2]*z[4] + front_.r*z[31]*z[4]*z[5] + z[2]*z[4]*z[80];
  z[104] = -front_.m*front_.r*z[28]*z[3]*z[4]*(front_.R*pow(z[31], 2)/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[52]);
  z[105] = front_.R*z[1]/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.R*z[4]*z[50]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + front_.r*z[1];
  z[106] = front_.R*z[1]*z[3]/sqrt(z[12]*z[13] + pow(z[28], 2)) - front_.R*z[3]*z[4]*z[50]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + front_.r*z[1]*z[3];
  z[107] = front_.R*z[0]/sqrt(z[12]*z[13] + pow(z[28], 2)) + front_.R*z[3]*z[58]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + front_.r*z[0];
  z[108] = 2*z[0]*z[10] + 2*z[0]*z[13] - z[10]*z[3]*z[39]/z[38] - z[13]*z[3]*z[39]/z[38];
  z[109] = front_.R*z[3]*z[4]*z[58]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[61];
  z[110] = front_.R*z[2]*z[28]*z[3]*z[31]*z[4]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[71];
  z[111] = z[110];
  z[112] = front_.R*z[3]*z[4]*z[62]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[61];
  z[113] = front_.R*pow(z[28], 2)*z[31]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[76];
  z[114] = -front_.R*z[28]*z[50]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + front_.R*z[3]*z[4]*z[5]/sqrt(z[12]*z[13] + pow(z[28], 2)) + front_.r*z[3]*z[4]*z[5];
  z[115] = -front_.R*pow(z[28], 2)*z[32]/(2*pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0)) + z[76];
  z[116] = front_.a*z[31] + front_.r*z[28]*z[31] + z[31]*z[80];
  z[117] = z[116];
  z[118] = -front_.R*pow(z[28], 2)*z[32]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - 2*front_.R*z[31]/sqrt(z[12]*z[13] + pow(z[28], 2)) - 2*front_.r*z[31];
  z[119] = front_.a*z[1] + z[1]*z[80] + z[75];
  z[120] = -front_.m*front_.r*z[3]*(z[1]*z[31] + z[13]*z[2]*z[3] - z[13]*z[3]*z[31]*z[46]/(z[12]*z[13] + pow(z[28], 2)))/sqrt(z[12]*z[13] + pow(z[28], 2));
  z[121] = -front_.r*z[11]*z[3]*z[4] - z[114]*z[5];
  z[122] = front_.R*z[13]*z[2]*z[28]*z[3]*z[31]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[86];
  z[123] = front_.R*z[13]*z[2]*z[28]*z[3]*z[31]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[86];
  z[124] = -front_.r*z[1]*z[30] - z[109]*z[2]*z[4];
  z[125] = z[28]*z[31]*(z[94] - 2)/sqrt(z[12]*z[13] + pow(z[28], 2));
  z[126] = -front_.R*z[13]*z[2]*z[28]*z[3]*z[32]/(2*pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0)) - z[86];
  z[127] = -front_.r*z[1]*z[30] - z[112]*z[2]*z[4];
  z[128] = front_.R*z[28]*z[58]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[78];
  z[129] = rear_.b*z[3] + rear_.r*z[12]*z[4] - rear_.r*z[4]*z[8] + z[0]*z[92] + z[3]*z[54];
  z[130] = z[82] + z[91];
  z[131] = -rear_.a*z[3] + rear_.r*z[1]*z[12] - rear_.r*z[1]*z[8] - z[0]*z[93] - z[3]*z[51];
  z[132] = front_.R*z[28]*z[62]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[78];
  z[133] = front_.a*z[3]*z[4] + z[3]*z[4]*z[80] + z[87];
  z[134] = front_.R*z[28]*z[3]*pow(z[31], 2)*z[4]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - front_.r*z[28]*z[3]*z[4] + z[87];
  z[135] = -front_.m*front_.r*z[3]*(-z[105]*z[31] + z[13]*z[2]*z[3]*z[52]);
  z[136] = front_.r*z[2]*z[30] - z[128]*z[5];
  z[137] = front_.r*z[30]*z[5] + z[132]*z[2];
  z[138] = front_.r*z[2]*z[30] - z[132]*z[5];
  z[139] = front_.r*z[30]*z[4]*z[5] + z[128]*z[2]*z[4];
  z[140] = z[1]*z[93] - z[4]*z[92];
  z[141] = -2*z[1]*z[12]*z[4] + z[12]*z[13]*z[50]/(z[12]*z[13] + pow(z[28], 2)) + pow(z[28], 2)*z[50]/(z[12]*z[13] + pow(z[28], 2)) - 2*z[28]*z[3]*z[4]*z[5];
  z[142] = -front_.m*front_.r*z[4]*(-z[107]*z[31] - z[3]*z[30]*z[52]);
  z[143] = front_.r*z[2]*z[28]*z[3]*z[4] + front_.r*z[3]*z[31]*z[4]*z[5] - z[114]*z[31];
  z[144] = front_.b*z[1]*z[2] + front_.r*z[1]*z[2]*z[3]*z[4] - front_.r*z[31]*z[4] + z[1]*z[2]*z[64] - z[106]*z[2]*z[4];
  z[145] = -z[12]*z[13]*z[58]/(z[12]*z[13] + pow(z[28], 2)) - pow(z[28], 2)*z[58]/(z[12]*z[13] + pow(z[28], 2)) + z[59];
  z[146] = front_.b*z[2]*z[3]*z[4] + front_.r*z[1]*z[3]*z[31] + front_.r*z[12]*z[13]*z[2] - z[106]*z[31] + z[2]*z[3]*z[4]*z[64];
  z[147] = front_.r*z[2]*z[28] + z[113]*z[5] + z[98];
  z[148] = -front_.a*z[1]*z[2] - front_.r*z[1]*z[31]*z[5] - front_.r*z[13]*z[2]*z[3]*z[5] - z[1]*z[2]*z[80] + z[114]*z[2]*z[4];
  z[149] = front_.a*z[4]*z[5] - front_.r*z[2]*z[31]*z[4] + front_.r*z[28]*z[4]*z[5] - z[113]*z[2]*z[4] + z[4]*z[5]*z[80];
  z[150] = front_.R*z[13]*z[28]*z[3]*z[31]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[1]*z[113] - z[74];
  z[151] = -front_.b*z[30] + front_.r*z[0]*z[31]*z[4] - front_.r*z[3]*z[30]*z[4] - z[109]*z[31] - z[30]*z[64];
  z[152] = z[105]*z[12]*z[4] + z[114]*z[28];
  z[153] = -front_.b*z[30] + front_.r*z[0]*z[31]*z[4] - front_.r*z[3]*z[30]*z[4] - z[112]*z[31] - z[30]*z[64];
  z[154] = front_.R*z[13]*z[28]*z[3]*z[31]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[1]*z[118]/2 - z[74];
  z[155] = -front_.a*z[2]*z[3]*z[4] - z[143] - z[2]*z[3]*z[4]*z[80];
  z[156] = z[155];
  z[157] = front_.R*pow(z[28], 2)*z[3]*z[31]*z[4]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[113]*z[3]*z[4] - z[85];
  z[158] = front_.a*z[28] - z[113]*z[31] + z[28]*z[80] + z[55];
  z[159] = front_.R*pow(z[28], 2)*z[3]*z[31]*z[4]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[118]*z[3]*z[4]/2 - z[85];
  z[160] = -rear_.a*z[0]*z[4] - rear_.b*z[0]*z[1] - z[0]*z[1]*z[54] - z[0]*z[4]*z[51] + z[1]*z[3]*z[92] + z[3]*z[4]*z[93];
  z[161] = -rear_.a*z[0]*z[4] - rear_.b*z[0]*z[1] - z[0]*z[1]*z[54] - z[0]*z[4]*z[51] + z[1]*z[3]*z[92] + z[3]*z[4]*z[93];
  z[162] = z[72]*z[93] + z[73]*z[92];
  z[163] = z[1]*z[128] - z[109]*z[4]*z[5];
  z[164] = z[1]*z[132] - z[109]*z[4]*z[5];
  z[165] = -z[107]*z[13]*z[3] - z[128]*z[28];
  z[166] = front_.a*z[30] + z[128]*z[31] + z[30]*z[80] - z[77];
  z[167] = front_.a*z[30] + z[132]*z[31] + z[30]*z[80] - z[77];
  z[168] = front_.a*z[4] + front_.b*z[1]*z[5] + z[1]*z[114] + z[1]*z[5]*z[64] - z[106]*z[4]*z[5] + z[4]*z[80];
  z[169] = -front_.a*z[1]*z[3] + front_.b*z[3]*z[4]*z[5] - z[1]*z[3]*z[80] - z[106]*z[28] + z[114]*z[3]*z[4] + z[3]*z[4]*z[5]*z[64];
  z[170] = z[169];
  z[171] = -front_.a*z[0]*z[4] + front_.b*z[33] - z[0]*z[4]*z[80] - z[109]*z[28] + z[128]*z[3]*z[4] + z[33]*z[64];
  z[172] = -front_.Ixz*z[5] - front_.m*(-front_.r*z[28]*z[71] - front_.r*z[31]*(-front_.R*z[28]*z[3]*z[31]*z[4]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[70]) - z[110]*z[81] + z[113]*z[70]);
  z[173] = -rear_.J*z[3] - rear_.m*(z[129]*z[54] - z[131]*z[51] + z[162]);
  z[174] = front_.J*z[2] - front_.m*(-front_.R*z[28]*z[3]*z[31]*z[4]*z[71]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[113]*z[99] - z[147]*z[80] + z[64]*(-front_.R*z[28]*z[3]*z[31]*z[4]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[70]));
  z[175] = front_.Ixz*z[2]*z[4] - front_.m*(-front_.r*z[28]*z[84] - front_.r*z[31]*(-front_.R*z[13]*z[2]*z[28]*z[3]*z[32]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - 2*front_.b*z[4]*z[5] - 2*front_.r*z[1]*z[28] - 2*z[4]*z[5]*z[64])/2 - z[118]*z[119]/2 - z[81]*(-front_.R*z[13]*z[28]*z[3]*z[32]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + 2*front_.b*z[2]*z[4] - 2*z[1]*z[115] + 2*z[2]*z[4]*z[64])/2);
  z[176] = front_.J*z[4]*z[5] - front_.m*(-front_.R*z[28]*z[3]*z[31]*z[4]*z[84]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[103]*z[113] + z[126]*z[64] - z[149]*z[80]);
  z[177] = front_.Ixz*z[31] - front_.m*(-front_.r*z[100]*z[28] - front_.r*z[134]*z[31] - z[113]*z[133] - z[157]*z[81]);
  z[178] = -front_.J*z[1]*z[2] - front_.m*(-z[103]*z[114] + z[106]*z[84] + z[144]*z[64] - z[148]*z[80]);
  z[179] = front_.J*z[28] - front_.m*(-front_.R*z[100]*z[28]*z[3]*z[31]*z[4]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) + z[113]*z[117] + z[134]*z[64] - z[158]*z[80]);
  z[180] = -front_.m*(-front_.r*z[144]*z[31] + front_.r*z[2]*z[3]*z[4]*z[84] + z[114]*z[119] - z[168]*z[81]) + z[26];
  z[181] = -front_.J*z[2]*z[3]*z[4] - front_.m*(z[100]*z[106] - z[114]*z[116] + z[146]*z[64] - z[155]*z[80]);
  z[182] = front_.Ixz*z[3]*z[4]*z[5] + front_.Izz*z[1]*z[3] - front_.m*(front_.r*z[100]*z[2]*z[3]*z[4] - front_.r*z[146]*z[31] + z[114]*z[133] - z[170]*z[81]);
  z[183] = front_.J*z[30] - front_.m*(z[100]*z[109] - z[117]*z[128] + z[153]*z[64] - z[167]*z[80]);
  z[184] = -front_.m*(-front_.r*z[100]*z[30] - front_.r*z[151]*z[31] + z[128]*z[133] - z[171]*z[81]) - z[45];
  z[185] = -front_.Ixx*z[11]*z[4] + front_.Iyy*z[11]*z[4] - front_.Iyy*z[15]*z[4] + front_.m*(z[103]*z[147] + z[110]*z[119] + z[123]*z[71] + z[149]*z[99] - z[150]*z[70] + z[84]*(-front_.R*z[28]*z[3]*z[31]*z[4]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[70]));
  z[186] = -front_.m*(z[103]*z[136] - z[109]*z[119]*z[2] + z[109]*z[5]*z[84] + z[124]*z[71] + z[139]*z[99] - z[163]*z[70]) - rear_.m*rear_.r*(z[0]*z[1]*z[92] + z[0]*z[4]*z[93] - z[1]*z[3]*z[57] + z[3]*z[4]*z[53]);
  z[187] = -front_.Ixx*z[2]*z[31] + front_.Iyy*z[2]*z[31] - front_.Iyy*z[28]*z[5] + front_.m*(z[100]*(-front_.R*z[28]*z[3]*z[31]*z[4]*z[5]/pow(z[12]*z[13] + pow(z[28], 2), 3.0/2.0) - z[70]) + z[110]*z[133] + z[116]*z[147] + z[134]*z[71] - z[157]*z[70] + z[158]*z[99]);
  z[188] = front_.Iyy*z[1]*z[2]*z[5] + front_.m*(z[103]*z[121] - z[106]*z[119]*z[2] + z[106]*z[5]*z[84] + z[144]*z[71] + z[148]*z[99] - z[168]*z[70]) + rear_.m*rear_.r*z[0]*(z[88] + z[91]);
  z[189] = front_.Iyy*z[2]*z[3]*z[4]*z[5] + front_.m*(z[100]*z[106]*z[5] - z[106]*z[133]*z[2] + z[116]*z[121] + z[146]*z[71] + z[155]*z[99] - z[169]*z[70]) + rear_.m*(z[51]*z[73] - z[53]*z[68] - z[54]*z[72] + z[57]*z[67]);
  z[190] = -front_.Iyy*z[30]*z[5] + rear_.Iyy*z[3] + front_.m*(z[100]*z[109]*z[5] - z[109]*z[133]*z[2] + z[116]*z[136] + z[151]*z[71] + z[166]*z[99] - z[171]*z[70]) + rear_.m*(-z[129]*z[57] - z[131]*z[53] + z[162]);
  z[191] = front_.Iyy*z[1]*z[2]*z[31] + front_.Iyy*z[11]*z[13]*z[3] - front_.m*(z[100]*z[144] + z[103]*z[156] + z[117]*z[148] + z[119]*z[170] + z[133]*z[168] + z[146]*z[84]) - rear_.m*(-rear_.r*z[0]*z[1]*z[67] - rear_.r*z[0]*z[1]*z[72] - rear_.r*z[0]*z[4]*z[68] + rear_.r*z[0]*z[4]*z[73] + z[102]*z[18] + z[29]*z[95]) + z[1]*z[17]*z[3] - z[1]*z[20]*z[3] + z[1]*z[24]*z[3] + z[16]*z[3]*z[4] + z[21]*z[3]*z[4] + z[23]*z[3]*z[4]*z[5];
  z[192] = front_.Iyy*z[2]*z[30]*z[4] + front_.m*(z[100]*z[124] + z[103]*z[166] + z[116]*z[139] + z[119]*z[171] + z[133]*z[163] + z[151]*z[84]) + rear_.m*(rear_.r*z[0]*z[1]*z[129] - rear_.r*z[0]*z[131]*z[4] + rear_.r*z[1]*z[3]*z[73] + rear_.r*z[3]*z[4]*z[72] + z[102]*z[140] + z[161]*z[95]);
  z[193] = -front_.b;
  z[194] = -front_.m;
  z[195] = -2*z[194];
  z[196] = -rear_.m;
  z[197] = -2*z[196];
  z[198] = -front_.r;
  z[199] = -rear_.r;
  z[200] = front_.Ixx*z[5];
  z[201] = front_.Ixz*z[1];
  z[202] = front_.Ixz*z[4];
  z[203] = front_.Iyy*z[2];
  z[204] = front_.a*z[4];
  z[205] = -z[193]*z[5];
  z[206] = -z[196]*z[3];
  z[207] = -z[198]*z[2];
  z[208] = -z[198]*z[3];
  z[209] = -z[198]*z[4];
  z[210] = -z[0]*z[199];
  z[211] = -z[0];
  z[212] = -2*z[211];
  z[213] = -z[1];
  z[214] = -2*z[213];
  z[215] = -z[2];
  z[216] = -z[3];
  z[217] = -z[4];
  z[218] = -2*z[217];
  z[219] = -z[5];
  z[220] = -2*z[219];
  z[221] = 0;
  z[222] = z[211]*z[213];
  z[223] = z[211]*z[216];
  z[224] = z[211]*z[217];
  z[225] = z[213]*z[216];
  z[226] = z[213]*z[219];
  z[227] = z[215]*z[216];
  z[228] = z[215]*z[217];
  z[229] = z[216]*z[217];
  z[230] = z[217]*z[219];
  z[231] = -z[199]*z[8];
  z[232] = -z[199]*z[9];
  z[233] = -z[8];
  z[234] = -z[12];
  z[235] = 2*z[13];
  z[236] = z[213]*z[234];
  z[237] = -z[13]*z[216];
  z[238] = z[217]*z[234];
  z[239] = -z[15]*z[217];
  z[240] = z[208]*z[217];
  z[241] = -z[10]*z[234];
  z[242] = -z[13]*z[234];
  z[243] = -z[14]*z[234];
  z[244] = z[14]*pow(z[3], 3);
  z[245] = -z[223]*z[235];
  z[246] = -z[13]*z[223];
  z[247] = -z[211]/z[19];
  z[248] = -z[19]*z[234];
  z[249] = -z[18]*z[196]*z[211];
  z[250] = -front_.Iyy*z[31];
  z[251] = z[198]*z[31];
  z[252] = front_.Ixx*z[28];
  z[253] = -z[198]*z[28];
  z[254] = -z[198]*z[30];
  z[255] = z[215]*z[31];
  z[256] = z[216]*z[31];
  z[257] = z[217]*z[31];
  z[258] = z[219]*z[31];
  z[259] = -z[213]*z[28];
  z[260] = -z[217]*z[28];
  z[261] = -z[219]*z[28];
  z[262] = z[251]*z[31];
  z[263] = -z[219]*z[254];
  z[264] = -pow(z[28], 2);
  z[265] = -z[216]/z[35];
  z[266] = z[10]/z[35];
  z[267] = rear_.R/z[40];
  z[268] = -z[219]*z[42];
  z[269] = z[31]*z[33];
  z[270] = -z[216]*z[47];
  z[271] = -z[28]*z[31];
  z[272] = -z[30]*z[31];
  z[273] = z[28]*z[30];
  z[274] = z[28]*z[33];
  z[275] = front_.R/pow(z[242] - z[264], 2);
  z[276] = front_.R/pow(z[242] - z[264], 3.0/2.0);
  z[277] = -z[194]/sqrt(z[242] - z[264]);
  z[278] = z[264]*z[31];
  z[279] = -z[19]*z[233]/z[36];
  z[280] = z[19]*z[9]/z[36];
  z[281] = -1/(z[242] - z[264]);
  z[282] = -2*z[281];
  z[283] = -sqrt(z[242] - z[264]);
  z[284] = -front_.R/sqrt(z[242] - z[264]);
  z[285] = z[215]/z[283];
  z[286] = z[217]/z[283];
  z[287] = -z[217]*z[48];
  z[288] = -z[213]*z[49];
  z[289] = -z[242]*z[281];
  z[290] = z[18]*z[196]*z[248]/z[35];
  z[291] = z[281]*z[31];
  z[292] = z[31]/z[283];
  z[293] = -z[28]*z[281];
  z[294] = -z[28]/z[283];
  z[295] = -z[30]/z[283];
  z[296] = -pow(z[292], 2)/z[283];
  z[297] = -z[291]*z[31];
  z[298] = -z[292]*z[31];
  z[299] = z[264]*z[281];
  z[300] = z[264]/z[283];
  z[301] = z[48]/z[35];
  z[302] = z[33]*z[52];
  z[303] = z[49]/z[35];
  z[304] = -z[28]*z[52];
  z[305] = -z[215]*z[66];
  z[306] = -z[219]*z[66];
  z[307] = -z[31]*z[56];
  z[308] = -z[46]/pow(z[283], 3);
  z[309] = -z[281]*z[46];
  z[310] = -z[52]/z[283];
  z[311] = z[281]*z[58];
  z[312] = -z[66]/z[283];
  z[313] = z[19]*z[89];
  z[314] = z[196]*z[211]*z[90];
  z[315] = -z[216]*z[95];
  z[316] = -z[196]*z[223]*z[83]/z[35];
  z[317] = -z[240]*z[277]*z[28]*(z[297] + 1);
  z[318] = z[90]/z[35];
  z[319] = z[206]*z[211]*z[47]*z[83];
  z[320] = -z[84]/z[283];
  z[321] = -z[206]*z[318];
  z[322] = z[196]*z[234]*z[318];
  z[323] = -z[206]*z[313]/z[35];
  z[324] = -z[105]*z[234];
  z[325] = -z[196]*z[270]*z[90];
  z[326] = z[105]*z[28];
  z[327] = -z[107]*z[237];
  z[328] = -z[99]/z[283];
  z[329] = z[107]*z[28];
  z[330] = z[108]/z[40];
  z[331] = z[130]*z[196]*z[216];
  z[332] = z[209]*z[277]*(z[211]*z[31] - z[216]*z[30] + z[256]*z[281]*z[60]);
  z[333] = -z[196]*z[211]*(z[216]*z[22] + z[225]*z[48] - z[229]*z[49] - z[241]*z[267] - z[242]*z[267]);
  z[334] = z[130]*z[206]*z[211]/z[35];
  z[335] = -z[141]/z[283];
  z[336] = z[194]*(z[28]*z[81] - pow(z[31], 2)*(z[264]*z[276] - z[52]) - z[55]);
  z[337] = -z[196]*z[89]*(z[82] - z[91]);
  z[338] = -z[145]/z[283];
  z[339] = z[134]*z[84];
  z[340] = -z[194]*z[229]*pow(z[31], 2)*(-z[264]*z[275] + z[310] + (-z[264]*z[276] + z[52])/z[283]);
  z[341] = z[194]*(z[143] + z[217]*z[227]*z[81]);
  z[342] = z[196]*z[216]*(z[10]*z[233]*z[265]*z[267] + z[213]*z[233]*z[301] - z[217]*z[233]*z[303] + z[22]*z[248]/z[40] + z[233]*z[237]*z[267]/z[35]);
  z[343] = z[194]*(z[30]*z[81] - z[31]*(z[276]*z[28]*(z[245] + z[28]*z[34])/2 + z[78]) + z[77]);
  z[344] = z[196]*(z[10]*z[231] + z[13]*z[231] - z[140]*z[211] + z[199]*z[241] + z[199]*z[242] + z[315]);
  z[345] = -z[206]*(-z[129]*z[217] - z[131]*z[213])/z[35];
  z[346] = -z[194]*z[216]*(z[114]*z[217] + z[219]*z[237]*z[52] + z[259]*z[52] + z[326]);
  z[347] = z[196]*z[216]*(-z[211]*z[330] + z[233]*z[235]/z[35] + 2*z[233]*z[266] + z[241]*z[279] + z[241]/z[35] + z[242]*z[279] + z[242]/z[35] - z[248]/z[40]);
  z[348] = -z[194]*z[217]*(z[128]*z[216] + z[211]*z[304] + z[216]*z[302] + z[329]);
  z[349] = -z[256]*z[277]*(-z[114]*z[217] - z[219]*z[237]*z[52] - z[259]*z[52] - z[326]);
  z[350] = z[194]*z[271]*(z[242]*z[275] + z[242]*z[52]/pow(z[283], 3) + z[310] + z[300]*z[310]/z[283] + (z[264]*z[276] - z[52])/z[283]);
  z[351] = -z[257]*z[277]*(-z[128]*z[216] - z[211]*z[304] - z[216]*z[302] - z[329]);
  z[352] = z[194]*z[31]*(2*z[253]*z[28]/z[283] + z[262]/z[283] + z[262]*z[300]/pow(z[283], 2) - z[283]*(z[264]*z[276] - z[52]) + z[294]*z[81]*(-z[94] + 2));
  z[353] = z[194]*(-z[125]*z[31] + z[242]*z[271]*z[292]/pow(z[283], 2) + z[242]*z[294] - 2*z[271]*z[292] + z[28]*z[283] + z[296]*z[37] - z[37]/z[283]);
  z[354] = z[194]*(z[105]*z[208]*z[258] + z[105]*z[227]*z[81] - z[114]*z[305] + z[207]*z[229]*z[306]);
  z[355] = z[194]*(z[107]*z[209]*z[258] + z[107]*z[228]*z[81] - z[128]*z[305] - z[263]*z[66]);
  z[356] = -z[277]*(z[152] + z[217]*z[236]*z[52] - z[229]*z[261]*z[52] + z[229]*z[299]*z[46]*z[52] + z[244]*z[309]*z[52]);
  z[357] = z[194]*z[216]*(z[105]*z[255] - z[105]*z[261] - z[11]*z[217]*z[66] + z[121]*z[217] - z[213]*z[99] + z[239]*z[66]);
  z[358] = z[194]*(-z[111]*z[31] + z[147]*z[229] + z[258]*z[66] + z[28]*z[305] + z[28]*(z[229]*z[258]*z[276]*z[28] - z[70]));
  z[359] = z[196]*(-z[13]*z[232]/z[35] + z[140]*z[248]/z[40] + z[19]*z[232]*z[241]/z[36] + z[19]*z[232]*z[242]/z[36] - z[210]*z[234]*z[235]/z[35] + 2*z[210]*z[241]/z[35] - z[232]*z[266] - z[315]*z[330]);
  z[360] = z[194]*(z[141]*z[292] + z[217]*z[227]*z[283] + z[218]*z[236]*z[292] - z[218]*z[256]*z[261]/z[283] - z[227]*z[260]*z[294] - z[229]*z[278]*z[308] - z[244]*z[285] - z[244]*z[292]*z[46]/pow(z[283], 2));
  z[361] = z[194]*(-z[114]*z[283] - z[207]*z[218]*z[256]*z[294] - z[208]*z[230]*z[292]*z[31] + z[240]*z[271]*z[292]*z[46]/pow(z[283], 2) - z[335]*z[81]);
  z[362] = -z[194]*(-z[165] + z[246]*z[52] - z[274]*z[52] - z[289]*z[52]*z[58] - z[299]*z[52]*z[58])/z[283];
  z[363] = z[194]*(z[107]*z[228]*z[31] + z[138]*z[229] - z[224]*z[99] + z[230]*z[329] + z[30]*z[305] - z[306]*z[33]);
  z[364] = z[194]*(-z[105]*z[216]*z[306] - z[114]*z[99] + z[121]*z[304] + z[230]*z[324]*z[52]);
  z[365] = -z[194]*(-z[158]*z[28] - z[229]*z[271]*z[291]*z[56] + z[229]*z[28]*z[97] + z[278]*z[291]*z[69] - pow(z[31], 2)*z[69])/z[283];
  z[366] = z[194]*(-z[128]*z[283] - 2*z[251]*z[273]/z[283] + z[262]*z[33]/z[283] - z[262]*z[294]*z[58]/pow(z[283], 2) - z[338]*z[81]);
  z[367] = -z[277]*(-z[121]*z[28] - z[219]*z[229]*z[99] - z[225]*z[306] - z[229]*z[293]*z[46]*z[99] + z[230]*z[324] + z[289]*z[306]*z[46]);
  z[368] = z[194]*(z[145]*z[292] + z[212]*z[237]*z[292] + z[242]*z[295] + z[242]*z[292]*z[58]/pow(z[283], 2) - z[264]*z[295] - 2*z[269]*z[294] - z[278]*z[58]/pow(z[283], 3) + z[283]*z[30]);
  z[369] = z[196]*(-z[129]*z[225] + z[131]*z[229] - z[160]*z[211] - z[233]*z[287] - z[233]*z[288] - z[234]*z[96]);
  z[370] = -z[194]*(-z[147]*z[28] - z[229]*z[258]*z[293]*z[66] + z[229]*(z[229]*z[258]*z[276]*z[28] - z[70]) - z[278]*z[281]*z[99] + z[31]*z[99])/z[283];
  z[371] = z[194]*(z[107]*z[230]*z[66] - z[128]*z[99] + z[138]*z[304] + z[219]*z[327]*z[52]);
  z[372] = -z[194]*(-z[136]*z[28] + z[219]*z[327] - z[224]*z[306] + z[229]*z[306]*z[311] + z[293]*z[58]*z[99] + z[33]*z[99])/z[283];
  z[373] = -z[194]*z[286]*(z[123]*z[216] + z[256]*z[293]*z[84] + z[278]*z[281]*z[98] + z[28]*(z[113]*z[215] - z[219]*z[253] - z[99]) - z[31]*z[98]);
  z[374] = z[194]*(-z[101]*z[128] - z[107]*z[217]*z[84] + z[127]*z[229]*z[52] - z[137]*z[260]*z[52]);
  z[375] = -z[194]*z[286]*(z[124]*z[216] - z[211]*z[84] + z[216]*z[311]*z[84] + z[28]*(-z[128]*z[215] + z[263]) - z[293]*z[58]*z[98] - z[33]*z[98]);
  z[376] = z[194]*(z[119]*z[128] + z[124]*z[251] - z[163]*z[81] - z[254]*z[84]);
  z[377] = z[194]*(-z[133]*z[28] + z[158]*z[229] - z[159]*z[31] - z[264]*z[97] - z[307]*z[31]);
  z[378] = z[194]*(-z[119]*z[28] + z[122]*z[28] - z[154]*z[31] + z[237]*(z[113]*z[215] - z[219]*z[253] - z[99]) - z[31]*z[84]);
  z[379] = -z[194]*(z[146]*z[229] - z[155]*z[28] - z[225]*z[307] + z[229]*z[258]*z[69] - z[229]*z[271]*z[309]*z[69] + z[289]*z[307]*z[46])/z[283];
  z[380] = z[194]*(-z[101]*z[224] - z[119]*z[30] + z[127]*z[28] + z[137]*z[237] - z[164]*z[31] - z[33]*z[84]);
  z[381] = -z[194]*(z[144]*z[229] - z[148]*z[28] - z[219]*z[237]*z[98] - z[225]*z[84] - z[237]*z[293]*z[46]*z[98] + z[289]*z[46]*z[84])/z[283];
  z[382] = -z[194]*(z[151]*z[229] - z[166]*z[28] - z[224]*z[307] - z[229]*z[291]*z[56]*z[58] - z[269]*z[69] - z[271]*z[311]*z[69])/z[283];
  z[383] = z[194]*(-z[101]*z[225] - z[119]*z[217]*z[227] + z[144]*z[28] + z[148]*z[229] - z[168]*z[31] + z[219]*z[229]*z[84]);
  z[384] = z[194]*(-z[133]*z[217]*z[227] + z[146]*z[28] + z[156]*z[229] - z[170]*z[31] - z[225]*z[79] - z[229]*z[258]*z[56]);
  z[385] = z[196]*(z[129]*z[222]*z[265] + z[131]*z[217]*z[223]/z[35] + z[160]*z[248]/z[40] - z[222]*z[234]*z[303] - z[224]*z[234]*z[301] + z[234]*z[330]*z[96] + z[236]*z[280]*z[49] + z[238]*z[280]*z[48] - z[287]*z[9]/z[35] - z[288]*z[9]/z[35]);
  z[386] = z[194]*(-z[133]*z[30] + z[153]*z[28] + z[167]*z[229] - z[224]*z[79] + z[269]*z[56] - z[31]*(-z[112]*z[28] + z[132]*z[229] - z[193]*z[33] + z[204]*z[211] - z[224]*z[80] + z[33]*z[64]));
  z[387] = z[194]*(-z[111]*z[283] - z[125]*z[305] - z[147]*z[229]*z[292] + z[229]*z[271]*z[292]*z[99]/pow(z[283], 2) + z[229]*z[294]*z[99] + z[258]*z[278]*z[312]/pow(z[283], 2) - z[258]*z[292]*z[66] + z[261]*z[294]*z[66] + z[271]*(z[229]*z[258]*z[276]*z[28] - z[70])/z[283]);
  z[388] = z[194]*(z[105]*z[227]*z[283] + z[105]*z[256]*z[261]/z[283] - z[121]*z[229]*z[292] - z[141]*z[285]*z[66] + z[15]*z[229]*z[292]*z[66] + z[225]*z[292]*z[99] - z[227]*z[230]*z[294]*z[66] + z[229]*z[258]*z[294]*z[312]*z[46]/z[283] - z[242]*z[285]*z[99] + z[242]*z[292]*z[328]*z[46]/z[283]);
  z[389] = z[194]*(z[125]*z[133] - z[158]*z[229]*z[292] - z[159]*z[283] + z[229]*z[271]*z[292]*z[79]/pow(z[283], 2) + z[229]*z[294]*z[79] + z[278]*z[296]*z[56] - z[278]*z[56]/z[283] + z[278]*z[97]/z[283] - z[298]*z[307]);
  z[390] = z[194]*(z[107]*z[228]*z[283] + z[107]*z[230]*z[271]/z[283] - z[136]*z[229]*z[292] - z[145]*z[285]*z[66] + z[224]*z[292]*z[99] + z[229]*z[295]*z[99] - z[229]*z[292]*z[328]*z[58]/z[283] + z[258]*z[312]*z[33] - z[258]*z[294]*z[312]*z[58]/z[283] + z[261]*z[295]*z[66]);
  z[391] = z[194]*(z[101]*z[229]*z[271]*z[292]/pow(z[283], 2) + z[101]*z[229]*z[294] + z[119]*z[125] + z[122]*z[271]/z[283] - z[154]*z[283] - z[237]*z[292]*(z[113]*z[215] - z[219]*z[253] - z[99]) - z[278]*z[292]*z[320]/z[283] - z[298]*z[84] + z[300]*z[84]);
  z[392] = z[194]*(z[101]*z[224]*z[292] + z[101]*z[229]*z[295] - z[101]*z[229]*z[292]*z[60]/pow(z[283], 2) - z[119]*(z[289]*z[65] + z[299]*z[65] + z[59])/z[283] + z[127]*z[271]/z[283] - z[137]*z[237]*z[292] - z[164]*z[283] - z[269]*z[320] + z[271]*z[60]*z[84]/pow(z[283], 3) + z[273]*z[320]);
  z[393] = z[194]*(z[133]*z[335] + z[146]*z[271]/z[283] - z[155]*z[229]*z[292] - z[169]*z[283] + z[225]*z[298]*z[69] - z[227]*z[257]*z[294]*z[56] + z[229]*z[258]*z[292]*z[56] - z[229]*z[271]*z[292]*z[46]*z[56]/pow(z[283], 2) + z[242]*z[255]*z[69]/z[283] - z[242]*z[296]*z[46]*z[69]);
  z[394] = z[194]*(z[119]*z[335] + z[144]*z[271]/z[283] - z[148]*z[229]*z[292] - z[168]*z[283] - z[225]*z[257]*z[98]/z[283] - z[227]*z[260]*z[320] + z[229]*z[258]*z[320] - z[229]*z[271]*z[308]*z[84] - z[243]*z[285]*z[98] - z[243]*z[292]*z[46]*z[98]/pow(z[283], 2));
  z[395] = z[194]*(z[133]*z[338] + z[151]*z[271]/z[283] - z[166]*z[229]*z[292] - z[171]*z[283] + z[224]*z[298]*z[69] - z[229]*z[272]*z[69]/z[283] + z[229]*z[296]*z[58]*z[69] - z[269]*z[292]*z[56] + z[271]*z[295]*z[56] + z[271]*z[292]*z[56]*z[58]/pow(z[283], 2));

  ar[0] = -rear_.Iyy*z[212]*z[3] - z[195]*(z[100]*z[151] + z[116]*z[166] + z[133]*z[171]) - z[197]*(z[102]*z[161] + z[129]*z[73] - z[131]*z[72]) + z[20]*z[214]*z[223] - z[21]*z[212]*z[229] + z[224]*z[44] - z[229]*z[45] + 2*z[250]*z[30] - z[28]*z[43] + z[33]*z[42];
  ar[1] = -z[16]*z[236] + z[17]*z[238] - z[195]*(z[100]*z[146] + z[116]*z[155] + z[133]*z[169]) - z[197]*(z[102]*z[29] - z[67]*z[73] - z[68]*z[72]) - z[20]*z[238] - z[203]*z[218]*z[256] - z[21]*z[236] - z[216]*z[23]*z[28] + z[225]*z[44] + z[229]*z[268] + z[238]*z[24];
  ar[2] = -z[195]*(z[100]*z[134] + z[116]*z[158] + z[133]*z[157]) - z[202]*z[256] + 2*z[250]*z[28] + z[252]*z[31] + z[31]*z[42];
  ar[3] = -z[16]*z[222] + z[17]*z[224] - z[192] + z[224]*z[24] + z[23]*z[33];
  ar[4] = z[191] + z[229]*z[26] + z[25]*z[28];
  ar[5] = front_.Ixz*z[13]*z[227] + z[194]*(z[100]*z[126] + z[103]*z[158] + z[117]*z[149] + z[119]*(-z[115]*z[229] + z[229]*z[264]*z[276]*z[32]/2 - z[85]) + z[133]*(z[115]*z[213] - z[237]*z[261]*z[276]*z[32]/2 - z[74]) + z[339]) - z[203]*z[260] + z[228]*z[252] + z[23]*z[31] + z[230]*z[250];
  ar[6] = -front_.Ixx*z[215]*z[33] - z[190] + z[202]*z[211]*z[215];
  ar[7] = -z[189] - z[200]*z[217]*z[227] + z[201]*z[227];
  ar[8] = -z[187] - z[200]*z[28] - z[202]*z[216]*z[219];
  ar[9] = z[184];
  ar[10] = z[182];
  ar[11] = z[177];
  ar[12] = z[173];
  ar[13] = z[319];
  ar[14] = 0;
  ar[15] = z[183];
  ar[16] = z[181];
  ar[17] = z[179];
  ar[18] = z[345];
  ar[19] = z[316];
  ar[20] = 0;
  ar[21] = z[385];
  ar[22] = z[342];
  ar[23] = 0;
  ar[24] = z[369];
  ar[25] = z[333];
  ar[26] = 0;
  ar[27] = z[382];
  ar[28] = z[379];
  ar[29] = z[365];
  ar[30] = z[395];
  ar[31] = z[393];
  ar[32] = z[389];
  ar[33] = z[386];
  ar[34] = z[384];
  ar[35] = z[377];
  ar[36] = -z[192] - z[20]*z[224] - z[21]*z[222] + z[213]*z[45] - z[230]*z[43];
  ar[37] = z[191] + z[217]*z[44] + z[226]*z[42];
  ar[38] = z[194]*(z[100]*z[123] + z[103]*z[158] + z[116]*z[149] + z[119]*z[157] + z[133]*z[150] + z[339]) - z[200]*z[257] + z[201]*z[31] - z[203]*z[260] + z[228]*z[42] + z[230]*z[250];
  ar[39] = -z[195]*(z[103]*z[139] + z[119]*z[163] + z[124]*z[84]) - z[197]*(z[10]*z[223]*z[7] + z[140]*z[95] - z[246]*z[7]);
  ar[40] = -front_.Iyy*z[11]*z[214]*z[217] - z[16]*z[213] + z[17]*z[217] + 2*z[18]*z[196]*z[95] + 2*z[194]*(z[103]*z[148] + z[119]*z[168] + z[144]*z[84]) - z[20]*z[217] - z[21]*z[213] - z[213]*z[26] + z[217]*z[24] + z[226]*z[23] + z[230]*z[25];
  ar[41] = -z[13]*z[200]*z[215] + z[194]*(z[103]*(z[113]*z[215]*z[218] + z[204]*z[220] + 2*z[207]*z[257] + z[209]*z[220]*z[28] - z[218]*z[219]*z[80]) + z[119]*(-z[115]*z[214] + 2*z[193]*z[2]*z[217] - z[215]*z[218]*z[64] - z[237]*z[261]*z[276]*z[32]) + z[84]*(2*z[1]*z[198]*z[28] - z[13]*z[227]*z[276]*z[28]*z[32] - z[205]*z[218] + z[218]*z[219]*z[64])) + z[201]*z[228] + z[203]*z[219]*z[235] + z[228]*z[23];
  ar[42] = z[186];
  ar[43] = -z[188] + z[200]*z[213]*z[215] + z[202]*z[215];
  ar[44] = -front_.Ixx*z[239] - z[185] + z[201]*z[219];
  ar[45] = z[376];
  ar[46] = z[180];
  ar[47] = z[175];
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = z[374];
  ar[52] = z[178];
  ar[53] = z[176];
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = z[359];
  ar[58] = z[290];
  ar[59] = 0;
  ar[60] = z[344];
  ar[61] = z[249];
  ar[62] = 0;
  ar[63] = z[375];
  ar[64] = z[381];
  ar[65] = z[373];
  ar[66] = z[392];
  ar[67] = z[394];
  ar[68] = z[391];
  ar[69] = z[380];
  ar[70] = z[383];
  ar[71] = z[378];
  ar[72] = -z[190] + z[215]*z[43];
  ar[73] = -z[189] + z[227]*z[23];
  ar[74] = -z[187] - z[268];
  ar[75] = z[186];
  ar[76] = -z[188] - z[215]*z[25];
  ar[77] = -z[185] + z[219]*z[23];
  ar[78] = -z[195]*(-z[109]*z[215]*z[70] - z[109]*z[219]*z[71] + z[136]*z[99]) - z[197]*(z[53]*z[93] - z[57]*z[92]);
  ar[79] = -z[195]*(-z[106]*z[215]*z[70] - z[106]*z[219]*z[71] + z[121]*z[99]) - z[197]*(-z[51]*z[57] - z[53]*z[54]);
  ar[80] = -z[195]*(-z[110]*z[70] + z[147]*z[99] + z[71]*(z[229]*z[258]*z[276]*z[28] - z[70])) + 2*z[200]*z[215] - 2*z[203]*z[219];
  ar[81] = z[355];
  ar[82] = z[354];
  ar[83] = z[172];
  ar[84] = z[337];
  ar[85] = z[325];
  ar[86] = 0;
  ar[87] = z[371];
  ar[88] = z[364];
  ar[89] = z[174];
  ar[90] = z[323];
  ar[91] = z[321];
  ar[92] = 0;
  ar[93] = z[322];
  ar[94] = z[334];
  ar[95] = 0;
  ar[96] = z[314];
  ar[97] = z[331];
  ar[98] = 0;
  ar[99] = z[372];
  ar[100] = z[367];
  ar[101] = z[370];
  ar[102] = z[390];
  ar[103] = z[388];
  ar[104] = z[387];
  ar[105] = z[363];
  ar[106] = z[357];
  ar[107] = z[358];
  ar[108] = z[184];
  ar[109] = z[182];
  ar[110] = z[177];
  ar[111] = z[376];
  ar[112] = z[180];
  ar[113] = z[175];
  ar[114] = z[355];
  ar[115] = z[354];
  ar[116] = z[172];
  ar[117] = z[194]*(-2*z[128]*z[81] - 2*z[272]*z[6]);
  ar[118] = 2*z[194]*(-z[114]*z[81] + z[227]*z[257]*z[6]);
  ar[119] = 2*z[194]*z[31]*(z[28]*z[6] - z[81]*(z[264]*z[276] - z[52]));
  ar[120] = 0;
  ar[121] = 0;
  ar[122] = 0;
  ar[123] = z[142];
  ar[124] = z[135];
  ar[125] = z[104];
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = 0;
  ar[130] = 0;
  ar[131] = 0;
  ar[132] = 0;
  ar[133] = 0;
  ar[134] = 0;
  ar[135] = z[332];
  ar[136] = z[120];
  ar[137] = z[317];
  ar[138] = z[366];
  ar[139] = z[361];
  ar[140] = z[352];
  ar[141] = z[343];
  ar[142] = z[341];
  ar[143] = z[336];
  ar[144] = z[173];
  ar[145] = z[319];
  ar[146] = 0;
  ar[147] = 0;
  ar[148] = 0;
  ar[149] = 0;
  ar[150] = z[337];
  ar[151] = z[325];
  ar[152] = 0;
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = z[197]*z[270]*z[313];
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = 0;
  ar[160] = 0;
  ar[161] = 0;
  ar[162] = z[323];
  ar[163] = 0;
  ar[164] = 0;
  ar[165] = z[221];
  ar[166] = 0;
  ar[167] = 0;
  ar[168] = 0;
  ar[169] = 0;
  ar[170] = 0;
  ar[171] = 0;
  ar[172] = 0;
  ar[173] = 0;
  ar[174] = 0;
  ar[175] = 0;
  ar[176] = 0;
  ar[177] = 0;
  ar[178] = 0;
  ar[179] = 0;
  ar[180] = z[183];
  ar[181] = z[181];
  ar[182] = z[179];
  ar[183] = z[374];
  ar[184] = z[178];
  ar[185] = z[176];
  ar[186] = z[371];
  ar[187] = z[364];
  ar[188] = z[174];
  ar[189] = z[142];
  ar[190] = z[135];
  ar[191] = z[104];
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = z[165]*z[195]*z[52];
  ar[196] = 2*z[152]*z[194]*z[52];
  ar[197] = 2*z[194]*z[271]*z[52]*(z[242]*z[276] - z[264]*z[276] + z[52]);
  ar[198] = 0;
  ar[199] = 0;
  ar[200] = 0;
  ar[201] = 0;
  ar[202] = 0;
  ar[203] = 0;
  ar[204] = 0;
  ar[205] = 0;
  ar[206] = 0;
  ar[207] = z[362];
  ar[208] = z[356];
  ar[209] = z[350];
  ar[210] = z[351];
  ar[211] = z[349];
  ar[212] = z[340];
  ar[213] = z[348];
  ar[214] = z[346];
  ar[215] = 0;
  ar[216] = z[345];
  ar[217] = z[316];
  ar[218] = 0;
  ar[219] = 0;
  ar[220] = 0;
  ar[221] = 0;
  ar[222] = z[323];
  ar[223] = z[321];
  ar[224] = 0;
  ar[225] = 0;
  ar[226] = 0;
  ar[227] = 0;
  ar[228] = z[323];
  ar[229] = 0;
  ar[230] = 0;
  ar[231] = 0;
  ar[232] = 0;
  ar[233] = 0;
  ar[234] = 0;
  ar[235] = 0;
  ar[236] = 0;
  ar[237] = 0;
  ar[238] = 0;
  ar[239] = 0;
  ar[240] = 0;
  ar[241] = 0;
  ar[242] = 0;
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = z[385];
  ar[253] = z[342];
  ar[254] = 0;
  ar[255] = z[359];
  ar[256] = z[290];
  ar[257] = 0;
  ar[258] = z[322];
  ar[259] = z[334];
  ar[260] = 0;
  ar[261] = 0;
  ar[262] = 0;
  ar[263] = 0;
  ar[264] = z[221];
  ar[265] = 0;
  ar[266] = 0;
  ar[267] = 0;
  ar[268] = 0;
  ar[269] = 0;
  ar[270] = 0;
  ar[271] = 0;
  ar[272] = 0;
  ar[273] = -2*z[206]*(z[10]*z[247] - z[108]*z[248]/z[38] + z[13]*z[247]);
  ar[274] = 0;
  ar[275] = 0;
  ar[276] = z[347];
  ar[277] = 0;
  ar[278] = 0;
  ar[279] = 0;
  ar[280] = 0;
  ar[281] = 0;
  ar[282] = 0;
  ar[283] = 0;
  ar[284] = 0;
  ar[285] = 0;
  ar[286] = 0;
  ar[287] = 0;
  ar[288] = z[369];
  ar[289] = z[333];
  ar[290] = 0;
  ar[291] = z[344];
  ar[292] = z[249];
  ar[293] = 0;
  ar[294] = z[314];
  ar[295] = z[331];
  ar[296] = 0;
  ar[297] = 0;
  ar[298] = 0;
  ar[299] = 0;
  ar[300] = 0;
  ar[301] = 0;
  ar[302] = 0;
  ar[303] = 0;
  ar[304] = 0;
  ar[305] = 0;
  ar[306] = 0;
  ar[307] = 0;
  ar[308] = 0;
  ar[309] = z[347];
  ar[310] = 0;
  ar[311] = 0;
  ar[312] = z[197]*z[223]*(z[19] - 1);
  ar[313] = 0;
  ar[314] = 0;
  ar[315] = 0;
  ar[316] = 0;
  ar[317] = 0;
  ar[318] = 0;
  ar[319] = 0;
  ar[320] = 0;
  ar[321] = 0;
  ar[322] = 0;
  ar[323] = 0;
  ar[324] = z[382];
  ar[325] = z[379];
  ar[326] = z[365];
  ar[327] = z[375];
  ar[328] = z[381];
  ar[329] = z[373];
  ar[330] = z[372];
  ar[331] = z[367];
  ar[332] = z[370];
  ar[333] = z[332];
  ar[334] = z[120];
  ar[335] = z[317];
  ar[336] = 0;
  ar[337] = 0;
  ar[338] = 0;
  ar[339] = z[362];
  ar[340] = z[356];
  ar[341] = z[350];
  ar[342] = 0;
  ar[343] = 0;
  ar[344] = 0;
  ar[345] = 0;
  ar[346] = 0;
  ar[347] = 0;
  ar[348] = 0;
  ar[349] = 0;
  ar[350] = 0;
  ar[351] = z[277]*(z[289]*z[63] + z[299]*z[63] + z[59])/z[283];
  ar[352] = 2*z[229]*z[277]*(z[289]*z[46] + z[299]*z[46] - z[46])/z[283];
  ar[353] = -z[194]*z[271]*z[282]*(z[94] - 1);
  ar[354] = 0;
  ar[355] = 0;
  ar[356] = 0;
  ar[357] = 0;
  ar[358] = 0;
  ar[359] = 0;
  ar[360] = z[395];
  ar[361] = z[393];
  ar[362] = z[389];
  ar[363] = z[392];
  ar[364] = z[394];
  ar[365] = z[391];
  ar[366] = z[390];
  ar[367] = z[388];
  ar[368] = z[387];
  ar[369] = z[366];
  ar[370] = z[361];
  ar[371] = z[352];
  ar[372] = 0;
  ar[373] = 0;
  ar[374] = 0;
  ar[375] = z[351];
  ar[376] = z[349];
  ar[377] = z[340];
  ar[378] = 0;
  ar[379] = 0;
  ar[380] = 0;
  ar[381] = 0;
  ar[382] = 0;
  ar[383] = 0;
  ar[384] = 0;
  ar[385] = 0;
  ar[386] = 0;
  ar[387] = 0;
  ar[388] = 0;
  ar[389] = 0;
  ar[390] = z[194]*(-z[234]*z[235]*z[272]*z[281] + z[234]*z[235]*z[281]*z[65] + z[245]*z[297] + 2*z[245] + z[264]*z[272]*z[282] + z[269]*z[271]*z[282] - 4*z[274] - z[278]*z[281]*z[291]*z[63] + z[289]*z[297]*z[63] + 2*z[299]*z[65]);
  ar[391] = 2*z[194]*(z[141] + z[227]*z[257]*z[299] + z[229]*z[258]*z[271]*z[281] + z[229]*z[278]*z[291]*z[309] - z[236]*z[257]*z[291] - z[244]*z[255]*z[281] + z[244]*pow(z[291], 2)*z[46]);
  ar[392] = -2*z[194]*z[271]*(z[234]*z[235]*z[281] - z[278]*z[281]*z[291] + z[289]*z[297] - z[297] + 2*z[299] - 2);
  ar[393] = z[368];
  ar[394] = z[360];
  ar[395] = z[353];
  ar[396] = z[386];
  ar[397] = z[384];
  ar[398] = z[377];
  ar[399] = z[380];
  ar[400] = z[383];
  ar[401] = z[378];
  ar[402] = z[363];
  ar[403] = z[357];
  ar[404] = z[358];
  ar[405] = z[343];
  ar[406] = z[341];
  ar[407] = z[336];
  ar[408] = 0;
  ar[409] = 0;
  ar[410] = 0;
  ar[411] = z[348];
  ar[412] = z[346];
  ar[413] = 0;
  ar[414] = 0;
  ar[415] = 0;
  ar[416] = 0;
  ar[417] = 0;
  ar[418] = 0;
  ar[419] = 0;
  ar[420] = 0;
  ar[421] = 0;
  ar[422] = 0;
  ar[423] = 0;
  ar[424] = 0;
  ar[425] = 0;
  ar[426] = z[368];
  ar[427] = z[360];
  ar[428] = z[353];
  ar[429] = z[194]*(-2*z[272] + z[59]);
  ar[430] = z[195]*z[229]*(-z[255] + z[46]);
  ar[431] = 0;

  delete [] z;
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gif_ud_zero(double ar[12]) const;
void Bicycle::gif_ud_zero(double ar[12]) const
{
  double * z = new double[111];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(z[0], 2);
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = state_[10] + state_[8]*z[0];
  z[11] = pow(z[10], 2);
  z[12] = -z[10];
  z[13] = z[7] + z[9];
  z[14] = state_[8]*z[3]*z[4] + state_[9]*z[1];
  z[15] = state_[8]*z[1]*z[3] - state_[9]*z[4];
  z[16] = -state_[12] - z[10];
  z[17] = -z[14];
  z[18] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[19] = -z[18];
  z[20] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[21] = sqrt(z[13]*z[8]);
  z[22] = -state_[11] - z[14];
  z[23] = z[7]*z[8] + z[8]*z[9];
  z[24] = sqrt(z[23]);
  z[25] = pow(z[23], 3.0/2.0);
  z[26] = state_[10]*z[1]*z[4]*z[8] + state_[9]*z[0]*z[3]*z[9];
  z[27] = state_[9]*z[0]*z[3]*z[7] + state_[9]*z[0]*z[3]*z[9];
  z[28] = -state_[10]*state_[8]*z[1]*z[3] + state_[10]*state_[9]*z[4] - state_[8]*state_[9]*z[0]*z[4];
  z[29] = -state_[10]*state_[8]*z[3]*z[4] - state_[10]*state_[9]*z[1] + state_[8]*state_[9]*z[0]*z[1];
  z[30] = -z[12]*z[5] + z[15]*z[2];
  z[31] = -z[12]*z[2] - z[15]*z[5];
  z[32] = -z[30];
  z[33] = -rear_.a*z[17] + rear_.b*z[15];
  z[34] = -rear_.Ixx*z[15] - rear_.Ixz*z[17];
  z[35] = -rear_.Ixz*z[15] - rear_.Izz*z[17];
  z[36] = -state_[13] - z[30];
  z[37] = rear_.R*z[1]*z[3]/z[24] + rear_.r*z[1]*z[3];
  z[38] = -rear_.R*z[3]*z[4]/z[24] - rear_.r*z[3]*z[4];
  z[39] = -state_[10]*z[3]*z[4]*z[5] + state_[11]*z[0]*z[5] + state_[11]*z[1]*z[2]*z[3] + state_[9]*z[0]*z[1]*z[5] + state_[9]*z[2]*z[3];
  z[40] = state_[10]*z[2]*z[3]*z[4] - state_[11]*z[0]*z[2] + state_[11]*z[1]*z[3]*z[5] - state_[9]*z[0]*z[1]*z[2] + state_[9]*z[3]*z[5];
  z[41] = -2*state_[10]*z[3]*z[4]*z[5] + 2*state_[11]*z[0]*z[5] + 2*state_[11]*z[1]*z[2]*z[3] + 2*state_[9]*z[0]*z[1]*z[5] + 2*state_[9]*z[2]*z[3];
  z[42] = front_.Ixx*z[31] - front_.Ixz*z[22];
  z[43] = front_.Ixz*z[31] - front_.Izz*z[22];
  z[44] = -front_.R*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.r*z[3]*z[4];
  z[45] = -front_.a*z[22] - front_.b*z[31];
  z[46] = state_[11]*z[12]*z[2] + state_[11]*z[15]*z[5] + state_[8]*state_[9]*z[3]*z[5] - z[2]*z[29];
  z[47] = -state_[11]*z[12]*z[5] + state_[11]*z[15]*z[2] + state_[8]*state_[9]*z[2]*z[3] + z[29]*z[5];
  z[48] = -front_.R*z[19]/sqrt(pow(z[19], 2) + z[8]*z[9]) - front_.r*z[19];
  z[49] = -z[19]*z[39] + z[26];
  z[50] = -z[19]*z[41]/2 + z[26];
  z[51] = 2*state_[10]*z[1]*z[4]*z[8] + 2*state_[9]*z[0]*z[3]*z[9] - z[19]*z[41];
  z[52] = front_.R*state_[10]*z[1]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.R*state_[9]*z[0]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.r*state_[10]*z[1]*z[3] + front_.r*state_[9]*z[0]*z[4];
  z[53] = rear_.Iyy*state_[8]*state_[9]*z[3] + z[15]*z[35] - z[17]*z[34];
  z[54] = front_.R*z[39]/sqrt(pow(z[19], 2) + z[8]*z[9]) + front_.r*z[39];
  z[55] = rear_.Ixx*z[29] + rear_.Ixz*z[28] - rear_.Iyy*z[12]*z[17] + rear_.J*state_[12]*z[17] - z[12]*z[35];
  z[56] = rear_.R*state_[10]*z[1]*z[3]/z[24] + rear_.R*state_[9]*z[0]*z[4]/z[24] - rear_.R*z[27]*z[3]*z[4]/z[25] + rear_.r*state_[10]*z[1]*z[3] + rear_.r*state_[9]*z[0]*z[4];
  z[57] = rear_.R*state_[10]*z[3]*z[4]/z[24] - rear_.R*state_[9]*z[0]*z[1]/z[24] + rear_.R*z[1]*z[27]*z[3]/z[25] + rear_.r*state_[10]*z[3]*z[4] - rear_.r*state_[9]*z[0]*z[1];
  z[58] = -rear_.r*z[0]*z[17] + state_[14]*z[3]*z[4]/z[24] + state_[15]*z[0]*z[1]*z[3]/z[24] - state_[16]*z[1]*z[3] - z[16]*z[38];
  z[59] = rear_.Ixz*z[29] + rear_.Iyy*z[12]*z[15] + rear_.Izz*z[28] - rear_.J*state_[12]*z[15] + z[12]*z[34];
  z[60] = rear_.r*z[0]*z[15] + state_[14]*z[1]*z[3]/z[24] - state_[15]*z[0]*z[3]*z[4]/z[24] + state_[16]*z[3]*z[4] + z[16]*z[37];
  z[61] = state_[15]*(z[7]*z[8]/z[24] + z[8]*z[9]/z[24]) + state_[16]*z[0] + z[15]*z[38] - z[17]*z[37];
  z[62] = front_.Iyy*z[46] - z[22]*z[42] - z[31]*z[43];
  z[63] = -front_.R*z[3]*z[4]*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) + z[52];
  z[64] = front_.r*z[20]*z[22] + state_[17]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[19]*z[20]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[19]*z[19] - z[36]*z[44];
  z[65] = front_.Ixx*z[47] + front_.Ixz*z[28] - front_.Iyy*z[22]*z[32] + front_.J*state_[13]*z[22] - z[32]*z[43];
  z[66] = front_.R*z[19]*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) + z[54];
  z[67] = front_.r*z[20]*z[31] - state_[17]*z[19]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[20]*z[3]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[19]*z[3]*z[4] + z[36]*z[48];
  z[68] = front_.Ixz*z[47] - front_.Iyy*z[31]*z[32] + front_.Izz*z[28] + front_.J*state_[13]*z[31] + z[32]*z[42];
  z[69] = state_[18]*(pow(z[19], 2)/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[8]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9])) - state_[19]*z[20] - z[22]*z[48] - z[31]*z[44];
  z[70] = -rear_.a*z[11] + rear_.b*state_[8]*state_[9]*z[3] - rear_.r*state_[9]*z[17]*z[3] + rear_.r*z[0]*z[28] - state_[10]*state_[14]*z[1]*z[3]/z[24] + state_[10]*state_[15]*z[0]*z[3]*z[4]/z[24] - state_[10]*state_[16]*z[3]*z[4] - state_[14]*state_[9]*z[0]*z[4]/z[24] + state_[14]*z[27]*z[3]*z[4]/z[25] - state_[15]*state_[9]*z[1]*z[6]/z[24] + state_[15]*state_[9]*z[1]*z[8]/z[24] + state_[15]*z[0]*z[1]*z[27]*z[3]/z[25] + state_[16]*state_[9]*z[0]*z[1] + state_[8]*state_[9]*z[3]*z[38] - z[12]*z[60] - z[16]*z[56] + z[17]*z[33] + z[17]*z[61];
  z[71] = rear_.a*state_[8]*state_[9]*z[3] + rear_.b*z[11] - rear_.r*state_[9]*z[15]*z[3] + rear_.r*z[0]*z[29] - state_[10]*state_[14]*z[3]*z[4]/z[24] - state_[10]*state_[15]*z[0]*z[1]*z[3]/z[24] + state_[10]*state_[16]*z[1]*z[3] + state_[14]*state_[9]*z[0]*z[1]/z[24] - state_[14]*z[1]*z[27]*z[3]/z[25] - state_[15]*state_[9]*z[4]*z[6]/z[24] + state_[15]*state_[9]*z[4]*z[8]/z[24] + state_[15]*z[0]*z[27]*z[3]*z[4]/z[25] + state_[16]*state_[9]*z[0]*z[4] + state_[8]*state_[9]*z[3]*z[37] - z[12]*z[58] + z[15]*z[33] + z[15]*z[61] - z[16]*z[57];
  z[72] = z[70];
  z[73] = -z[71];
  z[74] = -z[71];
  z[75] = rear_.a*z[12]*z[15] + rear_.a*z[28] + rear_.b*z[12]*z[17] - rear_.b*z[29] - state_[15]*(2*state_[9]*z[0]*z[3]*z[7]/z[24] + 2*state_[9]*z[0]*z[3]*z[9]/z[24] - z[27]*z[7]*z[8]/z[25] - z[27]*z[8]*z[9]/z[25]) + state_[16]*state_[9]*z[3] + z[15]*z[56] + z[15]*z[60] - z[17]*z[57] - z[17]*z[58] + z[28]*z[37] - z[29]*z[38];
  z[76] = front_.a*z[28] - front_.a*z[31]*z[32] + front_.b*z[22]*z[32] - front_.b*z[47] + state_[18]*(-2*state_[10]*z[1]*z[4]*z[8]/sqrt(pow(z[19], 2) + z[8]*z[9]) - 2*state_[9]*z[0]*z[3]*z[9]/sqrt(pow(z[19], 2) + z[8]*z[9]) + pow(z[19], 2)*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) + 2*z[19]*z[39]/sqrt(pow(z[19], 2) + z[8]*z[9]) + z[49]*z[8]*z[9]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0)) + state_[19]*z[40] - z[22]*z[64] + z[22]*z[66] + z[28]*z[48] - z[31]*z[63] - z[44]*z[47];
  z[77] = -front_.a*pow(z[32], 2) + front_.b*z[46] - front_.r*z[20]*z[28] - front_.r*z[22]*z[40] - state_[10]*state_[17]*z[1]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[17]*state_[9]*z[0]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[17]*z[3]*z[4]*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) + state_[18]*z[19]*z[20]*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) - state_[18]*z[19]*z[40]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[20]*z[39]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[19]*z[39] + z[22]*z[45] + z[22]*z[69] - z[32]*z[67] - z[36]*z[63] + z[44]*z[46];
  z[78] = -front_.a*z[46] - front_.b*pow(z[32], 2) + front_.r*z[20]*z[47] - front_.r*z[31]*z[40] - state_[10]*state_[18]*z[1]*z[20]*z[3]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[10]*state_[19]*z[1]*z[3] - state_[17]*z[19]*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) - state_[17]*z[39]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[18]*state_[9]*z[0]*z[20]*z[4]/sqrt(pow(z[19], 2) + z[8]*z[9]) + state_[18]*z[20]*z[3]*z[4]*z[49]/pow(pow(z[19], 2) + z[8]*z[9], 3.0/2.0) - state_[18]*z[3]*z[4]*z[40]/sqrt(pow(z[19], 2) + z[8]*z[9]) - state_[19]*state_[9]*z[0]*z[4] + z[31]*z[45] + z[31]*z[69] + z[32]*z[64] - z[36]*z[66] - z[46]*z[48];
  z[79] = z[31]*z[67] - z[76];
  z[80] = -front_.R;
  z[81] = -front_.a;
  z[82] = -front_.b;
  z[83] = -rear_.b;
  z[84] = -front_.m;
  z[85] = -rear_.m;
  z[86] = -state_[19];
  z[87] = -z[4]*z[81];
  z[88] = -z[2]*z[82];
  z[89] = -z[5]*z[82];
  z[90] = rear_.r*z[0];
  z[91] = state_[10]*z[1];
  z[92] = state_[9]*z[3];
  z[93] = -z[0];
  z[94] = -z[1];
  z[95] = -z[2];
  z[96] = -z[4];
  z[97] = -z[5];
  z[98] = -z[3]*z[94];
  z[99] = -z[3]*z[96];
  z[100] = -state_[9]*z[4]*z[93];
  z[101] = z[8]*z[9];
  z[102] = -front_.r*z[20];
  z[103] = -z[93]/z[21];
  z[104] = state_[17]/sqrt(z[101] + pow(z[19], 2));
  z[105] = state_[18]/sqrt(z[101] + pow(z[19], 2));
  z[106] = front_.r*z[40];
  z[107] = -z[20]/sqrt(z[101] + pow(z[19], 2));
  z[108] = z[44]*z[96];
  z[109] = z[104]*z[51]/(2*z[101] + 2*pow(z[19], 2));
  z[110] = -z[105]*z[20]*z[51]/(2*z[101] + 2*pow(z[19], 2));

  ar[0] = -z[19]*z[65] + z[20]*z[62] + z[53]*z[93] + z[55]*z[98] - z[59]*z[99] - z[68]*z[99] + z[84]*(z[77]*(z[102]*z[99] - z[20]*z[44] + z[20]*z[82]) + z[78]*(-z[102]*z[19] + z[20]*z[48] - z[20]*z[81]) - z[79]*(-z[19]*z[44] + z[19]*z[82] + z[3]*z[87] + z[48]*z[99])) + z[85]*(z[70]*(-z[38]*z[93] + z[83]*z[93] + z[90]*z[99]) - z[74]*(-rear_.a*z[93] - z[37]*z[93] - z[90]*z[98]) + z[75]*(rear_.a*z[99] + z[37]*z[99] + z[38]*z[98] - z[83]*z[98]));
  ar[1] = z[55]*z[96] + z[59]*z[94] + z[62]*z[95]*z[96] - z[65]*z[96]*z[97] + z[68]*z[94] + z[84]*(z[77]*(-z[102]*z[94] - z[108]*z[95] + z[88]*z[96]) + z[78]*(-z[102]*z[96]*z[97] + z[48]*z[95]*z[96] - z[87]*z[95]) - z[79]*(-z[108]*z[97] - z[48]*z[94] + z[81]*z[94] + z[89]*z[96])) + z[85]*(-z[70]*z[90]*z[94] + z[74]*z[90]*z[96] + z[75]*(-rear_.a*z[94] - z[37]*z[94] + z[38]*z[96] - z[83]*z[96]));
  ar[2] = -z[53] + z[62]*z[97] + z[65]*z[95] + z[84]*(z[77]*(-z[44]*z[97] + z[89]) + z[78]*(z[102]*z[95] + z[48]*z[97] - z[81]*z[97]) + z[79]*(-z[44]*z[95] + z[88])) + z[85]*(-z[70]*(-z[38] + z[83]) - z[74]*(rear_.a + z[37]));
  ar[3] = -z[68] + z[84]*(z[102]*z[77] + z[79]*(-z[48] + z[81]));
  ar[4] = -rear_.J*state_[8]*z[92] - z[85]*(z[37]*z[74] - z[38]*z[70]);
  ar[5] = -front_.J*z[46] + z[84]*(z[44]*z[77] - z[48]*z[78]);
  ar[6] = z[3]*z[85]*(-z[72]*z[96] - z[73]*z[94])/z[21];
  ar[7] = z[3]*z[85]*(-z[103]*z[72]*z[94] + z[103]*z[73]*z[96] + z[13]*z[3]*z[75]/z[24]);
  ar[8] = z[85]*(-z[72]*z[98] + z[73]*z[99] - z[75]*z[93]);
  ar[9] = -z[84]*(z[19]*z[78] - z[77]*z[99])/sqrt(z[101] + pow(z[19], 2));
  ar[10] = z[84]*(-z[107]*z[19]*z[77] - z[107]*z[78]*z[99] - z[79]*sqrt(z[101] + pow(z[19], 2)));
  ar[11] = z[84]*(z[19]*(-z[100]*z[104] + z[102]*z[28] - z[104]*z[3]*z[91] - z[105]*z[19]*z[40] + z[105]*z[20]*z[39] - z[106]*z[22] + z[109]*z[99] - z[110]*z[19] + z[22]*z[45] + z[22]*z[69] + pow(z[32], 2)*z[81] - z[32]*z[67] - z[36]*(z[50]*z[80]*z[99]/pow(z[101] + pow(z[19], 2), 3.0/2.0) + z[52]) - z[39]*z[86] + z[44]*z[46] - z[46]*z[82]) - z[20]*(-z[31]*z[67] + z[76]) + z[99]*(-z[100]*z[105]*z[20] + z[100]*z[86] - z[102]*z[47] - z[104]*z[39] - z[105]*z[20]*z[3]*z[91] + z[105]*z[3]*z[40]*z[96] - z[106]*z[31] - z[109]*z[19] + z[110]*z[3]*z[96] + z[3]*z[86]*z[91] + z[31]*z[45] + z[31]*z[69] + pow(z[32], 2)*z[82] + z[32]*z[64] - z[36]*(-z[19]*z[50]*z[80]/pow(z[101] + pow(z[19], 2), 3.0/2.0) + z[54]) - z[46]*z[48] + z[46]*z[81]));

  delete [] z;
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gif_ud_zero_steady(double ar[12]) const;
void Bicycle::gif_ud_zero_steady(double ar[12]) const
{
  double * z = new double[84];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = pow(state_[8], 2);
  z[7] = pow(z[0], 2);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[4], 2);
  z[11] = state_[12] + state_[8]*z[0];
  z[12] = z[10] + z[8];
  z[13] = z[0]*z[2] - z[1]*z[3]*z[5];
  z[14] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[15] = state_[8]*z[0]*z[5] + state_[8]*z[1]*z[2]*z[3];
  z[16] = sqrt(z[12]*z[9]);
  z[17] = state_[8]*z[0]*z[2] - state_[8]*z[1]*z[3]*z[5];
  z[18] = rear_.Ixx*state_[8]*z[1]*z[3] - rear_.Ixz*state_[8]*z[3]*z[4];
  z[19] = rear_.Ixz*state_[8]*z[1]*z[3] - rear_.Izz*state_[8]*z[3]*z[4];
  z[20] = -z[15];
  z[21] = -rear_.a*state_[8]*z[3]*z[4] - rear_.b*state_[8]*z[1]*z[3];
  z[22] = -state_[13] - z[15];
  z[23] = sqrt(z[10]*z[9] + z[8]*z[9]);
  z[24] = front_.Ixx*z[17] + front_.Ixz*state_[8]*z[3]*z[4];
  z[25] = front_.Ixz*z[17] + front_.Izz*state_[8]*z[3]*z[4];
  z[26] = front_.a*state_[8]*z[3]*z[4] - front_.b*z[17];
  z[27] = sqrt(z[10]*z[9] + pow(z[13], 2));
  z[28] = rear_.R*z[1]*z[3]/z[23] + rear_.r*z[1]*z[3];
  z[29] = -rear_.R*z[3]*z[4]/z[23] - rear_.r*z[3]*z[4];
  z[30] = -rear_.Iyy*state_[8]*z[0]*z[1]*z[3] - rear_.J*state_[12]*z[1]*z[3] + z[0]*z[18];
  z[31] = -rear_.Iyy*state_[8]*z[0]*z[3]*z[4] - rear_.J*state_[12]*z[3]*z[4] - z[0]*z[19];
  z[32] = front_.R*z[3]*z[4]/z[27] + front_.r*z[3]*z[4];
  z[33] = rear_.r*state_[8]*z[0]*z[1]*z[3] - z[11]*z[28];
  z[34] = rear_.r*state_[8]*z[0]*z[3]*z[4] + z[11]*z[29];
  z[35] = front_.R*z[13]/z[27] + front_.r*z[13];
  z[36] = -front_.Iyy*state_[8]*z[20]*z[3]*z[4] + front_.J*state_[13]*state_[8]*z[3]*z[4] + z[20]*z[25];
  z[37] = state_[8]*z[24]*z[3]*z[4] - z[17]*z[25];
  z[38] = -front_.r*state_[8]*z[14]*z[3]*z[4] + z[22]*z[32];
  z[39] = state_[8]*z[1]*z[29]*z[3] + state_[8]*z[28]*z[3]*z[4];
  z[40] = -front_.Iyy*z[17]*z[20] + front_.J*state_[13]*z[17] + z[20]*z[24];
  z[41] = front_.r*z[14]*z[17] - z[22]*z[35];
  z[42] = -rear_.a*state_[8]*z[0]*z[1] + rear_.b*state_[8]*z[0]*z[4] + z[1]*z[33] + z[34]*z[4];
  z[43] = -state_[8]*z[3]*z[35]*z[4] + z[17]*z[32];
  z[44] = -rear_.a*z[0]*z[1]*z[3]*z[6] + rear_.b*z[0]*z[3]*z[4]*z[6] + state_[8]*z[1]*z[3]*z[33] + state_[8]*z[3]*z[34]*z[4];
  z[45] = -front_.a*z[17]*z[20] - front_.b*state_[8]*z[20]*z[3]*z[4] + state_[8]*z[3]*z[38]*z[4];
  z[46] = -rear_.a*state_[8]*z[7] + z[0]*z[33] + z[21]*z[3]*z[4] - z[3]*z[39]*z[4];
  z[47] = -state_[8]*(rear_.b*state_[8]*z[7] + z[0]*z[34] - z[1]*z[21]*z[3] + z[1]*z[3]*z[39]);
  z[48] = -rear_.b*state_[8]*z[7] - z[0]*z[34] + z[1]*z[21]*z[3] - z[1]*z[3]*z[39];
  z[49] = state_[8]*z[46];
  z[50] = -rear_.a*z[6]*z[7] + state_[8]*z[0]*z[33] + state_[8]*z[21]*z[3]*z[4] - state_[8]*z[3]*z[39]*z[4];
  z[51] = -rear_.b*z[6]*z[7] - state_[8]*z[0]*z[34] + state_[8]*z[1]*z[21]*z[3] - state_[8]*z[1]*z[3]*z[39];
  z[52] = -z[17]*z[41] + z[45];
  z[53] = z[17]*z[41] - z[45];
  z[54] = -front_.b*pow(z[20], 2) + z[17]*z[26] + z[17]*z[43] + z[20]*z[38];
  z[55] = z[54];
  z[56] = -front_.a*pow(z[20], 2) - state_[8]*z[26]*z[3]*z[4] - state_[8]*z[3]*z[4]*z[43] - z[20]*z[41];
  z[57] = -front_.a*pow(z[20], 2) - state_[8]*z[26]*z[3]*z[4] - state_[8]*z[3]*z[4]*z[43] - z[20]*z[41];
  z[58] = -front_.a;
  z[59] = -rear_.a;
  z[60] = -front_.b;
  z[61] = -rear_.b;
  z[62] = -front_.m;
  z[63] = -rear_.m;
  z[64] = -front_.r;
  z[65] = -state_[8];
  z[66] = -z[4]*z[58];
  z[67] = -z[2]*z[60];
  z[68] = -z[5]*z[60];
  z[69] = rear_.r*z[0];
  z[70] = -z[3]*z[65];
  z[71] = -z[0];
  z[72] = -z[1];
  z[73] = -z[4];
  z[74] = -z[5];
  z[75] = -z[3]*z[72];
  z[76] = -z[3]*z[73];
  z[77] = z[73]*z[74];
  z[78] = z[6]*z[9];
  z[79] = z[14]*z[64];
  z[80] = -z[71]/z[16];
  z[81] = -z[13]*z[14];
  z[82] = front_.R/z[27];
  z[83] = z[2]*z[32];

  ar[0] = z[0]*z[3]*z[65]*(z[18]*z[73] + z[19]*z[72]) + z[13]*z[36] + z[14]*z[37] + z[30]*z[70]*z[73] - z[31]*z[70]*z[72] - z[40]*z[76] + z[62]*(-z[53]*(z[13]*z[32] + z[13]*z[60] + z[3]*z[66] - z[35]*z[76]) + z[54]*(-z[13]*z[79] - z[14]*z[35] - z[14]*z[58]) + z[57]*(z[14]*z[32] + z[14]*z[60] + z[76]*z[79])) + z[63]*(z[44]*(z[28]*z[76] + z[29]*z[75] - z[59]*z[76] - z[61]*z[75]) + z[50]*(-z[0]*z[61] - z[29]*z[71] + z[69]*z[76]) - z[51]*(-z[0]*z[59] - z[28]*z[71] - z[69]*z[75]));
  ar[1] = -z[2]*z[37]*z[73] - z[30]*z[65]*z[72] + z[31]*z[4]*z[65] + z[36]*z[77] + z[40]*z[72] + z[62]*(-z[53]*(z[32]*z[77] + z[35]*z[72] + z[58]*z[72] + z[68]*z[73]) + z[54]*(z[2]*z[35]*z[73] + z[2]*z[66] - z[77]*z[79]) + z[57]*(z[67]*z[73] - z[72]*z[79] - z[73]*z[83])) + z[63]*(z[44]*(-z[28]*z[72] + z[29]*z[73] + z[59]*z[72] - z[61]*z[73]) - z[50]*z[69]*z[72] + z[51]*z[69]*z[73]);
  ar[2] = z[2]*z[36] + z[37]*z[74] + z[62]*(z[52]*(-z[67] + z[83]) + z[55]*(-z[2]*z[79] - z[35]*z[74] - z[58]*z[74]) + z[56]*(z[32]*z[74] + z[68])) + z[63]*(-z[50]*(-z[29] + z[61]) - z[51]*(z[28] - z[59])) - z[72]*z[78]*(rear_.Ixz*z[1] + rear_.Izz*z[73]) - z[73]*z[78]*(rear_.Ixx*z[1] + rear_.Ixz*z[73]);
  ar[3] = -front_.Iyy*z[6]*z[81] + front_.J*state_[13]*z[13]*z[65] + z[14]*z[24]*z[65] + z[62]*(z[53]*(z[35] + z[58]) + z[57]*z[79]);
  ar[4] = -z[63]*z[70]*(rear_.R/z[23] + rear_.r)*(-z[46]*z[73] - z[48]*z[72]);
  ar[5] = z[62]*(z[13]*z[55]*(-z[64] + z[82]) + z[56]*z[76]*(z[64] - z[82]));
  ar[6] = z[3]*z[63]*(-z[47]*z[72] - z[49]*z[73])/z[16];
  ar[7] = z[3]*z[63]*(-z[12]*z[42]*z[65]*z[9]/z[23] + z[47]*z[73]*z[80] - z[49]*z[72]*z[80]);
  ar[8] = -z[63]*z[70]*(z[42]*z[71] - z[46]*z[72] + z[48]*z[73]);
  ar[9] = -z[62]*(z[13]*z[54] - z[57]*z[76])/z[27];
  ar[10] = z[62]*(z[14]*z[54]*z[76]/z[27] - z[27]*z[53] - z[57]*z[81]/z[27]);
  ar[11] = z[62]*(z[13]*z[56] - z[14]*z[52] + z[55]*z[76]);

  delete [] z;
}

/** Computes the n-d array of shape (12, 3)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::gif_ud_zero_dq(double ar[36]) const;
void Bicycle::gif_ud_zero_dq(double ar[36]) const
{
  double * z = new double[384];

  z[0] = -2;
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = sin(state_[3]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = cos(state_[3]);
  z[7] = pow(z[1], -z[0]);
  z[8] = pow(z[2], -z[0]);
  z[9] = pow(z[4], -z[0]);
  z[10] = pow(z[5], -z[0]);
  z[11] = state_[10] + state_[8]*z[1];
  z[12] = pow(z[11], -z[0]);
  z[13] = -z[11];
  z[14] = z[10] + z[8];
  z[15] = state_[8]*z[4]*z[5] + state_[9]*z[2];
  z[16] = state_[8]*z[2]*z[4] - state_[9]*z[5];
  z[17] = -state_[12] - z[11];
  z[18] = -z[15];
  z[19] = z[1]*z[3] - z[2]*z[4]*z[6];
  z[20] = z[1]*z[2]*z[3] - z[4]*z[6];
  z[21] = -z[1]*z[6] - z[2]*z[3]*z[4];
  z[22] = -z[0]*z[1]*z[6] - z[0]*z[2]*z[3]*z[4];
  z[23] = -z[1]*z[2]*z[6] - z[3]*z[4];
  z[24] = -z[0]*z[1]*z[2]*z[6] - z[0]*z[3]*z[4];
  z[25] = rear_.a*state_[8]*z[1]*z[5] + rear_.b*state_[8]*z[1]*z[2];
  z[26] = state_[8]*z[1]*z[2]*z[6] + state_[8]*z[3]*z[4];
  z[27] = sqrt(z[14]*z[9]);
  z[28] = pow(z[14]*z[9], 3.0/2.0);
  z[29] = pow(z[19], -z[0]);
  z[30] = pow(z[19], 3);
  z[31] = rear_.Ixx*state_[8]*z[1]*z[2] - rear_.Ixz*state_[8]*z[1]*z[5];
  z[32] = rear_.Ixz*state_[8]*z[1]*z[2] - rear_.Izz*state_[8]*z[1]*z[5];
  z[33] = state_[10]*state_[8]*z[1]*z[2] - state_[8]*state_[9]*z[4]*z[5];
  z[34] = state_[8]*z[1]*z[2]*z[3] - state_[8]*z[4]*z[6];
  z[35] = -state_[11] - z[15];
  z[36] = -state_[10]*state_[8]*z[1]*z[5] - state_[8]*state_[9]*z[2]*z[4];
  z[37] = z[10]*z[9] + z[8]*z[9];
  z[38] = z[1]*z[10]*z[4] + z[1]*z[4]*z[8];
  z[39] = sqrt(z[37]);
  z[40] = pow(z[37], 3.0/2.0);
  z[41] = pow(z[37], 5.0/2.0);
  z[42] = 3*z[1]*z[10]*z[4] + 3*z[1]*z[4]*z[8];
  z[43] = state_[10]*z[2]*z[5]*z[9] + state_[9]*z[1]*z[10]*z[4];
  z[44] = state_[9]*z[1]*z[10]*z[4] + state_[9]*z[1]*z[4]*z[8];
  z[45] = state_[9]*z[10]*z[7] - state_[9]*z[10]*z[9];
  z[46] = -state_[10]*state_[8]*z[2]*z[4] + state_[10]*state_[9]*z[5] - state_[8]*state_[9]*z[1]*z[5];
  z[47] = -state_[10]*state_[8]*z[4]*z[5] - state_[10]*state_[9]*z[2] + state_[8]*state_[9]*z[1]*z[2];
  z[48] = z[19]*z[6] + z[2]*z[4];
  z[49] = -z[13]*z[6] + z[16]*z[3];
  z[50] = front_.a*state_[8]*z[1]*z[5] + front_.b*z[26];
  z[51] = front_.Ixx*z[26] - front_.Ixz*state_[8]*z[1]*z[5];
  z[52] = front_.Ixz*z[26] - front_.Izz*state_[8]*z[1]*z[5];
  z[53] = -z[13]*z[3] - z[16]*z[6];
  z[54] = z[10]*z[9] + z[29];
  z[55] = state_[10]*z[2]*z[3]*z[4] - state_[11]*z[4]*z[5]*z[6] + state_[9]*z[1]*z[3]*z[5];
  z[56] = -z[49];
  z[57] = -rear_.a*z[18] + rear_.b*z[16];
  z[58] = pow(z[53], -z[0]);
  z[59] = sqrt(z[54]);
  z[60] = pow(z[54], 3.0/2.0);
  z[61] = pow(z[54], 5.0/2.0);
  z[62] = -state_[10]*z[2]*z[4]*z[6] - state_[11]*z[3]*z[4]*z[5] - state_[9]*z[1]*z[5]*z[6];
  z[63] = -state_[10]*z[0]*z[2]*z[4]*z[6] - state_[11]*z[0]*z[3]*z[4]*z[5] - state_[9]*z[0]*z[1]*z[5]*z[6];
  z[64] = -rear_.Ixx*z[16] - rear_.Ixz*z[18];
  z[65] = -rear_.Ixz*z[16] - rear_.Izz*z[18];
  z[66] = -rear_.a*z[16] - rear_.b*z[18];
  z[67] = rear_.Ixx*z[18] - rear_.Ixz*z[16];
  z[68] = rear_.Ixz*z[18] - rear_.Izz*z[16];
  z[69] = -state_[13] - z[49];
  z[70] = -front_.a*z[16] - front_.b*z[18]*z[6];
  z[71] = z[19]*z[4]*z[5]*z[6] + z[2]*z[5]*z[9];
  z[72] = front_.Ixx*z[18]*z[6] - front_.Ixz*z[16];
  z[73] = front_.Ixz*z[18]*z[6] - front_.Izz*z[16];
  z[74] = 3*z[19]*z[4]*z[5]*z[6] + 3*z[2]*z[5]*z[9];
  z[75] = -state_[10]*z[10]*z[9] + state_[10]*z[8]*z[9] - state_[9]*z[0]*z[1]*z[2]*z[4]*z[5];
  z[76] = rear_.R*z[2]*z[4]/z[39] + rear_.r*z[2]*z[4];
  z[77] = rear_.R*z[4]*z[5]/z[39] + rear_.r*z[4]*z[5];
  z[78] = rear_.a + z[76];
  z[79] = -rear_.Iyy*z[13]*z[18] + rear_.J*state_[12]*z[18];
  z[80] = -rear_.b + z[77];
  z[81] = state_[10]*z[1]*z[3]*z[5] + state_[11]*z[1]*z[2]*z[6] + state_[11]*z[3]*z[4] + state_[9]*z[1]*z[6] + state_[9]*z[2]*z[3]*z[4];
  z[82] = -z[1]*z[10]*z[4] - z[19]*z[23];
  z[83] = -state_[11]*z[18]*z[3] - z[46]*z[6];
  z[84] = -state_[10]*z[1]*z[5]*z[6] + state_[11]*z[1]*z[2]*z[3] - state_[11]*z[4]*z[6] + state_[9]*z[1]*z[3] - state_[9]*z[2]*z[4]*z[6];
  z[85] = -state_[10]*z[3]*z[4]*z[5] + state_[11]*z[1]*z[3] - state_[11]*z[2]*z[4]*z[6] + state_[9]*z[1]*z[2]*z[3] - state_[9]*z[4]*z[6];
  z[86] = state_[11]*z[18]*z[6] - z[3]*z[46];
  z[87] = front_.R*z[1]*z[5]/z[59] + front_.r*z[1]*z[5];
  z[88] = state_[10]*z[4]*z[5]*z[6] - state_[11]*z[1]*z[6] - state_[11]*z[2]*z[3]*z[4] - state_[9]*z[1]*z[2]*z[6] - state_[9]*z[3]*z[4];
  z[89] = -z[1]*z[10]*z[4] + z[19]*z[24]/2;
  z[90] = -3*z[1]*z[10]*z[4] + 3*z[19]*z[24]/2;
  z[91] = state_[11]*state_[8]*z[1]*z[2]*z[6] + state_[11]*state_[8]*z[3]*z[4] + state_[8]*state_[9]*z[1]*z[6] - z[3]*z[36];
  z[92] = state_[10]*z[0]*z[4]*z[5]*z[6] - state_[11]*z[0]*z[1]*z[6] - state_[11]*z[0]*z[2]*z[3]*z[4] - state_[9]*z[0]*z[1]*z[2]*z[6] - state_[9]*z[0]*z[3]*z[4];
  z[93] = front_.Ixx*z[53] - front_.Ixz*z[35];
  z[94] = -front_.R*z[4]*z[5]/z[59] - front_.r*z[4]*z[5];
  z[95] = state_[9]*z[7]*z[8] - state_[9]*z[8]*z[9] + z[45];
  z[96] = -z[89];
  z[97] = -z[90];
  z[98] = -front_.a*z[35] - front_.b*z[53];
  z[99] = state_[11]*state_[8]*z[1]*z[2]*z[3] - state_[11]*state_[8]*z[4]*z[6] + state_[8]*state_[9]*z[1]*z[3] + z[36]*z[6];
  z[100] = -front_.Ixz*z[53] + front_.Izz*z[35];
  z[101] = rear_.r*z[1]*z[4]*z[5] - z[1]*z[77];
  z[102] = front_.b*z[3] + z[3]*z[94];
  z[103] = front_.b*z[6] + z[6]*z[94];
  z[104] = rear_.a*z[1] - rear_.r*z[1]*z[2]*z[4] + z[1]*z[76];
  z[105] = rear_.b*z[1] + z[101];
  z[106] = -front_.b*z[5]*z[6] - z[5]*z[6]*z[94];
  z[107] = -front_.R*z[21]/z[59] - front_.r*z[21];
  z[108] = state_[11]*z[13]*z[3] + state_[11]*z[16]*z[6] + state_[8]*state_[9]*z[4]*z[6] - z[3]*z[47];
  z[109] = -state_[11]*z[13]*z[6] + state_[11]*z[16]*z[3] + state_[8]*state_[9]*z[3]*z[4] + z[47]*z[6];
  z[110] = -z[109];
  z[111] = front_.R*z[23]/z[59] + front_.r*z[23];
  z[112] = -z[109];
  z[113] = -front_.R*z[19]/z[59] - front_.r*z[19];
  z[114] = -front_.b*z[3]*z[5] - front_.r*z[2]*z[21] - z[3]*z[5]*z[94];
  z[115] = -front_.b*z[19] - z[19]*z[94];
  z[116] = -z[19]*z[88] - z[43];
  z[117] = -z[19]*z[92]/2 + z[43];
  z[118] = -rear_.Iyy*state_[8]*state_[9]*z[1] - state_[8]*z[1]*z[2]*z[65] - state_[8]*z[1]*z[5]*z[64];
  z[119] = rear_.R*z[1]*z[2]/z[39] - rear_.R*z[2]*z[38]*z[4]/z[40] + rear_.r*z[1]*z[2];
  z[120] = rear_.R*z[1]*z[5]/z[39] - rear_.R*z[38]*z[4]*z[5]/z[40] + rear_.r*z[1]*z[5];
  z[121] = -state_[10]*z[0]*z[2]*z[5]*z[9] - state_[9]*z[0]*z[1]*z[10]*z[4] - z[19]*z[92];
  z[122] = -state_[19]*z[21] - z[53]*z[94];
  z[123] = rear_.a*z[2] - rear_.b*z[5] + z[2]*z[76] + z[5]*z[77];
  z[124] = front_.R*state_[10]*z[2]*z[4]/z[59] + front_.R*state_[9]*z[1]*z[5]/z[59] + front_.r*state_[10]*z[2]*z[4] + front_.r*state_[9]*z[1]*z[5];
  z[125] = -front_.R*state_[10]*z[1]*z[2]/z[59] + front_.R*state_[9]*z[4]*z[5]/z[59] - front_.r*state_[10]*z[1]*z[2] + front_.r*state_[9]*z[4]*z[5];
  z[126] = -front_.a*z[6] + front_.r*z[21]*z[3] - z[113]*z[6];
  z[127] = -front_.b*z[21] - front_.r*z[21]*z[4]*z[5] - z[21]*z[94];
  z[128] = rear_.a*z[4]*z[5] + rear_.b*z[2]*z[4] - z[2]*z[4]*z[77] + z[4]*z[5]*z[76];
  z[129] = front_.a*z[3]*z[5] + front_.r*z[21]*z[5]*z[6] + z[113]*z[3]*z[5];
  z[130] = z[0]*z[1]*z[10]*z[4]/z[59] + z[0]*z[19]*z[23]/z[59];
  z[131] = -front_.Ixz*z[99] + z[51]*z[56];
  z[132] = -z[19]*z[85] + z[21]*z[88];
  z[133] = front_.R*z[2]*z[4]/z[59] - front_.R*z[4]*z[5]*z[71]/z[60] + front_.r*z[2]*z[4];
  z[134] = -front_.R*z[88]/z[59] - front_.r*z[88];
  z[135] = front_.R*z[84]/z[59] + front_.r*z[84];
  z[136] = front_.R*z[4]*z[5]*z[82]/z[60] + z[87];
  z[137] = z[19]*(-state_[10]*z[0]*z[3]*z[4]*z[5] + state_[11]*z[0]*z[1]*z[3] - state_[11]*z[0]*z[2]*z[4]*z[6] + state_[9]*z[0]*z[1]*z[2]*z[3] - state_[9]*z[0]*z[4]*z[6])/2 - z[21]*z[92]/2;
  z[138] = front_.R*z[4]*z[5]*z[89]/z[60] + z[87];
  z[139] = front_.R*z[21]*z[29]/z[60] + z[107];
  z[140] = -z[19]*z[62] + z[4]*z[5]*z[6]*z[88] + z[75];
  z[141] = -rear_.Ixx*z[46] + rear_.Ixz*z[47] - rear_.Iyy*z[13]*z[16] + rear_.J*state_[12]*z[16] - z[13]*z[68];
  z[142] = rear_.Ixx*z[47] + rear_.Ixz*z[46] - z[13]*z[65] + z[79];
  z[143] = rear_.R*state_[10]*z[2]*z[4]/z[39] + rear_.R*state_[9]*z[1]*z[5]/z[39] - rear_.R*z[4]*z[44]*z[5]/z[40] + rear_.r*state_[10]*z[2]*z[4] + rear_.r*state_[9]*z[1]*z[5];
  z[144] = -front_.R*z[19]*z[71]/z[60] + front_.R*z[4]*z[5]*z[6]/z[59] + front_.r*z[4]*z[5]*z[6];
  z[145] = -front_.R*z[22]*z[29]/(2*z[60]) + z[107];
  z[146] = -rear_.Ixz*z[46] + rear_.Izz*z[47] + z[13]*z[67] + z[79];
  z[147] = rear_.R*state_[10]*z[4]*z[5]/z[39] - rear_.R*state_[9]*z[1]*z[2]/z[39] + rear_.R*z[2]*z[4]*z[44]/z[40] + rear_.r*state_[10]*z[4]*z[5] - rear_.r*state_[9]*z[1]*z[2];
  z[148] = front_.a*z[21] + front_.r*z[19]*z[21] + z[113]*z[21];
  z[149] = -rear_.r*z[1]*z[18] + state_[14]*z[4]*z[5]/z[39] + state_[15]*z[1]*z[2]*z[4]/z[39] - state_[16]*z[2]*z[4] + z[17]*z[77];
  z[150] = front_.a*z[2] + z[106] + z[113]*z[2];
  z[151] = rear_.Ixz*z[47] + rear_.Iyy*z[13]*z[16] + rear_.Izz*z[46] - rear_.J*state_[12]*z[16] + z[13]*z[64];
  z[152] = -rear_.r*z[1]*z[16] - state_[14]*z[2]*z[4]/z[39] + state_[15]*z[1]*z[4]*z[5]/z[39] - state_[16]*z[4]*z[5] - z[17]*z[76];
  z[153] = -state_[10]*z[0]*z[10]*z[9] + state_[10]*z[0]*z[8]*z[9] - 4*state_[9]*z[1]*z[2]*z[4]*z[5] - z[19]*z[63] + z[4]*z[5]*z[6]*z[92];
  z[154] = z[19]*z[63]/2 - z[4]*z[5]*z[6]*z[92]/2 + z[75];
  z[155] = -z[154];
  z[156] = -rear_.Ixx*z[36] + rear_.Ixz*z[33] - rear_.Iyy*state_[8]*z[1]*z[13]*z[5] + rear_.Iyy*state_[8]*z[18]*z[4] + rear_.J*state_[12]*state_[8]*z[1]*z[5] + state_[8]*z[4]*z[65] - z[13]*z[32];
  z[157] = -rear_.Ixz*z[36] - rear_.Iyy*state_[8]*z[1]*z[13]*z[2] - rear_.Iyy*state_[8]*z[16]*z[4] + rear_.Izz*z[33] + rear_.J*state_[12]*state_[8]*z[1]*z[2] - state_[8]*z[4]*z[64] + z[13]*z[31];
  z[158] = -state_[10]*z[0]*z[1]*z[2]*z[4]*z[5] - z[19]*z[84] + z[23]*z[88] + z[45];
  z[159] = front_.R*z[19]*z[82]/z[60] + z[111];
  z[160] = front_.R*z[19]*z[89]/z[60] + z[111];
  z[161] = front_.a*z[4]*z[5] + z[113]*z[4]*z[5] + z[115];
  z[162] = -state_[10]*z[0]*z[1]*z[2]*z[4]*z[5] + z[19]*(-state_[10]*z[0]*z[1]*z[5]*z[6] + state_[11]*z[0]*z[1]*z[2]*z[3] - state_[11]*z[0]*z[4]*z[6] + state_[9]*z[0]*z[1]*z[3] - state_[9]*z[0]*z[2]*z[4]*z[6])/2 - z[23]*z[92]/2 + z[45];
  z[163] = state_[15]*(z[10]*z[9]/z[39] + z[8]*z[9]/z[39]) + state_[16]*z[1] - z[16]*z[77] - z[18]*z[76];
  z[164] = -z[16]*z[64] + z[16]*z[68] - z[18]*z[65] - z[18]*z[67];
  z[165] = front_.R*z[71]*z[88]/z[60] + front_.R*z[62]/z[59] + front_.r*z[62];
  z[166] = -front_.Iyy*z[108] - z[100]*z[53] + z[35]*z[93];
  z[167] = -front_.R*z[116]*z[4]*z[5]/z[60] - z[124];
  z[168] = -front_.R*z[117]*z[4]*z[5]/z[60] + z[124];
  z[169] = front_.Ixx*z[108] + front_.Ixz*pow(-z[56], -z[0]) - front_.Iyy*z[35]*z[53] + z[100]*z[53];
  z[170] = front_.r*z[21]*z[35] + state_[17]*z[4]*z[5]/z[59] + state_[18]*z[19]*z[21]/z[59] + state_[19]*z[19] - z[69]*z[94];
  z[171] = -front_.Ixx*z[112] + front_.Ixz*z[46] - front_.Iyy*z[35]*z[56] + front_.J*state_[13]*z[35] + z[100]*z[56];
  z[172] = front_.R*state_[10]*z[2]*z[4]*z[71]/z[60] + front_.R*state_[10]*z[4]*z[5]/z[59] - front_.R*state_[9]*z[1]*z[2]/z[59] + front_.R*state_[9]*z[1]*z[5]*z[71]/z[60] + front_.r*state_[10]*z[4]*z[5] - front_.r*state_[9]*z[1]*z[2];
  z[173] = front_.Ixx*z[35]*z[56] + front_.Ixz*z[53]*z[56] + front_.Iyy*z[112] - z[100]*z[56];
  z[174] = -front_.R*z[116]*z[19]/z[60] + z[134];
  z[175] = front_.r*z[21]*z[53] - state_[17]*z[19]/z[59] + state_[18]*z[21]*z[4]*z[5]/z[59] + state_[19]*z[4]*z[5] + z[113]*z[69];
  z[176] = z[175];
  z[177] = front_.R*z[117]*z[19]/z[60] + z[134];
  z[178] = -front_.Ixz*z[112] - front_.Iyy*z[53]*z[56] + front_.Izz*z[46] + front_.J*state_[13]*z[53] + z[56]*z[93];
  z[179] = state_[18]*(z[10]*z[9]/z[59] + z[29]/z[59]) - z[113]*z[35] + z[122];
  z[180] = -front_.Iyy*z[91] - state_[8]*z[1]*z[5]*z[93] + z[100]*z[26] - z[35]*z[51] - z[52]*z[53];
  z[181] = -front_.Ixx*z[99] + front_.Ixz*z[33] - front_.Iyy*state_[8]*z[1]*z[5]*z[56] - front_.Iyy*z[34]*z[35] + front_.J*state_[13]*state_[8]*z[1]*z[5] + z[100]*z[34] - z[52]*z[56];
  z[182] = -front_.Ixx*pow(-z[56], -z[0]) + front_.Ixz*z[108] - front_.Iyy*z[58] + front_.Iyy*pow(-z[56], -z[0]) - front_.J*state_[13]*z[56] + z[53]*z[93];
  z[183] = -front_.Iyy*z[86] + z[100]*z[18]*z[6] - z[16]*z[93] - z[35]*z[72] - z[53]*z[73];
  z[184] = front_.Ixx*z[83] + front_.Ixz*z[47] - front_.Iyy*z[16]*z[56] - front_.Iyy*z[18]*z[3]*z[35] + front_.J*state_[13]*z[16] + z[100]*z[18]*z[3] - z[56]*z[73];
  z[185] = front_.r*state_[8]*z[1]*z[21]*z[5] + front_.r*z[20]*z[35] - state_[17]*z[1]*z[5]/z[59] + state_[18]*z[19]*z[20]/z[59] - state_[18]*z[21]*z[23]/z[59] - state_[19]*z[23] - z[34]*z[94];
  z[186] = 4*state_[10]*z[1]*z[2]*z[4]*z[5]/z[59] - state_[9]*z[0]*z[10]*z[7]/z[59] + state_[9]*z[0]*z[10]*z[9]/z[59] + z[0]*z[19]*z[84]/z[59] - z[0]*z[23]*z[88]/z[59];
  z[187] = front_.Ixz*z[83] - front_.Iyy*z[18]*z[3]*z[53] - front_.Iyy*z[18]*z[56]*z[6] + front_.Izz*z[47] + front_.J*state_[13]*z[18]*z[6] + z[18]*z[3]*z[93] + z[56]*z[72];
  z[188] = -state_[19]*z[20] - state_[8]*z[1]*z[113]*z[5] - z[136]*z[53] - z[26]*z[94];
  z[189] = -front_.Iyy*z[26]*z[56] - front_.Iyy*z[34]*z[53] + front_.Izz*z[33] + front_.J*state_[13]*z[26] + z[131] + z[34]*z[93];
  z[190] = -rear_.R*state_[10]*z[1]*z[2]/z[39] + rear_.R*state_[10]*z[2]*z[38]*z[4]/z[40] + rear_.R*state_[9]*z[1]*z[38]*z[5]/z[40] + rear_.R*state_[9]*z[4]*z[5]/z[39] + rear_.R*z[1]*z[44]*z[5]/z[40] + rear_.R*z[4]*z[5]*z[95]/z[40] - rear_.r*state_[10]*z[1]*z[2] + rear_.r*state_[9]*z[4]*z[5];
  z[191] = -rear_.R*state_[10]*z[1]*z[5]/z[39] + rear_.R*state_[10]*z[38]*z[4]*z[5]/z[40] - rear_.R*state_[9]*z[1]*z[2]*z[38]/z[40] - rear_.R*state_[9]*z[2]*z[4]/z[39] - rear_.R*z[1]*z[2]*z[44]/z[40] - rear_.R*z[2]*z[4]*z[95]/z[40] - rear_.r*state_[10]*z[1]*z[5] - rear_.r*state_[9]*z[2]*z[4];
  z[192] = front_.r*z[20]*z[53] + front_.r*z[21]*z[26] + state_[17]*z[23]/z[59] - state_[18]*z[1]*z[21]*z[5]/z[59] + state_[18]*z[20]*z[4]*z[5]/z[59] - state_[19]*z[1]*z[5] + z[113]*z[34];
  z[193] = -rear_.r*state_[8]*z[5]*z[7] - rear_.r*z[18]*z[4] - state_[14]*z[1]*z[5]/z[39] + state_[14]*z[38]*z[4]*z[5]/z[40] + state_[15]*z[1]*z[2]*z[38]*z[4]/z[40] - state_[15]*z[2]*z[7]/z[39] + state_[15]*z[2]*z[9]/z[39] + state_[16]*z[1]*z[2] - state_[8]*z[4]*z[77] - z[120]*z[17];
  z[194] = -rear_.r*state_[8]*z[2]*z[7] + rear_.r*z[16]*z[4] - state_[14]*z[1]*z[2]/z[39] + state_[14]*z[2]*z[38]*z[4]/z[40] - state_[15]*z[1]*z[38]*z[4]*z[5]/z[40] + state_[15]*z[5]*z[7]/z[39] - state_[15]*z[5]*z[9]/z[39] - state_[16]*z[1]*z[5] - state_[8]*z[4]*z[76] - z[119]*z[17];
  z[195] = -rear_.r*state_[8]*z[2]*z[7] + rear_.r*z[16]*z[4] - state_[14]*z[1]*z[2]/z[39] + state_[14]*z[2]*z[38]*z[4]/z[40] - state_[15]*z[1]*z[38]*z[4]*z[5]/z[40] + state_[15]*z[5]*z[7]/z[39] - state_[15]*z[5]*z[9]/z[39] - state_[16]*z[1]*z[5] - state_[8]*z[4]*z[76] - z[119]*z[17];
  z[196] = -3*rear_.R*z[38]*z[4]*z[44]*z[5]/z[41] + z[190];
  z[197] = 3*rear_.R*z[2]*z[38]*z[4]*z[44]/z[41] + z[191];
  z[198] = rear_.R*z[2]*z[4]*z[42]*z[44]/z[41] + z[191];
  z[199] = -rear_.a*z[13]*z[18] + rear_.a*z[47] + rear_.b*z[13]*z[16] + rear_.b*z[46];
  z[200] = front_.R*state_[10]*z[19]*z[2]*z[21]*z[4]/z[60] + front_.R*state_[9]*z[1]*z[19]*z[21]*z[5]/z[60] + 3*front_.R*z[116]*z[19]*z[21]*z[4]*z[5]/z[61] + front_.R*z[132]*z[4]*z[5]/z[60];
  z[201] = front_.R*z[19]*z[21]*z[4]*z[5]*z[69]/z[60] + front_.r*z[19]*z[35] + state_[17]*z[19]*z[21]*z[4]*z[5]/z[60] + state_[18]*z[29]*pow(-z[21], -z[0])/z[60] + state_[18]*z[29]/z[59] - state_[18]*pow(-z[21], -z[0])/z[59] + z[122];
  z[202] = -state_[15]*(-z[0]*z[1]*z[10]*z[4]/z[39] - z[0]*z[1]*z[4]*z[8]/z[39] - z[10]*z[38]*z[9]/z[40] - z[38]*z[8]*z[9]/z[40]) + state_[16]*z[4] + state_[8]*z[1]*z[2]*z[77] - state_[8]*z[1]*z[5]*z[76] + z[119]*z[18] + z[120]*z[16];
  z[203] = -front_.a*pow(-z[56], -z[0]) + front_.b*z[108] - state_[19]*z[88] + z[108]*z[94] - z[175]*z[56];
  z[204] = front_.R*z[19]*z[21]*z[4]*z[5]*z[53]/z[60] + state_[18]*(z[0]*z[19]*z[21]/z[59] + z[10]*z[19]*z[21]*z[9]/z[60] + z[21]*z[30]/z[60]) - state_[19]*z[19] + z[139]*z[35] + z[56]*z[94];
  z[205] = -front_.R*z[19]*z[22]*z[4]*z[5]*z[53]/(2*z[60]) + state_[18]*(z[0]*z[19]*z[21]/z[59] - z[10]*z[19]*z[22]*z[9]/(2*z[60]) - z[22]*z[30]/(2*z[60])) - state_[19]*z[19] + z[145]*z[35] + z[56]*z[94];
  z[206] = front_.r*z[19]*z[53] - front_.r*z[21]*z[56] - state_[17]*z[21]*z[29]/z[60] + state_[17]*z[21]/z[59] + state_[18]*z[19]*z[4]*z[5]*pow(-z[21], -z[0])/z[60] + state_[18]*z[19]*z[4]*z[5]/z[59] + z[113]*z[53] - z[139]*z[69];
  z[207] = front_.r*z[16]*z[21] - front_.r*z[3]*z[35]*z[4]*z[5] - state_[17]*z[2]*z[4]/z[59] + state_[17]*z[4]*z[5]*z[71]/z[60] + state_[18]*z[19]*z[21]*z[71]/z[60] - state_[18]*z[19]*z[3]*z[4]*z[5]/z[59] - state_[18]*z[21]*z[4]*z[5]*z[6]/z[59] - state_[19]*z[4]*z[5]*z[6] - z[133]*z[69] - z[18]*z[3]*z[94];
  z[208] = front_.r*z[18]*z[21]*z[6] - front_.r*z[3]*z[4]*z[5]*z[53] - state_[17]*z[19]*z[71]/z[60] + state_[17]*z[4]*z[5]*z[6]/z[59] - state_[18]*z[10]*z[3]*z[9]/z[59] - state_[18]*z[2]*z[21]*z[4]/z[59] + state_[18]*z[21]*z[4]*z[5]*z[71]/z[60] - state_[19]*z[2]*z[4] + z[113]*z[18]*z[3] + z[144]*z[69];
  z[209] = -state_[17]*z[4]*z[5]*z[82]/z[60] - state_[18]*z[19]*z[21]*z[82]/z[60] - z[136]*z[69] + z[185];
  z[210] = 3*front_.R*z[116]*z[19]*z[71]/z[61] - front_.R*z[116]*z[4]*z[5]*z[6]/z[60] + front_.R*z[140]*z[19]/z[60] + z[165];
  z[211] = 3*front_.R*z[116]*z[21]*z[29]/z[61] - front_.R*z[116]*z[21]/z[60] + front_.R*z[132]*z[19]/z[60] + front_.R*z[19]*z[21]*z[88]/z[60] + front_.R*z[85]/z[59] + front_.r*z[85];
  z[212] = -front_.R*z[116]*z[2]*z[4]/z[60] + 3*front_.R*z[116]*z[4]*z[5]*z[71]/z[61] + front_.R*z[140]*z[4]*z[5]/z[60] + z[172];
  z[213] = state_[17]*z[19]*z[82]/z[60] - state_[18]*z[21]*z[4]*z[5]*z[82]/z[60] + z[159]*z[69] + z[192];
  z[214] = state_[18]*(z[0]*z[19]*z[4]*z[5]*z[6]/z[59] + z[0]*z[2]*z[5]*z[9]/z[59] + z[10]*z[71]*z[9]/z[60] + z[29]*z[71]/z[60]) + state_[19]*z[3]*z[4]*z[5] - z[113]*z[16] - z[133]*z[53] - z[144]*z[35] - z[18]*z[6]*z[94];
  z[215] = -front_.R*state_[10]*z[2]*z[4]*z[82]/z[60] - front_.R*state_[9]*z[1]*z[5]*z[82]/z[60] - front_.R*z[1]*z[116]*z[5]/z[60] - 3*front_.R*z[116]*z[4]*z[5]*z[82]/z[61] + front_.R*z[158]*z[4]*z[5]/z[60] + z[125];
  z[216] = -3*front_.R*z[116]*z[19]*z[82]/z[61] - front_.R*z[116]*z[23]/z[60] + front_.R*z[158]*z[19]/z[60] - front_.R*z[82]*z[88]/z[60] + z[135];
  z[217] = rear_.r*state_[9]*z[18]*z[4] - rear_.r*z[1]*z[46] + state_[10]*state_[14]*z[2]*z[4]/z[39] - state_[10]*state_[15]*z[1]*z[4]*z[5]/z[39] + state_[10]*state_[16]*z[4]*z[5] + state_[14]*state_[9]*z[1]*z[5]/z[39] - state_[14]*z[4]*z[44]*z[5]/z[40] + state_[15]*state_[9]*z[2]*z[7]/z[39] - state_[15]*state_[9]*z[2]*z[9]/z[39] - state_[15]*z[1]*z[2]*z[4]*z[44]/z[40] - state_[16]*state_[9]*z[1]*z[2] + state_[8]*state_[9]*z[4]*z[77] + z[143]*z[17] - z[163]*z[18] - z[18]*z[57];
  z[218] = -z[217];
  z[219] = state_[18]*(-z[10]*z[82]*z[9]/z[60] + z[130] - z[29]*z[82]/z[60]) - z[159]*z[35] + z[188];
  z[220] = state_[18]*(z[10]*z[9]*z[96]/z[60] + z[130] + z[29]*z[96]/z[60]) - z[160]*z[35] + z[188];
  z[221] = -z[13]*z[195] + z[18]*z[202];
  z[222] = -rear_.r*state_[9]*z[16]*z[4] + rear_.r*z[1]*z[47] - state_[10]*state_[14]*z[4]*z[5]/z[39] - state_[10]*state_[15]*z[1]*z[2]*z[4]/z[39] + state_[10]*state_[16]*z[2]*z[4] + state_[14]*state_[9]*z[1]*z[2]/z[39] - state_[14]*z[2]*z[4]*z[44]/z[40] - state_[15]*state_[9]*z[5]*z[7]/z[39] + state_[15]*state_[9]*z[5]*z[9]/z[39] + state_[15]*z[1]*z[4]*z[44]*z[5]/z[40] + state_[16]*state_[9]*z[1]*z[5] + state_[8]*state_[9]*z[4]*z[76] - z[13]*z[149] - z[147]*z[17] + z[16]*z[163] + z[16]*z[57];
  z[223] = -rear_.a*z[12] + rear_.b*state_[8]*state_[9]*z[4] + z[13]*z[152] + z[218];
  z[224] = rear_.a*state_[8]*state_[9]*z[4] + rear_.b*z[12] + z[222];
  z[225] = -z[224];
  z[226] = -z[224];
  z[227] = z[18]*z[66] + z[222];
  z[228] = z[18]*z[66] + z[222];
  z[229] = z[13]*z[152] - z[16]*z[66] + z[218];
  z[230] = rear_.a*z[13]*z[16] + rear_.a*z[46] + rear_.b*z[13]*z[18] - rear_.b*z[47] - state_[15]*(-state_[9]*z[0]*z[1]*z[10]*z[4]/z[39] - state_[9]*z[0]*z[1]*z[4]*z[8]/z[39] - z[10]*z[44]*z[9]/z[40] - z[44]*z[8]*z[9]/z[40]) + state_[16]*state_[9]*z[4] + z[143]*z[16] - z[147]*z[18] - z[149]*z[18] - z[152]*z[16] + z[46]*z[76] + z[47]*z[77];
  z[231] = state_[10]*z[0]*z[10]*z[9]/z[59] + state_[10]*z[0]*z[2]*z[5]*z[71]*z[9]/z[60] - state_[10]*z[0]*z[8]*z[9]/z[59] + state_[9]*z[0]*z[1]*z[10]*z[4]*z[71]/z[60] + 4*state_[9]*z[1]*z[2]*z[4]*z[5]/z[59] - z[0]*z[116]*z[19]*z[4]*z[5]*z[6]/z[60] - z[0]*z[116]*z[2]*z[5]*z[9]/z[60] + z[0]*z[19]*z[71]*z[88]/z[60] + z[0]*z[19]*z[62]/z[59] - z[0]*z[4]*z[5]*z[6]*z[88]/z[59] - 3*z[10]*z[116]*z[71]*z[9]/z[61] - 3*z[116]*z[29]*z[71]/z[61];
  z[232] = front_.r*z[21]*z[46] - front_.r*z[35]*z[85] + state_[10]*state_[17]*z[2]*z[4]/z[59] + state_[17]*state_[9]*z[1]*z[5]/z[59] - state_[18]*z[19]*z[85]/z[59] + state_[18]*z[21]*z[88]/z[59] + z[168]*z[69] - z[179]*z[35] - z[203] - z[35]*z[98];
  z[233] = front_.a*z[108] + front_.b*pow(-z[56], -z[0]) + front_.r*z[112]*z[21] - front_.r*z[53]*z[85] + state_[10]*state_[18]*z[2]*z[21]*z[4]/z[59] + state_[10]*state_[19]*z[2]*z[4] - state_[17]*z[88]/z[59] + state_[18]*state_[9]*z[1]*z[21]*z[5]/z[59] - state_[18]*z[4]*z[5]*z[85]/z[59] + state_[19]*state_[9]*z[1]*z[5] + z[108]*z[113] - z[170]*z[56] + z[177]*z[69] - z[179]*z[53] - z[53]*z[98];
  z[234] = front_.a*z[46] - front_.a*z[53]*z[56] + front_.b*z[112] + front_.b*z[35]*z[56] + state_[18]*(state_[10]*z[0]*z[2]*z[5]*z[9]/z[59] + state_[9]*z[0]*z[1]*z[10]*z[4]/z[59] + z[0]*z[19]*z[88]/z[59] - z[10]*z[116]*z[9]/z[60] - z[116]*z[29]/z[60]) - state_[19]*z[85] + z[112]*z[94] + z[113]*z[46] + z[167]*z[53] - z[170]*z[35] + z[174]*z[35];
  z[235] = -front_.r*z[21]*z[46] + front_.r*z[35]*z[85] - state_[10]*state_[17]*z[2]*z[4]/z[59] - state_[17]*state_[9]*z[1]*z[5]/z[59] - state_[17]*z[116]*z[4]*z[5]/z[60] - state_[18]*z[116]*z[19]*z[21]/z[60] + state_[18]*z[19]*z[85]/z[59] - state_[18]*z[21]*z[88]/z[59] + z[167]*z[69] + z[179]*z[35] + z[203] + z[35]*z[98];
  z[236] = state_[17]*z[117]*z[4]*z[5]/z[60] + state_[18]*z[117]*z[19]*z[21]/z[60] - z[232];
  z[237] = state_[17]*z[121]*z[4]*z[5]/(2*z[60]) + state_[18]*z[121]*z[19]*z[21]/(2*z[60]) - z[232];
  z[238] = -rear_.a*state_[8]*z[1]*z[13]*z[2] - rear_.a*state_[8]*z[16]*z[4] + rear_.a*z[33] + rear_.b*state_[8]*z[1]*z[13]*z[5] - rear_.b*state_[8]*z[18]*z[4] + rear_.b*z[36] - state_[16]*state_[9]*z[1] - state_[8]*z[1]*z[143]*z[2] - state_[8]*z[1]*z[147]*z[5] - state_[8]*z[1]*z[149]*z[5] + state_[8]*z[1]*z[152]*z[2] - z[119]*z[46] - z[120]*z[47] + z[16]*z[196] - z[18]*z[193] + z[33]*z[76] - z[36]*z[77];
  z[239] = -front_.a*z[108] - front_.b*pow(-z[56], -z[0]) - front_.r*z[112]*z[21] + front_.r*z[53]*z[85] - state_[10]*state_[18]*z[2]*z[21]*z[4]/z[59] - state_[10]*state_[19]*z[2]*z[4] + state_[17]*z[116]*z[19]/z[60] + state_[17]*z[88]/z[59] - state_[18]*state_[9]*z[1]*z[21]*z[5]/z[59] - state_[18]*z[116]*z[21]*z[4]*z[5]/z[60] + state_[18]*z[4]*z[5]*z[85]/z[59] - state_[19]*state_[9]*z[1]*z[5] - z[108]*z[113] + z[170]*z[56] - z[174]*z[69] + z[179]*z[53] + z[53]*z[98];
  z[240] = -state_[17]*z[117]*z[19]/z[60] + state_[18]*z[117]*z[21]*z[4]*z[5]/z[60] - z[233];
  z[241] = -state_[17]*z[121]*z[19]/(2*z[60]) + state_[18]*z[121]*z[21]*z[4]*z[5]/(2*z[60]) - z[233];
  z[242] = -z[176]*z[53] + z[234];
  z[243] = z[175]*z[53] - z[234];
  z[244] = -rear_.a*state_[8]*z[0]*z[13]*z[4] - rear_.b*state_[8]*state_[9]*z[1] - rear_.r*state_[8]*state_[9]*z[1]*z[4]*z[5] + rear_.r*state_[9]*z[1]*z[18] + rear_.r*z[1]*z[33] + rear_.r*z[4]*z[46] + state_[10]*state_[14]*z[1]*z[2]/z[39] - state_[10]*state_[14]*z[2]*z[38]*z[4]/z[40] + state_[10]*state_[15]*z[1]*z[38]*z[4]*z[5]/z[40] - state_[10]*state_[15]*z[5]*z[7]/z[39] + state_[10]*state_[15]*z[5]*z[9]/z[39] + state_[10]*state_[16]*z[1]*z[5] - state_[14]*state_[9]*z[1]*z[38]*z[5]/z[40] - state_[14]*state_[9]*z[4]*z[5]/z[39] - state_[14]*z[1]*z[44]*z[5]/z[40] + 3*state_[14]*z[38]*z[4]*z[44]*z[5]/z[41] - state_[14]*z[4]*z[5]*z[95]/z[40] - 4*state_[15]*state_[9]*z[1]*z[2]*z[4]/z[39] - state_[15]*state_[9]*z[2]*z[38]*z[7]/z[40] + state_[15]*state_[9]*z[2]*z[38]*z[9]/z[40] + 3*state_[15]*z[1]*z[2]*z[38]*z[4]*z[44]/z[41] - state_[15]*z[1]*z[2]*z[4]*z[95]/z[40] - state_[15]*z[2]*z[44]*z[7]/z[40] + state_[15]*z[2]*z[44]*z[9]/z[40] + state_[16]*state_[9]*z[2]*z[4] + state_[8]*state_[9]*z[1]*z[77] + state_[8]*state_[9]*z[120]*z[4] + state_[8]*z[1]*z[163]*z[5] + state_[8]*z[1]*z[5]*z[57] + state_[8]*z[143]*z[4] - state_[8]*z[152]*z[4] - z[17]*z[196] - z[18]*z[25];
  z[245] = -front_.a*z[18]*z[3]*z[53] - front_.a*z[18]*z[56]*z[6] + front_.a*z[47] + front_.b*z[16]*z[56] + front_.b*z[18]*z[3]*z[35] - front_.b*z[83] - state_[19]*z[55] + z[112]*z[133] + z[113]*z[47] + z[144]*z[46] - z[16]*z[170] + z[16]*z[174] + z[167]*z[18]*z[6] - z[212]*z[53] - z[83]*z[94];
  z[246] = rear_.a*state_[8]*state_[9]*z[1] - rear_.b*state_[8]*z[0]*z[13]*z[4] - rear_.r*state_[8]*state_[9]*z[1]*z[2]*z[4] - rear_.r*state_[9]*z[1]*z[16] + rear_.r*z[1]*z[36] - rear_.r*z[4]*z[47] - state_[10]*state_[14]*z[1]*z[5]/z[39] + state_[10]*state_[14]*z[38]*z[4]*z[5]/z[40] + state_[10]*state_[15]*z[1]*z[2]*z[38]*z[4]/z[40] - state_[10]*state_[15]*z[2]*z[7]/z[39] + state_[10]*state_[15]*z[2]*z[9]/z[39] + state_[10]*state_[16]*z[1]*z[2] - state_[14]*state_[9]*z[1]*z[2]*z[38]/z[40] - state_[14]*state_[9]*z[2]*z[4]/z[39] - state_[14]*z[1]*z[2]*z[44]/z[40] - state_[14]*z[2]*z[4]*z[95]/z[40] + 4*state_[15]*state_[9]*z[1]*z[4]*z[5]/z[39] + state_[15]*state_[9]*z[38]*z[5]*z[7]/z[40] - state_[15]*state_[9]*z[38]*z[5]*z[9]/z[40] + state_[15]*z[1]*z[4]*z[5]*z[95]/z[40] + state_[15]*z[44]*z[5]*z[7]/z[40] - state_[15]*z[44]*z[5]*z[9]/z[40] - state_[16]*state_[9]*z[4]*z[5] + state_[8]*state_[9]*z[1]*z[76] + state_[8]*state_[9]*z[119]*z[4] + state_[8]*z[1]*z[163]*z[2] + state_[8]*z[1]*z[2]*z[57] - state_[8]*z[147]*z[4] - state_[8]*z[149]*z[4] + z[13]*z[193] - z[16]*z[202] + z[16]*z[25];
  z[247] = -front_.R*z[108]*z[19]*z[21]*z[4]*z[5]/z[60] + front_.a*z[0]*z[53]*z[56] + front_.b*z[35]*z[56] - front_.r*z[19]*z[46] - front_.r*z[35]*z[88] - state_[10]*state_[17]*z[19]*z[2]*z[21]*z[4]/z[60] - state_[17]*state_[9]*z[1]*z[19]*z[21]*z[5]/z[60] - 3*state_[17]*z[116]*z[19]*z[21]*z[4]*z[5]/z[61] - state_[17]*z[132]*z[4]*z[5]/z[60] + state_[18]*z[0]*z[19]*z[88]/z[59] + state_[18]*z[0]*z[21]*z[85]/z[59] - 3*state_[18]*z[116]*z[29]*pow(-z[21], -z[0])/z[61] - state_[18]*z[116]*z[29]/z[60] + state_[18]*z[116]*pow(-z[21], -z[0])/z[60] - state_[18]*z[132]*z[19]*z[21]/z[60] - state_[18]*z[19]*z[88]*pow(-z[21], -z[0])/z[60] + state_[18]*z[21]*z[29]*z[85]/z[60] - state_[19]*z[85] + z[167]*z[53] - z[206]*z[56];
  z[248] = z[221] + z[244];
  z[249] = -z[13]*z[194] + z[18]*z[202] + z[244];
  z[250] = 3*state_[14]*z[2]*z[38]*z[4]*z[44]/z[41] - 3*state_[15]*z[1]*z[38]*z[4]*z[44]*z[5]/z[41] + z[17]*z[198] + z[246];
  z[251] = 3*state_[14]*z[2]*z[38]*z[4]*z[44]/z[41] - 3*state_[15]*z[1]*z[38]*z[4]*z[44]*z[5]/z[41] + z[17]*z[197] + z[246];
  z[252] = front_.a*z[0]*z[34]*z[56] - front_.b*z[91] + front_.r*state_[8]*z[1]*z[5]*z[85] - front_.r*z[20]*z[46] - front_.r*z[21]*z[33] + front_.r*z[35]*z[81] + state_[10]*state_[17]*z[1]*z[2]/z[59] - state_[17]*state_[9]*z[4]*z[5]/z[59] + state_[17]*z[1]*z[116]*z[5]/z[60] - state_[17]*z[158]*z[4]*z[5]/z[60] - state_[18]*z[116]*z[19]*z[20]/z[60] + state_[18]*z[116]*z[21]*z[23]/z[60] - state_[18]*z[158]*z[19]*z[21]/z[60] + state_[18]*z[19]*z[81]/z[59] - state_[18]*z[20]*z[88]/z[59] - state_[18]*z[21]*z[84]/z[59] - state_[18]*z[23]*z[85]/z[59] - state_[19]*z[84] + state_[8]*z[1]*z[179]*z[5] + state_[8]*z[1]*z[5]*z[98] + z[108]*z[136] + z[167]*z[34] - z[215]*z[69] - z[35]*z[50] - z[91]*z[94];
  z[253] = state_[15]*(state_[9]*z[0]*z[1]*z[10]*z[38]*z[4]/z[40] + state_[9]*z[0]*z[1]*z[38]*z[4]*z[8]/z[40] - state_[9]*z[0]*z[10]*z[7]/z[39] + state_[9]*z[0]*z[10]*z[9]/z[39] - state_[9]*z[0]*z[7]*z[8]/z[39] + state_[9]*z[0]*z[8]*z[9]/z[39] + z[0]*z[1]*z[10]*z[4]*z[44]/z[40] + z[0]*z[1]*z[4]*z[44]*z[8]/z[40] + z[10]*z[42]*z[44]*z[9]/z[41] - z[10]*z[9]*z[95]/z[40] + z[42]*z[44]*z[8]*z[9]/z[41] - z[8]*z[9]*z[95]/z[40]) + z[16]*z[194] - z[18]*z[198] + z[238];
  z[254] = state_[15]*(state_[9]*z[0]*z[1]*z[10]*z[38]*z[4]/z[40] + state_[9]*z[0]*z[1]*z[38]*z[4]*z[8]/z[40] - state_[9]*z[0]*z[10]*z[7]/z[39] + state_[9]*z[0]*z[10]*z[9]/z[39] - state_[9]*z[0]*z[7]*z[8]/z[39] + state_[9]*z[0]*z[8]*z[9]/z[39] + z[0]*z[1]*z[10]*z[4]*z[44]/z[40] + z[0]*z[1]*z[4]*z[44]*z[8]/z[40] + 3*z[10]*z[38]*z[44]*z[9]/z[41] - z[10]*z[9]*z[95]/z[40] + 3*z[38]*z[44]*z[8]*z[9]/z[41] - z[8]*z[9]*z[95]/z[40]) + z[16]*z[195] - z[18]*z[197] + z[238];
  z[255] = front_.a*z[91] + front_.b*z[0]*z[34]*z[56] - front_.r*z[112]*z[20] - front_.r*z[21]*z[99] + front_.r*z[26]*z[85] + front_.r*z[53]*z[81] + state_[10]*state_[18]*z[1]*z[2]*z[21]/z[59] - state_[10]*state_[18]*z[2]*z[20]*z[4]/z[59] + state_[10]*state_[19]*z[1]*z[2] - state_[17]*z[116]*z[23]/z[60] + state_[17]*z[158]*z[19]/z[60] + state_[17]*z[84]/z[59] - state_[18]*state_[9]*z[1]*z[20]*z[5]/z[59] - state_[18]*state_[9]*z[21]*z[4]*z[5]/z[59] + state_[18]*z[1]*z[116]*z[21]*z[5]/z[60] - state_[18]*z[1]*z[5]*z[85]/z[59] - state_[18]*z[116]*z[20]*z[4]*z[5]/z[60] - state_[18]*z[158]*z[21]*z[4]*z[5]/z[60] + state_[18]*z[4]*z[5]*z[81]/z[59] - state_[19]*state_[9]*z[4]*z[5] + z[113]*z[91] + z[170]*z[34] - z[174]*z[34] + z[179]*z[26] + z[216]*z[69] + z[26]*z[98] - z[50]*z[53];
  z[256] = front_.b*z[112] + z[112]*z[94] - z[175]*z[53] - z[200]*z[69] + z[204]*z[35] + z[247];
  z[257] = -front_.b*z[53]*z[56] + front_.r*z[108]*z[21] - front_.r*z[112]*z[19] - front_.r*z[53]*z[88] - front_.r*z[56]*z[85] - state_[10]*state_[18]*z[19]*z[2]*z[4]*pow(-z[21], -z[0])/z[60] - state_[10]*state_[18]*z[19]*z[2]*z[4]/z[59] + 3*state_[17]*z[116]*z[21]*z[29]/z[61] - state_[17]*z[116]*z[21]/z[60] + state_[17]*z[132]*z[19]/z[60] + state_[17]*z[19]*z[21]*z[88]/z[60] + state_[17]*z[85]/z[59] - state_[18]*state_[9]*z[1]*z[19]*z[5]*pow(-z[21], -z[0])/z[60] - state_[18]*state_[9]*z[1]*z[19]*z[5]/z[59] - 3*state_[18]*z[116]*z[19]*z[4]*z[5]*pow(-z[21], -z[0])/z[61] - state_[18]*z[116]*z[19]*z[4]*z[5]/z[60] - state_[18]*z[132]*z[21]*z[4]*z[5]/z[60] + state_[18]*z[19]*z[21]*z[4]*z[5]*z[85]/z[60] - state_[18]*z[4]*z[5]*z[88]/z[59] + z[108]*z[139] + z[170]*z[53] - z[174]*z[53] - z[179]*z[56] + z[201]*z[56] + z[211]*z[69] - z[56]*z[98];
  z[258] = front_.b*z[110] + z[110]*z[94] - z[176]*z[53] + z[205]*z[35] + z[247] - z[69]*(-front_.R*state_[10]*z[19]*z[2]*z[22]*z[4]/(2*z[60]) - front_.R*state_[9]*z[1]*z[19]*z[22]*z[5]/(2*z[60]) + 3*front_.R*z[117]*z[19]*z[22]*z[4]*z[5]/(2*z[61]) + front_.R*z[137]*z[4]*z[5]/z[60]);
  z[259] = -front_.a*z[0]*z[18]*z[3]*z[56] + front_.b*z[86] - front_.r*z[16]*z[85] + front_.r*z[21]*z[47] - front_.r*z[3]*z[4]*z[46]*z[5] - front_.r*z[35]*z[55] + state_[10]*state_[17]*z[2]*z[4]*z[71]/z[60] + state_[10]*state_[17]*z[4]*z[5]/z[59] - state_[17]*state_[9]*z[1]*z[2]/z[59] + state_[17]*state_[9]*z[1]*z[5]*z[71]/z[60] - state_[18]*z[19]*z[55]/z[59] - state_[18]*z[19]*z[71]*z[85]/z[60] + state_[18]*z[21]*z[71]*z[88]/z[60] + state_[18]*z[21]*z[62]/z[59] - state_[18]*z[3]*z[4]*z[5]*z[88]/z[59] + state_[18]*z[4]*z[5]*z[6]*z[85]/z[59] + state_[19]*z[62] - z[108]*z[133] - z[16]*z[179] - z[16]*z[98] + z[168]*z[18]*z[3] + z[175]*z[18]*z[3] + z[208]*z[56] - z[214]*z[35] - z[35]*z[70] + z[69]*(front_.R*z[117]*z[2]*z[4]/z[60] - front_.R*z[117]*z[4]*z[5]*z[74]/z[61] + front_.R*z[154]*z[4]*z[5]/z[60] + z[172]) + z[86]*z[94];
  z[260] = -front_.a*z[86] - front_.b*z[0]*z[18]*z[3]*z[56] - front_.r*z[112]*z[3]*z[4]*z[5] - front_.r*z[18]*z[6]*z[85] - front_.r*z[21]*z[83] - front_.r*z[53]*z[55] + state_[10]*state_[18]*z[2]*z[21]*z[4]*z[71]/z[60] - state_[10]*state_[18]*z[2]*z[3]*z[5]*z[9]/z[59] + state_[10]*state_[18]*z[21]*z[4]*z[5]/z[59] + state_[10]*state_[19]*z[4]*z[5] - state_[17]*z[71]*z[88]/z[60] - state_[17]*z[62]/z[59] - state_[18]*state_[9]*z[1]*z[10]*z[3]*z[4]/z[59] - state_[18]*state_[9]*z[1]*z[2]*z[21]/z[59] + state_[18]*state_[9]*z[1]*z[21]*z[5]*z[71]/z[60] + state_[18]*z[2]*z[4]*z[85]/z[59] - state_[18]*z[4]*z[5]*z[55]/z[59] - state_[18]*z[4]*z[5]*z[71]*z[85]/z[60] - state_[19]*state_[9]*z[1]*z[2] + z[108]*z[144] - z[113]*z[86] - z[170]*z[18]*z[3] + z[177]*z[18]*z[3] - z[179]*z[18]*z[6] - z[18]*z[6]*z[98] - z[207]*z[56] - z[214]*z[53] - z[53]*z[70] - z[69]*(-front_.R*z[117]*z[19]*z[74]/z[61] + front_.R*z[117]*z[4]*z[5]*z[6]/z[60] + front_.R*z[154]*z[19]/z[60] + z[165]);
  z[261] = -front_.R*z[112]*z[19]*z[21]*z[4]*z[5]/z[60] - front_.a*z[58] + front_.b*z[35]*z[53] + state_[18]*(state_[10]*z[0]*z[19]*z[2]*z[21]*z[5]*z[9]/z[60] + state_[9]*z[0]*z[1]*z[10]*z[19]*z[21]*z[4]/z[60] - z[0]*z[116]*z[19]*z[21]/z[60] + z[0]*z[19]*z[85]/z[59] + z[0]*z[21]*z[29]*z[88]/z[60] - z[0]*z[21]*z[88]/z[59] - 3*z[10]*z[116]*z[19]*z[21]*z[9]/z[61] - z[10]*z[132]*z[9]/z[60] - 3*z[116]*z[21]*z[30]/z[61] - z[132]*z[29]/z[60]) - z[139]*z[46] - z[167]*z[56] - z[200]*z[53] - z[201]*z[35] - z[203] - z[206]*z[53] - z[211]*z[35];
  z[262] = -front_.R*z[112]*z[19]*z[21]*z[4]*z[5]/z[60] - front_.a*z[58] + front_.b*z[35]*z[53] + state_[18]*(-state_[10]*z[0]*z[19]*z[2]*z[22]*z[5]*z[9]/z[60] - state_[9]*z[0]*z[1]*z[10]*z[19]*z[22]*z[4]/z[60] + z[0]*z[10]*z[137]*z[9]/z[60] + z[0]*z[137]*z[29]/z[60] - z[0]*z[22]*z[29]*z[88]/z[60] - 3*z[10]*z[117]*z[19]*z[22]*z[9]/z[61] - 4*z[117]*z[19]*z[21]/z[60] - 3*z[117]*z[22]*z[30]/z[61] - 4*z[19]*z[85]/z[59] + 4*z[21]*z[88]/z[59])/2 + z[168]*z[56] - z[203] - z[35]*(-front_.R*z[0]*z[117]*z[21]/z[60] - front_.R*z[0]*z[137]*z[19]/z[60] - front_.R*z[0]*z[85]/z[59] + 3*front_.R*z[117]*z[22]*z[29]/z[61] - front_.R*z[19]*z[22]*z[88]/z[60] - front_.r*z[0]*z[85])/2 - z[35]*(-front_.R*z[19]*z[22]*z[4]*z[5]*z[69]/z[60] - front_.r*z[0]*z[19]*z[35] - state_[17]*z[19]*z[22]*z[4]*z[5]/z[60] - state_[18]*z[0]*z[29]/z[59] + state_[18]*z[0]*pow(-z[21], -z[0])/z[59] - state_[18]*z[21]*z[22]*z[29]/z[60] + state_[19]*z[0]*z[21] + z[0]*z[53]*z[94])/2 - z[46]*(front_.R*z[0]*z[21]/z[59] - front_.R*z[22]*z[29]/z[60] + front_.r*z[0]*z[21])/2 - z[53]*(-front_.R*state_[10]*z[19]*z[2]*z[22]*z[4]/z[60] - front_.R*state_[9]*z[1]*z[19]*z[22]*z[5]/z[60] - front_.R*z[0]*z[137]*z[4]*z[5]/z[60] + 3*front_.R*z[117]*z[19]*z[22]*z[4]*z[5]/z[61])/2 - z[53]*(-front_.r*z[0]*z[19]*z[53] + front_.r*z[0]*z[21]*z[56] - state_[17]*z[0]*z[21]/z[59] + state_[17]*z[22]*z[29]/z[60] - state_[18]*z[0]*z[19]*z[4]*z[5]/z[59] - state_[18]*z[19]*z[21]*z[22]*z[4]*z[5]/z[60] - z[0]*z[113]*z[53] + z[0]*z[145]*z[69])/2;
  z[263] = -front_.a*z[112] - z[112]*z[113] + z[204]*z[53] + z[257];
  z[264] = -front_.a*z[110] - z[110]*z[113] + z[205]*z[53] + z[257];
  z[265] = front_.a*z[0]*z[18]*z[3]*z[56] - front_.b*z[86] + front_.r*z[16]*z[85] - front_.r*z[21]*z[47] + front_.r*z[3]*z[4]*z[46]*z[5] + front_.r*z[35]*z[55] - state_[10]*state_[17]*z[2]*z[4]*z[71]/z[60] - state_[10]*state_[17]*z[4]*z[5]/z[59] + state_[17]*state_[9]*z[1]*z[2]/z[59] - state_[17]*state_[9]*z[1]*z[5]*z[71]/z[60] + state_[17]*z[116]*z[2]*z[4]/z[60] - 3*state_[17]*z[116]*z[4]*z[5]*z[71]/z[61] - state_[17]*z[140]*z[4]*z[5]/z[60] - 3*state_[18]*z[116]*z[19]*z[21]*z[71]/z[61] + state_[18]*z[116]*z[19]*z[3]*z[4]*z[5]/z[60] + state_[18]*z[116]*z[21]*z[4]*z[5]*z[6]/z[60] - state_[18]*z[140]*z[19]*z[21]/z[60] + state_[18]*z[19]*z[55]/z[59] + state_[18]*z[19]*z[71]*z[85]/z[60] - state_[18]*z[21]*z[71]*z[88]/z[60] - state_[18]*z[21]*z[62]/z[59] + state_[18]*z[3]*z[4]*z[5]*z[88]/z[59] - state_[18]*z[4]*z[5]*z[6]*z[85]/z[59] - state_[19]*z[62] + z[108]*z[133] + z[16]*z[179] + z[16]*z[98] + z[167]*z[18]*z[3] - z[175]*z[18]*z[3] - z[208]*z[56] - z[212]*z[69] + z[214]*z[35] + z[35]*z[70] - z[86]*z[94];
  z[266] = front_.a*z[86] + front_.b*z[0]*z[18]*z[3]*z[56] + front_.r*z[112]*z[3]*z[4]*z[5] + front_.r*z[18]*z[6]*z[85] + front_.r*z[21]*z[83] + front_.r*z[53]*z[55] - state_[10]*state_[18]*z[2]*z[21]*z[4]*z[71]/z[60] + state_[10]*state_[18]*z[2]*z[3]*z[5]*z[9]/z[59] - state_[10]*state_[18]*z[21]*z[4]*z[5]/z[59] - state_[10]*state_[19]*z[4]*z[5] + 3*state_[17]*z[116]*z[19]*z[71]/z[61] - state_[17]*z[116]*z[4]*z[5]*z[6]/z[60] + state_[17]*z[140]*z[19]/z[60] + state_[17]*z[71]*z[88]/z[60] + state_[17]*z[62]/z[59] + state_[18]*state_[9]*z[1]*z[10]*z[3]*z[4]/z[59] + state_[18]*state_[9]*z[1]*z[2]*z[21]/z[59] - state_[18]*state_[9]*z[1]*z[21]*z[5]*z[71]/z[60] + state_[18]*z[10]*z[116]*z[3]*z[9]/z[60] + state_[18]*z[116]*z[2]*z[21]*z[4]/z[60] - 3*state_[18]*z[116]*z[21]*z[4]*z[5]*z[71]/z[61] - state_[18]*z[140]*z[21]*z[4]*z[5]/z[60] - state_[18]*z[2]*z[4]*z[85]/z[59] + state_[18]*z[4]*z[5]*z[55]/z[59] + state_[18]*z[4]*z[5]*z[71]*z[85]/z[60] + state_[19]*state_[9]*z[1]*z[2] - z[108]*z[144] + z[113]*z[86] + z[170]*z[18]*z[3] - z[174]*z[18]*z[3] + z[179]*z[18]*z[6] + z[18]*z[6]*z[98] + z[207]*z[56] + z[210]*z[69] + z[214]*z[53] + z[53]*z[70];
  z[267] = state_[10]*state_[17]*z[2]*z[4]*z[82]/z[60] + state_[17]*state_[9]*z[1]*z[5]*z[82]/z[60] + 3*state_[17]*z[116]*z[4]*z[5]*z[82]/z[61] + 3*state_[18]*z[116]*z[19]*z[21]*z[82]/z[61] - state_[18]*z[19]*z[82]*z[85]/z[60] + state_[18]*z[21]*z[82]*z[88]/z[60] - z[175]*z[34] - z[213]*z[56] + z[219]*z[35] + z[252];
  z[268] = -state_[10]*state_[17]*z[2]*z[4]*z[96]/z[60] - state_[17]*state_[9]*z[1]*z[5]*z[96]/z[60] - state_[17]*z[116]*z[4]*z[5]*z[97]/z[61] - state_[18]*z[116]*z[19]*z[21]*z[97]/z[61] + state_[18]*z[19]*z[85]*z[96]/z[60] - state_[18]*z[21]*z[88]*z[96]/z[60] - z[176]*z[34] + z[220]*z[35] + z[252] - z[56]*(state_[17]*z[19]*z[89]/z[60] - state_[18]*z[21]*z[4]*z[5]*z[89]/z[60] + z[160]*z[69] + z[192]);
  z[269] = state_[10]*state_[18]*z[2]*z[21]*z[4]*z[82]/z[60] - 3*state_[17]*z[116]*z[19]*z[82]/z[61] - state_[17]*z[82]*z[88]/z[60] + state_[18]*state_[9]*z[1]*z[21]*z[5]*z[82]/z[60] + 3*state_[18]*z[116]*z[21]*z[4]*z[5]*z[82]/z[61] - state_[18]*z[4]*z[5]*z[82]*z[85]/z[60] - z[108]*z[159] + z[209]*z[56] + z[219]*z[53] + z[255];
  z[270] = state_[18]*(-z[10]*z[140]*z[9]/z[60] - z[140]*z[29]/z[60] + z[231]) - z[175]*z[18]*z[6] - z[207]*z[35] - z[208]*z[53] - z[210]*z[35] + z[245];
  z[271] = -state_[10]*state_[18]*z[2]*z[21]*z[4]*z[96]/z[60] + state_[17]*z[116]*z[19]*z[97]/z[61] + state_[17]*z[88]*z[96]/z[60] - state_[18]*state_[9]*z[1]*z[21]*z[5]*z[96]/z[60] - state_[18]*z[116]*z[21]*z[4]*z[5]*z[97]/z[61] + state_[18]*z[4]*z[5]*z[85]*z[96]/z[60] - z[108]*z[160] + z[220]*z[53] + z[255] + z[56]*(-state_[17]*z[4]*z[5]*z[89]/z[60] - state_[18]*z[19]*z[21]*z[89]/z[60] - z[138]*z[69] + z[185]);
  z[272] = -front_.a*z[26]*z[56] + front_.a*z[33] - front_.a*z[34]*z[53] + front_.b*state_[8]*z[1]*z[5]*z[56] + front_.b*z[34]*z[35] + front_.b*z[99] + state_[18]*(-state_[10]*z[0]*z[2]*z[5]*z[82]*z[9]/z[60] - state_[9]*z[0]*z[1]*z[10]*z[4]*z[82]/z[60] - z[0]*z[1]*z[10]*z[116]*z[4]/z[60] - z[0]*z[116]*z[19]*z[23]/z[60] - z[0]*z[19]*z[82]*z[88]/z[60] + 3*z[10]*z[116]*z[82]*z[9]/z[61] - z[10]*z[158]*z[9]/z[60] + 3*z[116]*z[29]*z[82]/z[61] - z[158]*z[29]/z[60] + z[186]) - state_[19]*z[81] - state_[8]*z[1]*z[170]*z[5] + state_[8]*z[1]*z[174]*z[5] + z[112]*z[136] + z[113]*z[33] + z[159]*z[46] + z[167]*z[26] - z[175]*z[26] - z[209]*z[35] - z[213]*z[53] - z[215]*z[53] - z[216]*z[35] + z[94]*z[99];
  z[273] = -front_.Iyy;
  z[274] = -front_.a;
  z[275] = -front_.b;
  z[276] = -rear_.b;
  z[277] = -front_.m;
  z[278] = -rear_.m;
  z[279] = -front_.r;
  z[280] = -state_[10];
  z[281] = -state_[18];
  z[282] = -state_[19];
  z[283] = -state_[9];
  z[284] = z[0]*z[283];
  z[285] = -rear_.r*z[283];
  z[286] = -state_[8]*z[283];
  z[287] = -z[274]*z[3];
  z[288] = -z[274]*z[5];
  z[289] = -z[275]*z[3];
  z[290] = -z[275]*z[6];
  z[291] = -z[1]*z[276];
  z[292] = -z[276]*z[4];
  z[293] = -z[279]*z[3];
  z[294] = -z[279]*z[4];
  z[295] = -z[279]*z[5];
  z[296] = rear_.r*z[1];
  z[297] = rear_.r*z[4];
  z[298] = -z[1]*z[280];
  z[299] = -z[2]*z[280];
  z[300] = -z[280]*z[5];
  z[301] = state_[15]*z[1];
  z[302] = -z[281]*z[3];
  z[303] = state_[8]*z[1];
  z[304] = state_[8]*z[4];
  z[305] = -z[1]*z[283];
  z[306] = -z[283]*z[4];
  z[307] = -z[1];
  z[308] = z[0]*z[307];
  z[309] = -z[2];
  z[310] = -z[4];
  z[311] = -z[5];
  z[312] = z[2]*z[283];
  z[313] = z[307]*z[309];
  z[314] = z[307]*z[310];
  z[315] = z[307]*z[311];
  z[316] = -z[3]*z[309];
  z[317] = z[309]*z[310];
  z[318] = -z[309]*z[6];
  z[319] = -z[3]*z[310];
  z[320] = -z[3]*z[311];
  z[321] = z[310]*z[311];
  z[322] = -z[310]*z[6];
  z[323] = -z[311]*z[6];
  z[324] = rear_.r*z[7];
  z[325] = rear_.r*z[9];
  z[326] = -z[280]*z[9];
  z[327] = -z[7];
  z[328] = z[311]*z[327];
  z[329] = -z[309]*z[9];
  z[330] = -z[311]*z[9];
  z[331] = z[10]*z[9];
  z[332] = z[14]*z[9];
  z[333] = z[21]*z[279];
  z[334] = z[21]*z[281];
  z[335] = -state_[8]*z[23];
  z[336] = -z[19]*z[279];
  z[337] = -z[20]*z[279];
  z[338] = -z[19]*z[311];
  z[339] = z[19]*z[6];
  z[340] = -z[278]/z[27];
  z[341] = state_[14]/z[39];
  z[342] = state_[15]/z[39];
  z[343] = -z[310]/z[39];
  z[344] = -z[19]*z[21];
  z[345] = -z[19]*z[23];
  z[346] = front_.R/z[60];
  z[347] = state_[17]/z[60];
  z[348] = 3/(2*z[61]);
  z[349] = -1/z[60];
  z[350] = -1/z[59];
  z[351] = z[38]/z[37];
  z[352] = z[21]*z[349];
  z[353] = z[21]*z[350];
  z[354] = -z[38]/z[40];
  z[355] = -state_[14]*z[354];
  z[356] = -state_[15]*z[354];
  z[357] = -z[19]*z[349];
  z[358] = -z[44]/z[40];
  z[359] = -state_[14]*z[358];
  z[360] = -state_[15]*z[358];
  z[361] = -z[29]*z[349];
  z[362] = z[29]/z[54];
  z[363] = z[19]*z[71];
  z[364] = z[74]/z[61];
  z[365] = z[113]*z[311];
  z[366] = z[42]*z[44]/z[41];
  z[367] = z[95]/z[40];
  z[368] = -z[82]/z[54];
  z[369] = z[349]*z[89];
  z[370] = z[90]/z[61];
  z[371] = front_.R*z[117];
  z[372] = state_[17]*z[121];
  z[373] = z[117]*z[19];
  z[374] = -z[117]*z[349];
  z[375] = z[171]*z[6];
  z[376] = z[223]/z[27];
  z[377] = z[225]/z[27];
  z[378] = z[235]/z[54];
  z[379] = -z[235]*z[350];
  z[380] = z[237]*pow(-z[21], -z[0]);
  z[381] = -z[21]*z[239];
  z[382] = z[239]*z[48];
  z[383] = -z[239]*z[350];

  ar[0] = -z[142]*z[313] + z[151]*z[315] + z[156]*z[317] - z[157]*z[321] - z[166]*z[20] + z[171]*z[23] + z[178]*z[315] + z[180]*z[21] - z[181]*z[19] - z[189]*z[321] + z[277]*(z[127]*z[267] + z[148]*z[269] + z[161]*z[272] + z[235]*(-z[136]*z[21] + z[20]*z[275] + z[20]*z[294]*z[311] - z[20]*z[94] - z[21]*z[295]*z[307]) + z[239]*(z[113]*z[20] + z[159]*z[21] - z[20]*z[274] + z[20]*z[336] + z[23]*z[333]) - z[243]*(-z[113]*z[315] - z[136]*z[19] + z[159]*z[321] - z[23]*z[275] + z[23]*z[94] + z[288]*z[307])) + z[278]*(-z[104]*z[251] + z[105]*z[248] + z[128]*z[254] + z[223]*(-z[120]*z[307] + z[292] + z[310]*z[77] + z[311]*z[324] - z[311]*z[325]) + z[226]*(rear_.a*z[310] - z[119]*z[307] + z[309]*z[324] - z[309]*z[325] + z[310]*z[76]) + z[230]*(rear_.a*z[1]*z[311] - z[119]*z[321] + z[120]*z[317] + z[291]*z[309] + z[313]*z[77] - z[315]*z[76])) + z[307]*(z[118] + z[16]*z[32] - z[18]*z[31]) + z[310]*(-rear_.Iyy*z[286]*z[310] + z[16]*z[65] - z[18]*z[64]);
  ar[1] = z[141]*z[317] + z[142]*z[321] - z[146]*z[321] + z[151]*z[317] + z[164]*z[307] - z[166]*z[311]*z[319] + z[178]*z[317] + z[183]*z[21] - z[184]*z[19] - z[187]*z[321] + z[277]*(z[127]*z[265] + z[148]*z[266] + z[161]*z[270] + z[235]*(-z[133]*z[21] - z[21]*z[294]*z[309] + z[289]*z[321] + z[293]*z[331] - z[311]*z[319]*z[94]) + z[239]*(z[144]*z[21] - z[19]*z[293]*z[321] - z[21]*z[294]*z[323] - z[287]*z[321] + z[319]*z[365]) - z[243]*(-z[113]*z[317] - z[133]*z[19] + z[144]*z[321] + z[274]*z[317] + z[290]*z[321] + z[321]*z[6]*z[94])) + z[278]*(z[101]*z[226] - z[104]*z[229] + z[105]*z[227] + z[128]*z[199] - z[223]*(z[296]*z[317] + z[307]*z[76]) + z[230]*(rear_.a*z[2]*z[310] - z[292]*z[311])) + z[321]*z[375];
  ar[2] = -z[166]*z[19] - z[169]*z[19] + z[171]*z[21] + z[173]*z[21] - z[182]*z[321] + z[277]*(z[127]*z[256] + z[148]*z[263] + z[161]*z[261] + z[235]*(z[115] + z[19]*z[321]*z[346]*pow(-z[21], -z[0]) - z[294]*z[338]) + z[239]*(z[113]*z[19] - z[139]*z[21] - z[19]*z[274] - z[279]*z[29] + z[279]*pow(-z[21], -z[0])) - z[243]*(-z[139]*z[321] - z[21]*z[275] + z[21]*z[29]*z[321]*z[346] + z[21]*z[94]));
  ar[3] = z[156]*z[311] + z[157]*z[309] + z[180]*z[320] - z[181]*z[323] + z[189]*z[309] + z[277]*(z[114]*z[267] + z[129]*z[269] + z[150]*z[272] + z[235]*(-z[136]*z[320] + z[309]*z[337]) + z[239]*(z[159]*z[320] + z[20]*z[295]*z[6]) - z[243]*(-z[136]*z[323] - z[159]*z[309])) + z[278]*(z[123]*z[254] - z[223]*z[297]*z[309] + z[226]*z[297]*z[311] + z[230]*(z[119]*z[309] + z[120]*z[311]) - z[248]*z[296]*z[309] + z[251]*z[296]*z[311]);
  ar[4] = z[141]*z[311] - z[142]*z[309] + z[146]*z[309] + z[151]*z[311] + z[166]*z[316] + z[171]*z[318] + z[178]*z[311] + z[183]*z[320] - z[184]*z[323] + z[187]*z[309] + z[277]*(z[114]*z[265] + z[129]*z[266] + z[150]*z[270] + z[235]*(-z[133]*z[320] - z[21]*z[295] - z[289]*z[309] - z[293]*z[311]*z[317] + z[316]*z[94]) + z[239]*(-z[10]*z[293]*z[322] - z[113]*z[316] + z[144]*z[320] + z[287]*z[309] + z[318]*z[333]) - z[243]*(-z[133]*z[323] - z[144]*z[309] + z[288] - z[290]*z[309] + z[318]*z[94] - z[365])) + z[278]*(z[123]*z[199] - z[223]*z[296]*z[311] - z[226]*z[296]*z[309] - z[227]*z[296]*z[309] + z[229]*z[296]*z[311] + z[230]*(rear_.a*z[5] - z[2]*z[276]));
  ar[5] = -z[166]*z[323] - z[169]*z[323] + z[171]*z[320] + z[173]*z[320] + z[182]*z[309] + z[277]*(z[114]*z[256] + z[129]*z[263] + z[150]*z[261] + z[235]*(-z[10]*z[319]*z[344]*z[346] + z[106] + z[309]*z[336]) + z[239]*(z[113]*z[323] - z[139]*z[320] + z[21]*z[293]*z[311] + z[288]*z[6] + z[295]*z[339]) - z[243]*(-z[10]*z[322]*z[344]*z[346] + z[139]*z[309] - z[289]*z[311] + z[320]*z[94]));
  ar[6] = -z[118] - z[16]*z[303]*(rear_.Ixz*z[2] + rear_.Izz*z[311]) + z[18]*z[303]*(rear_.Ixx*z[2] + rear_.Ixz*z[311]) - z[180]*z[6] - z[181]*z[3] + z[277]*(-z[102]*z[272] + z[103]*z[267] + z[126]*z[269] + z[136]*z[235]*z[6] + z[136]*z[243]*z[3] + z[239]*(-z[159]*z[6] + z[20]*z[293])) + z[278]*(z[119]*z[226] + z[120]*z[223] - z[248]*z[80] - z[251]*z[78]);
  ar[7] = -z[164] - z[183]*z[6] - z[184]*z[3] + z[277]*(-z[102]*z[270] + z[103]*z[265] + z[126]*z[266] + z[133]*z[235]*z[6] + z[133]*z[243]*z[3] - z[239]*(z[144]*z[6] - z[294]*pow(z[3], -z[0])*z[311])) + z[278]*(z[223]*z[76] - z[226]*z[77] - z[227]*z[80] - z[229]*z[78]);
  ar[8] = -z[166]*z[3] - z[169]*z[3] - z[173]*z[6] + z[277]*(-z[102]*z[261] + z[103]*z[256] + z[126]*z[263] + z[235]*(-z[102] - z[21]*z[321]*z[339]*z[346]) + z[239]*(z[113]*z[3] + z[139]*z[6] + z[19]*z[293] + z[287] - z[333]*z[6]) - z[243]*(-z[103] + z[21]*z[319]*z[338]*z[346])) - z[375];
  ar[9] = -front_.Izz*state_[8]*(-z[298]*z[309] + z[306]*z[311]) - front_.J*state_[13]*z[335] - state_[8]*z[20]*z[273]*z[53] - state_[8]*z[20]*z[93] - z[131] - z[273]*z[335]*z[56] + z[277]*(-z[159]*z[243] - z[235]*z[337] + z[267]*z[333] - z[272]*(-z[113] + z[274]));
  ar[10] = -z[187] + z[277]*(-z[144]*z[243] + z[235]*z[293]*z[321] + z[265]*z[333] - z[270]*(-z[113] + z[274]));
  ar[11] = -z[182] + z[277]*(z[139]*z[243] - z[235]*z[336] + z[256]*z[333] - z[261]*(-z[113] + z[274]));
  ar[12] = -rear_.J*z[286]*z[307] + z[278]*(z[119]*z[226] + z[120]*z[223] - z[76]*(state_[14]*z[317]*z[366] + z[17]*z[198] + z[246] - z[301]*z[321]*z[366]) - z[77]*(rear_.a*state_[8]*z[0]*z[13]*z[310] + state_[14]*z[321]*z[366] - state_[14]*z[321]*z[367] - state_[16]*z[298]*z[311] - state_[16]*z[312]*z[4] - z[120]*z[286]*z[310] + z[143]*z[304] - z[152]*z[304] - z[163]*z[303]*z[311] - z[17]*(-rear_.R*z[321]*z[366] + z[190]) - z[18]*z[25] - z[18]*z[285]*z[307] + z[221] - z[285]*z[303]*z[321] - z[286]*z[291] - z[286]*z[307]*z[77] + z[296]*z[33] + z[297]*z[46] - z[298]*z[309]*z[341] + z[298]*z[321]*z[356] + z[299]*z[310]*z[355] + z[300]*z[327]*z[342] + z[300]*z[342]*z[9] + 4*z[301]*z[312]*z[343] + z[301]*z[317]*z[366] - z[301]*z[317]*z[367] - z[303]*z[311]*z[57] + z[305]*z[311]*z[355] + z[306]*z[311]*z[341] - z[309]*z[327]*z[360] - z[312]*z[327]*z[356] - z[312]*z[356]*z[9] - z[315]*z[359] + z[329]*z[360]));
  ar[13] = z[278]*z[310]*(rear_.R/z[39] + rear_.r)*(z[223]*z[309] - z[226]*z[311] - z[227]*z[311] - z[229]*z[309]);
  ar[14] = 0;
  ar[15] = front_.J*z[91] + z[277]*(-z[113]*z[271] + z[136]*z[236] - z[159]*z[240] + z[268]*z[94]);
  ar[16] = front_.J*z[86] + z[277]*(-z[113]*(-state_[17]*z[364]*z[373] - z[117]*z[321]*z[334]*z[364] + z[117]*z[321]*z[347]*z[6] + z[154]*z[19]*z[347] - z[154]*z[321]*z[334]*z[349] - z[260] - z[302]*z[331]*z[374] + z[317]*z[334]*z[374]) + z[133]*z[236] - z[144]*z[240] + z[94]*(state_[17]*z[117]*z[321]*z[364] - z[117]*z[302]*z[321]*z[357] - z[117]*z[317]*z[347] - z[154]*z[321]*z[347] + z[154]*z[334]*z[357] - z[259] + z[321]*z[334]*z[374]*z[6] - z[334]*z[364]*z[373]));
  ar[17] = -front_.J*z[112] + z[277]*(-z[113]*z[263] + z[139]*z[239] + z[235]*z[321]*z[344]*z[346] + z[256]*z[94]);
  ar[18] = z[310]*z[340]*(-z[249]*z[311] - z[250]*z[309]);
  ar[19] = z[310]*z[340]*(z[223]*z[309] - z[225]*z[311] - z[228]*z[311] - z[229]*z[309]);
  ar[20] = 0;
  ar[21] = z[278]*(-z[14]*z[223]*z[327]*z[329]/z[28] - z[223]*z[309]*z[327]/z[27] - z[225]*z[328]*z[332]/z[28] - z[230]*z[343]*(z[10]*z[308] + z[10]*z[310]*z[351] + z[308]*z[8] + z[310]*z[351]*z[8]) - z[249]*z[310]*z[313]/z[27] + z[250]*z[311]*z[314]/z[27] + z[253]*z[332]/z[39] + z[328]*z[377] + z[329]*z[376] - z[330]*z[377]);
  ar[22] = -z[278]*z[310]*(z[14]*z[199]*z[343] + z[228]*z[313]/z[27] - z[229]*z[315]/z[27] + z[313]*z[377] + z[315]*z[376]);
  ar[23] = 0;
  ar[24] = z[278]*(z[223]*z[313] - z[225]*z[315] - z[230]*z[310] - z[249]*z[317] + z[250]*z[321] - z[253]*z[307]);
  ar[25] = z[278]*(-z[199]*z[307] - z[223]*z[321] - z[226]*z[317] - z[227]*z[317] + z[229]*z[321]);
  ar[26] = 0;
  ar[27] = z[277]*z[350]*(z[19]*z[239]*z[368] + z[19]*z[269] - z[23]*z[239] + z[235]*z[315] - z[235]*z[321]*z[368] - z[267]*z[321]);
  ar[28] = z[277]*z[350]*(z[19]*z[266] + z[19]*z[321]*z[382]/z[54] + z[235]*z[317] - z[239]*z[321]*z[6] - z[265]*z[321] - z[331]*z[378]*z[48]);
  ar[29] = z[277]*z[350]*(z[19]*z[263] - z[256]*z[321] + z[321]*z[344]*z[378] - z[362]*z[381] + z[381]);
  ar[30] = z[277]*(z[19]*z[20]*z[379] + z[20]*z[321]*z[383] - z[21]*z[23]*z[379] - z[235]*z[344]*z[349]*z[82] + z[239]*z[315]*z[353] + z[239]*z[321]*z[352]*z[82] + z[243]*z[350]*(-z[0]*z[345] + z[10]*z[308]*z[310] + z[331]*z[368] - z[362]*z[82]) + z[267]*z[344]*z[350] - z[269]*z[321]*z[353] + z[272]*z[59]);
  ar[31] = z[277]*(z[235]*z[321]*z[344]*z[349]*z[48] + z[235]*z[321]*z[353]*z[6] + z[239]*z[317]*z[353] + z[243]*z[350]*(-z[0]*z[309]*z[330] + z[0]*z[321]*z[339] + z[331]*z[71]/z[54] + z[362]*z[71]) + z[265]*z[344]*z[350] - z[266]*z[321]*z[353] + z[270]*z[59] - z[3]*z[331]*z[383] - z[319]*z[338]*z[379] - z[331]*z[352]*z[382]);
  ar[32] = z[277]*(-z[19]*z[241]*z[321]*z[350] - z[237]*z[29]*z[350] + z[241]*z[321]*z[357]*pow(-z[21], -z[0]) + z[242]*z[344]*z[350]*(z[0] + z[331]/z[54] + z[362]) + z[258]*z[344]*z[350] + z[262]*z[59] - z[264]*z[321]*z[353] + z[350]*z[380] + z[361]*z[380]);
  ar[33] = z[277]*(z[19]*z[268] - z[20]*z[242] - z[21]*(z[112]*z[138] + z[113]*z[33] + z[160]*z[46] - z[168]*z[26] + z[170]*z[303]*z[311] - z[175]*z[26] - z[177]*z[303]*z[311] + z[26]*z[274]*z[56] - z[274]*z[33] + z[274]*z[34]*z[53] + z[275]*z[303]*z[311]*z[56] - z[275]*z[34]*z[35] - z[275]*z[99] - z[281]*(z[0]*z[280]*z[311]*z[329]*z[369] - z[0]*z[345]*z[374] - z[0]*z[357]*z[88]*z[89] - z[10]*z[117]*z[308]*z[310]*z[349] - z[10]*z[284]*z[314]*z[369] - z[117]*z[29]*z[370] - z[117]*z[331]*z[370] + z[162]*z[331]*z[349] - z[162]*z[361] + z[186]) + z[282]*z[81] - z[35]*(-z[138]*z[69] + z[185] - z[321]*z[347]*z[89] + z[334]*z[357]*z[89]) - z[35]*(z[117]*z[23]*z[346] + z[135] + z[162]*z[19]*z[346] + z[19]*z[370]*z[371] - z[346]*z[88]*z[89]) - z[53]*(z[160]*z[69] + z[19]*z[347]*z[89] + z[192] - z[321]*z[334]*z[369]) - z[53]*(z[117]*z[315]*z[346] + z[125] + z[162]*z[321]*z[346] + z[299]*z[310]*z[346]*z[89] + z[305]*z[311]*z[346]*z[89] + z[321]*z[370]*z[371]) + z[94]*z[99]) - z[23]*z[237] - z[241]*z[315] + z[271]*z[321]);
  ar[34] = z[277]*(z[19]*(-z[121]*z[302]*z[321]*z[357]/2 - z[121]*z[317]*z[347]/2 - z[121]*z[321]*z[334]*z[349]*z[6]/2 - z[121]*z[334]*z[348]*z[363] + z[153]*z[321]*z[347]/2 - z[153]*z[334]*z[357]/2 - z[259] + z[321]*z[348]*z[372]*z[71]) - z[21]*(-z[176]*z[18]*z[6] - z[207]*z[35] - z[208]*z[53] + z[245] - z[281]*(-z[155]*z[331]*z[349] + z[155]*z[361] + z[231]) - z[35]*(z[117]*z[321]*z[346]*z[6] + z[154]*z[19]*z[346] + z[165] - z[19]*z[364]*z[371])) - z[237]*z[321]*z[6] - z[241]*z[317] - z[242]*z[311]*z[319] + z[321]*(z[121]*z[302]*z[331]*z[349]/2 - z[121]*z[310]*z[311]*z[334]*z[348]*z[71] - z[121]*z[311]*z[322]*z[347]/2 - z[121]*z[317]*z[334]*z[349]/2 - z[153]*z[19]*z[347]/2 + z[153]*z[310]*z[311]*z[334]*z[349]/2 - z[260] - z[348]*z[363]*z[372]));
  ar[35] = z[277]*(-z[19]*z[242] + z[19]*z[258] - z[21]*z[237] - z[21]*z[262] + z[264]*z[321]);

  delete [] z;
}

/** Computes the n-d array of shape (12, 12)
 *
 * @param[out] ar a C-array of with 144 elements
 */
//  void Bicycle::gif_ud_zero_du(double ar[144]) const;
void Bicycle::gif_ud_zero_du(double ar[144]) const
{
  double * z = new double[297];

  z[0] = -2;
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = sin(state_[3]);
  z[4] = cos(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = cos(state_[3]);
  z[7] = pow(z[1], -z[0]);
  z[8] = pow(z[2], -z[0]);
  z[9] = pow(z[4], -z[0]);
  z[10] = pow(z[5], -z[0]);
  z[11] = state_[10] + state_[8]*z[1];
  z[12] = state_[12] + z[11];
  z[13] = -z[11];
  z[14] = rear_.Ixx*z[5] + rear_.Ixz*z[2];
  z[15] = rear_.Ixz*z[5] + rear_.Izz*z[2];
  z[16] = z[10] + z[8];
  z[17] = rear_.a*z[2] - rear_.b*z[5];
  z[18] = front_.Ixx*z[5]*z[6] + front_.Ixz*z[2];
  z[19] = front_.Ixz*z[5]*z[6] + front_.Izz*z[2];
  z[20] = state_[8]*z[4]*z[5] + state_[9]*z[2];
  z[21] = front_.a*z[2] - front_.b*z[5]*z[6];
  z[22] = state_[10]*z[2] - state_[8]*z[1]*z[2];
  z[23] = state_[10]*z[5] - state_[8]*z[1]*z[5];
  z[24] = state_[8]*z[2]*z[4] - state_[9]*z[5];
  z[25] = rear_.a*z[4]*z[5] + rear_.b*z[2]*z[4];
  z[26] = -z[20];
  z[27] = z[1]*z[3] - z[2]*z[4]*z[6];
  z[28] = rear_.Ixx*z[2]*z[4] - rear_.Ixz*z[4]*z[5];
  z[29] = rear_.Ixz*z[2]*z[4] - rear_.Izz*z[4]*z[5];
  z[30] = state_[10]*z[4]*z[5] - state_[9]*z[1]*z[2];
  z[31] = z[1]*z[2]*z[3] - z[4]*z[6];
  z[32] = state_[11] + z[26];
  z[33] = -z[1]*z[6] - z[2]*z[3]*z[4];
  z[34] = -z[0]*z[1]*z[6] - z[0]*z[2]*z[3]*z[4];
  z[35] = -state_[10]*z[2]*z[4] - state_[9]*z[1]*z[5];
  z[36] = -z[1]*z[2]*z[6] - z[3]*z[4];
  z[37] = -z[0]*z[1]*z[2]*z[6] - z[0]*z[3]*z[4];
  z[38] = sqrt(z[16]*z[9]);
  z[39] = pow(z[27], -z[0]);
  z[40] = pow(z[27], 3);
  z[41] = -state_[11] - z[20];
  z[42] = z[10]*z[9] + z[8]*z[9];
  z[43] = z[1]*z[10]*z[4] + z[1]*z[4]*z[8];
  z[44] = state_[11]*z[3] + z[26]*z[3];
  z[45] = state_[11]*z[6] + z[26]*z[6];
  z[46] = sqrt(z[42]);
  z[47] = pow(z[42], 3.0/2.0);
  z[48] = state_[10]*z[2]*z[5]*z[9] + state_[9]*z[1]*z[10]*z[4];
  z[49] = state_[9]*z[1]*z[10]*z[4] + state_[9]*z[1]*z[4]*z[8];
  z[50] = state_[11]*z[1]*z[6] + state_[11]*z[2]*z[3]*z[4] + state_[9]*z[3]*z[4];
  z[51] = -state_[11]*z[1]*z[3] + state_[11]*z[2]*z[4]*z[6] + state_[9]*z[4]*z[6];
  z[52] = front_.Ixx*z[27] + front_.Ixz*z[4]*z[5];
  z[53] = front_.Ixz*z[27] + front_.Izz*z[4]*z[5];
  z[54] = front_.a*z[4]*z[5] - front_.b*z[27];
  z[55] = -z[13]*z[6] + z[24]*z[3];
  z[56] = -z[13]*z[3] - z[24]*z[6];
  z[57] = z[10]*z[9] + z[39];
  z[58] = -z[55];
  z[59] = -rear_.a*z[26] + rear_.b*z[24];
  z[60] = sqrt(z[57]);
  z[61] = pow(z[57], 3.0/2.0);
  z[62] = -rear_.Ixx*z[24] - rear_.Ixz*z[26];
  z[63] = -rear_.Ixz*z[24] - rear_.Izz*z[26];
  z[64] = rear_.R*z[2]*z[4]/z[46] + rear_.a;
  z[65] = -state_[11]*z[5]*z[6] + state_[8]*z[4]*z[6] + z[22]*z[3];
  z[66] = -rear_.R*z[4]*z[5]/z[46] + rear_.b;
  z[67] = -state_[13] - z[55];
  z[68] = -state_[11]*z[3]*z[5] + state_[8]*z[3]*z[4] - z[22]*z[6];
  z[69] = z[68];
  z[70] = z[2]*z[5]*z[9] + z[27]*z[4]*z[5]*z[6];
  z[71] = front_.R/z[60] + front_.r;
  z[72] = -z[2]*z[24] + z[26]*z[5];
  z[73] = state_[9] + z[2]*z[26] + z[24]*z[5];
  z[74] = -rear_.R*z[2]*z[4]/z[46] - rear_.r*z[2]*z[4];
  z[75] = -rear_.R*z[4]*z[5]/z[46] - rear_.r*z[4]*z[5];
  z[76] = -front_.R*z[4]*z[5]/z[60] + front_.b;
  z[77] = rear_.r*z[4]*z[5] - z[66];
  z[78] = -state_[10]*z[4]*z[5]*z[6] + state_[9]*z[1]*z[2]*z[6] + z[50];
  z[79] = -z[1]*z[10]*z[4] - z[27]*z[36];
  z[80] = -rear_.r*z[2]*z[4] - z[64];
  z[81] = z[3]*z[30] + z[51];
  z[82] = -z[30]*z[6] + z[50];
  z[83] = state_[10]*z[3]*z[4]*z[5] - state_[9]*z[1]*z[2]*z[3] + z[51];
  z[84] = -z[1]*z[26] + z[13]*z[4]*z[5] + z[30];
  z[85] = front_.R*z[1]*z[5]/z[60] + front_.r*z[1]*z[5];
  z[86] = -z[0]*z[1]*z[10]*z[4] - z[27]*z[37];
  z[87] = -z[1]*z[10]*z[4] + z[27]*z[37]/2;
  z[88] = -z[1]*z[24] - z[13]*z[2]*z[4] + z[35];
  z[89] = state_[10]*z[0]*z[4]*z[5]*z[6] - state_[11]*z[0]*z[1]*z[6] - state_[11]*z[0]*z[2]*z[3]*z[4] - state_[9]*z[0]*z[1]*z[2]*z[6] - state_[9]*z[0]*z[3]*z[4];
  z[90] = front_.Ixx*z[56] - front_.Ixz*z[41];
  z[91] = front_.Ixz*z[56] - front_.Izz*z[41];
  z[92] = -front_.R*z[4]*z[5]/z[60] - front_.r*z[4]*z[5];
  z[93] = -z[87];
  z[94] = -front_.a*z[41] - front_.b*z[56];
  z[95] = -front_.r*z[4]*z[5] + z[76];
  z[96] = -front_.R*z[27]/z[60] + front_.a;
  z[97] = rear_.r*z[1]*z[2]*z[4] + z[1]*z[74];
  z[98] = rear_.r*z[1]*z[4]*z[5] + z[1]*z[75];
  z[99] = front_.b*z[3] + z[3]*z[92];
  z[100] = front_.b*z[6] + z[6]*z[92];
  z[101] = rear_.b*z[1] + z[98];
  z[102] = -rear_.a*z[1] + z[97];
  z[103] = rear_.Ixx*z[26] + rear_.Ixz*z[0]*z[24] + rear_.Iyy*z[26] - rear_.Izz*z[26];
  z[104] = z[27]*z[56] - z[4]*z[41]*z[5];
  z[105] = rear_.Ixx*z[24] - rear_.Ixz*z[0]*z[26] - rear_.Iyy*z[24] - rear_.Izz*z[24];
  z[106] = front_.R*z[36]/z[60] + front_.r*z[36];
  z[107] = z[10]*z[9]/z[46] + z[8]*z[9]/z[46];
  z[108] = -rear_.Ixz*z[22] - rear_.Iyy*z[13]*z[5] + rear_.Izz*z[23] + rear_.J*state_[12]*z[5] + z[13]*z[14];
  z[109] = z[33]*z[96];
  z[110] = -front_.R*z[27]/z[60] - front_.r*z[27];
  z[111] = -rear_.Ixx*z[22] + rear_.Ixz*z[23] + rear_.Iyy*z[13]*z[2] - rear_.J*state_[12]*z[2] - z[13]*z[15];
  z[112] = -front_.r*z[2]*z[33] - z[3]*z[5]*z[92];
  z[113] = front_.r*z[27] - z[96];
  z[114] = -front_.b*z[3]*z[5] + z[112];
  z[115] = z[13]*z[4]*z[5] + z[2]*z[4]*z[49]/z[42] + z[30];
  z[116] = rear_.Iyy*state_[9]*z[4] + z[2]*z[4]*z[63] + z[4]*z[5]*z[62];
  z[117] = -z[2]*z[74] - z[5]*z[75];
  z[118] = -z[27]*z[78] + z[48];
  z[119] = -front_.r*z[33]*z[4]*z[5] - z[33]*z[92];
  z[120] = -z[27]*z[89]/2 + z[48];
  z[121] = z[2]*z[4]*z[75] - z[4]*z[5]*z[74];
  z[122] = rear_.R*z[1]*z[2]/z[46] - rear_.R*z[2]*z[4]*z[43]/z[47] + rear_.r*z[1]*z[2];
  z[123] = rear_.R*z[1]*z[5]/z[46] - rear_.R*z[4]*z[43]*z[5]/z[47] + rear_.r*z[1]*z[5];
  z[124] = -state_[10]*z[0]*z[2]*z[5]*z[9] - state_[9]*z[0]*z[1]*z[10]*z[4] - z[27]*z[89];
  z[125] = z[10]*z[9]/z[60] + z[39]/z[60];
  z[126] = -front_.r*z[3]*z[33] + z[110]*z[6];
  z[127] = z[117] + z[17];
  z[128] = rear_.a*z[5] + rear_.b*z[2] + z[2]*z[75] - z[5]*z[74];
  z[129] = -z[126];
  z[130] = front_.R*state_[10]*z[2]*z[4]/z[60] + front_.R*state_[9]*z[1]*z[5]/z[60] + front_.r*state_[10]*z[2]*z[4] + front_.r*state_[9]*z[1]*z[5];
  z[131] = front_.a*z[6] + z[126];
  z[132] = -front_.Ixx*z[58] + front_.Iyy*z[58] - front_.Izz*z[58] - front_.J*state_[13];
  z[133] = front_.r*z[33]*z[5]*z[6] + z[110]*z[3]*z[5];
  z[134] = -z[131];
  z[135] = -front_.b*z[33] + z[119];
  z[136] = -z[5]*(-front_.a*z[3] - front_.r*z[33]*z[6] - z[110]*z[3]);
  z[137] = z[121] + z[25];
  z[138] = -z[24]*z[74] + z[26]*z[75];
  z[139] = front_.a*z[3]*z[5] + z[133];
  z[140] = -z[33]*z[41] - z[4]*z[5]*z[58] + z[78];
  z[141] = z[0]*z[1]*z[10]*z[4]/z[60] + z[0]*z[27]*z[36]/z[60];
  z[142] = z[27]*z[58] - z[33]*z[56] + z[35];
  z[143] = z[27]*z[41] + z[4]*z[5]*z[56] - z[83];
  z[144] = front_.Ixx*z[56] + front_.Ixz*z[0]*z[41] - front_.Iyy*z[56] - front_.Izz*z[56];
  z[145] = front_.r*z[27]*z[33] + z[110]*z[33];
  z[146] = front_.R*z[2]*z[4]/z[60] - front_.R*z[4]*z[5]*z[70]/z[61] + front_.r*z[2]*z[4];
  z[147] = front_.R*z[78]/z[60] + front_.r*z[78];
  z[148] = z[110]*z[2] - z[5]*z[6]*z[92];
  z[149] = front_.R*z[4]*z[5]*z[79]/z[61] + z[85];
  z[150] = rear_.Iyy*state_[8]*z[4] - z[14]*z[26] + z[15]*z[24] + z[2]*z[62] - z[5]*z[63];
  z[151] = -front_.Ixx*z[3]*z[41] - front_.Ixz*z[3]*z[56] - front_.Iyy*z[44] - z[3]*z[91];
  z[152] = front_.R*z[33]*z[39]/z[61] - front_.R*z[33]/z[60] - front_.r*z[33];
  z[153] = rear_.R*state_[10]*z[2]*z[4]/z[46] + rear_.R*state_[9]*z[1]*z[5]/z[46] - rear_.R*z[4]*z[49]*z[5]/z[47] + rear_.r*state_[10]*z[2]*z[4] + rear_.r*state_[9]*z[1]*z[5];
  z[154] = -front_.R*z[27]*z[70]/z[61] + front_.R*z[4]*z[5]*z[6]/z[60] + front_.r*z[4]*z[5]*z[6];
  z[155] = rear_.R*state_[10]*z[4]*z[5]/z[46] - rear_.R*state_[9]*z[1]*z[2]/z[46] + rear_.R*z[2]*z[4]*z[49]/z[47] + rear_.r*state_[10]*z[4]*z[5] - rear_.r*state_[9]*z[1]*z[2];
  z[156] = front_.a*z[33] + z[145];
  z[157] = -rear_.r*z[1]*z[26] + state_[14]*z[4]*z[5]/z[46] + state_[15]*z[1]*z[2]*z[4]/z[46] - state_[16]*z[2]*z[4] + z[12]*z[75];
  z[158] = z[148] + z[21];
  z[159] = rear_.r*z[1]*z[24] + state_[14]*z[2]*z[4]/z[46] - state_[15]*z[1]*z[4]*z[5]/z[46] + state_[16]*z[4]*z[5] + z[12]*z[74];
  z[160] = -z[110]*z[4]*z[5] + z[27]*z[92];
  z[161] = rear_.a*z[0]*z[24] + rear_.b*z[0]*z[26] - z[138];
  z[162] = rear_.a*z[0]*z[24] + rear_.b*z[0]*z[26] - z[138];
  z[163] = -rear_.Ixx*z[30] + rear_.Ixz*z[35] + rear_.Iyy*z[1]*z[26] + rear_.Iyy*z[13]*z[4]*z[5] - rear_.J*state_[12]*z[4]*z[5] + z[1]*z[63] + z[13]*z[29];
  z[164] = -rear_.Ixz*z[30] - rear_.Iyy*z[1]*z[24] + rear_.Iyy*z[13]*z[2]*z[4] + rear_.Izz*z[35] - rear_.J*state_[12]*z[2]*z[4] - z[1]*z[62] - z[13]*z[28];
  z[165] = front_.Ixx*z[45] - front_.Ixz*z[24] - front_.Ixz*z[3]*z[58] + front_.Iyy*z[41]*z[6] + z[6]*z[91];
  z[166] = front_.R*z[27]*z[79]/z[61] + z[106];
  z[167] = z[110]*z[56] - z[41]*z[92];
  z[168] = -z[160] + z[54];
  z[169] = front_.Ixx*z[3]*z[58] - front_.Iyy*z[3]*z[58] + front_.Iyy*z[56]*z[6] - front_.Izz*z[24] + front_.J*state_[13]*z[3] - z[6]*z[90];
  z[170] = state_[17]*z[4]*z[5]/z[60] + state_[18]*z[27]*z[33]/z[60] - z[67]*z[92];
  z[171] = state_[15]*z[107] + state_[16]*z[1] + z[24]*z[75] + z[26]*z[74];
  z[172] = -z[13]*z[74] + z[153];
  z[173] = z[13]*z[75] - z[155];
  z[174] = z[118]*z[4]*z[5]/z[57] + z[27]*z[58] + z[35];
  z[175] = -rear_.a*z[0]*z[13] + z[172];
  z[176] = rear_.b*z[0]*z[13] - z[173];
  z[177] = -z[176];
  z[178] = -z[4]*(-state_[9]*z[0]*z[1]*z[10] - state_[9]*z[0]*z[1]*z[8] + z[1]*z[2]*z[26] + z[1]*z[24]*z[5] - z[10]*z[4]*z[49]/z[42] - z[4]*z[49]*z[8]/z[42])/z[46];
  z[179] = front_.Ixz*z[45] + z[169];
  z[180] = front_.Ixx*z[68] + front_.Ixz*z[23] + front_.Iyy*z[2]*z[58] - front_.Iyy*z[3]*z[41]*z[5] - front_.J*state_[13]*z[2] - z[19]*z[58] - z[3]*z[5]*z[91];
  z[181] = front_.Iyy*z[65] - z[18]*z[41] - z[19]*z[56] + z[2]*z[90] - z[5]*z[6]*z[91];
  z[182] = front_.Ixz*z[68] - front_.Iyy*z[3]*z[5]*z[56] - front_.Iyy*z[5]*z[58]*z[6] + front_.J*state_[13]*z[5]*z[6] + z[18]*z[58] + z[3]*z[5]*z[90];
  z[183] = -z[118]*z[27]/z[57] + z[4]*z[5]*z[58] - z[78];
  z[184] = -front_.R*z[118]*z[4]*z[5]/z[61] + z[130];
  z[185] = -front_.R*z[120]*z[4]*z[5]/z[61] + z[130];
  z[186] = -(-state_[10]*z[0]*z[2]*z[4] - state_[9]*z[0]*z[1]*z[5] + z[0]*z[27]*z[58] - z[124]*z[4]*z[5]/z[57])/(2*z[60]);
  z[187] = front_.Izz*z[23] + z[182];
  z[188] = front_.r*z[33]*z[41] + state_[19]*z[27] + z[170];
  z[189] = front_.R*z[118]*z[27]/z[61] + z[147];
  z[190] = -(z[0]*z[4]*z[5]*z[58] + z[124]*z[27]/z[57] + z[89])/(2*z[60]);
  z[191] = front_.r*z[33]*z[56] - state_[17]*z[27]/z[60] + state_[18]*z[33]*z[4]*z[5]/z[60] + state_[19]*z[4]*z[5] + z[110]*z[67];
  z[192] = z[191];
  z[193] = front_.R*z[120]*z[27]/z[61] + z[147];
  z[194] = front_.Ixx*z[82] + front_.Ixz*z[35] - front_.Iyy*z[33]*z[41] + front_.Iyy*z[4]*z[5]*z[58] - front_.J*state_[13]*z[4]*z[5] - z[33]*z[91] - z[53]*z[58];
  z[195] = front_.Iyy*z[81] - z[27]*z[91] + z[4]*z[5]*z[90] - z[41]*z[52] - z[53]*z[56];
  z[196] = state_[18]*z[125] - state_[19]*z[33] - z[110]*z[41] - z[56]*z[92];
  z[197] = state_[10]*z[1]*z[4]*z[5]/z[46] - state_[9]*z[2]*z[7]/z[46] + state_[9]*z[2]*z[9]/z[46] + z[1]*z[13]*z[4]*z[5]/z[46] + z[1]*z[2]*z[4]*z[49]/z[47] + z[107]*z[26];
  z[198] = state_[10]*z[1]*z[2]*z[4]/z[46] + state_[9]*z[5]*z[7]/z[46] - state_[9]*z[5]*z[9]/z[46] + z[1]*z[13]*z[2]*z[4]/z[46] - z[1]*z[4]*z[49]*z[5]/z[47] - z[107]*z[24];
  z[199] = front_.Ixz*z[82] - front_.Iyy*z[27]*z[58] - front_.Iyy*z[33]*z[56] + front_.Izz*z[35] + front_.J*state_[13]*z[27] + z[33]*z[90] + z[52]*z[58];
  z[200] = z[110]*z[58] + z[184];
  z[201] = z[189] + z[58]*z[92];
  z[202] = z[172]*z[5] + z[173]*z[2];
  z[203] = z[175]*z[5] + z[177]*z[2];
  z[204] = state_[10]*z[0]*z[2]*z[5]*z[9] + state_[9]*z[0]*z[1]*z[10]*z[4] - z[0]*z[27]*z[78] + z[10]*z[118]*z[9]/z[57] + z[118]*z[39]/z[57] - z[27]*z[33]*z[41] - z[33]*z[4]*z[5]*z[56];
  z[205] = z[118]*z[27]*z[33]/z[61] + z[125]*z[41] - z[27]*z[83]/z[60] - z[33]*z[4]*z[5]*z[58]/z[60] + z[33]*z[78]/z[60];
  z[206] = z[124]*z[27]*z[33]/(2*z[61]) + z[125]*z[41] - z[27]*z[83]/z[60] - z[33]*z[4]*z[5]*z[58]/z[60] + z[33]*z[78]/z[60];
  z[207] = -state_[10]*z[2]*z[33]*z[4]/z[60] - state_[9]*z[1]*z[33]*z[5]/z[60] + z[118]*z[33]*z[4]*z[5]/z[61] + z[125]*z[56] + z[27]*z[33]*z[58]/z[60] - z[4]*z[5]*z[83]/z[60];
  z[208] = z[197]*z[5] + z[198]*z[2];
  z[209] = front_.R*z[27]*z[33]*z[4]*z[5]*z[67]/z[61] - front_.a*z[0]*z[41] + front_.r*z[27]*z[41] + front_.r*z[83] + state_[17]*z[27]*z[33]*z[4]*z[5]/z[61] - state_[18]*z[125] + state_[18]*z[39]*pow(-z[33], -z[0])/z[61] + state_[18]*z[39]/z[60] - state_[18]*pow(-z[33], -z[0])/z[60] - z[0]*z[110]*z[41];
  z[210] = -front_.a*z[0]*z[56] + front_.r*z[0]*z[33]*z[58] + front_.r*z[27]*z[56] - state_[17]*z[33]*z[39]/z[61] + state_[17]*z[33]/z[60] + state_[18]*z[27]*z[4]*z[5]*pow(-z[33], -z[0])/z[61] + state_[18]*z[27]*z[4]*z[5]/z[60] - z[0]*z[110]*z[56] - z[152]*z[67];
  z[211] = -z[200]*z[4]*z[5] + z[201]*z[27];
  z[212] = rear_.b*state_[8]*z[4] + rear_.r*state_[9]*z[2]*z[4] + rear_.r*z[1]*z[13]*z[5] + rear_.r*z[1]*z[23] - rear_.r*z[26]*z[4] - state_[14]*z[1]*z[5]/z[46] + state_[14]*z[4]*z[43]*z[5]/z[47] + state_[15]*z[1]*z[2]*z[4]*z[43]/z[47] - state_[15]*z[2]*z[7]/z[46] + state_[15]*z[2]*z[9]/z[46] + state_[16]*z[1]*z[2] + state_[8]*z[4]*z[75] + z[117]*z[26] + z[12]*z[123] + z[17]*z[26] - z[171]*z[2] - z[2]*z[59];
  z[213] = -rear_.a*state_[8]*z[4] - rear_.r*state_[9]*z[4]*z[5] + rear_.r*z[1]*z[13]*z[2] + rear_.r*z[1]*z[22] + rear_.r*z[24]*z[4] - state_[14]*z[1]*z[2]/z[46] + state_[14]*z[2]*z[4]*z[43]/z[47] - state_[15]*z[1]*z[4]*z[43]*z[5]/z[47] + state_[15]*z[5]*z[7]/z[46] - state_[15]*z[5]*z[9]/z[46] - state_[16]*z[1]*z[5] + state_[8]*z[4]*z[74] - z[117]*z[24] + z[12]*z[122] - z[17]*z[24] + z[171]*z[5] + z[5]*z[59];
  z[214] = -rear_.a*state_[8]*z[4] - rear_.r*state_[9]*z[4]*z[5] + rear_.r*z[1]*z[13]*z[2] + rear_.r*z[1]*z[22] + rear_.r*z[24]*z[4] - state_[14]*z[1]*z[2]/z[46] + state_[14]*z[2]*z[4]*z[43]/z[47] - state_[15]*z[1]*z[4]*z[43]*z[5]/z[47] + state_[15]*z[5]*z[7]/z[46] - state_[15]*z[5]*z[9]/z[46] - state_[16]*z[1]*z[5] + state_[8]*z[4]*z[74] - z[117]*z[24] + z[12]*z[122] - z[17]*z[24] + z[171]*z[5] + z[5]*z[59];
  z[215] = -rear_.a*z[0]*z[1]*z[13] + rear_.b*state_[9]*z[4] + rear_.r*state_[9]*z[5]*z[9] + rear_.r*z[1]*z[35] + state_[9]*z[4]*z[75] + z[1]*z[153] + z[1]*z[159] + z[121]*z[26] - z[13]*z[97] - z[171]*z[4]*z[5] + z[25]*z[26] - z[4]*z[5]*z[59];
  z[216] = -rear_.a*state_[9]*z[4] - rear_.b*z[0]*z[1]*z[13] + rear_.r*state_[9]*z[2]*z[9] + rear_.r*z[1]*z[30] + state_[9]*z[4]*z[74] - z[1]*z[155] - z[1]*z[157] - z[121]*z[24] + z[13]*z[98] - z[171]*z[2]*z[4] - z[2]*z[4]*z[59] - z[24]*z[25];
  z[217] = z[215];
  z[218] = -rear_.a*state_[9]*z[4] - rear_.b*z[0]*z[1]*z[13] + rear_.r*state_[9]*z[2]*z[9] + rear_.r*z[1]*z[30] + state_[9]*z[4]*z[74] - z[1]*z[155] - z[1]*z[157] - z[121]*z[24] + z[13]*z[98] - z[171]*z[2]*z[4] - z[2]*z[4]*z[59] - z[24]*z[25];
  z[219] = -rear_.a*z[1]*z[24] + rear_.a*z[13]*z[2]*z[4] + rear_.a*z[35] - rear_.b*z[1]*z[26] - rear_.b*z[13]*z[4]*z[5] + rear_.b*z[30] + z[153]*z[2]*z[4] + z[155]*z[4]*z[5] + z[157]*z[4]*z[5] + z[159]*z[2]*z[4] + z[24]*z[97] - z[26]*z[98] + z[30]*z[75] - z[35]*z[74];
  z[220] = -front_.a*z[0]*z[58]*z[6] - front_.b*z[3]*z[41] - front_.b*z[44] + front_.r*z[24]*z[33] - front_.r*z[3]*z[4]*z[41]*z[5] - state_[17]*z[2]*z[4]/z[60] + state_[17]*z[4]*z[5]*z[70]/z[61] - state_[18]*z[27]*z[3]*z[4]*z[5]/z[60] + state_[18]*z[27]*z[33]*z[70]/z[61] - state_[18]*z[33]*z[4]*z[5]*z[6]/z[60] - state_[19]*z[4]*z[5]*z[6] - z[146]*z[67] + z[184]*z[6] - z[3]*z[41]*z[92] - z[44]*z[92];
  z[221] = front_.R*z[27]*z[33]*z[4]*z[5]*z[56]/z[61] - front_.r*z[0]*z[33]*z[41] + state_[18]*(z[0]*z[27]*z[33]/z[60] + z[10]*z[27]*z[33]*z[9]/z[61] + z[33]*z[40]/z[61]) + z[152]*z[41] + z[170] - z[189] + z[58]*z[92];
  z[222] = -front_.R*z[124]*z[27]/(2*z[61]) + front_.R*z[27]*z[33]*z[4]*z[5]*z[56]/z[61] - front_.r*z[0]*z[33]*z[41] + state_[18]*(-z[10]*z[27]*z[34]*z[9]/z[61] - 4*z[27]*z[33]/z[60] - z[34]*z[40]/z[61])/2 - z[147] + z[170] + z[41]*(front_.R*z[0]*z[33]/z[60] - front_.R*z[34]*z[39]/z[61] + front_.r*z[0]*z[33])/2 + z[58]*z[92];
  z[223] = -front_.a*z[24] - front_.a*z[3]*z[58] + front_.a*z[56]*z[6] - front_.b*z[41]*z[6] - front_.b*z[45] + state_[18]*(z[0]*z[2]*z[5]*z[9]/z[60] + z[0]*z[27]*z[4]*z[5]*z[6]/z[60] + z[10]*z[70]*z[9]/z[61] + z[39]*z[70]/z[61]) + state_[19]*z[3]*z[4]*z[5] - z[110]*z[24] - z[146]*z[56] - z[154]*z[41] - z[184]*z[3] - z[41]*z[6]*z[92] - z[45]*z[92];
  z[224] = -rear_.a*z[13]*z[5] + rear_.a*z[23] - rear_.b*z[13]*z[2] + rear_.b*z[22] - rear_.r*z[1]*z[2]*z[26] - rear_.r*z[1]*z[24]*z[5] - state_[15]*(-z[0]*z[1]*z[10]*z[4]/z[46] - z[0]*z[1]*z[4]*z[8]/z[46] - z[10]*z[43]*z[9]/z[47] - z[43]*z[8]*z[9]/z[47]) + state_[16]*z[4] + z[122]*z[26] + z[123]*z[24] - z[153]*z[5] + z[155]*z[2] + z[157]*z[2] - z[159]*z[5] + z[22]*z[75] - z[23]*z[74];
  z[225] = front_.a*z[23] - front_.a*z[3]*z[5]*z[56] - front_.a*z[5]*z[58]*z[6] - front_.b*z[2]*z[58] + front_.b*z[3]*z[41]*z[5] - state_[19]*z[31] + z[110]*z[23] - z[112]*z[41] - z[149]*z[56] - z[184]*z[5]*z[6] + z[188]*z[2] - z[189]*z[2];
  z[226] = -front_.a*z[27]*z[58] - front_.a*z[33]*z[56] + front_.a*z[35] + front_.b*z[33]*z[41] - front_.b*z[4]*z[5]*z[58] - front_.b*z[82] + z[110]*z[35] - z[119]*z[41] - z[184]*z[27] + z[188]*z[4]*z[5] - z[189]*z[4]*z[5] - z[82]*z[92];
  z[227] = z[126]*z[58] + z[191]*z[6] + z[220];
  z[228] = -z[129]*z[58] + z[192]*z[6] + z[220];
  z[229] = front_.a*z[0]*z[33]*z[58] + front_.b*z[81] - front_.r*z[33]*z[35] + front_.r*z[4]*z[5]*z[83] - z[145]*z[58] - z[160]*z[41] - z[184]*z[33] - z[191]*z[33] - z[196]*z[4]*z[5] - z[4]*z[5]*z[94] + z[41]*z[54] + z[81]*z[92];
  z[230] = -z[126]*z[56] + z[191]*z[3] - z[223];
  z[231] = -front_.a*z[81] + front_.b*z[0]*z[33]*z[58] - front_.r*z[27]*z[83] + front_.r*z[33]*z[82] - z[110]*z[81] + z[119]*z[58] - z[160]*z[56] + z[188]*z[33] - z[189]*z[33] + z[196]*z[27] + z[27]*z[94] + z[54]*z[56];
  z[232] = z[145]*z[56] + z[191]*z[27] - z[226];
  z[233] = front_.a*z[44] - front_.b*z[0]*z[58]*z[6] - front_.b*z[3]*z[56] - front_.r*z[3]*z[4]*z[5]*z[56] - front_.r*z[3]*z[83] + front_.r*z[33]*z[45] - state_[17]*z[27]*z[70]/z[61] + state_[17]*z[4]*z[5]*z[6]/z[60] - state_[18]*z[10]*z[3]*z[9]/z[60] - state_[18]*z[2]*z[33]*z[4]/z[60] + state_[18]*z[33]*z[4]*z[5]*z[70]/z[61] - state_[19]*z[2]*z[4] + z[110]*z[44] + z[154]*z[67] - z[188]*z[6] + z[189]*z[6] + z[196]*z[3] - z[3]*z[56]*z[92] + z[3]*z[94] + z[58]*z[6]*z[92];
  z[234] = front_.a*z[44] - front_.b*z[0]*z[58]*z[6] - front_.b*z[3]*z[56] - front_.r*z[3]*z[4]*z[5]*z[56] - front_.r*z[3]*z[83] + front_.r*z[33]*z[45] - state_[17]*z[27]*z[70]/z[61] + state_[17]*z[4]*z[5]*z[6]/z[60] - state_[18]*z[10]*z[3]*z[9]/z[60] - state_[18]*z[2]*z[33]*z[4]/z[60] + state_[18]*z[33]*z[4]*z[5]*z[70]/z[61] - state_[19]*z[2]*z[4] + z[110]*z[44] + z[154]*z[67] - z[188]*z[6] + z[193]*z[6] + z[196]*z[3] - z[3]*z[56]*z[92] + z[3]*z[94] + z[58]*z[6]*z[92];
  z[235] = front_.a*z[0]*z[3]*z[5]*z[58] + front_.b*z[65] + front_.r*z[2]*z[83] - front_.r*z[23]*z[33] + front_.r*z[31]*z[41] - state_[17]*z[1]*z[5]/z[60] - state_[17]*z[4]*z[5]*z[79]/z[61] + state_[18]*z[27]*z[31]/z[60] - state_[18]*z[27]*z[33]*z[79]/z[61] - state_[18]*z[33]*z[36]/z[60] - state_[19]*z[36] - z[133]*z[58] + z[148]*z[41] - z[149]*z[67] - z[184]*z[3]*z[5] - z[191]*z[3]*z[5] - z[196]*z[2] - z[2]*z[94] + z[21]*z[41] + z[65]*z[92];
  z[236] = -front_.a*z[65] + front_.b*z[0]*z[3]*z[5]*z[58] + front_.r*z[31]*z[56] + front_.r*z[33]*z[68] - front_.r*z[5]*z[6]*z[83] + state_[17]*z[27]*z[79]/z[61] + state_[17]*z[36]/z[60] - state_[18]*z[1]*z[33]*z[5]/z[60] + state_[18]*z[31]*z[4]*z[5]/z[60] - state_[18]*z[33]*z[4]*z[5]*z[79]/z[61] - state_[19]*z[1]*z[5] - z[110]*z[65] + z[112]*z[58] + z[148]*z[56] + z[166]*z[67] + z[188]*z[3]*z[5] - z[189]*z[3]*z[5] + z[196]*z[5]*z[6] + z[21]*z[56] + z[5]*z[6]*z[94];
  z[237] = -front_.b*z[68] + state_[18]*(-z[10]*z[79]*z[9]/z[61] + z[141] - z[39]*z[79]/z[61]) - z[133]*z[56] - z[166]*z[41] - z[191]*z[5]*z[6] + z[225] - z[68]*z[92];
  z[238] = -front_.Iyy;
  z[239] = -front_.a;
  z[240] = z[0]*z[239];
  z[241] = -front_.b;
  z[242] = -front_.m;
  z[243] = -rear_.m;
  z[244] = -front_.r;
  z[245] = rear_.J*z[4];
  z[246] = -z[241]*z[3];
  z[247] = -z[244]*z[5];
  z[248] = rear_.r*z[1];
  z[249] = state_[10]*z[2];
  z[250] = state_[10]*z[5];
  z[251] = -z[1];
  z[252] = -z[2];
  z[253] = -z[3];
  z[254] = -z[4];
  z[255] = -z[5];
  z[256] = -z[6];
  z[257] = z[251]*z[252];
  z[258] = z[251]*z[254];
  z[259] = z[251]*z[255];
  z[260] = z[252]*z[254];
  z[261] = z[253]*z[255];
  z[262] = z[254]*z[255];
  z[263] = z[255]*z[256];
  z[264] = -z[255]*z[9];
  z[265] = z[13]*z[260];
  z[266] = -front_.J*z[41];
  z[267] = z[16]*z[9];
  z[268] = z[244]*z[33];
  z[269] = -state_[18]*z[33];
  z[270] = -z[243]/z[38];
  z[271] = rear_.R/z[46];
  z[272] = state_[9]/z[46];
  z[273] = -1/z[46];
  z[274] = front_.J*z[56];
  z[275] = -z[254]*(rear_.R/z[46] + rear_.r);
  z[276] = -z[27]*z[33];
  z[277] = front_.R/z[61];
  z[278] = state_[17]/z[61];
  z[279] = state_[17]/z[60];
  z[280] = state_[18]/z[60];
  z[281] = -z[251]*z[64];
  z[282] = -z[251]*z[66];
  z[283] = z[16]*z[254]*z[273];
  z[284] = -z[273]/z[38];
  z[285] = -z[33]/z[60];
  z[286] = z[49]/z[42];
  z[287] = -z[252]*z[84];
  z[288] = z[255]*z[84];
  z[289] = -z[253]*z[95];
  z[290] = -z[33]*z[76];
  z[291] = -z[252]*(-z[262]*z[286] + z[265] - z[35]);
  z[292] = z[104]/z[60];
  z[293] = z[128]*z[9];
  z[294] = -z[140]*z[262];
  z[295] = z[204]/z[60];
  z[296] = z[207]*z[27];

  ar[0] = z[163]*z[260] - z[164]*z[262] - z[194]*z[27] + z[195]*z[33] - z[199]*z[262] + z[242]*(z[135]*z[229] + z[156]*z[231] - z[168]*z[232]) + z[243]*(z[101]*z[215] + z[102]*z[218] + z[137]*z[219]) + z[251]*(z[116] - z[24]*z[29] + z[26]*z[28]);
  ar[1] = -z[108]*z[262] + z[111]*z[260] + z[150]*z[251] - z[180]*z[27] + z[181]*z[33] - z[187]*z[262] + z[242]*(z[135]*z[235] + z[156]*z[236] + z[168]*z[237]) + z[243]*(z[101]*z[212] + z[102]*z[214] + z[137]*z[224]);
  ar[2] = z[103]*z[260] - z[105]*z[262] + z[151]*z[33] - z[165]*z[27] - z[179]*z[262] + z[242]*(z[135]*z[227] + z[156]*z[233] - z[168]*z[230]) + z[243]*(z[101]*z[175] - z[102]*z[176] + z[137]*z[162]);
  ar[3] = -z[132]*z[27] + z[144]*z[33] + z[242]*(z[135]*z[209] + z[156]*z[210] + z[168]*z[221]);
  ar[4] = -z[24]*z[245]*z[255] + z[243]*(z[101]*z[172] + z[102]*z[173] - z[137]*z[138]) - z[245]*z[252]*z[26];
  ar[5] = z[242]*(z[135]*z[200] + z[156]*z[201] + z[167]*z[168]) - z[262]*z[274] + z[266]*z[27];
  ar[6] = -z[243]*(z[115]*z[281] + z[282]*(-z[262]*z[286] + z[265] - z[35]) + z[293]*z[72])/z[38];
  ar[7] = z[243]*(-z[128]*z[178]*z[254] + z[197]*z[282] - z[198]*z[281]);
  ar[8] = z[243]*(-z[281]*z[88] - z[282]*z[84] + z[293]*z[73]);
  ar[9] = z[242]*(z[109]*z[190] + z[168]*z[292] + z[186]*z[290]);
  ar[10] = z[242]*(z[109]*z[207] + z[168]*z[295] + z[206]*z[290]);
  ar[11] = z[242]*(z[109]*z[142] + z[140]*z[290] - z[143]*z[168]);
  ar[12] = z[163]*z[255] + z[164]*z[252] - z[194]*z[263] + z[195]*z[261] + z[199]*z[252] + z[242]*(z[114]*z[229] + z[139]*z[231] - z[158]*z[232]) + z[243]*(z[127]*z[219] - z[215]*z[248]*z[252] + z[218]*z[248]*z[255]);
  ar[13] = z[108]*z[252] + z[111]*z[255] - z[180]*z[263] + z[181]*z[261] + z[187]*z[252] + z[242]*(z[114]*z[235] + z[139]*z[236] + z[158]*z[237]) + z[243]*(z[127]*z[224] - z[212]*z[248]*z[252] + z[214]*z[248]*z[255]);
  ar[14] = z[103]*z[255] + z[105]*z[252] + z[151]*z[261] - z[165]*z[263] + z[179]*z[252] + z[242]*(z[114]*z[227] + z[139]*z[233] - z[158]*z[230]) + z[243]*(z[127]*z[162] - z[175]*z[248]*z[252] - z[176]*z[248]*z[255]);
  ar[15] = -z[132]*z[263] + z[144]*z[261] + z[242]*(z[114]*z[209] + z[139]*z[210] + z[158]*z[221]);
  ar[16] = -rear_.J*z[24]*z[252] + rear_.J*z[255]*z[26] + z[243]*(-z[127]*z[138] - z[172]*z[248]*z[252] + z[173]*z[248]*z[255]);
  ar[17] = z[242]*(z[114]*z[200] + z[139]*z[201] + z[158]*z[167]) + z[252]*z[274] + z[263]*z[266];
  ar[18] = -z[243]*(-z[115]*z[248]*z[255] - z[127]*z[254]*z[72] + z[248]*z[291])/z[38];
  ar[19] = z[243]*(z[127]*z[178] - z[197]*z[248]*z[252] + z[198]*z[248]*z[255]);
  ar[20] = z[243]*(-z[127]*z[254]*z[73] + z[248]*z[255]*z[88] - z[248]*z[287]);
  ar[21] = z[242]*(z[114]*z[186] + z[136]*z[190] + z[158]*z[292]);
  ar[22] = z[242]*(z[114]*z[206] + z[136]*z[207] + z[158]*z[295]);
  ar[23] = z[242]*(z[114]*z[140] + z[136]*z[142] - z[143]*z[158]);
  ar[24] = -z[116] + z[194]*z[253] + z[195]*z[256] - z[24]*z[254]*(rear_.Ixz*z[2] + rear_.Izz*z[255]) + z[242]*(z[100]*z[229] - z[131]*z[231] + z[232]*z[99]) + z[243]*(-z[215]*z[77] + z[218]*z[80]) + z[254]*z[26]*(rear_.Ixx*z[2] - rear_.Ixz*z[5]);
  ar[25] = -z[150] + z[180]*z[253] + z[181]*z[256] + z[242]*(z[100]*z[235] - z[131]*z[236] - z[237]*z[99]) + z[243]*(-z[212]*z[77] + z[214]*z[80]);
  ar[26] = z[151]*z[256] + z[165]*z[253] + z[242]*(z[100]*z[227] - z[131]*z[233] + z[230]*z[99]) + z[243]*(-z[175]*z[77] - z[176]*z[80]);
  ar[27] = z[132]*z[253] + z[144]*z[256] + z[242]*(z[100]*z[209] - z[131]*z[210] - z[221]*z[99]);
  ar[28] = z[243]*(-z[172]*z[77] + z[173]*z[80]);
  ar[29] = z[242]*(z[100]*z[200] + z[134]*z[201] - z[167]*z[99]) - z[253]*z[266];
  ar[30] = -z[243]*(-z[115]*z[80] - z[77]*(-z[262]*z[286] + z[265] - z[35]))/z[38];
  ar[31] = z[243]*(-z[197]*z[77] + z[80]*(-z[107]*z[24] + z[13]*z[254]*z[257]*z[273] - z[249]*z[258]*z[273] + z[255]*z[258]*z[49]/z[47] - z[255]*z[272]*z[7] - z[264]*z[272]));
  ar[32] = z[243]*(z[77]*z[84] + z[80]*z[88]);
  ar[33] = -z[242]*(z[104]*z[289] + z[131]*z[183] + z[174]*z[256]*z[95])/z[60];
  ar[34] = z[242]*(-z[131]*z[207] - z[205]*z[256]*z[95] - z[289]*z[295]);
  ar[35] = z[242]*(z[134]*z[142] - z[140]*z[256]*z[95] + z[143]*z[289]);
  ar[36] = -z[199] + z[242]*(z[113]*z[232] + z[229]*z[268]);
  ar[37] = front_.Izz*z[255]*(state_[10] - state_[8]*z[1]) - z[182] + z[242]*(-z[113]*z[237] + z[235]*z[268]);
  ar[38] = front_.Ixz*z[256]*z[32] - z[169] + z[242]*(z[113]*z[230] + z[227]*z[268]);
  ar[39] = z[242]*(-z[113]*z[222] + z[209]*z[268]);
  ar[40] = 0;
  ar[41] = z[242]*(-z[113]*z[167] + z[200]*z[268]) - z[274];
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = z[242]*(-z[113]*z[292] + z[186]*z[268]);
  ar[46] = z[242]*(-z[113]*z[295] + z[205]*z[268]);
  ar[47] = z[242]*(z[113]*z[143] + z[140]*z[268]);
  ar[48] = -state_[9]*z[245] - z[243]*(-z[215]*z[75] - z[218]*z[74]);
  ar[49] = -state_[8]*z[245] + z[243]*(z[212]*z[75] + z[214]*z[74]);
  ar[50] = -z[203]*z[243]*z[275];
  ar[51] = 0;
  ar[52] = -z[202]*z[243]*z[275];
  ar[53] = 0;
  ar[54] = z[270]*z[275]*(-z[115]*z[252] + z[255]*(-z[262]*z[286] + z[265] - z[35]));
  ar[55] = -z[208]*z[243]*z[275];
  ar[56] = -z[243]*z[275]*(-z[252]*z[88] + z[288]);
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = -front_.J*z[81] + z[242]*(-z[110]*z[231] + z[229]*z[92]);
  ar[61] = -front_.J*z[65] + z[242]*(-z[110]*z[236] + z[235]*z[92]);
  ar[62] = -front_.J*z[253]*z[32] + z[242]*(-z[110]*z[234] + z[228]*z[92]);
  ar[63] = z[242]*(-z[110]*z[210] + z[209]*z[92]) + z[274];
  ar[64] = 0;
  ar[65] = z[211]*z[242]*z[71];
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = -z[242]*z[71]*(z[174]*z[262] - z[183]*z[27])/z[60];
  ar[70] = z[242]*(-z[206]*z[262]*z[71] + z[296]*z[71]);
  ar[71] = z[242]*z[71]*(z[142]*z[27] + z[294]);
  ar[72] = z[254]*z[270]*(-z[216]*z[252] - z[217]*z[255]);
  ar[73] = z[254]*z[270]*(-z[212]*z[255] - z[213]*z[252]);
  ar[74] = z[203]*z[254]*z[270];
  ar[75] = 0;
  ar[76] = z[202]*z[254]*z[270];
  ar[77] = 0;
  ar[78] = -z[243]*(-z[115]*z[252] + z[255]*(-z[262]*z[286] + z[265] - z[35]))/(z[16]*z[254]);
  ar[79] = z[208]*z[254]*z[270];
  ar[80] = z[254]*z[270]*(-z[252]*z[88] + z[288]);
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = -z[243]*z[254]*(-z[216]*z[259]/z[38] + z[217]*z[257]/z[38] + z[219]*z[283]);
  ar[85] = -z[243]*z[254]*(z[212]*z[257]/z[38] - z[213]*z[259]/z[38] + z[224]*z[283]);
  ar[86] = -z[243]*z[254]*(z[161]*z[283] + z[175]*z[257]/z[38] - z[177]*z[259]/z[38]);
  ar[87] = 0;
  ar[88] = z[243]*z[254]*(z[138]*z[283] - z[172]*z[257]/z[38] + z[173]*z[259]/z[38]);
  ar[89] = 0;
  ar[90] = z[243]*z[254]*(z[115]*z[259]*z[284] + z[257]*z[284]*(-z[262]*z[286] + z[265] - z[35]) + z[267]*z[72]/z[42]);
  ar[91] = -z[243]*z[254]*(z[178]*z[283] + z[197]*z[257]/z[38] - z[198]*z[259]/z[38]);
  ar[92] = z[243]*z[254]*(z[257]*z[84]/z[38] + z[259]*z[88]/z[38] + z[267]*z[273]*z[73]);
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
  ar[96] = z[243]*(z[216]*z[262] - z[217]*z[260] - z[219]*z[251]);
  ar[97] = z[243]*(-z[212]*z[260] + z[213]*z[262] - z[224]*z[251]);
  ar[98] = z[243]*(-z[161]*z[251] - z[175]*z[260] + z[177]*z[262]);
  ar[99] = 0;
  ar[100] = z[243]*(z[138]*z[251] - z[172]*z[260] + z[173]*z[262]);
  ar[101] = 0;
  ar[102] = z[254]*z[270]*(-z[115]*z[255] + z[251]*z[72] + z[291]);
  ar[103] = z[243]*(-z[178]*z[251] - z[197]*z[260] + z[198]*z[262]);
  ar[104] = -z[243]*z[254]*(-z[251]*z[73] - z[255]*z[88] + z[287]);
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = -z[242]*(-z[229]*z[262] + z[231]*z[27])/z[60];
  ar[109] = -z[242]*(-z[235]*z[262] + z[236]*z[27])/z[60];
  ar[110] = -z[242]*(-z[227]*z[262] + z[233]*z[27])/z[60];
  ar[111] = -z[242]*(-z[209]*z[262] + z[210]*z[27])/z[60];
  ar[112] = 0;
  ar[113] = -z[211]*z[242]/z[60];
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = z[242]*(z[186]*z[262] - z[190]*z[27])/z[60];
  ar[118] = -z[242]*(-z[205]*z[262] + z[296])/z[60];
  ar[119] = -z[242]*(z[142]*z[27] + z[294])/z[60];
  ar[120] = z[242]*(-z[229]*z[276]/z[60] - z[231]*z[262]*z[285] - z[232]*z[60]);
  ar[121] = z[242]*(-z[235]*z[276]/z[60] - z[236]*z[262]*z[285] + z[237]*z[60]);
  ar[122] = z[242]*(-z[227]*z[276]/z[60] - z[230]*z[60] - z[233]*z[262]*z[285]);
  ar[123] = z[242]*(-z[209]*z[276]/z[60] - z[210]*z[262]*z[285] + z[221]*z[60]);
  ar[124] = 0;
  ar[125] = z[242]*(z[167]*z[60] - z[200]*z[276]/z[60] - z[201]*z[262]*z[285]);
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = z[242]*(z[104] - z[186]*z[276]/z[60] - z[190]*z[262]*z[285]);
  ar[130] = z[242]*(z[204] - z[206]*z[276]/z[60] - z[207]*z[262]*z[285]);
  ar[131] = z[242]*(-z[140]*z[276]/z[60] - z[142]*z[262]*z[285] - z[143]*z[60]);
  ar[132] = z[242]*(z[262]*(-z[0]*z[241]*z[33]*z[58] - z[110]*z[81] + z[119]*z[58] - z[160]*z[56] + z[188]*z[33] - z[193]*z[33] + z[196]*z[27] + z[239]*z[81] + z[244]*z[27]*z[83] - z[268]*z[82] + z[27]*z[94] + z[54]*z[56]) + z[27]*(-z[145]*z[58] - z[160]*z[41] - z[185]*z[33] - z[191]*z[33] - z[196]*z[262] - z[240]*z[33]*z[58] - z[241]*z[81] - z[247]*z[254]*z[83] - z[262]*z[94] + z[268]*z[35] + z[41]*z[54] + z[81]*z[92]) - z[33]*(-z[145]*z[56] - z[192]*z[27] + z[226]));
  ar[133] = z[242]*(z[262]*(-state_[19]*z[259] - z[0]*z[246]*z[255]*z[58] - z[110]*z[65] + z[112]*z[58] + z[148]*z[56] + z[188]*z[261] - z[193]*z[261] + z[196]*z[263] + z[21]*z[56] + z[239]*z[65] - z[244]*z[31]*z[56] + z[247]*z[256]*z[83] - z[254]*z[255]*z[269]*z[86]/(2*z[61]) + z[254]*z[255]*z[280]*z[31] + z[259]*z[269]/z[60] + z[263]*z[94] - z[268]*z[68] - z[27]*z[278]*z[86]/2 + z[279]*z[36] + z[67]*(z[106] + z[27]*z[277]*z[87])) + z[27]*(-state_[19]*z[36] - z[133]*z[58] + z[148]*z[41] - z[185]*z[261] - z[191]*z[261] + z[196]*z[252] + z[21]*z[41] + z[23]*z[268] - z[240]*z[261]*z[58] - z[241]*z[65] + z[244]*z[252]*z[83] - z[244]*z[31]*z[41] + z[252]*z[94] - z[259]*z[279] + z[262]*z[278]*z[86]/2 - z[269]*z[27]*z[86]/(2*z[61]) + z[269]*z[36]/z[60] + z[27]*z[280]*z[31] + z[65]*z[92] - z[67]*(-front_.R*z[255]*z[4]*z[87]/z[61] + z[85])) - z[33]*(state_[18]*(z[10]*z[9]*z[93]/z[61] + z[141] + z[39]*z[93]/z[61]) - z[133]*z[56] - z[192]*z[263] + z[225] + z[241]*z[69] - z[41]*(z[106] + z[27]*z[277]*z[87]) - z[69]*z[92]));
  ar[134] = z[242]*(z[228]*z[27] + z[234]*z[262] - z[33]*(-z[129]*z[56] + z[192]*z[253] + z[223]));
  ar[135] = z[242]*(z[209]*z[27] + z[210]*z[262] - z[222]*z[33]);
  ar[136] = 0;
  ar[137] = z[242]*(-z[167]*z[33] + z[200]*z[27] + z[201]*z[262]);
  ar[138] = 0;
  ar[139] = 0;
  ar[140] = 0;
  ar[141] = z[242]*(z[104]*z[285] + z[186]*z[27] + z[190]*z[262]);
  ar[142] = z[242]*(z[204]*z[285] + z[206]*z[27] + z[207]*z[262]);
  ar[143] = z[242]*(z[140]*z[27] + z[142]*z[262] + z[143]*z[33]);

  delete [] z;
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gaf(double ar[12]) const;
void Bicycle::gaf(double ar[12]) const
{
  double * z = new double[76];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = 0;
  z[7] = front_.Tz + steer_torque_;
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[4], 2);
  z[11] = front_.Tw - front_.Ty;
  z[12] = rear_.Tz - steer_torque_;
  z[13] = z[10] + z[8];
  z[14] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[15] = -z[14];
  z[16] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[17] = sqrt(z[13]*z[9]);
  z[18] = z[10]*z[9] + z[8]*z[9];
  z[19] = sqrt(z[18]);
  z[20] = pow(z[0], 2) + z[18];
  z[21] = rear_.R*z[1]*z[3]/z[19] + rear_.a;
  z[22] = front_.R/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.r;
  z[23] = rear_.R*z[1]*z[3]/z[19] + rear_.r*z[1]*z[3];
  z[24] = rear_.R*z[3]*z[4]/z[19] + rear_.r*z[3]*z[4];
  z[25] = rear_.r*z[1]*z[3] + z[21];
  z[26] = front_.Gx*z[3]*z[4] + front_.Gy*z[15]*z[16];
  z[27] = -front_.R*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.b;
  z[28] = -rear_.b + z[24];
  z[29] = front_.R*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.r*z[3]*z[4];
  z[30] = -front_.r*z[3]*z[4] + z[27];
  z[31] = -front_.R*z[15]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.a;
  z[32] = front_.R*z[15]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.r*z[15];
  z[33] = -(front_.Gx*z[15] - front_.Gy*z[16]*z[3]*z[4])/sqrt(z[10]*z[9] + pow(z[15], 2));
  z[34] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[16] + z[2]*z[29]*z[4];
  z[35] = -front_.a*z[5] + front_.r*z[16]*z[2] + z[32]*z[5];
  z[36] = front_.a*z[1] - front_.b*z[4]*z[5] - z[1]*z[32] + z[29]*z[4]*z[5];
  z[37] = z[15]*z[29] - z[3]*z[32]*z[4];
  z[38] = front_.a*z[3]*z[4] - front_.b*z[15] + z[37];
  z[39] = -rear_.Fx;
  z[40] = -front_.a;
  z[41] = -rear_.b;
  z[42] = g_*front_.m;
  z[43] = g_*rear_.m;
  z[44] = -z[1]*z[39];
  z[45] = -z[39]*z[4];
  z[46] = rear_.Fy*z[3];
  z[47] = rear_.Fz*z[1];
  z[48] = rear_.a*z[1];
  z[49] = rear_.a*z[4];
  z[50] = -z[1]*z[41];
  z[51] = rear_.r*z[0];
  z[52] = rear_.r*z[3];
  z[53] = -z[0];
  z[54] = -z[1];
  z[55] = -z[2];
  z[56] = -z[3];
  z[57] = -z[4];
  z[58] = -z[5];
  z[59] = z[54]*z[56];
  z[60] = z[55]*z[57];
  z[61] = z[56]*z[57];
  z[62] = z[57]*z[58];
  z[63] = z[10]*z[9];
  z[64] = -front_.r*z[16];
  z[65] = front_.Fx*z[15];
  z[66] = -z[53]/z[17];
  z[67] = -z[56]*(rear_.R/z[19] + rear_.r);
  z[68] = front_.Fz/sqrt(pow(z[15], 2) + z[63]);
  z[69] = (rear_.Gx*z[4] + rear_.Gy*z[0]*z[1])/z[19];
  z[70] = (rear_.Gx*z[1] - rear_.Gy*z[0]*z[4])/z[19];
  z[71] = -z[23]*z[54];
  z[72] = -z[24]*z[54];
  z[73] = -z[16]*z[31];
  z[74] = z[26]/(pow(z[15], 2) + z[63]);
  z[75] = z[33]/sqrt(pow(z[15], 2) + z[63]);

  ar[0] = -front_.Fx*z[16]*z[27] + front_.Fy*z[38] - front_.Fz*z[73] + rear_.Fz*z[21]*z[53] - rear_.Tw*z[53] + front_.Tx*z[15] - rear_.Tx*z[59] + z[11]*z[16] + z[12]*z[61] + z[39]*z[53]*(-rear_.R*z[61]/z[19] - z[41]) + z[42]*(z[15]*(-front_.b*z[16] + z[16]*z[29] + z[61]*z[64]) - z[16]*z[38] + z[61]*(-z[15]*z[64] - z[16]*z[32] - z[16]*z[40])) + z[43]*(-z[53]*(z[23]*z[61] - z[24]*z[59] - z[49]*z[56] - z[50]*z[56]) - z[59]*(z[24]*z[53] + z[41]*z[53] + z[51]*z[61]) - z[61]*(-rear_.a*z[53] - z[23]*z[53] - z[51]*z[59])) + z[46]*(-z[23]*z[57] + z[49] + z[50] - z[72]) + z[53]*(rear_.Tw - rear_.Ty) + z[61]*z[7];
  ar[1] = front_.Fx*z[34] + front_.Fy*z[36] + rear_.Fy*(-z[24]*z[57] - z[41]*z[57] + z[48] + z[71]) + front_.Fz*z[57]*(-z[32]*z[55] - z[40]*z[55] - z[58]*z[64]) + rear_.Fz*z[51]*z[57] + front_.Tx*z[62] - rear_.Tx*z[57] + z[11]*z[60] - z[12]*z[54] + z[42]*(z[15]*z[34] - z[16]*z[36] + z[61]*(-z[32]*z[60] - z[40]*z[60] - z[62]*z[64])) + z[43]*z[53]*(z[10]*z[52] + z[24]*z[57] + z[41]*z[57] - z[48] + z[52]*z[8] - z[71]) + z[44]*z[51] - z[54]*z[7];
  ar[2] = -front_.Fx*z[30]*z[58] + front_.Fy*z[30]*z[55] + front_.Fz*z[35] - rear_.Fz*z[25] - front_.Tx*z[55] + rear_.Ty + z[11]*z[58] + z[28]*z[39] + z[42]*(z[15]*(front_.b*z[5] + z[29]*z[58]) + z[16]*(front_.b*z[2] + z[29]*z[55]) + z[35]*z[61]) + z[43]*z[56]*(-z[25]*z[57] + z[28]*z[54]);
  ar[3] = front_.Fx*z[64] - front_.Fy*(front_.r*z[15] - z[31]) + z[42]*z[73] + z[7];
  ar[4] = rear_.Tw - z[43]*z[56]*(z[23]*z[57] + z[72]) - z[45]*z[67] - z[47]*z[67];
  ar[5] = -front_.Fx*z[22]*z[61] + front_.Fz*z[15]*z[22] + front_.Tw - z[37]*z[42];
  ar[6] = -z[56]*(z[45] + z[47] + z[59]*z[70] + z[61]*z[69])/z[17];
  ar[7] = -z[56]*(rear_.Fz*z[57]*z[66] - rear_.Gy*pow(z[13], 2)*pow(z[56], 3)/z[18] + z[13]*z[46]/z[19] + z[44]*z[66] + z[59]*z[66]*z[69] - z[61]*z[66]*z[70]);
  ar[8] = -rear_.Fy*z[53] + rear_.Fz*z[61] + rear_.Gy*z[0]*z[13]*z[9]/z[19] + rear_.Gz*z[20] + z[20]*z[43] + z[44]*z[56] + z[54]*z[69]*z[9] - z[57]*z[70]*z[9];
  ar[9] = front_.Fx*z[61]/sqrt(pow(z[15], 2) + z[63]) - z[15]*z[68] - z[15]*z[75] + z[61]*z[74];
  ar[10] = front_.Fy*sqrt(pow(z[15], 2) + z[63]) + front_.Gy*(pow(z[15], 2) + z[63]) + front_.Gz*z[6] + z[15]*z[16]*z[74] + z[16]*z[61]*z[68] + z[16]*z[61]*z[75] + z[16]*z[65]/sqrt(pow(z[15], 2) + z[63]) + z[42]*z[6];
  ar[11] = -front_.Fy*z[16] + front_.Fz*z[61] - front_.Gy*z[16]*sqrt(pow(z[15], 2) + z[63]) + front_.Gz*(pow(z[15], 2) + pow(z[16], 2) + z[63]) + z[15]*z[26]/sqrt(pow(z[15], 2) + z[63]) + z[33]*z[61] + z[42]*(pow(z[15], 2) + pow(z[16], 2) + z[63]) + z[65];

  delete [] z;
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gaf_min(double ar[12]) const;
void Bicycle::gaf_min(double ar[12]) const
{
  double * z = new double[47];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = 0;
  z[7] = pow(z[1], 2);
  z[8] = pow(z[3], 2);
  z[9] = pow(z[4], 2);
  z[10] = z[7] + z[9];
  z[11] = rear_.Gx*z[4] + rear_.Gy*z[0]*z[1];
  z[12] = rear_.Gx*z[1] - rear_.Gy*z[0]*z[4];
  z[13] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[14] = -z[13];
  z[15] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[16] = sqrt(z[10]*z[8]);
  z[17] = z[7]*z[8] + z[8]*z[9];
  z[18] = sqrt(z[17]);
  z[19] = pow(z[0], 2) + z[17];
  z[20] = rear_.R*z[1]*z[3]/z[18] + rear_.r*z[1]*z[3];
  z[21] = rear_.R*z[3]*z[4]/z[18] + rear_.r*z[3]*z[4];
  z[22] = front_.Gx*z[3]*z[4] + front_.Gy*z[14]*z[15];
  z[23] = -front_.R*z[3]*z[4]/sqrt(pow(z[14], 2) + z[8]*z[9]) - front_.r*z[3]*z[4];
  z[24] = -front_.R*z[14]/sqrt(pow(z[14], 2) + z[8]*z[9]) - front_.r*z[14];
  z[25] = -(front_.Gx*z[14] - front_.Gy*z[15]*z[3]*z[4])/sqrt(pow(z[14], 2) + z[8]*z[9]);
  z[26] = g_*front_.m;
  z[27] = g_*rear_.m;
  z[28] = front_.b*z[2];
  z[29] = front_.b*z[5];
  z[30] = rear_.r*z[3];
  z[31] = -z[0];
  z[32] = -z[1];
  z[33] = -z[4];
  z[34] = -z[3]*z[32];
  z[35] = -z[2]*z[33];
  z[36] = -z[3]*z[33];
  z[37] = -z[33]*z[5];
  z[38] = z[26]*z[6];
  z[39] = z[8]*z[9];
  z[40] = z[10]*z[8];
  z[41] = -front_.r*z[15];
  z[42] = -z[12]*z[33];
  z[43] = z[8]/z[18];
  z[44] = -z[31]/(z[16]*z[18]);
  z[45] = z[22]/(pow(z[14], 2) + z[39]);
  z[46] = z[25]/sqrt(pow(z[14], 2) + z[39]);

  ar[0] = g_*(front_.m*(z[14]*(-front_.b*z[15] - z[15]*z[23] + z[36]*z[41]) - z[15]*(front_.a*z[36] - front_.b*z[14] - z[14]*z[23] + z[24]*z[36]) + z[36]*(front_.a*z[15] - z[14]*z[41] + z[15]*z[24])) + rear_.m*(-z[31]*(rear_.a*z[36] + rear_.b*z[34] + z[20]*z[36] - z[21]*z[34]) - z[34]*(-rear_.b*z[31] + z[21]*z[31] + z[30]*z[31]*z[33]) - z[36]*(-rear_.a*z[31] - z[20]*z[31] - z[30]*z[31]*z[32])));
  ar[1] = g_*(front_.m*(z[14]*(-z[23]*z[35] + z[28]*z[33] - z[32]*z[41]) - z[15]*(-front_.a*z[32] - z[23]*z[37] - z[24]*z[32] + z[29]*z[33]) + z[36]*(front_.a*z[35] + z[24]*z[35] - z[37]*z[41])) + rear_.m*z[31]*(rear_.a*z[32] - rear_.b*z[33] + z[20]*z[32] + z[21]*z[33] + z[30]*z[7] + z[30]*z[9]));
  ar[2] = g_*(front_.m*(z[14]*(z[23]*z[5] + z[29]) + z[15]*(z[2]*z[23] + z[28]) + z[36]*(-front_.a*z[5] - z[2]*z[41] - z[24]*z[5])) - rear_.m*z[3]*(z[32]*(-rear_.b + z[21]) - z[33]*(rear_.a + z[20])));
  ar[3] = -z[15]*z[26]*(-front_.R*z[14]/sqrt(pow(z[14], 2) + z[39]) + front_.a);
  ar[4] = z[27]*z[6];
  ar[5] = z[38];
  ar[6] = z[43]*(-z[11]*z[33] - z[12]*z[32])/z[16];
  ar[7] = -z[8]*(-rear_.Gy*z[10]*z[40]/z[17] + z[11]*z[32]*z[44] + z[42]*z[44]);
  ar[8] = rear_.Gy*z[0]*z[40]/z[18] + rear_.Gz*z[19] + z[11]*z[32]*z[43] + z[19]*z[27] + z[42]*z[43];
  ar[9] = -z[14]*z[46] + z[36]*z[45];
  ar[10] = front_.Gy*(pow(z[14], 2) + z[39]) + front_.Gz*z[6] + z[14]*z[15]*z[45] + z[15]*z[36]*z[46] + z[38];
  ar[11] = -front_.Gy*z[15]*sqrt(pow(z[14], 2) + z[39]) + front_.Gz*(pow(z[14], 2) + pow(z[15], 2) + z[39]) + z[14]*z[22]/sqrt(pow(z[14], 2) + z[39]) + z[25]*z[36] + z[26]*(pow(z[14], 2) + pow(z[15], 2) + z[39]);

  delete [] z;
}

/** Computes the n-d array of shape (12, 3)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::gaf_dq(double ar[36]) const;
void Bicycle::gaf_dq(double ar[36]) const
{
  double * z = new double[224];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = front_.Tz + steer_torque_;
  z[7] = pow(z[0], 2);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[3], 3);
  z[11] = pow(z[4], 2);
  z[12] = front_.Tw - front_.Ty;
  z[13] = rear_.Tz - steer_torque_;
  z[14] = rear_.Fx*z[4] + rear_.Fz*z[1];
  z[15] = rear_.a*z[4] + rear_.b*z[1];
  z[16] = z[11] + z[8];
  z[17] = rear_.a*z[1] - rear_.b*z[4];
  z[18] = rear_.Gx*z[4] + rear_.Gy*z[0]*z[1];
  z[19] = rear_.Gx*z[1] - rear_.Gy*z[0]*z[4];
  z[20] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[21] = -z[20];
  z[22] = z[0]*z[1]*z[2] - z[3]*z[5];
  z[23] = -z[0]*z[5] - z[1]*z[2]*z[3];
  z[24] = 2*z[0]*z[5] + 2*z[1]*z[2]*z[3];
  z[25] = -z[0]*z[1]*z[5] - z[2]*z[3];
  z[26] = 2*z[0]*z[1]*z[5] + 2*z[2]*z[3];
  z[27] = sqrt(z[16]*z[9]);
  z[28] = pow(z[21], 3);
  z[29] = z[11]*z[9] + z[8]*z[9];
  z[30] = z[0]*z[11]*z[3] + z[0]*z[3]*z[8];
  z[31] = sqrt(z[29]);
  z[32] = pow(z[29], 3.0/2.0);
  z[33] = z[1]*z[3] + z[21]*z[5];
  z[34] = rear_.R/z[31] + rear_.r;
  z[35] = z[1]*z[4]*z[9] + z[21]*z[3]*z[4]*z[5];
  z[36] = rear_.R*z[1]*z[3]/z[31] + rear_.r*z[1]*z[3];
  z[37] = rear_.R*z[3]*z[4]/z[31] + rear_.r*z[3]*z[4];
  z[38] = rear_.a + z[36];
  z[39] = front_.Gx*z[3]*z[4] + front_.Gy*z[21]*z[23];
  z[40] = -rear_.b + z[37];
  z[41] = -front_.Gx*z[21] + front_.Gy*z[23]*z[3]*z[4];
  z[42] = -z[0]*z[11]*z[3] - z[21]*z[25];
  z[43] = -2*z[0]*z[11]*z[3] - 2*z[21]*z[25];
  z[44] = z[2]*z[23] + z[33];
  z[45] = front_.R*z[0]*z[4]/sqrt(z[11]*z[9] + pow(z[21], 2)) + front_.r*z[0]*z[4];
  z[46] = front_.R*z[3]*z[4]/sqrt(z[11]*z[9] + pow(z[21], 2)) + front_.r*z[3]*z[4];
  z[47] = 2*z[0]*z[11]*z[3] - z[21]*z[26];
  z[48] = -z[0]*z[11]*z[3] + z[21]*z[26]/2;
  z[49] = -z[48];
  z[50] = rear_.r*z[0]*z[3]*z[4] - z[0]*z[37];
  z[51] = front_.b*z[2] - z[2]*z[46];
  z[52] = front_.b*z[5] - z[46]*z[5];
  z[53] = rear_.a*z[0] - rear_.r*z[0]*z[1]*z[3] + z[0]*z[36];
  z[54] = rear_.b*z[0] + z[50];
  z[55] = -front_.b*z[2]*z[4] + z[2]*z[4]*z[46];
  z[56] = -front_.R*z[23]/sqrt(z[11]*z[9] + pow(z[21], 2)) - front_.r*z[23];
  z[57] = -front_.R*z[25]/sqrt(z[11]*z[9] + pow(z[21], 2)) - front_.r*z[25];
  z[58] = -front_.r*z[21]*z[22] + front_.r*z[23]*z[25];
  z[59] = front_.R*z[21]/sqrt(z[11]*z[9] + pow(z[21], 2)) + front_.r*z[21];
  z[60] = -front_.a + z[59];
  z[61] = z[41]/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[62] = 2*z[22]*z[23] + z[43];
  z[63] = -front_.r*z[1]*z[23] + z[55];
  z[64] = -front_.b*z[23] + z[23]*z[46];
  z[65] = front_.b*z[4]*z[5] + front_.r*z[1]*z[21] - z[4]*z[46]*z[5];
  z[66] = -front_.b*z[21] + z[21]*z[46];
  z[67] = z[1]*z[36] + z[37]*z[4];
  z[68] = rear_.R*z[0]/z[31] - rear_.R*z[3]*z[30]/z[32] + rear_.r*z[0];
  z[69] = -front_.R*pow(z[21], 2)/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + front_.R/sqrt(z[11]*z[9] + pow(z[21], 2)) + front_.r;
  z[70] = -z[0]*z[1]*z[37] + z[0]*z[36]*z[4];
  z[71] = rear_.R*z[0]*z[1]/z[31] - rear_.R*z[1]*z[3]*z[30]/z[32] + rear_.r*z[0]*z[1];
  z[72] = rear_.R*z[0]*z[4]/z[31] - rear_.R*z[3]*z[30]*z[4]/z[32] + rear_.r*z[0]*z[4];
  z[73] = z[11]*z[9]/sqrt(z[11]*z[9] + pow(z[21], 2)) + pow(z[21], 2)/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[74] = z[11]*z[9]/(z[11]*z[9] + pow(z[21], 2)) + pow(z[21], 2)/(z[11]*z[9] + pow(z[21], 2)) - 2;
  z[75] = front_.a*z[5] - front_.r*z[2]*z[23] - z[5]*z[59];
  z[76] = -front_.r*z[23]*z[3]*z[4] + z[64];
  z[77] = front_.a*z[2]*z[4] + front_.r*z[23]*z[4]*z[5] - z[2]*z[4]*z[59];
  z[78] = front_.R*z[1]/sqrt(z[11]*z[9] + pow(z[21], 2)) - front_.R*z[35]*z[4]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + front_.r*z[1];
  z[79] = front_.R*z[1]*z[3]/sqrt(z[11]*z[9] + pow(z[21], 2)) - front_.R*z[3]*z[35]*z[4]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + front_.r*z[1]*z[3];
  z[80] = front_.R*z[0]/sqrt(z[11]*z[9] + pow(z[21], 2)) + front_.R*z[3]*z[42]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + front_.r*z[0];
  z[81] = -front_.R*z[21]*z[23]*z[3]*z[4]*z[5]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - z[51];
  z[82] = 2*z[0]*z[11] + 2*z[0]*z[8] - z[11]*z[3]*z[30]/z[29] - z[3]*z[30]*z[8]/z[29];
  z[83] = front_.R*z[3]*z[4]*z[42]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + z[45];
  z[84] = front_.R*z[3]*z[4]*z[48]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + z[45];
  z[85] = front_.R*pow(z[21], 2)*z[23]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + z[56];
  z[86] = rear_.Gx*z[0]*z[1] - rear_.Gx*z[1]*z[3]*z[30]/z[29] + rear_.Gy*z[0]*z[3]*z[30]*z[4]/z[29] - rear_.Gy*z[4]*z[7] + rear_.Gy*z[4]*z[9];
  z[87] = -rear_.Gx*z[0]*z[4] + rear_.Gx*z[3]*z[30]*z[4]/z[29] + rear_.Gy*z[0]*z[1]*z[3]*z[30]/z[29] - rear_.Gy*z[1]*z[7] + rear_.Gy*z[1]*z[9];
  z[88] = -front_.R*z[21]*z[35]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + front_.R*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[21], 2)) + front_.r*z[3]*z[4]*z[5];
  z[89] = -front_.R*pow(z[21], 2)*z[24]/(2*pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0)) + z[56];
  z[90] = front_.a*z[23] + front_.r*z[21]*z[23] - z[23]*z[59];
  z[91] = -front_.R*pow(z[21], 2)*z[24]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - 2*front_.R*z[23]/sqrt(z[11]*z[9] + pow(z[21], 2)) - 2*front_.r*z[23];
  z[92] = front_.a*z[1] - front_.b*z[4]*z[5] - z[1]*z[59] + z[4]*z[46]*z[5];
  z[93] = -z[0]*z[4]*z[59] + z[25]*z[46];
  z[94] = front_.r*pow(z[2], 2)*z[3]*z[4] + z[5]*z[88];
  z[95] = z[21]*z[23]*z[74]/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[96] = -front_.r*z[1]*z[22] - z[2]*z[4]*z[84];
  z[97] = -front_.R*z[21]*z[42]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + z[57];
  z[98] = rear_.b*z[3] - rear_.r*z[4]*z[7] + rear_.r*z[4]*z[9] + z[0]*z[72] - z[3]*z[37];
  z[99] = -rear_.a*z[3] - rear_.r*z[1]*z[7] + rear_.r*z[1]*z[9] + z[0]*z[71] - z[3]*z[36];
  z[100] = front_.R*z[21]*z[48]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - z[57];
  z[101] = front_.a*z[3]*z[4] - z[3]*z[4]*z[59] + z[66];
  z[102] = z[100];
  z[103] = rear_.Fx*z[4]*z[68] + rear_.Fz*z[1]*z[68];
  z[104] = -front_.Gx*pow(z[21], 2)*z[23]/(z[11]*z[9] + pow(z[21], 2)) + front_.Gx*z[23] + front_.Gy*z[21]*pow(z[23], 2)*z[3]*z[4]/(z[11]*z[9] + pow(z[21], 2)) + front_.Gy*z[21]*z[3]*z[4];
  z[105] = front_.r*z[2]*z[22] - z[102]*z[5];
  z[106] = -z[1]*z[71] - z[4]*z[72];
  z[107] = -z[1]*z[3]*z[72] + z[3]*z[4]*z[71];
  z[108] = -2*z[1]*z[4]*z[9] + z[11]*z[35]*z[9]/(z[11]*z[9] + pow(z[21], 2)) + pow(z[21], 2)*z[35]/(z[11]*z[9] + pow(z[21], 2)) - 2*z[21]*z[3]*z[4]*z[5];
  z[109] = front_.r*z[2]*z[21]*z[3]*z[4] + front_.r*z[23]*z[3]*z[4]*z[5] - z[23]*z[88];
  z[110] = -(-front_.Gx*z[21]*z[23]*z[3]*z[4]/(z[11]*z[9] + pow(z[21], 2)) - front_.Gy*pow(z[21], 2)*pow(z[23], 2)/(z[11]*z[9] + pow(z[21], 2)) - front_.Gy*pow(z[21], 2) + front_.Gy*pow(z[23], 2))/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[111] = front_.b*z[1]*z[2] + front_.r*z[1]*z[2]*z[3]*z[4] - front_.r*z[23]*z[4] - z[1]*z[2]*z[46] - z[2]*z[4]*z[79];
  z[112] = -z[11]*z[42]*z[9]/(z[11]*z[9] + pow(z[21], 2)) - pow(z[21], 2)*z[42]/(z[11]*z[9] + pow(z[21], 2)) + z[43];
  z[113] = front_.b*z[2]*z[3]*z[4] + front_.r*z[1]*z[23]*z[3] + front_.r*z[11]*z[2]*z[9] - z[2]*z[3]*z[4]*z[46] - z[23]*z[79];
  z[114] = -(front_.Gx*z[21]*z[35]/(z[11]*z[9] + pow(z[21], 2)) - front_.Gx*z[3]*z[4]*z[5] + front_.Gy*z[1]*z[23]*z[3] + front_.Gy*z[11]*z[2]*z[9] - front_.Gy*z[23]*z[3]*z[35]*z[4]/(z[11]*z[9] + pow(z[21], 2)))/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[115] = front_.Gx*z[21]*z[42]/(z[11]*z[9] + pow(z[21], 2)) + front_.Gx*z[25] - front_.Gy*z[0]*z[23]*z[4] + front_.Gy*z[22]*z[3]*z[4] - front_.Gy*z[23]*z[3]*z[4]*z[42]/(z[11]*z[9] + pow(z[21], 2));
  z[116] = front_.a*z[2] + front_.r*z[2]*z[21] + front_.r*z[23]*z[5] - z[2]*z[59] + z[5]*z[85];
  z[117] = -front_.a*z[1]*z[2] - front_.r*z[1]*z[23]*z[5] - front_.r*z[11]*z[2]*z[3]*z[5] + z[1]*z[2]*z[59] + z[2]*z[4]*z[88];
  z[118] = -(front_.Gx*z[1]*z[3] - front_.Gx*z[3]*z[35]*z[4]/(z[11]*z[9] + pow(z[21], 2)) + front_.Gy*z[2]*z[21]*z[3]*z[4] - front_.Gy*z[21]*z[23]*z[35]/(z[11]*z[9] + pow(z[21], 2)) + front_.Gy*z[23]*z[3]*z[4]*z[5])/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[119] = -front_.Gx*z[0]*z[4] - front_.Gx*z[3]*z[4]*z[42]/(z[11]*z[9] + pow(z[21], 2)) + front_.Gy*z[21]*z[22] - front_.Gy*z[21]*z[23]*z[42]/(z[11]*z[9] + pow(z[21], 2)) - front_.Gy*z[23]*z[25];
  z[120] = -front_.b*z[22] + front_.r*z[0]*z[23]*z[4] - front_.r*z[22]*z[3]*z[4] + z[22]*z[46] - z[23]*z[84];
  z[121] = -front_.a*z[2]*z[3]*z[4] - z[109] + z[2]*z[3]*z[4]*z[59];
  z[122] = front_.a*z[21] + front_.r*pow(z[21], 2) - front_.r*pow(z[23], 2) - z[21]*z[59] - z[23]*z[85];
  z[123] = -rear_.a*z[0]*z[4] - rear_.b*z[0]*z[1] - z[107] - z[70];
  z[124] = z[1]*z[102] - z[4]*z[5]*z[83];
  z[125] = front_.a*z[22] + z[100]*z[23] - z[22]*z[59] - z[58];
  z[126] = front_.a*z[4] + front_.b*z[1]*z[5] - z[1]*z[46]*z[5] + z[1]*z[88] - z[4]*z[5]*z[79] - z[4]*z[59];
  z[127] = -z[1]*z[3]*z[59] + z[21]*z[79] + z[3]*z[4]*z[46]*z[5] - z[3]*z[4]*z[88];
  z[128] = -front_.a*z[1]*z[3] + front_.b*z[3]*z[4]*z[5] - z[127];
  z[129] = -front_.a*z[0]*z[4] + front_.b*z[25] + z[100]*z[3]*z[4] - z[21]*z[84] - z[93];
  z[130] = -z[0]*z[11]*z[30]*z[9]/z[32] - z[0]*z[30]*z[8]*z[9]/z[32] - z[0]*(2*z[0]*z[11]*z[3]/z[31] + 2*z[0]*z[3]*z[8]/z[31] - z[11]*z[30]*z[9]/z[32] - z[30]*z[8]*z[9]/z[32]) - z[10]*z[11]/z[31] - z[10]*z[8]/z[31] + 2*z[11]*z[3]*z[7]/z[31] + z[3]*(z[11]*z[9]/z[31] + z[8]*z[9]/z[31]) + 2*z[3]*z[7]*z[8]/z[31];
  z[131] = z[11]*z[21]*pow(z[23], 2)*z[9]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + z[11]*z[21]*z[9]/sqrt(z[11]*z[9] + pow(z[21], 2)) - 2*z[21]*pow(z[23], 2)/sqrt(z[11]*z[9] + pow(z[21], 2)) - z[21]*z[73] + pow(z[23], 2)*z[28]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - z[23]*(-z[11]*z[21]*z[24]*z[9]/(2*pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0)) - 2*z[21]*z[23]/sqrt(z[11]*z[9] + pow(z[21], 2)) - z[24]*z[28]/(2*pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0))) + z[28]/sqrt(z[11]*z[9] + pow(z[21], 2));
  z[132] = -2*z[1]*z[23]*z[4]*z[9]/sqrt(z[11]*z[9] + pow(z[21], 2)) - z[10]*z[2]*pow(z[4], 3)/sqrt(z[11]*z[9] + pow(z[21], 2)) + z[11]*z[23]*z[35]*z[9]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - z[2]*pow(z[21], 2)*z[3]*z[4]/sqrt(z[11]*z[9] + pow(z[21], 2)) + z[2]*z[3]*z[4]*z[73] + pow(z[21], 2)*z[23]*z[35]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - 2*z[21]*z[23]*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[21], 2)) - z[23]*(-2*z[1]*z[4]*z[9]/sqrt(z[11]*z[9] + pow(z[21], 2)) + z[11]*z[35]*z[9]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + pow(z[21], 2)*z[35]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - 2*z[21]*z[3]*z[4]*z[5]/sqrt(z[11]*z[9] + pow(z[21], 2)));
  z[133] = 2*z[0]*z[11]*z[23]*z[3]/sqrt(z[11]*z[9] + pow(z[21], 2)) - z[11]*z[22]*z[9]/sqrt(z[11]*z[9] + pow(z[21], 2)) + z[11]*z[23]*z[42]*z[9]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - pow(z[21], 2)*z[22]/sqrt(z[11]*z[9] + pow(z[21], 2)) + pow(z[21], 2)*z[23]*z[42]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) + 2*z[21]*z[23]*z[25]/sqrt(z[11]*z[9] + pow(z[21], 2)) + z[22]*z[73] + z[23]*(-2*z[0]*z[11]*z[3]/sqrt(z[11]*z[9] + pow(z[21], 2)) - z[11]*z[42]*z[9]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - pow(z[21], 2)*z[42]/pow(z[11]*z[9] + pow(z[21], 2), 3.0/2.0) - 2*z[21]*z[25]/sqrt(z[11]*z[9] + pow(z[21], 2)));
  z[134] = -front_.Fy;
  z[135] = -front_.Fz;
  z[136] = -front_.Gx;
  z[137] = -2*front_.Gy;
  z[138] = -front_.b;
  z[139] = -rear_.b;
  z[140] = front_.Fx*front_.r;
  z[141] = g_*front_.m;
  z[142] = g_*rear_.m;
  z[143] = front_.Fx*z[4];
  z[144] = rear_.Fx*z[1];
  z[145] = -z[134]*z[2];
  z[146] = -z[1]*z[135];
  z[147] = -z[135]*z[4];
  z[148] = rear_.Fz*z[4];
  z[149] = -z[136]*z[4];
  z[150] = front_.Gy*z[2];
  z[151] = front_.Tx*z[5];
  z[152] = rear_.Tx*z[1];
  z[153] = front_.r*z[5];
  z[154] = rear_.r*z[0];
  z[155] = -z[0];
  z[156] = -2*z[155];
  z[157] = -z[1];
  z[158] = -z[2];
  z[159] = -z[3];
  z[160] = -z[4];
  z[161] = -2*z[160];
  z[162] = z[155]*z[157];
  z[163] = z[155]*z[159];
  z[164] = z[155]*z[160];
  z[165] = z[157]*z[159];
  z[166] = z[158]*z[159];
  z[167] = z[158]*z[160];
  z[168] = z[159]*z[160];
  z[169] = -z[160]*z[5];
  z[170] = rear_.r*z[7];
  z[171] = rear_.r*z[9];
  z[172] = -z[11]*z[159];
  z[173] = z[11]*z[9];
  z[174] = -rear_.Gy*z[16];
  z[175] = -z[159]*(rear_.Fx*z[1] - rear_.Fz*z[4]);
  z[176] = -z[159]*(z[16] - 1);
  z[177] = -z[157]*z[18];
  z[178] = z[16]*z[9];
  z[179] = -front_.Fx*z[23];
  z[180] = z[135]*z[23];
  z[181] = -front_.Gy*z[23];
  z[182] = -z[136]*z[21];
  z[183] = front_.Gy*z[21];
  z[184] = front_.r*z[21];
  z[185] = z[160]*z[23];
  z[186] = -z[181]*z[23];
  z[187] = -z[160]*z[21];
  z[188] = z[21]*z[5];
  z[189] = -pow(z[23], 2);
  z[190] = -pow(z[21], 2);
  z[191] = z[11]*z[21];
  z[192] = z[7]/pow(z[16]*z[9], 3.0/2.0);
  z[193] = z[7]/z[27];
  z[194] = z[9]/z[27];
  z[195] = rear_.R/z[31];
  z[196] = z[10]/z[31];
  z[197] = -z[21]*z[23];
  z[198] = front_.Fx/sqrt(z[173] - z[190]);
  z[199] = -z[135]/sqrt(z[173] - z[190]);
  z[200] = front_.R/pow(z[173] - z[190], 3.0/2.0);
  z[201] = 1/(2*sqrt(z[173] - z[190]));
  z[202] = z[18]/z[31];
  z[203] = z[19]/z[31];
  z[204] = -z[23]/(z[173] - z[190]);
  z[205] = -z[23]/sqrt(z[173] - z[190]);
  z[206] = -z[25]/sqrt(z[173] - z[190]);
  z[207] = z[21]/pow(z[173] - z[190], 3.0/2.0);
  z[208] = z[21]/(z[173] - z[190]);
  z[209] = z[21]/sqrt(z[173] - z[190]);
  z[210] = z[22]/sqrt(z[173] - z[190]);
  z[211] = -z[190]/(z[173] - z[190]);
  z[212] = z[33]/pow(z[173] - z[190], 3.0/2.0);
  z[213] = z[35]/(z[173] - z[190]);
  z[214] = z[168]*z[190]*z[200]*z[23];
  z[215] = z[39]/pow(z[173] - z[190], 2);
  z[216] = z[39]/(z[173] - z[190]);
  z[217] = z[41]/(z[173] - z[190]);
  z[218] = z[47]/(z[173] - z[190]);
  z[219] = -front_.Fx*z[159]*z[78];
  z[220] = z[82]/z[31];
  z[221] = z[86]/z[31];
  z[222] = z[87]/z[31];
  z[223] = z[108]/sqrt(z[173] - z[190]);

  ar[0] = front_.Fx*z[120] + rear_.Fx*z[98] + rear_.Fy*z[123] + rear_.Fz*z[99] - rear_.Tw*z[159] - front_.Tx*z[25] + z[12]*z[22] - z[125]*z[135] - z[129]*z[134] - z[13]*z[164] + z[141]*(-z[101]*z[22] + z[120]*z[21] + z[125]*z[168] - z[129]*z[23] - z[164]*z[90] - z[25]*z[76]) + z[142]*(-z[123]*z[155] - z[159]*(-rear_.a*z[160]*z[3] + z[1]*z[139]*z[159] - z[165]*z[37] + z[168]*z[36]) + z[162]*z[54] + z[164]*z[53] - z[165]*z[98] + z[168]*z[99]) - z[152]*z[155] + z[159]*(rear_.Tw - rear_.Ty) - z[164]*z[6];
  ar[1] = front_.Fx*z[113] + rear_.Fy*z[159]*z[17] - rear_.Tx*z[168] + z[12]*z[160]*z[166] - z[121]*z[135] - z[128]*z[134] - z[13]*z[165] + z[141]*(-z[101]*z[160]*z[166] + z[113]*z[21] + z[121]*z[168] - z[128]*z[23] - z[165]*z[90] - z[168]*z[5]*z[76]) + z[142]*(-z[155]*(rear_.a*z[1]*z[159] - z[139]*z[159]*z[160]) + z[165]*z[53] + z[165]*(z[154]*z[165] + z[155]*z[36]) + z[168]*z[50] - z[168]*z[54]) + z[144]*z[163]*z[195] - z[148]*z[163]*z[195] - z[151]*z[168] - z[165]*z[6];
  ar[2] = front_.Fx*z[21]*(front_.R*z[168]/sqrt(z[173] - z[190]) + z[138] - z[168]*z[189]*z[200]) - front_.Tx*z[23] + z[12]*z[21] - z[122]*z[135] - z[134]*(-z[168]*z[91]/2 - z[214] - z[64]) + z[141]*(-z[101]*z[21] + z[122]*z[168] + z[21]*(-z[168]*z[184] - z[168]*z[189]*z[200]*z[21] + z[66]) - z[23]*z[76] - z[23]*(z[168]*z[190]*z[200]*z[24]/2 - z[168]*z[89] - z[64]));
  ar[3] = front_.Fx*z[96] + rear_.Fy*z[106] - rear_.r*z[144]*z[159] + rear_.r*z[148]*z[159] - z[124]*z[134] + z[141]*(-z[124]*z[23] - z[164]*z[77] + z[168]*(z[102]*z[167] - z[153]*z[160]*z[22]) + z[21]*z[96] - z[22]*z[92] - z[25]*z[63]) + z[142]*(-z[106]*z[155] + z[11]*z[170] - z[11]*z[171] - z[159]*(z[17] + z[67]) + z[170]*z[8] - z[171]*z[8]) + z[147]*(-z[102]*z[158] + z[153]*z[22]);
  ar[4] = front_.Fx*z[111] + rear_.Fx*z[154]*z[4] + rear_.Fy*z[15] + rear_.Fz*z[1]*z[154] - z[117]*z[135] - z[12]*z[157]*z[158] - z[126]*z[134] - z[13]*z[160] + z[141]*(z[111]*z[21] + z[117]*z[168] - z[126]*z[23] - z[160]*z[166]*z[92] - z[165]*z[77] - z[168]*z[5]*z[63]) - z[142]*z[15]*z[155] + z[151]*z[157] - z[152] - z[160]*z[6];
  ar[5] = front_.Fx*(z[166]*z[191]*z[200]*z[23] - z[65]) - front_.Tx*z[167] + z[12]*z[169] - z[134]*(z[157]*z[91]/2 + z[172]*z[188]*z[200]*z[23] - z[55]) + z[141]*(z[168]*(front_.a*z[4]*z[5] + front_.r*z[185]*z[2] + z[153]*z[187] - z[167]*z[85] - z[169]*z[59]) - z[21]*z[92] + z[21]*(-z[166]*z[191]*z[200]*z[24]/2 - z[65]) - z[23]*z[63] - z[23]*(z[157]*z[89] - z[172]*z[188]*z[200]*z[24]/2 - z[55])) + z[147]*(z[153]*z[21] + z[158]*z[85] + z[75]);
  ar[6] = z[103] - z[105]*z[135] + z[141]*(z[105]*z[168] - z[158]*z[23]*z[83] + z[164]*z[75] + z[188]*z[83] + z[22]*z[51] - z[25]*z[52]) + z[142]*(z[107] - z[162]*z[40] + z[164]*z[38]) + z[143]*z[5]*z[80] + z[145]*z[160]*z[80];
  ar[7] = z[135]*z[94] + z[141]*(-z[158]*z[23]*z[79] + z[160]*z[166]*z[51] + z[165]*z[75] - z[168]*z[5]*z[52] - z[168]*z[94] + z[188]*z[79]) + z[142]*z[159]*(z[157]*z[38] + z[160]*z[40] + z[67]) - z[144]*z[159]*z[34] + z[145]*z[159]*z[78] + z[148]*z[159]*z[34] + z[219]*z[5];
  ar[8] = front_.Fx*z[81] - z[116]*z[135] - z[12]*z[158] - z[134]*(-z[166]*z[185]*z[200]*z[21] - z[52]) + z[141]*(z[116]*z[168] + z[21]*z[51] + z[21]*z[81] - z[23]*z[52] - z[23]*(-z[166]*z[187]*z[200]*z[24]/2 - z[52])) + z[151];
  ar[9] = -z[134]*(-z[200]*z[21]*z[47]/2 - z[57]) - z[140]*z[22] + z[141]*(-z[102]*z[23] + z[22]*z[60] + z[58]);
  ar[10] = -z[134]*z[88] - z[140]*z[160]*z[166] + z[141]*(z[109] + z[160]*z[166]*z[60]);
  ar[11] = -z[134]*z[23]*z[69] - z[140]*z[21] + z[141]*(front_.r*pow(z[23], 2) - z[184]*z[21] + z[21]*z[60] + z[23]*z[85]);
  ar[12] = z[103] + z[142]*(z[107] + z[70]);
  ar[13] = z[175]*z[34];
  ar[14] = 0;
  ar[15] = -z[135]*z[97] + z[141]*(z[168]*z[97] + z[21]*z[83] + z[93]) + z[143]*z[80];
  ar[16] = z[127]*z[141] + z[135]*z[88] + z[219];
  ar[17] = z[141]*(z[168]*z[85] + z[214] + z[23]*z[46]) - z[143]*z[159]*z[197]*z[200] + z[180]*z[69];
  ar[18] = z[159]*(-z[157]*z[86] + z[160]*z[87])/(z[27]*z[31]);
  ar[19] = -z[175]/z[27];
  ar[20] = 0;
  ar[21] = rear_.Fy*z[159]*z[220] + rear_.Gz*z[130] + 2*z[10]*z[174]*z[82]/z[29] + z[130]*z[142] + z[144]*z[178]*z[192] - z[144]*z[193] + z[144]*z[194] - z[148]*z[178]*z[192] + z[148]*z[193] - z[148]*z[194] - z[159]*z[162]*z[222]/z[27] + z[16]*z[160]*z[19]*z[192]*z[196] + z[16]*z[177]*z[192]*z[196] - z[160]*z[163]*z[221]/z[27] + z[160]*z[19]*z[196]/z[27] - z[165]*z[193]*z[202] + z[168]*z[193]*z[203] + z[177]*z[196]/z[27];
  ar[22] = z[14]*z[163]/z[27];
  ar[23] = 0;
  ar[24] = -rear_.Fy*z[159] + rear_.Gy*z[0]*z[159]*z[220] - rear_.Gz*z[156]*z[176] - z[142]*z[156]*z[176] - z[144]*z[155] + z[148]*z[155] - z[159]*z[162]*z[202] + z[160]*z[163]*z[203] - z[165]*z[222] - z[168]*z[221] - z[174]*z[196];
  ar[25] = z[14]*z[159];
  ar[26] = 0;
  ar[27] = -z[115]*z[208] + z[119]*z[168]/(z[173] - z[190]) + z[143]*z[155]/sqrt(z[173] - z[190]) + z[143]*z[159]*z[42]/pow(z[173] - z[190], 3.0/2.0) - z[164]*z[216] - z[168]*z[215]*z[42] + z[199]*z[208]*z[42] + z[199]*z[25] - z[206]*z[41]/sqrt(z[173] - z[190]) + z[207]*z[41]*z[42]/sqrt(z[173] - z[190]);
  ar[28] = -z[114]*z[209] + z[118]*z[168]/sqrt(z[173] - z[190]) + z[147]*z[159]*z[207]*z[33] - z[147]*z[159]*z[5]/sqrt(z[173] - z[190]) - z[165]*z[198] - z[165]*z[216] - z[168]*z[207]*z[33]*z[61] + z[168]*z[5]*z[61]/sqrt(z[173] - z[190]) + z[173]*z[198]*z[33]/(z[173] - z[190]) + z[173]*z[212]*z[39]/sqrt(z[173] - z[190]);
  ar[29] = -z[104]*z[208] + z[143]*z[159]*z[197]/pow(z[173] - z[190], 3.0/2.0) - z[168]*z[197]*z[215] + z[168]*(z[149]*z[159]*z[197]/(z[173] - z[190]) + z[183]*z[21] + z[186]*z[211] - z[186])/(z[173] - z[190]) - z[180]*z[190]/pow(z[173] - z[190], 3.0/2.0) - z[180]/sqrt(z[173] - z[190]) + z[204]*z[211]*z[41] - z[204]*z[41];
  ar[30] = -front_.Gz*z[133] - z[112]*z[134]/sqrt(z[173] - z[190]) - z[112]*z[137] - z[115]*z[168]*z[204] - z[119]*z[197]/(z[173] - z[190]) - z[133]*z[141] - z[147]*z[155]*z[205] - z[147]*z[159]*z[204]*z[42]/sqrt(z[173] - z[190]) - z[147]*z[159]*z[210] + z[164]*z[204]*z[41] + z[168]*z[204]*z[217]*z[42] + z[168]*z[210]*z[41]/sqrt(z[173] - z[190]) - z[179]*z[206] + z[179]*z[207]*z[42] + z[197]*z[215]*z[42] + z[198]*z[21]*z[22] + z[204]*z[25]*z[39] + z[208]*z[22]*z[39];
  ar[31] = front_.Gz*z[132] - z[108]*z[137] + z[132]*z[141] - z[134]*z[223] + z[143]*z[159]*z[197]*z[212] - z[143]*z[159]*z[205]*z[5] - z[143]*z[166]*z[209] - z[146]*z[159]*z[205] + z[158]*z[173]*z[199] + z[158]*z[173]*z[217] + z[165]*z[204]*z[41] - z[166]*z[187]*z[216] - z[168]*z[197]*z[212]*z[39]/sqrt(z[173] - z[190]) + z[168]*z[204]*z[39]*z[5] - z[168]*z[204]*(-z[149]*z[159]*z[5] - z[150]*z[173] + z[165]*z[181] - z[168]*z[181]*z[213] - z[182]*z[213]) - z[173]*z[180]*z[212] - z[173]*z[204]*z[217]*z[33] - z[197]*(z[136]*z[165] - z[149]*z[159]*z[213] - z[150]*z[168]*z[21] + z[168]*z[181]*z[5] - z[181]*z[208]*z[35])/(z[173] - z[190]);
  ar[32] = -2*front_.Gy*z[197]*z[74] + front_.Gz*z[131] - z[104]*z[168]*z[204] - z[110]*z[197]/sqrt(z[173] - z[190]) + z[131]*z[141] - z[134]*z[95] + z[147]*z[159]*z[189]*z[207] - z[147]*z[159]*z[209] - z[168]*z[189]*z[207]*z[61] + z[168]*z[209]*z[61] - z[179]*z[190]*z[204]/sqrt(z[173] - z[190]) - z[179]*z[205] + z[189]*z[190]*z[39]/pow(z[173] - z[190], 2) + z[189]*z[216] - z[190]*z[198] + z[211]*z[39];
  ar[33] = -front_.Fx*z[25] - front_.Gy*z[22]*sqrt(z[173] - z[190]) + front_.Gz*z[62] + z[134]*z[22] + z[141]*z[62] + z[147]*z[155] - z[164]*z[61] - z[168]*z[201]*(2*z[136]*z[25] + z[137]*z[159]*z[160]*z[22] + z[156]*z[160]*z[181] + z[159]*z[160]*z[181]*z[47]/(z[173] - z[190]) + z[182]*z[218]) + z[181]*(z[173]*z[49]/(z[173] - z[190]) + z[211]*z[49] + z[43])/sqrt(z[173] - z[190]) - z[201]*z[21]*(z[137]*z[21]*z[22] + z[149]*z[156] + z[149]*z[159]*z[218] + z[181]*z[208]*z[47] - 2*z[181]*z[25]) + z[206]*z[39];
  ar[34] = front_.Gz*z[159]*z[161]*z[44] + z[114]*z[168] + z[118]*z[21] + z[141]*z[159]*z[161]*z[44] + z[143]*z[159]*z[5] + z[145]*z[168] + z[146]*z[159] + z[150]*z[168]*sqrt(z[173] - z[190]) - z[165]*z[61] - z[168]*z[39]*z[5]/sqrt(z[173] - z[190]) + z[181]*z[223];
  ar[35] = z[104]*z[168]/sqrt(z[173] - z[190]) + z[110]*z[21] + z[134]*z[21] + z[179] + z[181]*z[95] - z[183]*sqrt(z[173] - z[190]) + z[205]*z[39];

  delete [] z;
}

/** Computes the n-d array of shape (12, 22)
 *
 * @param[out] ar a C-array of with 264 elements
 */
//  void Bicycle::gaf_dr(double ar[264]) const;
void Bicycle::gaf_dr(double ar[264]) const
{
  double * z = new double[67];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = sin(state_[3]);
  z[3] = cos(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = cos(state_[3]);
  z[6] = 0;
  z[7] = pow(z[0], 2);
  z[8] = pow(z[1], 2);
  z[9] = pow(z[3], 2);
  z[10] = pow(z[4], 2);
  z[11] = z[10] + z[8];
  z[12] = front_.a*z[1] - front_.b*z[4]*z[5];
  z[13] = z[0]*z[5] + z[1]*z[2]*z[3];
  z[14] = -z[0]*z[2] + z[1]*z[3]*z[5];
  z[15] = -z[14];
  z[16] = -z[13];
  z[17] = sqrt(z[11]*z[9]);
  z[18] = z[10]*z[9] + z[8]*z[9];
  z[19] = sqrt(z[18]);
  z[20] = front_.a*z[5] - front_.r*z[16]*z[2];
  z[21] = -rear_.R/z[17] - rear_.r;
  z[22] = z[18] + z[7];
  z[23] = front_.a*z[3]*z[4] - front_.b*z[15];
  z[24] = -front_.b*z[2]*z[4] - front_.r*z[1]*z[16];
  z[25] = z[10]*z[9] + pow(z[14], 2);
  z[26] = -rear_.R/z[19] - rear_.r;
  z[27] = front_.R/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.r;
  z[28] = rear_.R*z[1]*z[3]/z[19] + rear_.r*z[1]*z[3];
  z[29] = -rear_.R*z[3]*z[4]/z[19] - rear_.r*z[3]*z[4];
  z[30] = front_.b - z[27]*z[3]*z[4];
  z[31] = front_.R*z[3]*z[4]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.r*z[3]*z[4];
  z[32] = -front_.R*z[15]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.a;
  z[33] = front_.R*z[15]/sqrt(z[10]*z[9] + pow(z[15], 2)) + front_.r*z[15];
  z[34] = z[16]*(z[10]*z[9]/sqrt(z[10]*z[9] + pow(z[15], 2)) + pow(z[15], 2)/sqrt(z[10]*z[9] + pow(z[15], 2)) - sqrt(z[10]*z[9] + pow(z[15], 2)));
  z[35] = -rear_.a;
  z[36] = -rear_.b;
  z[37] = -rear_.m;
  z[38] = -front_.r;
  z[39] = -rear_.r;
  z[40] = -z[35]*z[4];
  z[41] = -z[1]*z[36];
  z[42] = -z[0]*z[39];
  z[43] = -z[3]*z[39];
  z[44] = -z[1];
  z[45] = -z[2];
  z[46] = -z[4];
  z[47] = -z[5];
  z[48] = z[45]*z[46];
  z[49] = -z[3]*z[46];
  z[50] = z[46]*z[47];
  z[51] = z[3]*z[44];
  z[52] = -z[38]*z[49];
  z[53] = -z[43]*z[44];
  z[54] = -z[43]*z[46];
  z[55] = z[0]*z[9];
  z[56] = z[10]*z[9];
  z[57] = z[16]*z[38];
  z[58] = -z[15]*z[38];
  z[59] = z[7]/z[11];
  z[60] = -1/z[17];
  z[61] = -z[26]*z[3];
  z[62] = z[11]/z[19];
  z[63] = z[10]*z[27]*z[3];
  z[64] = pow(z[16], 2)/(pow(z[15], 2) + z[56]);
  z[65] = z[15]*z[27];
  z[66] = z[55]*(z[10]*z[60] + z[60]*z[8] + z[62]);

  ar[0] = 0;
  ar[1] = z[51];
  ar[2] = z[0];
  ar[3] = z[49];
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = z[0]*(z[26]*z[49] - z[36] + z[54]);
  ar[8] = z[3]*(z[40] + z[41]);
  ar[9] = z[0]*(-z[26]*z[51] + z[35] + z[53]);
  ar[10] = z[16];
  ar[11] = z[15];
  ar[12] = z[13];
  ar[13] = z[49];
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = -z[16]*(z[30] + z[52]);
  ar[18] = z[23];
  ar[19] = z[16]*(front_.a + z[58] - z[65]);
  ar[20] = 0;
  ar[21] = front_.m*(z[15]*(-front_.b*z[16] + z[16]*z[31] - z[16]*z[52]) - z[16]*(z[15]*z[31] + z[23] - z[33]*z[49]) + z[49]*(front_.a*z[16] - z[15]*z[57] - z[16]*z[33])) - z[37]*(z[0]*(z[28]*z[49] - z[29]*z[51] + z[3]*z[40] + z[3]*z[41]) - z[49]*(z[0]*z[28] - z[0]*z[35] + z[42]*z[51]) + z[51]*(z[0]*z[29] - z[0]*z[36] + z[42]*z[49]));
  ar[22] = 0;
  ar[23] = z[4];
  ar[24] = 0;
  ar[25] = z[1];
  ar[26] = 0;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = -z[42]*z[44];
  ar[30] = z[10]*z[61] + z[35]*z[44] - z[36]*z[46] + z[61]*z[8];
  ar[31] = z[42]*z[46];
  ar[32] = z[48];
  ar[33] = z[50];
  ar[34] = -z[48];
  ar[35] = z[1];
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = z[24] - z[45]*z[63];
  ar[40] = z[12] + z[44]*z[65] - z[47]*z[63];
  ar[41] = z[46]*(front_.a*z[45] - z[45]*z[65] - z[47]*z[57]);
  ar[42] = 0;
  ar[43] = front_.m*(z[15]*(z[24] + z[31]*z[48]) - z[16]*(z[12] + z[31]*z[50] + z[33]*z[44]) + z[49]*(front_.a*z[48] - z[33]*z[48] - z[50]*z[57])) + z[0]*z[37]*(z[10]*z[43] + z[28]*z[44] - z[29]*z[46] - z[35]*z[44] + z[36]*z[46] + z[43]*z[8]);
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 1;
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = rear_.R*z[49]*z[60] + rear_.b - z[54];
  ar[52] = 0;
  ar[53] = -rear_.R*z[51]*z[60] + z[35] - z[53];
  ar[54] = z[47];
  ar[55] = z[2];
  ar[56] = z[5];
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = -z[30]*z[47];
  ar[62] = z[30]*z[45];
  ar[63] = -z[20] - z[47]*z[65];
  ar[64] = 0;
  ar[65] = front_.m*(z[15]*(front_.b*z[5] + z[31]*z[47]) + z[16]*(front_.b*z[2] + z[31]*z[45]) + z[49]*(-z[20] - z[33]*z[47])) + z[3]*z[37]*(z[44]*(-z[29] + z[36]) - z[46]*(z[28] - z[35]));
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = 0;
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = 0;
  ar[73] = 0;
  ar[74] = 0;
  ar[75] = 0;
  ar[76] = 0;
  ar[77] = 0;
  ar[78] = 0;
  ar[79] = 1;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = z[57];
  ar[84] = z[32] - z[58];
  ar[85] = 0;
  ar[86] = 1;
  ar[87] = -front_.m*z[16]*z[32];
  ar[88] = 1;
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = 0;
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = z[21]*z[49];
  ar[96] = 0;
  ar[97] = -z[21]*z[51];
  ar[98] = 0;
  ar[99] = 0;
  ar[100] = 0;
  ar[101] = 0;
  ar[102] = 0;
  ar[103] = 0;
  ar[104] = 0;
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = 0;
  ar[109] = -z[37]*z[6];
  ar[110] = 0;
  ar[111] = 0;
  ar[112] = 0;
  ar[113] = 0;
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = 0;
  ar[118] = 0;
  ar[119] = 0;
  ar[120] = 1;
  ar[121] = 0;
  ar[122] = 0;
  ar[123] = 0;
  ar[124] = 0;
  ar[125] = 0;
  ar[126] = 0;
  ar[127] = -z[27]*z[49];
  ar[128] = 0;
  ar[129] = z[65];
  ar[130] = 0;
  ar[131] = front_.m*z[6];
  ar[132] = 0;
  ar[133] = 0;
  ar[134] = 0;
  ar[135] = 0;
  ar[136] = 1;
  ar[137] = 0;
  ar[138] = 0;
  ar[139] = -z[49]*z[60];
  ar[140] = 0;
  ar[141] = z[51]*z[60];
  ar[142] = 0;
  ar[143] = 0;
  ar[144] = 0;
  ar[145] = 0;
  ar[146] = 0;
  ar[147] = 0;
  ar[148] = 0;
  ar[149] = 0;
  ar[150] = 0;
  ar[151] = 0;
  ar[152] = 0;
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = 0;
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = z[10]*z[59] + pow(z[11], 2)*pow(z[3], 4)/z[18] + z[59]*z[8];
  ar[160] = z[66];
  ar[161] = z[0]*z[51]*z[60];
  ar[162] = -z[11]*z[60]*z[9];
  ar[163] = z[0]*z[49]*z[60];
  ar[164] = 0;
  ar[165] = 0;
  ar[166] = 0;
  ar[167] = 0;
  ar[168] = 0;
  ar[169] = 0;
  ar[170] = 0;
  ar[171] = 0;
  ar[172] = 0;
  ar[173] = 0;
  ar[174] = 0;
  ar[175] = z[37]*z[55]*(-z[10]*z[60] - z[60]*z[8] - z[62]);
  ar[176] = 0;
  ar[177] = 0;
  ar[178] = 0;
  ar[179] = 0;
  ar[180] = 0;
  ar[181] = z[66];
  ar[182] = z[22];
  ar[183] = z[51];
  ar[184] = z[0];
  ar[185] = z[49];
  ar[186] = 0;
  ar[187] = 0;
  ar[188] = 0;
  ar[189] = 0;
  ar[190] = 0;
  ar[191] = 0;
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = 0;
  ar[196] = 0;
  ar[197] = -z[22]*z[37];
  ar[198] = 0;
  ar[199] = 0;
  ar[200] = 0;
  ar[201] = 0;
  ar[202] = 0;
  ar[203] = 0;
  ar[204] = 0;
  ar[205] = 0;
  ar[206] = 0;
  ar[207] = 0;
  ar[208] = 0;
  ar[209] = 0;
  ar[210] = 0;
  ar[211] = 0;
  ar[212] = 1;
  ar[213] = 0;
  ar[214] = 0;
  ar[215] = z[49]/sqrt(pow(z[15], 2) + z[56]);
  ar[216] = 0;
  ar[217] = -z[15]/sqrt(pow(z[15], 2) + z[56]);
  ar[218] = 0;
  ar[219] = 0;
  ar[220] = 0;
  ar[221] = 0;
  ar[222] = 0;
  ar[223] = 0;
  ar[224] = 0;
  ar[225] = 0;
  ar[226] = 0;
  ar[227] = 0;
  ar[228] = 0;
  ar[229] = 0;
  ar[230] = 0;
  ar[231] = 0;
  ar[232] = 0;
  ar[233] = 0;
  ar[234] = 0;
  ar[235] = pow(z[15], 2)*z[64] + z[25] + z[56]*z[64];
  ar[236] = z[34];
  ar[237] = z[15]*z[16]/sqrt(pow(z[15], 2) + z[56]);
  ar[238] = sqrt(z[25]);
  ar[239] = z[16]*z[49]/sqrt(pow(z[15], 2) + z[56]);
  ar[240] = 0;
  ar[241] = front_.m*z[34];
  ar[242] = 0;
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = 0;
  ar[253] = 0;
  ar[254] = 0;
  ar[255] = 0;
  ar[256] = 0;
  ar[257] = z[34];
  ar[258] = pow(z[13], 2) + z[25];
  ar[259] = z[15];
  ar[260] = z[13];
  ar[261] = z[49];
  ar[262] = 0;
  ar[263] = front_.m*(pow(z[15], 2) + pow(z[16], 2) + z[56]);

  delete [] z;
}

} // namespace bicycle
