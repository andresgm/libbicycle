#include <cmath>
#include "bicycle.h"

namespace bicycle {

using ::std::sin;
using ::std::cos;
using ::std::pow;
using ::std::sqrt;

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::gc_r_ogl(double ar[16]) const;
void Bicycle::gc_r_ogl(double ar[16]) const
{
  double z[41];

  z[0] = cos(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[2]);
  z[3] = pow(z[1], 2) + pow(z[2], 2);
  z[4] = z[0]/sqrt(pow(z[0], 2)*z[3]);
  z[5] = cos(twist);
  z[6] = sin(azimuth);
  z[7] = z[2]*z[6];
  z[8] = sin(state_[1]);
  z[9] = cos(azimuth);
  z[10] = z[1]*z[9];
  z[11] = z[10]*z[8] + z[7];
  z[12] = sin(twist);
  z[13] = cos(elevation);
  z[14] = z[0]*z[13];
  z[15] = sin(elevation);
  z[16] = z[2]*z[9];
  z[17] = z[1]*z[6];
  z[18] = -z[16] + z[17]*z[8];
  z[19] = -z[1]*z[14] + z[15]*z[18];
  z[20] = z[11]*z[5] + z[12]*z[19];
  z[21] = -z[16]*z[8] + z[17];
  z[22] = z[14]*z[2];
  z[23] = z[10] + z[7]*z[8];
  z[24] = z[15]*z[23];
  z[25] = -z[12]*(-z[22] + z[24]) + z[21]*z[5];
  z[26] = -z[11]*z[12] + z[19]*z[5];
  z[27] = -z[12]*z[21] + z[5]*(z[22] - z[24]);
  z[28] = z[0]*z[15];
  z[29] = z[1]*z[28] + z[13]*z[18];
  z[30] = z[13]*z[23] + z[2]*z[28];
  z[31] = z[0]*z[3];
  z[32] = z[5]*z[9];
  z[33] = z[0]*z[6];
  z[34] = z[13]*z[8] + z[15]*z[33];
  z[35] = z[1]*z[8];
  z[36] = z[2]*z[8];
  z[37] = z[12]*z[9];
  z[38] = z[12]*z[6];
  z[39] = cam_x + cam_z;
  z[40] = z[5]*z[6];

  ar[0] = z[4]*(z[1]*z[25] + z[2]*z[20]);
  ar[1] = -z[4]*(z[1]*z[27] + z[2]*z[26]);
  ar[2] = z[4]*(-z[1]*z[30] + z[2]*z[29]);
  ar[3] = 0;
  ar[4] = z[4]*(z[20]*z[35] - z[25]*z[36] + z[31]*(z[0]*z[32] + z[12]*z[34]));
  ar[5] = z[4]*(-z[26]*z[35] + z[27]*z[36] - z[31]*(-z[0]*z[37] + z[34]*z[5]));
  ar[6] = z[4]*(z[29]*z[35] + z[30]*z[36] + z[31]*(z[13]*z[33] - z[15]*z[8]));
  ar[7] = 0;
  ar[8] = z[12]*z[13];
  ar[9] = -z[13]*z[5];
  ar[10] = -z[15];
  ar[11] = 0;
  ar[12] = -cam_y*(z[15]*z[38] + z[32]) - z[39]*(-z[15]*z[37] + z[40]);
  ar[13] = cam_y*(z[15]*z[40] - z[37]) - z[39]*(z[15]*z[32] + z[38]);
  ar[14] = z[13]*(-cam_y*z[6] + z[39]*z[9]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::wc_r_ogl(double ar[16]) const;
void Bicycle::wc_r_ogl(double ar[16]) const
{
  double z[44];

  z[0] = cos(state_[4]);
  z[1] = cos(state_[2]);
  z[2] = sin(azimuth);
  z[3] = cos(twist);
  z[4] = z[2]*z[3];
  z[5] = sin(elevation);
  z[6] = sin(twist);
  z[7] = cos(azimuth);
  z[8] = z[6]*z[7];
  z[9] = z[4] - z[5]*z[8];
  z[10] = sin(state_[2]);
  z[11] = cos(elevation);
  z[12] = cos(state_[1]);
  z[13] = z[11]*z[12];
  z[14] = sin(state_[1]);
  z[15] = z[3]*z[7];
  z[16] = z[2]*z[6];
  z[17] = z[15] + z[16]*z[5];
  z[18] = -z[13]*z[6] + z[14]*z[17];
  z[19] = z[1]*z[9] + z[10]*z[18];
  z[20] = sin(state_[4]);
  z[21] = z[10]*z[9];
  z[22] = z[1]*z[18];
  z[23] = z[21] - z[22];
  z[24] = z[15]*z[5] + z[16];
  z[25] = z[13]*z[3];
  z[26] = z[4]*z[5] - z[8];
  z[27] = z[14]*z[26];
  z[28] = z[1]*(z[25] - z[27]) - z[10]*z[24];
  z[29] = z[1]*z[24] - z[10]*(-z[25] + z[27]);
  z[30] = z[11]*z[7];
  z[31] = z[11]*z[2];
  z[32] = z[12]*z[5] + z[14]*z[31];
  z[33] = z[1]*z[32] + z[10]*z[30];
  z[34] = z[1]*z[30] - z[10]*z[32];
  z[35] = z[11]*z[14];
  z[36] = z[12]*z[17] + z[35]*z[6];
  z[37] = z[12]*z[26] + z[3]*z[35];
  z[38] = z[12]*z[31] - z[14]*z[5];
  z[39] = cam_x + cam_z;
  z[40] = rear_.r*z[14];
  z[41] = rear_.R/sqrt(pow(z[12], 2)*(pow(z[1], 2) + pow(z[10], 2))) + rear_.r;
  z[42] = z[10]*z[12]*z[41];
  z[43] = z[1]*z[12]*z[41];

  ar[0] = z[0]*z[19] - z[20]*z[23];
  ar[1] = z[0]*z[29] + z[20]*z[28];
  ar[2] = -z[0]*z[34] + z[20]*z[33];
  ar[3] = 0;
  ar[4] = z[36];
  ar[5] = -z[37];
  ar[6] = z[38];
  ar[7] = 0;
  ar[8] = -z[0]*(-z[21] + z[22]) + z[19]*z[20];
  ar[9] = -z[0]*z[28] + z[20]*z[29];
  ar[10] = -z[0]*z[33] - z[20]*z[34];
  ar[11] = 0;
  ar[12] = -cam_y*z[17] + z[19]*z[42] - z[23]*z[43] - z[36]*z[40] - z[39]*z[9];
  ar[13] = cam_y*z[26] - z[24]*z[39] + z[28]*z[43] + z[29]*z[42] + z[37]*z[40];
  ar[14] = -cam_y*z[31] + z[30]*z[39] + z[33]*z[43] - z[34]*z[42] - z[38]*z[40];
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::mc_r_ogl(double ar[16]) const;
void Bicycle::mc_r_ogl(double ar[16]) const
{
  double z[43];

  z[0] = cos(state_[2]);
  z[1] = sin(azimuth);
  z[2] = cos(twist);
  z[3] = z[1]*z[2];
  z[4] = sin(elevation);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = z[5]*z[6];
  z[8] = z[3] - z[4]*z[7];
  z[9] = sin(state_[2]);
  z[10] = cos(elevation);
  z[11] = cos(state_[1]);
  z[12] = z[10]*z[11];
  z[13] = sin(state_[1]);
  z[14] = z[2]*z[6];
  z[15] = z[1]*z[5];
  z[16] = z[14] + z[15]*z[4];
  z[17] = -z[12]*z[5] + z[13]*z[16];
  z[18] = z[0]*z[8] + z[17]*z[9];
  z[19] = z[14]*z[4] + z[15];
  z[20] = z[12]*z[2];
  z[21] = z[3]*z[4] - z[7];
  z[22] = z[13]*z[21];
  z[23] = z[0]*z[19] - z[9]*(-z[20] + z[22]);
  z[24] = z[10]*z[6];
  z[25] = z[0]*z[24];
  z[26] = z[1]*z[10];
  z[27] = z[11]*z[4] + z[13]*z[26];
  z[28] = z[27]*z[9];
  z[29] = z[10]*z[13];
  z[30] = z[11]*z[16] + z[29]*z[5];
  z[31] = z[11]*z[21] + z[2]*z[29];
  z[32] = z[11]*z[26] - z[13]*z[4];
  z[33] = -z[0]*z[17] + z[8]*z[9];
  z[34] = z[19]*z[9];
  z[35] = z[0]*(z[20] - z[22]);
  z[36] = z[0]*z[27] + z[24]*z[9];
  z[37] = cam_x + cam_z;
  z[38] = rear_.r*z[13];
  z[39] = rear_.r*z[11];
  z[40] = rear_.R*z[11]/sqrt(pow(z[11], 2)*(pow(z[0], 2) + pow(z[9], 2)));
  z[41] = rear_.a + z[39]*z[9] + z[40]*z[9];
  z[42] = -rear_.b + z[0]*z[39] + z[0]*z[40];

  ar[0] = z[18];
  ar[1] = z[23];
  ar[2] = -z[25] + z[28];
  ar[3] = 0;
  ar[4] = z[30];
  ar[5] = -z[31];
  ar[6] = z[32];
  ar[7] = 0;
  ar[8] = z[33];
  ar[9] = z[34] - z[35];
  ar[10] = -z[36];
  ar[11] = 0;
  ar[12] = -cam_y*z[16] + z[18]*z[41] - z[30]*z[38] - z[33]*z[42] - z[37]*z[8];
  ar[13] = cam_y*z[21] - z[19]*z[37] + z[23]*z[41] + z[31]*z[38] + z[42]*(-z[34] + z[35]);
  ar[14] = -cam_y*z[26] + z[24]*z[37] - z[32]*z[38] + z[36]*z[42] - z[41]*(z[25] - z[28]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::gc_f_ogl(double ar[16]) const;
void Bicycle::gc_f_ogl(double ar[16]) const
{
  double z[83];

  z[0] = cos(state_[1]);
  z[1] = pow(z[0], 2);
  z[2] = cos(state_[2]);
  z[3] = pow(z[2], 2);
  z[4] = sin(state_[1]);
  z[5] = sin(state_[3]);
  z[6] = z[4]*z[5];
  z[7] = sin(state_[2]);
  z[8] = cos(state_[3]);
  z[9] = z[0]*z[8];
  z[10] = z[6] - z[7]*z[9];
  z[11] = sqrt(z[1]*z[3] + pow(z[10], 2));
  z[12] = 1.0/z[11];
  z[13] = cos(twist);
  z[14] = sin(azimuth);
  z[15] = cos(azimuth);
  z[16] = z[15]*z[2];
  z[17] = z[14]*z[7] - z[16]*z[4];
  z[18] = sin(twist);
  z[19] = cos(elevation);
  z[20] = z[0]*z[2];
  z[21] = sin(elevation);
  z[22] = z[15]*z[7];
  z[23] = z[14]*z[2];
  z[24] = z[22] + z[23]*z[4];
  z[25] = z[19]*z[20] - z[21]*z[24];
  z[26] = z[13]*z[17] + z[18]*z[25];
  z[27] = z[0]*z[5];
  z[28] = z[4]*z[8];
  z[29] = z[27] + z[28]*z[7];
  z[30] = z[15]*z[29] + z[23]*z[8];
  z[31] = z[14]*z[29] - z[16]*z[8];
  z[32] = z[10]*z[19] + z[21]*z[31];
  z[33] = z[13]*z[30] + z[18]*z[32];
  z[34] = z[17]*z[18];
  z[35] = z[13]*z[25];
  z[36] = z[18]*z[30];
  z[37] = z[13]*z[32];
  z[38] = z[0]*z[21];
  z[39] = z[19]*z[24] + z[2]*z[38];
  z[40] = -z[10]*z[21] + z[19]*z[31];
  z[41] = z[27]*z[7] + z[28];
  z[42] = z[0]*z[12]*z[2]*z[41];
  z[43] = z[6]*z[7] - z[9];
  z[44] = z[15]*z[43] + z[23]*z[5];
  z[45] = z[16]*z[5];
  z[46] = z[14]*z[43];
  z[47] = z[19]*z[41] + z[21]*(z[45] - z[46]);
  z[48] = z[10]*z[12]*z[41];
  z[49] = z[18]*z[19];
  z[50] = z[13]*z[19];
  z[51] = z[13]*z[15];
  z[52] = z[14]*z[18];
  z[53] = z[21]*z[52] + z[51];
  z[54] = cam_x + cam_z;
  z[55] = z[13]*z[14];
  z[56] = z[15]*z[18];
  z[57] = -z[21]*z[56] + z[55];
  z[58] = rear_.r*z[4];
  z[59] = z[0]*z[53] + z[4]*z[49];
  z[60] = rear_.r*z[0];
  z[61] = rear_.R/sqrt(z[1]*(z[3] + pow(z[7], 2)));
  z[62] = rear_.c + z[0]*z[61]*z[7] + z[60]*z[7];
  z[63] = -z[0]*z[49] + z[4]*z[53];
  z[64] = z[2]*z[57] + z[63]*z[7];
  z[65] = -ls_ + z[2]*z[60] + z[20]*z[61];
  z[66] = -z[2]*z[63] + z[57]*z[7];
  z[67] = front_.R*z[12];
  z[68] = z[0]*z[2]*(front_.r + z[67]);
  z[69] = front_.r*z[41];
  z[70] = -front_.c + front_.r*z[10] + z[10]*z[67];
  z[71] = z[21]*z[55] - z[56];
  z[72] = z[21]*z[51] + z[52];
  z[73] = z[0]*z[71] + z[4]*z[50];
  z[74] = z[0]*z[50];
  z[75] = z[4]*z[71];
  z[76] = z[2]*z[72] - z[7]*(-z[74] + z[75]);
  z[77] = z[2]*(z[74] - z[75]) - z[7]*z[72];
  z[78] = z[14]*z[19];
  z[79] = z[0]*z[78] - z[21]*z[4];
  z[80] = z[38] + z[4]*z[78];
  z[81] = z[16]*z[19] - z[7]*z[80];
  z[82] = z[19]*z[22] + z[2]*z[80];

  ar[0] = z[12]*(-z[10]*z[26] + z[20]*z[33]);
  ar[1] = z[12]*(z[10]*(-z[34] + z[35]) - z[20]*(-z[36] + z[37]));
  ar[2] = z[12]*(z[10]*z[39] + z[20]*z[40]);
  ar[3] = 0;
  ar[4] = z[11]*(-z[13]*z[44] + z[18]*z[47]) - z[26]*z[42] - z[33]*z[48];
  ar[5] = -z[11]*(z[13]*z[47] + z[18]*z[44]) - z[42]*(z[34] - z[35]) - z[48]*(z[36] - z[37]);
  ar[6] = -z[11]*(z[19]*(-z[45] + z[46]) + z[21]*z[41]) + z[39]*z[42] - z[40]*z[48];
  ar[7] = 0;
  ar[8] = z[49];
  ar[9] = -z[50];
  ar[10] = -z[21];
  ar[11] = 0;
  ar[12] = -cam_y*z[53] - z[54]*z[57] - z[58]*z[59] + z[62]*z[64] - z[65]*z[66] + z[66]*z[68] - z[69]*(z[5]*z[64] - z[59]*z[8]) + z[70]*(z[5]*z[59] + z[64]*z[8]);
  ar[13] = cam_y*z[71] - z[54]*z[72] + z[58]*z[73] + z[62]*z[76] + z[65]*z[77] - z[68]*z[77] - z[69]*(z[5]*z[76] + z[73]*z[8]) + z[70]*(-z[5]*z[73] + z[76]*z[8]);
  ar[14] = -cam_y*z[78] + z[15]*z[19]*z[54] - z[58]*z[79] - z[62]*z[81] + z[65]*z[82] - z[68]*z[82] + z[69]*(z[5]*z[81] + z[79]*z[8]) + z[70]*(z[5]*z[79] - z[8]*z[81]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::wc_f_ogl(double ar[16]) const;
void Bicycle::wc_f_ogl(double ar[16]) const
{
  double z[59];

  z[0] = sin(state_[5]);
  z[1] = sin(state_[2]);
  z[2] = sin(azimuth);
  z[3] = cos(twist);
  z[4] = z[2]*z[3];
  z[5] = sin(elevation);
  z[6] = sin(twist);
  z[7] = cos(azimuth);
  z[8] = z[6]*z[7];
  z[9] = z[4] - z[5]*z[8];
  z[10] = z[1]*z[9];
  z[11] = cos(state_[2]);
  z[12] = cos(elevation);
  z[13] = cos(state_[1]);
  z[14] = z[12]*z[13];
  z[15] = sin(state_[1]);
  z[16] = z[3]*z[7];
  z[17] = z[2]*z[6];
  z[18] = z[16] + z[17]*z[5];
  z[19] = -z[14]*z[6] + z[15]*z[18];
  z[20] = z[11]*z[19];
  z[21] = -z[10] + z[20];
  z[22] = cos(state_[5]);
  z[23] = sin(state_[3]);
  z[24] = z[12]*z[15];
  z[25] = z[13]*z[18] + z[24]*z[6];
  z[26] = cos(state_[3]);
  z[27] = z[1]*z[19] + z[11]*z[9];
  z[28] = z[23]*z[25] + z[26]*z[27];
  z[29] = z[16]*z[5] + z[17];
  z[30] = z[1]*z[29];
  z[31] = z[14]*z[3];
  z[32] = z[4]*z[5] - z[8];
  z[33] = z[15]*z[32];
  z[34] = z[31] - z[33];
  z[35] = z[11]*z[34];
  z[36] = -z[30] + z[35];
  z[37] = z[13]*z[32] + z[24]*z[3];
  z[38] = -z[23]*z[37];
  z[39] = z[11]*z[29];
  z[40] = z[26]*(-z[1]*(-z[31] + z[33]) + z[39]) + z[38];
  z[41] = z[12]*z[7];
  z[42] = z[12]*z[2];
  z[43] = z[13]*z[5] + z[15]*z[42];
  z[44] = z[1]*z[41] + z[11]*z[43];
  z[45] = z[13]*z[42] - z[15]*z[5];
  z[46] = z[23]*z[45];
  z[47] = z[11]*z[41];
  z[48] = z[1]*z[43];
  z[49] = z[47] - z[48];
  z[50] = z[26]*z[49];
  z[51] = -z[46] + z[50];
  z[52] = z[1]*z[34] + z[39];
  z[53] = cam_x + cam_z;
  z[54] = rear_.r*z[15];
  z[55] = rear_.r*z[13];
  z[56] = rear_.R*z[13]/sqrt(pow(z[13], 2)*(pow(z[1], 2) + pow(z[11], 2)));
  z[57] = rear_.c + z[1]*z[55] + z[1]*z[56];
  z[58] = -ls_ + z[11]*z[55] + z[11]*z[56];

  ar[0] = z[0]*z[21] + z[22]*z[28];
  ar[1] = z[0]*z[36] + z[22]*z[40];
  ar[2] = z[0]*z[44] - z[22]*z[51];
  ar[3] = 0;
  ar[4] = -z[23]*z[27] + z[25]*z[26];
  ar[5] = -z[23]*z[52] - z[26]*z[37];
  ar[6] = -z[23]*(-z[47] + z[48]) + z[26]*z[45];
  ar[7] = 0;
  ar[8] = z[0]*z[28] - z[21]*z[22];
  ar[9] = z[0]*z[40] - z[22]*z[36];
  ar[10] = -z[0]*z[51] - z[22]*z[44];
  ar[11] = 0;
  ar[12] = -front_.c*z[28] - cam_y*z[18] - z[25]*z[54] + z[27]*z[57] - z[53]*z[9] - z[58]*(z[10] - z[20]);
  ar[13] = -front_.c*(z[26]*z[52] + z[38]) + cam_y*z[32] - z[29]*z[53] + z[37]*z[54] + z[52]*z[57] - z[58]*(z[30] - z[35]);
  ar[14] = -front_.c*(z[46] - z[50]) - cam_y*z[42] + z[41]*z[53] + z[44]*z[58] - z[45]*z[54] - z[49]*z[57];
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::mc_f_ogl(double ar[16]) const;
void Bicycle::mc_f_ogl(double ar[16]) const
{
  double z[53];

  z[0] = sin(state_[3]);
  z[1] = sin(twist);
  z[2] = sin(state_[1]);
  z[3] = cos(elevation);
  z[4] = z[2]*z[3];
  z[5] = cos(state_[1]);
  z[6] = cos(azimuth);
  z[7] = cos(twist);
  z[8] = z[6]*z[7];
  z[9] = sin(elevation);
  z[10] = sin(azimuth);
  z[11] = z[1]*z[10];
  z[12] = z[11]*z[9] + z[8];
  z[13] = z[1]*z[4] + z[12]*z[5];
  z[14] = cos(state_[3]);
  z[15] = cos(state_[2]);
  z[16] = z[10]*z[7];
  z[17] = z[1]*z[6];
  z[18] = z[16] - z[17]*z[9];
  z[19] = sin(state_[2]);
  z[20] = z[3]*z[5];
  z[21] = -z[1]*z[20] + z[12]*z[2];
  z[22] = z[15]*z[18] + z[19]*z[21];
  z[23] = z[0]*z[13] + z[14]*z[22];
  z[24] = z[16]*z[9] - z[17];
  z[25] = z[24]*z[5] + z[4]*z[7];
  z[26] = z[11] + z[8]*z[9];
  z[27] = z[15]*z[26];
  z[28] = z[20]*z[7];
  z[29] = z[2]*z[24];
  z[30] = -z[19]*(-z[28] + z[29]) + z[27];
  z[31] = -z[0]*z[25] + z[14]*z[30];
  z[32] = z[10]*z[3];
  z[33] = -z[2]*z[9] + z[32]*z[5];
  z[34] = z[3]*z[6];
  z[35] = z[15]*z[34];
  z[36] = z[2]*z[32] + z[5]*z[9];
  z[37] = z[19]*z[36];
  z[38] = z[35] - z[37];
  z[39] = z[0]*z[33] - z[14]*z[38];
  z[40] = z[28] - z[29];
  z[41] = -z[15]*z[21] + z[18]*z[19];
  z[42] = z[19]*z[26];
  z[43] = z[15]*z[40];
  z[44] = z[15]*z[36] + z[19]*z[34];
  z[45] = cam_x + cam_z;
  z[46] = rear_.r*z[2];
  z[47] = rear_.r*z[5];
  z[48] = rear_.R*z[5]/sqrt(pow(z[5], 2)*(pow(z[15], 2) + pow(z[19], 2)));
  z[49] = rear_.c + z[19]*z[47] + z[19]*z[48];
  z[50] = -ls_ + z[15]*z[47] + z[15]*z[48];
  z[51] = front_.a - front_.c;
  z[52] = -z[42] + z[43];

  ar[0] = z[23];
  ar[1] = z[31];
  ar[2] = z[39];
  ar[3] = 0;
  ar[4] = -z[0]*z[22] + z[13]*z[14];
  ar[5] = -z[0]*(z[19]*z[40] + z[27]) - z[14]*z[25];
  ar[6] = -z[0]*(-z[35] + z[37]) + z[14]*z[33];
  ar[7] = 0;
  ar[8] = z[41];
  ar[9] = z[42] - z[43];
  ar[10] = -z[44];
  ar[11] = 0;
  ar[12] = front_.b*z[41] - cam_y*z[12] - z[13]*z[46] - z[18]*z[45] + z[22]*z[49] + z[23]*z[51] - z[41]*z[50];
  ar[13] = -front_.b*z[52] + cam_y*z[24] + z[25]*z[46] - z[26]*z[45] + z[30]*z[49] + z[31]*z[51] + z[50]*z[52];
  ar[14] = -front_.b*z[44] - cam_y*z[32] - z[33]*z[46] + z[34]*z[45] - z[38]*z[49] + z[39]*z[51] + z[44]*z[50];
  ar[15] = 1;
}

/** Computes the n-d array of shape (16)
 *
 * @param[out] ar a C-array of with 16 elements
 */
//  void Bicycle::N_ogl(double ar[16]) const;
void Bicycle::N_ogl(double ar[16]) const
{
  double z[23];

  z[0] = cos(state_[0]);
  z[1] = sin(azimuth);
  z[2] = cos(twist);
  z[3] = z[1]*z[2];
  z[4] = sin(elevation);
  z[5] = sin(twist);
  z[6] = cos(azimuth);
  z[7] = z[5]*z[6];
  z[8] = z[3] - z[4]*z[7];
  z[9] = sin(state_[0]);
  z[10] = z[2]*z[6];
  z[11] = z[1]*z[5];
  z[12] = z[10] + z[11]*z[4];
  z[13] = z[0]*z[8] - z[12]*z[9];
  z[14] = z[10]*z[4] + z[11];
  z[15] = z[3]*z[4] - z[7];
  z[16] = z[0]*z[14] + z[15]*z[9];
  z[17] = cos(elevation);
  z[18] = z[0]*z[6] + z[1]*z[9];
  z[19] = z[0]*z[12] + z[8]*z[9];
  z[20] = -z[0]*z[15] + z[14]*z[9];
  z[21] = z[0]*z[1] - z[6]*z[9];
  z[22] = cam_x + cam_z;

  ar[0] = z[13];
  ar[1] = z[16];
  ar[2] = -z[17]*z[18];
  ar[3] = 0;
  ar[4] = z[19];
  ar[5] = z[20];
  ar[6] = z[17]*z[21];
  ar[7] = 0;
  ar[8] = z[17]*z[5];
  ar[9] = -z[17]*z[2];
  ar[10] = -z[4];
  ar[11] = 0;
  ar[12] = -cam_y*z[12] - state_[6]*z[13] - state_[7]*z[19] - z[22]*z[8];
  ar[13] = cam_y*z[15] - state_[6]*z[16] - state_[7]*z[20] - z[14]*z[22];
  ar[14] = z[17]*(-cam_y*z[1] + state_[6]*z[18] - state_[7]*z[21] + z[22]*z[6]);
  ar[15] = 1;
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_wheel_center_point(double ar[3]) const;
void Bicycle::rear_wheel_center_point(double ar[3]) const
{
  double z[8];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[1]);
  z[2] = pow(sin(state_[2]), 2);
  z[3] = pow(z[1], 2);
  z[4] = pow(cos(state_[2]), 2);
  z[5] = rear_.R/sqrt(z[3]*(z[2] + z[4])) + rear_.r;
  z[6] = z[2]*z[5];
  z[7] = z[4]*z[5];

  ar[0] = 0;
  ar[1] = z[0]*z[1]*(-rear_.r + z[6] + z[7]);
  ar[2] = -rear_.r*pow(z[0], 2) - z[3]*z[6] - z[3]*z[7];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_mass_center_point(double ar[3]) const;
void Bicycle::rear_mass_center_point(double ar[3]) const
{
  double z[10];

  z[0] = cos(state_[2]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = rear_.r*z[2];
  z[4] = rear_.R*z[2]/sqrt(pow(z[2], 2)*(pow(z[0], 2) + pow(z[1], 2)));
  z[5] = rear_.a + z[1]*z[3] + z[1]*z[4];
  z[6] = -rear_.b + z[0]*z[3] + z[0]*z[4];
  z[7] = sin(state_[1]);
  z[8] = z[1]*z[5];
  z[9] = z[0]*z[6];

  ar[0] = z[0]*z[5] - z[1]*z[6];
  ar[1] = z[7]*(-z[3] + z[8] + z[9]);
  ar[2] = -rear_.r*pow(z[7], 2) - z[2]*z[8] - z[2]*z[9];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::rear_steer_axis_point(double ar[3]) const;
void Bicycle::rear_steer_axis_point(double ar[3]) const
{
  double z[12];

  z[0] = cos(state_[2]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = z[1]*z[2];
  z[4] = pow(z[2], 2);
  z[5] = pow(z[0], 2);
  z[6] = rear_.R/sqrt(z[4]*(pow(z[1], 2) + z[5]));
  z[7] = rear_.r + z[6];
  z[8] = rear_.r*z[2];
  z[9] = rear_.c + z[1]*z[8] + z[3]*z[6];
  z[10] = sin(state_[1]);
  z[11] = z[5]*z[7];

  ar[0] = z[0]*(-z[3]*z[7] + z[9]);
  ar[1] = z[10]*(z[1]*z[9] + z[11]*z[2] - z[8]);
  ar[2] = -rear_.r*pow(z[10], 2) - z[11]*z[4] - z[3]*z[9];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_wheel_center_point(double ar[3]) const;
void Bicycle::front_wheel_center_point(double ar[3]) const
{
  double z[13];

  z[0] = cos(state_[2]);
  z[1] = cos(state_[3]);
  z[2] = sin(state_[2]);
  z[3] = cos(state_[1]);
  z[4] = rear_.r*z[3];
  z[5] = rear_.R*z[3]/sqrt(pow(z[3], 2)*(pow(z[0], 2) + pow(z[2], 2)));
  z[6] = rear_.c + z[2]*z[4] + z[2]*z[5];
  z[7] = -ls_ + z[0]*z[4] + z[0]*z[5];
  z[8] = sin(state_[1]);
  z[9] = sin(state_[3]);
  z[10] = z[1]*z[2];
  z[11] = z[2]*z[6];
  z[12] = z[0]*z[7];

  ar[0] = -front_.c*z[0]*z[1] + z[0]*z[6] - z[2]*z[7];
  ar[1] = -front_.c*(z[10]*z[8] + z[3]*z[9]) + z[11]*z[8] + z[12]*z[8] - z[4]*z[8];
  ar[2] = -front_.c*(-z[10]*z[3] + z[8]*z[9]) - rear_.r*pow(z[8], 2) - z[11]*z[3] - z[12]*z[3];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_mass_center_point(double ar[3]) const;
void Bicycle::front_mass_center_point(double ar[3]) const
{
  double z[15];

  z[0] = sin(state_[2]);
  z[1] = cos(state_[2]);
  z[2] = cos(state_[3]);
  z[3] = front_.a - front_.c;
  z[4] = cos(state_[1]);
  z[5] = rear_.r*z[4];
  z[6] = rear_.R*z[4]/sqrt(pow(z[4], 2)*(pow(z[0], 2) + pow(z[1], 2)));
  z[7] = rear_.c + z[0]*z[5] + z[0]*z[6];
  z[8] = -ls_ + z[1]*z[5] + z[1]*z[6];
  z[9] = sin(state_[1]);
  z[10] = front_.b*z[1];
  z[11] = sin(state_[3]);
  z[12] = z[0]*z[2];
  z[13] = z[0]*z[7];
  z[14] = z[1]*z[8];

  ar[0] = front_.b*z[0] - z[0]*z[8] + z[1]*z[2]*z[3] + z[1]*z[7];
  ar[1] = -z[10]*z[9] + z[13]*z[9] + z[14]*z[9] + z[3]*(z[11]*z[4] + z[12]*z[9]) - z[5]*z[9];
  ar[2] = -rear_.r*pow(z[9], 2) + z[10]*z[4] - z[13]*z[4] - z[14]*z[4] + z[3]*(z[11]*z[9] - z[12]*z[4]);
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_steer_axis_point(double ar[3]) const;
void Bicycle::front_steer_axis_point(double ar[3]) const
{
  double z[10];

  z[0] = cos(state_[2]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = rear_.r*z[2];
  z[4] = rear_.R*z[2]/sqrt(pow(z[2], 2)*(pow(z[0], 2) + pow(z[1], 2)));
  z[5] = rear_.c + z[1]*z[3] + z[1]*z[4];
  z[6] = -ls_ + z[0]*z[3] + z[0]*z[4];
  z[7] = sin(state_[1]);
  z[8] = z[1]*z[5];
  z[9] = z[0]*z[6];

  ar[0] = z[0]*z[5] - z[1]*z[6];
  ar[1] = z[7]*(-z[3] + z[8] + z[9]);
  ar[2] = -rear_.r*pow(z[7], 2) - z[2]*z[8] - z[2]*z[9];
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::front_ground_contact_point(double ar[3]) const;
void Bicycle::front_ground_contact_point(double ar[3]) const
{
  double z[26];

  z[0] = sin(state_[3]);
  z[1] = cos(state_[2]);
  z[2] = sin(state_[1]);
  z[3] = cos(state_[3]);
  z[4] = z[2]*z[3];
  z[5] = sin(state_[2]);
  z[6] = cos(state_[1]);
  z[7] = z[0]*z[6];
  z[8] = z[4] + z[5]*z[7];
  z[9] = front_.r*z[8];
  z[10] = rear_.r*z[6];
  z[11] = pow(z[6], 2);
  z[12] = pow(z[1], 2);
  z[13] = rear_.R*z[6]/sqrt(z[11]*(z[12] + pow(z[5], 2)));
  z[14] = rear_.c + z[10]*z[5] + z[13]*z[5];
  z[15] = -ls_ + z[1]*z[10] + z[1]*z[13];
  z[16] = z[11]*z[12];
  z[17] = z[0]*z[2];
  z[18] = z[3]*z[6];
  z[19] = z[17] - z[18]*z[5];
  z[20] = front_.R/sqrt(z[16] + pow(z[19], 2));
  z[21] = front_.r + z[20];
  z[22] = z[21]*z[6];
  z[23] = -front_.c + front_.r*z[19] + z[19]*z[20];
  z[24] = z[14]*z[5];
  z[25] = z[1]*z[15];

  ar[0] = -z[0]*z[1]*z[9] + z[1]*z[14] + z[1]*z[22]*z[5] + z[1]*z[23]*z[3] - z[15]*z[5];
  ar[1] = -z[10]*z[2] - z[12]*z[2]*z[22] + z[2]*z[24] + z[2]*z[25] + z[23]*(z[4]*z[5] + z[7]) - z[9]*(z[17]*z[5] - z[18]);
  ar[2] = front_.r*pow(z[8], 2) - rear_.r*pow(z[2], 2) + z[16]*z[21] + z[19]*z[23] - z[24]*z[6] - z[25]*z[6];
}

/** Computes the n-d array of shape (2)
 *
 * @param[out] ar a C-array of with 2 elements
 */
//  void Bicycle::path_radii(double ar[2]) const;
void Bicycle::path_radii(double ar[2]) const
{
  double z[34];

  z[0] = cos(state_[1]);
  z[1] = pow(z[0], 2);
  z[2] = sin(state_[2]);
  z[3] = pow(z[2], 2);
  z[4] = cos(state_[2]);
  z[5] = pow(z[4], 2);
  z[6] = z[1]*(z[3] + z[5]);
  z[7] = sqrt(z[6]);
  z[8] = sin(state_[1]);
  z[9] = pow(z[8], 2);
  z[10] = rear_.r*z[0];
  z[11] = cos(state_[3]);
  z[12] = z[0]*z[11];
  z[13] = sin(state_[3]);
  z[14] = z[13]*z[8];
  z[15] = -z[12] + z[14]*z[2];
  z[16] = z[11]*z[8];
  z[17] = z[0]*z[13];
  z[18] = z[16] + z[17]*z[2];
  z[19] = front_.r*z[18];
  z[20] = rear_.R*z[0]/z[7];
  z[21] = rear_.c + z[10]*z[2] + z[2]*z[20];
  z[22] = -ls_ + z[10]*z[4] + z[20]*z[4];
  z[23] = z[5]*z[8];
  z[24] = -z[12]*z[2] + z[14];
  z[25] = sqrt(z[1]*z[5] + pow(z[24], 2));
  z[26] = 1.0/z[25];
  z[27] = front_.R*z[26];
  z[28] = z[0]*(front_.r + z[27]);
  z[29] = z[16]*z[2] + z[17];
  z[30] = -front_.c + front_.r*z[24] + z[24]*z[27];
  z[31] = z[0]*z[18]*z[26];
  z[32] = z[18]*z[24]*z[26];
  z[33] = (z[11]*z[30]*z[4] - z[13]*z[19]*z[4] - z[2]*z[22] + z[2]*z[28]*z[4] + z[21]*z[4])/(z[4]*(z[11]*z[32] + z[13]*z[25] + z[2]*z[31]));

  ar[0] = z[7]*(-z[10]*z[8] - z[15]*z[19] + z[2]*z[21]*z[8] + z[22]*z[4]*z[8] - z[23]*z[28] + z[29]*z[30] - z[33]*(z[15]*z[25] - z[23]*z[31] + z[29]*z[32]))/(z[0]*(z[3]*z[9] + z[5]*z[9] + z[6]));
  ar[1] = z[33];
}

/** Computes the n-d array of shape (6)
 *
 * @param[out] ar a C-array of with 6 elements
 */
//  void Bicycle::ke_pe(double ar[6]) const;
void Bicycle::ke_pe(double ar[6]) const
{
  double z[36];

  z[0] = sin(state_[2]);
  z[1] = cos(state_[1]);
  z[2] = z[0]*z[1];
  z[3] = sin(state_[1]);
  z[4] = state_[10] + state_[8]*z[3];
  z[5] = rear_.r*z[3];
  z[6] = cos(state_[2]);
  z[7] = z[1]*z[6];
  z[8] = state_[8]*z[7] + state_[9]*z[0];
  z[9] = pow(z[1], 2);
  z[10] = pow(z[6], 2);
  z[11] = z[9]*(pow(z[0], 2) + z[10]);
  z[12] = pow(z[11], -1.0L/2.0L);
  z[13] = state_[14]*z[12];
  z[14] = state_[15]*z[12]*z[3];
  z[15] = rear_.R*z[12];
  z[16] = rear_.r + z[15];
  z[17] = z[16]*(state_[12] + z[4]);
  z[18] = state_[8]*z[2] - state_[9]*z[6];
  z[19] = state_[11] + z[8];
  z[20] = cos(state_[3]);
  z[21] = sin(state_[3]);
  z[22] = z[2]*z[21] + z[20]*z[3];
  z[23] = -z[18]*z[20] + z[21]*z[4];
  z[24] = -z[2]*z[20] + z[21]*z[3];
  z[25] = sqrt(z[10]*z[9] + pow(z[24], 2));
  z[26] = 1.0/z[25];
  z[27] = front_.R*z[26];
  z[28] = front_.r + z[27];
  z[29] = z[24]*z[28];
  z[30] = z[1]*z[28]*z[6];
  z[31] = z[18]*z[21] + z[20]*z[4];
  z[32] = front_.r*z[22];
  z[33] = state_[17]*z[26];
  z[34] = state_[18]*z[22]*z[26];
  z[35] = state_[13] + z[31];

  ar[0] = 0.5*rear_.m*(pow(rear_.a*z[4] - state_[16]*z[7] - z[13]*z[2] + z[14]*z[7] + z[17]*z[2] - z[18]*z[5], 2) + pow(rear_.a*z[8] + rear_.b*z[18] + state_[15]*z[11]*z[12] + state_[16]*z[3] - z[16]*z[18]*z[7] + z[16]*z[2]*z[8], 2) + pow(rear_.b*z[4] - state_[16]*z[2] + z[13]*z[7] + z[14]*z[2] - z[17]*z[7] + z[5]*z[8], 2));
  ar[1] = 0.5*rear_.Iyy*pow(z[4], 2) + 0.5*rear_.J*pow(state_[12], 2) + rear_.J*state_[12]*z[4] + 0.5*z[18]*(rear_.Ixx*z[18] - rear_.Ixz*z[8]) - 0.5*z[8]*(rear_.Ixz*z[18] - rear_.Izz*z[8]);
  ar[2] = 0.5*front_.m*(pow(front_.a*z[19] - front_.b*z[23] + state_[18]*z[25] + state_[19]*z[22] - z[19]*z[29] + z[23]*z[30], 2) + pow(front_.a*z[31] - state_[19]*z[7] + z[23]*z[32] + z[24]*z[33] - z[29]*z[35] + z[34]*z[7], 2) + pow(front_.b*z[31] + state_[19]*z[24] + z[19]*z[32] - z[24]*z[34] - z[30]*z[35] + z[33]*z[7], 2));
  ar[3] = 0.5*front_.Iyy*pow(z[31], 2) + 0.5*front_.J*pow(state_[13], 2) + front_.J*state_[13]*z[31] + 0.5*z[19]*(front_.Ixz*z[23] + front_.Izz*z[19]) + 0.5*z[23]*(front_.Ixx*z[23] + front_.Ixz*z[19]);
  ar[4] = g_*rear_.m*(rear_.r*pow(z[3], 2) + z[2]*(rear_.a + rear_.r*z[2] + z[15]*z[2]) + z[7]*(-rear_.b + rear_.r*z[7] + z[15]*z[7]));
  ar[5] = g_*front_.m*(front_.r*pow(z[22], 2) + z[24]*(-front_.a + front_.r*z[24] + z[24]*z[27]) + z[7]*(-front_.b + front_.r*z[7] + z[27]*z[7]));
}

/** Computes the n-d array of shape (2)
 *
 * @param[out] ar a C-array of with 2 elements
 */
//  void Bicycle::q6q7_from_bm(double ar[2]) const;
void Bicycle::q6q7_from_bm(double ar[2], double x_bm, double y_bm) const
{
  double z[1];

  z[0] = rear_.R*sin(state_[1]);

  ar[0] = x_bm + z[0]*sin(state_[0]);
  ar[1] = y_bm - z[0]*cos(state_[0]);
}

/** Computes the n-d array of shape (3)
 *
 * @param[out] ar a C-array of with 3 elements
 */
//  void Bicycle::xyz_dot_bm(double ar[3]) const;
void Bicycle::xyz_dot_bm(double ar[3]) const
{
  double z[26];

  z[0] = sin(state_[0]);
  z[1] = cos(state_[1]);
  z[2] = sin(state_[1]);
  z[3] = sin(state_[2]);
  z[4] = cos(state_[2]);
  z[5] = pow(z[1], 2)*(pow(z[3], 2) + pow(z[4], 2));
  z[6] = pow(z[5], -1.0L/2.0L);
  z[7] = state_[8]*z[1];
  z[8] = state_[9]*z[3] + z[4]*z[7];
  z[9] = rear_.R*z[6] + rear_.r;
  z[10] = z[1]*z[9];
  z[11] = -state_[9]*z[4] + z[3]*z[7];
  z[12] = state_[15]*z[5]*z[6] + state_[16]*z[2] - z[10]*z[11]*z[4] + z[10]*z[3]*z[8];
  z[13] = z[1]*z[12];
  z[14] = cos(state_[0]);
  z[15] = z[14]*z[3];
  z[16] = z[0]*z[4];
  z[17] = state_[16]*z[1];
  z[18] = rear_.r*z[2];
  z[19] = state_[14]*z[1]*z[6];
  z[20] = state_[15]*z[1]*z[2]*z[6];
  z[21] = z[1]*z[9]*(state_[10] + state_[12] + state_[8]*z[2]);
  z[22] = z[11]*z[18] + z[17]*z[4] + z[19]*z[3] - z[20]*z[4] - z[21]*z[3];
  z[23] = z[14]*z[4];
  z[24] = z[0]*z[3];
  z[25] = -z[17]*z[3] + z[18]*z[8] + z[19]*z[4] + z[20]*z[3] - z[21]*z[4];

  ar[0] = -z[0]*z[13] + z[22]*(z[15] + z[16]*z[2]) - z[25]*(z[2]*z[24] - z[23]);
  ar[1] = z[13]*z[14] + z[22]*(-z[2]*z[23] + z[24]) + z[25]*(z[15]*z[2] + z[16]);
  ar[2] = z[1]*z[22]*z[4] - z[1]*z[25]*z[3] + z[12]*z[2];
}

/** Computes the n-d array of shape (1)
 *
 * @param[out] ar a C-array of with 1 elements
 */
//  void Bicycle::f_c(double ar[1]) const;
void Bicycle::f_c(double ar[1]) const
{
  double z[15];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[3]);
  z[2] = sin(state_[3]);
  z[3] = sin(state_[2]);
  z[4] = cos(state_[1]);
  z[5] = z[3]*z[4];
  z[6] = rear_.r*z[4];
  z[7] = pow(z[4], 2);
  z[8] = cos(state_[2]);
  z[9] = pow(z[8], 2);
  z[10] = rear_.R/sqrt(z[7]*(pow(z[3], 2) + z[9]));
  z[11] = z[4]*z[8];
  z[12] = z[7]*z[9];
  z[13] = z[0]*z[2] - z[1]*z[5];
  z[14] = front_.R/sqrt(z[12] + pow(z[13], 2));

  ar[0] = front_.r*pow(z[0]*z[1] + z[2]*z[5], 2) - rear_.r*pow(z[0], 2) - z[11]*(-ls_ + z[10]*z[11] + z[6]*z[8]) + z[12]*(front_.r + z[14]) + z[13]*(-front_.c + front_.r*z[13] + z[13]*z[14]) - z[5]*(rear_.c + z[10]*z[5] + z[3]*z[6]);
}

/** Computes the n-d array of shape (8)
 *
 * @param[out] ar a C-array of with 8 elements
 */
//  void Bicycle::f_c_dq(double ar[8]) const;
void Bicycle::f_c_dq(double ar[8]) const
{
  double z[37];

  z[0] = cos(state_[1]);
  z[1] = rear_.r*z[0];
  z[2] = sin(state_[1]);
  z[3] = cos(state_[3]);
  z[4] = sin(state_[2]);
  z[5] = sin(state_[3]);
  z[6] = z[2]*z[5];
  z[7] = z[2]*z[3];
  z[8] = z[0]*z[4];
  z[9] = z[5]*z[8] + z[7];
  z[10] = 2*front_.r*z[9];
  z[11] = pow(z[0], 2);
  z[12] = pow(z[4], 2);
  z[13] = cos(state_[2]);
  z[14] = pow(z[13], 2);
  z[15] = z[11]*(z[12] + z[14]);
  z[16] = rear_.R/sqrt(z[15]);
  z[17] = rear_.c + rear_.r*z[8] + z[16]*z[8];
  z[18] = z[0]*z[13];
  z[19] = -ls_ + z[1]*z[13] + z[16]*z[18];
  z[20] = z[0]*z[14]*z[2];
  z[21] = z[11]*z[14];
  z[22] = -z[3]*z[8] + z[6];
  z[23] = pow(z[22], 2);
  z[24] = z[21] + z[23];
  z[25] = front_.R/sqrt(z[24]);
  z[26] = front_.r + z[25];
  z[27] = -rear_.R/sqrt(z[15]) + rear_.r + z[16];
  z[28] = z[0]*z[5] + z[4]*z[7];
  z[29] = front_.r*z[22];
  z[30] = -front_.c + z[22]*z[25];
  z[31] = z[29] + z[30];
  z[32] = pow(z[24], -3.0L/2.0L);
  z[33] = front_.R*z[0]*z[32];
  z[34] = -z[20] + z[22]*z[28];
  z[35] = front_.R*z[22]*z[32];
  z[36] = z[22]*z[3] + z[8];

  ar[0] = 0;
  ar[1] = z[0]*z[12]*z[2]*z[27] - z[0]*z[14]*(front_.r*z[2] + z[2]*z[25] + z[33]*z[34]) - 2*z[1]*z[2] - z[10]*(-z[0]*z[3] + z[4]*z[6]) + z[13]*z[19]*z[2] + z[17]*z[2]*z[4] - z[20]*z[26] + z[20]*z[27] + z[22]*(front_.r*z[28] + z[25]*z[28] - z[34]*z[35]) + z[28]*z[31];
  ar[2] = z[0]*(z[10]*z[13]*z[5] - z[13]*z[17] - z[13]*z[22]*(front_.r*z[3] + z[25]*z[3] - z[35]*z[36]) - z[13]*z[26]*z[8] - z[13]*z[3]*z[31] - z[18]*(front_.r*z[4] - z[14]*z[33]*z[36] + z[25]*z[4]) + z[19]*z[4]);
  ar[3] = z[9]*(-z[21]*z[35] + z[22]*(-front_.R*z[23]*z[32] + z[26]) - z[29] + z[30]);
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
}

/** Computes the n-d array of shape (3, 12)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::f_v_du(double ar[36]) const;
void Bicycle::f_v_du(double ar[36]) const
{
  double z[43];

  z[0] = sin(state_[3]);
  z[1] = cos(state_[1]);
  z[2] = cos(state_[2]);
  z[3] = sin(state_[2]);
  z[4] = z[1]*(rear_.c*z[2] + ls_*z[3]);
  z[5] = z[1]*z[2];
  z[6] = sin(state_[1]);
  z[7] = cos(state_[3]);
  z[8] = z[6]*z[7];
  z[9] = z[1]*z[3];
  z[10] = z[0]*z[9] + z[8];
  z[11] = front_.r*z[10];
  z[12] = rear_.r*z[5];
  z[13] = pow(z[1], 2);
  z[14] = pow(z[3], 2);
  z[15] = pow(z[2], 2);
  z[16] = z[14] + z[15];
  z[17] = pow(z[13]*z[16], -1.0L/2.0L);
  z[18] = rear_.R*z[17];
  z[19] = rear_.r + z[18];
  z[20] = z[19]*z[5];
  z[21] = ls_ + z[12] - z[20];
  z[22] = z[0]*z[6];
  z[23] = z[7]*z[9];
  z[24] = z[22] - z[23];
  z[25] = sqrt(z[13]*z[15] + pow(z[24], 2));
  z[26] = 1.0/z[25];
  z[27] = front_.R*z[26];
  z[28] = front_.r + z[27];
  z[29] = z[28]*z[5];
  z[30] = rear_.r*z[3]*z[6];
  z[31] = z[1]*z[15]*z[28];
  z[32] = z[1]*z[19];
  z[33] = rear_.c*z[3] - ls_*z[2] + z[14]*z[32] + z[15]*z[32];
  z[34] = z[18]*z[5];
  z[35] = z[1]*z[17]*z[2];
  z[36] = z[1]*z[17];
  z[37] = z[1]*z[16];
  z[38] = z[26]*z[5];
  z[39] = z[24]*z[26];
  z[40] = z[24]*z[28];
  z[41] = rear_.r*z[6];
  z[42] = z[19]*z[9];

  ar[0] = z[0]*z[4] + z[10]*z[29] - z[11]*z[5] + z[21]*z[8];
  ar[1] = -z[0]*z[31] + z[0]*z[33] - z[11]*z[3] + z[30]*z[7];
  ar[2] = z[7]*(ls_ - z[12] + z[29] - z[34]);
  ar[3] = -z[11];
  ar[4] = -z[20]*z[7];
  ar[5] = z[29];
  ar[6] = z[35]*z[7];
  ar[7] = z[36]*(z[0]*z[37] + z[3]*z[8]);
  ar[8] = z[24];
  ar[9] = -z[38];
  ar[10] = z[10]*z[39];
  ar[11] = -z[22] + z[23];
  ar[12] = -front_.c*z[5] - z[21]*z[22] + z[4]*z[7];
  ar[13] = -front_.c*z[3] - z[0]*z[30] + z[3]*z[40] - z[31]*z[7] + z[33]*z[7];
  ar[14] = z[0]*(-ls_ + z[12] - z[29] + z[34]);
  ar[15] = -front_.c + front_.r*z[24] + z[24]*z[27];
  ar[16] = z[0]*z[20];
  ar[17] = 0;
  ar[18] = -z[0]*z[35];
  ar[19] = z[36]*(-z[22]*z[3] + z[37]*z[7]);
  ar[20] = z[10];
  ar[21] = 0;
  ar[22] = -z[25];
  ar[23] = -z[10];
  ar[24] = front_.c*z[10] - rear_.c*z[6] - z[10]*z[40] + z[11]*z[24] + z[41]*z[9] - z[42]*z[6];
  ar[25] = z[2]*(-front_.c*z[0] + z[0]*z[40] + z[11]*z[7] - z[41]);
  ar[26] = front_.c*z[7] - rear_.c - rear_.r*z[9] + z[0]*z[11] - z[18]*z[9] - z[40]*z[7];
  ar[27] = 0;
  ar[28] = -z[42];
  ar[29] = -z[40];
  ar[30] = z[17]*z[9];
  ar[31] = -z[35]*z[6];
  ar[32] = z[5];
  ar[33] = z[39];
  ar[34] = z[10]*z[38];
  ar[35] = -z[5];
}

/** Computes the n-d array of shape (3, 12, 3)
 *
 * @param[out] ar a C-array of with 108 elements
 */
//  void Bicycle::f_v_dudq(double ar[108]) const;
void Bicycle::f_v_dudq(double ar[108]) const
{
  double z[139];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[3]);
  z[2] = z[0]*z[1];
  z[3] = cos(state_[2]);
  z[4] = rear_.c*z[3];
  z[5] = sin(state_[2]);
  z[6] = ls_*z[5];
  z[7] = z[4] + z[6];
  z[8] = front_.r*z[0];
  z[9] = cos(state_[3]);
  z[10] = z[0]*z[9];
  z[11] = cos(state_[1]);
  z[12] = z[11]*z[5];
  z[13] = z[1]*z[12];
  z[14] = z[10] + z[13];
  z[15] = z[14]*z[3];
  z[16] = z[11]*z[3];
  z[17] = z[11]*z[9];
  z[18] = z[2]*z[5];
  z[19] = -z[17] + z[18];
  z[20] = front_.r*z[19];
  z[21] = z[11]*z[19];
  z[22] = pow(z[11], 2);
  z[23] = pow(z[3], 2);
  z[24] = z[22]*z[23];
  z[25] = z[12]*z[9];
  z[26] = z[2] - z[25];
  z[27] = pow(z[26], 2);
  z[28] = z[24] + z[27];
  z[29] = pow(z[28], -1.0L/2.0L);
  z[30] = front_.R*z[29];
  z[31] = front_.r + z[30];
  z[32] = z[3]*z[31];
  z[33] = rear_.r*z[22];
  z[34] = pow(z[0], 2);
  z[35] = rear_.r*z[34];
  z[36] = z[22]*z[3];
  z[37] = pow(z[5], 2);
  z[38] = z[23] + z[37];
  z[39] = z[22]*z[38];
  z[40] = pow(z[39], -1.0L/2.0L);
  z[41] = rear_.R*z[40];
  z[42] = rear_.r + z[41];
  z[43] = rear_.R/pow(z[39], 3.0L/2.0L);
  z[44] = -z[39]*z[43] + z[42];
  z[45] = z[34]*z[44];
  z[46] = ls_*z[11] + z[3]*z[33] - z[3]*z[35] + z[3]*z[45] - z[36]*z[42];
  z[47] = z[0]*z[30];
  z[48] = pow(z[28], -3.0L/2.0L);
  z[49] = front_.R*z[48];
  z[50] = z[0]*z[11]*z[23];
  z[51] = z[1]*z[11];
  z[52] = z[10]*z[5];
  z[53] = z[51] + z[52];
  z[54] = z[26]*z[53];
  z[55] = -z[50] + z[54];
  z[56] = z[11]*z[49]*z[55];
  z[57] = z[47] + z[56] + z[8];
  z[58] = z[23]*z[51];
  z[59] = rear_.c*z[5] - ls_*z[3];
  z[60] = front_.r*z[5];
  z[61] = z[31]*z[58];
  z[62] = z[30]*z[5];
  z[63] = z[26]*z[9];
  z[64] = z[12] + z[63];
  z[65] = z[11]*z[23]*z[64];
  z[66] = z[49]*z[65];
  z[67] = z[60] + z[62] - z[66];
  z[68] = front_.r*z[26];
  z[69] = rear_.r*z[11];
  z[70] = z[3]*z[69];
  z[71] = -z[16]*z[42];
  z[72] = ls_ + z[70] + z[71];
  z[73] = z[26]*z[31];
  z[74] = pow(z[14], 2);
  z[75] = front_.R*z[26]*z[48];
  z[76] = rear_.r*z[11]*z[5];
  z[77] = z[0]*z[1]*z[44];
  z[78] = z[23]*z[57];
  z[79] = rear_.r*z[0]*z[3];
  z[80] = z[3]*z[51];
  z[81] = front_.r*z[14];
  z[82] = rear_.r*z[0];
  z[83] = z[5]*z[82];
  z[84] = z[11]*z[23]*z[9];
  z[85] = z[31]*z[84];
  z[86] = front_.R*z[14]*z[26]*z[48];
  z[87] = z[11]*z[42];
  z[88] = z[23]*z[87] + z[37]*z[87] + z[59];
  z[89] = z[0]*z[44];
  z[90] = z[42]*z[5];
  z[91] = -z[60] - z[62] + z[66];
  z[92] = -ls_ + z[16]*z[41] + z[70];
  z[93] = z[17]*z[3];
  z[94] = z[0]*z[3];
  z[95] = z[3]*z[57];
  z[96] = z[11]*z[14]*z[26]*z[3];
  z[97] = z[22]*z[5];
  z[98] = z[11]*z[38];
  z[99] = z[11]*z[40];
  z[100] = -z[18];
  z[101] = z[29]*z[3];
  z[102] = 1.0/z[28];
  z[103] = z[50] - z[54];
  z[104] = z[102]*z[103]*z[11];
  z[105] = z[11]*z[29];
  z[106] = z[102]*z[65];
  z[107] = z[19]*z[26];
  z[108] = z[102]*z[26]*z[55];
  z[109] = z[11]*z[29]*z[3];
  z[110] = z[1]*z[26];
  z[111] = z[14]*z[9];
  z[112] = z[102]*z[26]*z[64];
  z[113] = z[102]*z[74];
  z[114] = front_.c*z[3];
  z[115] = front_.r*z[53];
  z[116] = z[30]*z[53];
  z[117] = z[55]*z[75];
  z[118] = -z[115] - z[116] + z[117];
  z[119] = front_.c*z[5];
  z[120] = front_.r*z[9];
  z[121] = z[30]*z[9];
  z[122] = z[64]*z[75];
  z[123] = z[120] + z[121] - z[122];
  z[124] = z[11]*z[14]*z[3];
  z[125] = z[27]*z[49];
  z[126] = -z[125] + z[31];
  z[127] = z[14]*z[5];
  z[128] = z[115] + z[116] - z[117];
  z[129] = z[126]*z[14];
  z[130] = z[16]*z[40];
  z[131] = z[102]*z[24];
  z[132] = z[102]*z[27];
  z[133] = z[14]*z[29];
  z[134] = front_.c*z[1];
  z[135] = z[1]*z[68];
  z[136] = z[120]*z[14];
  z[137] = z[110]*z[31];
  z[138] = z[0]*z[5];

  ar[0] = -z[15]*z[57] + z[15]*z[8] + z[16]*z[20] - z[2]*z[7] - z[21]*z[32] + z[46]*z[9];
  ar[1] = z[11]*(-front_.r*z[58] - z[1]*z[59] + z[14]*z[60] - z[14]*z[67] + z[41]*z[52] + z[61]);
  ar[2] = -z[11]*z[3]*z[74]*z[75] + z[16]*z[68] - z[16]*z[73] + z[17]*z[7] - z[2]*z[72];
  ar[3] = z[1]*z[78] + z[19]*z[60] - z[38]*z[77] + z[76]*z[9];
  ar[4] = z[1]*z[7] + z[13]*z[32] - z[3]*z[81] - z[60]*z[80] + z[67]*z[80] + z[79]*z[9];
  ar[5] = -z[1]*z[83] + z[26]*z[60] + z[58]*z[86] - z[85] + z[88]*z[9];
  ar[6] = z[3]*z[9]*(-z[47] - z[56] - z[8] + z[89]);
  ar[7] = z[17]*(z[90] + z[91]);
  ar[8] = z[1]*z[92] - z[31]*z[80] - z[86]*z[93];
  ar[9] = z[20];
  ar[10] = -front_.r*z[80];
  ar[11] = z[68];
  ar[12] = z[44]*z[9]*z[94];
  ar[13] = z[25]*z[42];
  ar[14] = z[42]*z[80];
  ar[15] = -z[95];
  ar[16] = z[11]*z[91];
  ar[17] = -z[49]*z[96];
  ar[18] = 0;
  ar[19] = -z[25]*z[40];
  ar[20] = -z[40]*z[80];
  ar[21] = z[40]*(-z[2]*z[98] + z[9]*z[97]);
  ar[22] = z[0]*z[17]*z[3]*z[40];
  ar[23] = z[99]*(z[100] + z[17]*z[38]);
  ar[24] = z[53];
  ar[25] = -z[93];
  ar[26] = z[14];
  ar[27] = z[101]*(z[0] - z[104]);
  ar[28] = z[105]*(-z[106] + z[5]);
  ar[29] = z[48]*z[96];
  ar[30] = z[29]*(-z[107] - z[108]*z[14] + z[14]*z[53]);
  ar[31] = z[109]*(z[110] - z[111] + z[112]*z[14]);
  ar[32] = z[29]*(-z[113]*z[27] - z[27] + z[74]);
  ar[33] = -z[53];
  ar[34] = z[93];
  ar[35] = -z[14];
  ar[36] = z[0]*z[114] - z[1]*z[46] + z[10]*(-z[4] - z[6]) - z[118]*z[16] - z[16]*z[31]*z[53] + z[26]*z[95] - z[73]*z[94];
  ar[37] = z[11]*(-z[11]*z[123]*z[23] + z[119] - z[18]*z[41] + z[26]*z[67] - z[5]*z[73] - z[59]*z[9] + z[85]);
  ar[38] = -z[10]*z[72] + z[124]*z[125] + z[124]*z[126] - z[124]*z[31] - z[51]*z[7];
  ar[39] = -z[1]*z[76] - z[10]*z[38]*z[44] - z[118]*z[5] + z[78]*z[9];
  ar[40] = -z[1]*z[79] - z[114] - z[12]*z[123]*z[3] + z[25]*z[32] + z[26]*z[32] + z[67]*z[93] + z[7]*z[9];
  ar[41] = -z[1]*z[88] + z[126]*z[127] + z[61] - z[83]*z[9] + z[84]*z[86];
  ar[42] = z[1]*z[3]*(z[57] - z[89]);
  ar[43] = z[51]*(z[67] - z[90]);
  ar[44] = -z[31]*z[93] + z[80]*z[86] + z[9]*z[92];
  ar[45] = z[128];
  ar[46] = z[16]*(-z[120] - z[121] + z[122]);
  ar[47] = z[129];
  ar[48] = -z[3]*z[77];
  ar[49] = -z[13]*z[42];
  ar[50] = z[42]*z[93];
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = z[13]*z[40];
  ar[56] = -z[40]*z[93];
  ar[57] = z[40]*(-z[1]*z[97] - z[10]*z[98]);
  ar[58] = -z[130]*z[2];
  ar[59] = -z[99]*(z[38]*z[51] + z[52]);
  ar[60] = z[100] + z[17];
  ar[61] = z[80];
  ar[62] = -z[2] + z[25];
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = z[29]*(-z[103]*z[131] - z[103]*z[132] + 2*z[50] - 2*z[54]);
  ar[67] = z[109]*(2*z[12] - z[131]*z[64] - z[132]*z[64] + 2*z[63]);
  ar[68] = z[133]*z[26]*(z[131] + z[132] - 2);
  ar[69] = z[19];
  ar[70] = -z[80];
  ar[71] = z[26];
  ar[72] = -front_.c*z[19] - rear_.c*z[11] + z[107]*z[31] + z[115]*z[14] + z[118]*z[14] - z[19]*z[68] + z[33]*z[5] - z[35]*z[5] - z[42]*z[97] + z[45]*z[5];
  ar[73] = z[16]*(-z[0]*z[42] + z[123]*z[14] + z[134] + z[135] - z[136] - z[137] + z[82]);
  ar[74] = -front_.c*z[26] - front_.r*z[27] + front_.r*z[74] - z[126]*z[74] + z[27]*z[31];
  ar[75] = -z[3]*(z[1]*z[118] + z[120]*z[19] + z[69]);
  ar[76] = z[1]*z[119] - z[111]*z[60] + z[120]*z[58] - z[123]*z[58] - z[137]*z[5] + z[83];
  ar[77] = z[3]*(-front_.c*z[9] + z[1]*z[129] - z[1]*z[81] - z[120]*z[26] + z[31]*z[63]);
  ar[78] = -z[0]*z[22]*z[38]*z[43]*z[5] - z[1]*z[20] - z[128]*z[9] + z[138]*z[41] + z[83];
  ar[79] = z[16]*(front_.r*pow(z[1], 2) - rear_.r + z[123]*z[9] - z[41]);
  ar[80] = -z[111]*z[126] - z[134] - z[135] + z[136] + z[137];
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[138]*z[44];
  ar[85] = z[71];
  ar[86] = 0;
  ar[87] = z[118];
  ar[88] = z[123]*z[16];
  ar[89] = z[14]*(-front_.r + z[125] - z[30]);
  ar[90] = 0;
  ar[91] = z[130];
  ar[92] = 0;
  ar[93] = -z[36]*z[40];
  ar[94] = z[0]*z[12]*z[40];
  ar[95] = 0;
  ar[96] = -z[94];
  ar[97] = -z[12];
  ar[98] = 0;
  ar[99] = z[29]*(-z[108] + z[53]);
  ar[100] = z[109]*(z[112] - z[9]);
  ar[101] = z[133]*(-z[132] + 1);
  ar[102] = z[101]*(-z[0]*z[14] + z[104]*z[14] - z[21]);
  ar[103] = z[105]*(z[106]*z[14] - z[127] + z[58]);
  ar[104] = -z[109]*z[26]*(z[113] + 1);
  ar[105] = z[94];
  ar[106] = z[12];
  ar[107] = 0;
}

/** Computes the n-d array of shape (3, 12)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::f_v_dudt(double ar[36]) const;
void Bicycle::f_v_dudt(double ar[36]) const
{
  double z[128];

  z[0] = cos(state_[3]);
  z[1] = cos(state_[1]);
  z[2] = cos(state_[2]);
  z[3] = rear_.c*z[2];
  z[4] = sin(state_[2]);
  z[5] = ls_*z[4];
  z[6] = state_[11]*z[1]*(z[3] + z[5]);
  z[7] = z[1]*z[4];
  z[8] = state_[10]*z[7];
  z[9] = front_.r*z[8];
  z[10] = sin(state_[1]);
  z[11] = z[0]*z[10];
  z[12] = sin(state_[3]);
  z[13] = z[12]*z[7];
  z[14] = z[11] + z[13];
  z[15] = state_[9]*z[10]*z[2];
  z[16] = front_.r*z[15];
  z[17] = z[10]*z[12];
  z[18] = state_[11]*z[17];
  z[19] = rear_.r*z[1];
  z[20] = z[19]*z[2];
  z[21] = z[1]*z[2];
  z[22] = pow(z[1], 2);
  z[23] = pow(z[4], 2);
  z[24] = pow(z[2], 2);
  z[25] = z[23] + z[24];
  z[26] = z[22]*z[25];
  z[27] = pow(z[26], -1.0L/2.0L);
  z[28] = rear_.R*z[27];
  z[29] = rear_.r + z[28];
  z[30] = ls_ + z[20] - z[21]*z[29];
  z[31] = state_[9]*z[1];
  z[32] = z[0]*z[31];
  z[33] = state_[10]*z[1];
  z[34] = z[12]*z[2];
  z[35] = z[33]*z[34];
  z[36] = z[0]*z[7];
  z[37] = state_[11]*z[36];
  z[38] = state_[9]*z[4];
  z[39] = z[17]*z[38];
  z[40] = -z[18] + z[32] + z[35] + z[37] - z[39];
  z[41] = front_.r*z[40];
  z[42] = z[22]*z[24];
  z[43] = z[17] - z[36];
  z[44] = pow(z[43], 2);
  z[45] = z[42] + z[44];
  z[46] = pow(z[45], -1.0L/2.0L);
  z[47] = front_.R*z[46];
  z[48] = front_.r + z[47];
  z[49] = z[21]*z[40];
  z[50] = rear_.r*z[2];
  z[51] = state_[9]*z[22];
  z[52] = state_[9]*pow(z[10], 2);
  z[53] = state_[10]*z[10]*z[4];
  z[54] = z[2]*z[51];
  z[55] = state_[10]*z[4];
  z[56] = rear_.R*z[22]*z[25]/pow(z[26], 3.0L/2.0L);
  z[57] = rear_.r*z[15] + z[15]*z[28] - z[15]*z[56] + z[19]*z[55] + z[28]*z[8];
  z[58] = ls_*z[31] + z[10]*z[57] - z[19]*z[53] - z[29]*z[54] + z[50]*z[51] - z[50]*z[52];
  z[59] = z[47]*z[8];
  z[60] = z[15]*z[47];
  z[61] = front_.R/pow(z[45], 3.0L/2.0L);
  z[62] = z[2]*z[22]*z[55];
  z[63] = z[10]*z[24]*z[31];
  z[64] = state_[11]*z[11];
  z[65] = z[12]*z[31];
  z[66] = state_[11]*z[13];
  z[67] = z[11]*z[38];
  z[68] = z[0]*z[2];
  z[69] = z[33]*z[68];
  z[70] = z[64] + z[65] + z[66] + z[67] - z[69];
  z[71] = z[43]*z[70];
  z[72] = z[62] + z[63] - z[71];
  z[73] = z[1]*z[2]*z[72];
  z[74] = z[61]*z[73];
  z[75] = z[16] + z[59] + z[60] - z[74] + z[9];
  z[76] = rear_.c*z[4];
  z[77] = z[33]*z[76];
  z[78] = state_[9]*z[10];
  z[79] = z[3]*z[78];
  z[80] = z[5]*z[78];
  z[81] = ls_*z[2];
  z[82] = z[33]*z[81];
  z[83] = state_[10]*z[29];
  z[84] = z[22]*z[23]*z[83];
  z[85] = z[42]*z[83];
  z[86] = z[57]*z[7];
  z[87] = state_[10]*z[20];
  z[88] = rear_.r*z[4];
  z[89] = z[78]*z[88];
  z[90] = state_[10]*z[1]*z[2];
  z[91] = z[28]*z[90];
  z[92] = state_[9]*z[10]*z[4];
  z[93] = z[28]*z[92];
  z[94] = z[56]*z[92];
  z[95] = z[87] - z[89] + z[91] - z[93] + z[94];
  z[96] = z[21]*z[95];
  z[97] = rear_.r*state_[10]*z[2];
  z[98] = state_[10]*z[2];
  z[99] = front_.r*z[14];
  z[100] = z[12]*z[8];
  z[101] = state_[11]*z[1]*z[24]*z[48];
  z[102] = z[1]*z[29];
  z[103] = state_[11]*(z[102]*z[23] + z[102]*z[24] + z[76] - z[81]);
  z[104] = state_[10]*z[3] + state_[10]*z[5] - z[2]*z[57] + z[4]*z[95];
  z[105] = state_[11]*(-ls_ + z[20] + z[21]*z[28]);
  z[106] = state_[11]*z[1];
  z[107] = z[106]*z[34];
  z[108] = z[0]*z[57];
  z[109] = state_[9]*z[22]*z[4];
  z[110] = state_[11]*z[22]*z[25];
  z[111] = state_[9]*z[1]*z[25];
  z[112] = z[15] + z[8];
  z[113] = 1.0/z[45];
  z[114] = z[113]*z[73];
  z[115] = z[113]*z[72];
  z[116] = z[115]*z[43];
  z[117] = front_.c*state_[10];
  z[118] = state_[10]*z[1]*z[4]*z[48];
  z[119] = z[43]*z[48];
  z[120] = front_.r*z[70] + z[43]*z[61]*z[72] + z[47]*z[70];
  z[121] = z[106]*z[68];
  z[122] = -z[12]*z[57];
  z[123] = z[12]*z[4];
  z[124] = front_.c*state_[11];
  z[125] = front_.r*z[0]*z[14];
  z[126] = state_[11]*z[43]*z[48];
  z[127] = -z[87] + z[89] - z[91] + z[93] - z[94];

  ar[0] = z[0]*z[58] + z[0]*z[6] - z[12]*(z[77] + z[79] + z[80] - z[82] + z[84] + z[85] - z[86] - z[96]) + z[14]*z[16] - z[14]*z[75] + z[14]*z[9] - z[18]*z[30] - z[21]*z[41] + z[48]*z[49];
  ar[1] = -z[0]*z[101] + z[0]*z[103] + z[100]*z[2]*z[48] + z[104]*z[12] + z[11]*z[97] - z[18]*z[88] + z[32]*z[88] + z[34]*z[75] - z[4]*z[41] - z[98]*z[99];
  ar[2] = -z[0]*z[75] + z[105]*z[12] - z[107]*z[48] + z[108];
  ar[3] = -z[41];
  ar[4] = z[107]*z[29] + z[108];
  ar[5] = -z[16] - z[59] - z[60] + z[74] - z[9];
  ar[6] = z[27]*(-z[0]*z[8] - z[107]);
  ar[7] = z[27]*(z[0]*z[109] + z[0]*z[110] + z[11]*z[90] - z[111]*z[17] - z[18]*z[7]);
  ar[8] = z[70];
  ar[9] = z[46]*(z[112] - z[114]);
  ar[10] = z[46]*(z[116]*z[14] + z[14]*z[70] + z[40]*z[43]);
  ar[11] = -z[64] - z[65] - z[66] - z[67] + z[69];
  ar[12] = front_.c*z[15] + z[0]*(-z[77] - z[79] - z[80] + z[82] - z[84] - z[85] + z[86] + z[96]) + z[117]*z[7] - z[118]*z[43] - z[119]*z[15] - z[12]*z[58] - z[12]*z[6] + z[120]*z[21] - z[21]*z[48]*z[70] - z[30]*z[64] + z[43]*z[75];
  ar[13] = z[0]*z[104] + z[101]*z[12] - z[103]*z[12] - z[117]*z[2] + z[118]*z[68] + z[119]*z[98] + z[120]*z[4] - z[17]*z[97] - z[64]*z[88] - z[65]*z[88] + z[68]*z[75];
  ar[14] = z[0]*z[105] + z[12]*z[75] - z[121]*z[48] + z[122];
  ar[15] = z[120];
  ar[16] = z[121]*z[29] + z[122];
  ar[17] = 0;
  ar[18] = z[27]*(z[100] - z[121]);
  ar[19] = z[27]*(-z[11]*z[111] - z[110]*z[12] - z[123]*z[51] - z[17]*z[90] - z[64]*z[7]);
  ar[20] = z[40];
  ar[21] = 0;
  ar[22] = z[46]*(-z[115]*z[42] - z[115]*z[44] + 2*z[62] + 2*z[63] - 2*z[71]);
  ar[23] = z[18] - z[32] - z[35] - z[37] + z[39];
  ar[24] = front_.c*z[40] - rear_.c*z[31] + z[10]*z[87] - z[10]*z[95] - z[109]*z[29] - z[119]*z[40] - z[120]*z[14] + z[41]*z[43] + z[51]*z[88] - z[52]*z[88] + z[70]*z[99];
  ar[25] = rear_.r*z[53] - state_[10]*z[119]*z[12]*z[4] - state_[11]*z[12]*z[2]*z[99] + z[117]*z[123] + z[120]*z[34] - z[124]*z[68] - z[125]*z[55] + z[126]*z[68] - z[31]*z[50] + z[41]*z[68];
  ar[26] = state_[11]*z[125] - z[0]*z[120] - z[12]*z[124] + z[12]*z[126] + z[12]*z[41] + z[127];
  ar[27] = 0;
  ar[28] = z[127];
  ar[29] = -z[120];
  ar[30] = z[27]*z[90];
  ar[31] = z[27]*(z[10]*z[8] - z[54]);
  ar[32] = -z[112];
  ar[33] = z[46]*(z[116] + z[70]);
  ar[34] = z[46]*(z[114]*z[14] - z[14]*z[15] - z[14]*z[8] + z[49]);
  ar[35] = z[112];
}

/** Computes the n-d array of shape (3, 12, 3)
 *
 * @param[out] ar a C-array of with 108 elements
 */
//  void Bicycle::f_v_dudtdq(double ar[108]) const;
void Bicycle::f_v_dudtdq(double ar[108]) const
{
  double z[393];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[3]);
  z[2] = z[0]*z[1];
  z[3] = state_[11]*z[2];
  z[4] = cos(state_[2]);
  z[5] = rear_.c*z[4];
  z[6] = sin(state_[2]);
  z[7] = ls_*z[6];
  z[8] = -z[5] - z[7];
  z[9] = cos(state_[1]);
  z[10] = z[4]*z[9];
  z[11] = state_[9]*z[10];
  z[12] = front_.r*z[11];
  z[13] = sin(state_[3]);
  z[14] = z[6]*z[9];
  z[15] = z[13]*z[14];
  z[16] = z[15] + z[2];
  z[17] = front_.r*z[0];
  z[18] = state_[10]*z[6];
  z[19] = z[17]*z[18];
  z[20] = front_.r*state_[10]*z[6];
  z[21] = z[20]*z[9];
  z[22] = z[1]*z[9];
  z[23] = z[0]*z[13];
  z[24] = -z[22] + z[23]*z[6];
  z[25] = front_.r*state_[9]*z[0];
  z[26] = z[25]*z[4];
  z[27] = z[13]*z[9];
  z[28] = state_[11]*z[27];
  z[29] = state_[9]*z[2];
  z[30] = state_[10]*z[4];
  z[31] = z[23]*z[30];
  z[32] = z[3]*z[6];
  z[33] = state_[9]*z[14];
  z[34] = z[13]*z[33] + z[28] + z[29] + z[31] + z[32];
  z[35] = front_.r*z[34];
  z[36] = z[27]*z[30];
  z[37] = z[1]*z[14];
  z[38] = state_[11]*z[37];
  z[39] = z[36] + z[38];
  z[40] = state_[9]*z[22];
  z[41] = state_[11]*z[23];
  z[42] = state_[9]*z[23];
  z[43] = z[42]*z[6];
  z[44] = z[39] + z[40] - z[41] - z[43];
  z[45] = z[4]*z[44];
  z[46] = pow(z[9], 2);
  z[47] = pow(z[4], 2);
  z[48] = z[46]*z[47];
  z[49] = z[23] - z[37];
  z[50] = pow(z[49], 2);
  z[51] = z[48] + z[50];
  z[52] = pow(z[51], -1.0L/2.0L);
  z[53] = front_.R*z[52];
  z[54] = front_.r + z[53];
  z[55] = z[10]*z[34];
  z[56] = state_[11]*z[13];
  z[57] = ls_*z[9];
  z[58] = rear_.r*z[4];
  z[59] = z[46]*z[58];
  z[60] = pow(z[0], 2);
  z[61] = z[58]*z[60];
  z[62] = pow(z[6], 2);
  z[63] = z[47] + z[62];
  z[64] = z[46]*z[63];
  z[65] = pow(z[64], -1.0L/2.0L);
  z[66] = rear_.R*z[65];
  z[67] = rear_.r + z[66];
  z[68] = pow(z[64], -3.0L/2.0L);
  z[69] = rear_.R*z[64]*z[68];
  z[70] = z[67] - z[69];
  z[71] = z[4]*z[70];
  z[72] = -z[4]*z[46]*z[67] + z[57] + z[59] + z[60]*z[71] - z[61];
  z[73] = pow(z[51], -3.0L/2.0L);
  z[74] = z[47]*z[9];
  z[75] = z[0]*z[74];
  z[76] = z[2]*z[6] + z[27];
  z[77] = z[49]*z[76];
  z[78] = -z[75] + z[77];
  z[79] = front_.R*z[73]*z[78];
  z[80] = z[0]*z[53] + z[17] + z[79]*z[9];
  z[81] = state_[10]*z[6]*z[9];
  z[82] = state_[9]*z[0]*z[4];
  z[83] = z[18]*z[46];
  z[84] = z[4]*z[83];
  z[85] = state_[9]*z[0];
  z[86] = z[74]*z[85];
  z[87] = state_[11]*z[15];
  z[88] = z[22]*z[30];
  z[89] = z[87] - z[88];
  z[90] = state_[9]*z[27];
  z[91] = z[29]*z[6];
  z[92] = z[3] + z[89] + z[90] + z[91];
  z[93] = z[49]*z[92];
  z[94] = z[84] + z[86] - z[93];
  z[95] = front_.R*z[73]*z[94];
  z[96] = -z[10]*z[95] + z[21] + z[26] + z[53]*z[81] + z[53]*z[82];
  z[97] = rear_.r*z[60];
  z[98] = 4*state_[9]*z[0];
  z[99] = rear_.r*z[10];
  z[100] = z[10]*z[67];
  z[101] = rear_.r*z[6]*z[9];
  z[102] = state_[10]*z[101];
  z[103] = z[58]*z[85];
  z[104] = z[102] + z[103] + z[66]*z[81] + z[66]*z[82] - z[69]*z[82];
  z[105] = z[0]*z[18];
  z[106] = 2*rear_.R*z[60]*z[63]*z[68];
  z[107] = state_[9]*z[4];
  z[108] = pow(z[9], 3);
  z[109] = 3*rear_.R*z[108]*z[60]*pow(z[63], 2)/pow(z[64], 5.0L/2.0L);
  z[110] = z[60]*z[62];
  z[111] = z[47]*z[60];
  z[112] = z[110] + z[111];
  z[113] = z[46]*z[62];
  z[114] = z[112] - z[113] - z[48];
  z[115] = rear_.R*z[114]*z[68];
  z[116] = -rear_.r*z[105] + state_[9]*z[99] - z[105]*z[66] + z[105]*z[69] + z[106]*z[11] - z[107]*z[109] + z[11]*z[115] + z[11]*z[66];
  z[117] = -ls_*z[85] - rear_.r*z[83] + state_[9]*z[0]*z[10]*z[70] + z[0]*z[116] + z[100]*z[85] + z[104]*z[9] + z[18]*z[97] - z[98]*z[99];
  z[118] = z[11]*z[53];
  z[119] = z[105]*z[53];
  z[120] = z[79]*z[81];
  z[121] = z[79]*z[82];
  z[122] = z[0]*z[4];
  z[123] = z[122]*z[95];
  z[124] = pow(z[51], -5.0L/2.0L);
  z[125] = front_.R*z[124];
  z[126] = 3*state_[10]*z[4]*z[46]*z[6] + 3*state_[9]*z[0]*z[47]*z[9] - 3*z[49]*z[92];
  z[127] = z[126]*z[4]*z[78]*z[9];
  z[128] = z[125]*z[127];
  z[129] = front_.R*z[73];
  z[130] = state_[9]*z[111];
  z[131] = state_[9]*z[48];
  z[132] = state_[10]*z[0]*z[4]*z[6]*z[9];
  z[133] = 2*z[132];
  z[134] = z[76]*z[92];
  z[135] = state_[11]*z[22];
  z[136] = z[2]*z[30];
  z[137] = z[1]*z[33];
  z[138] = z[41]*z[6];
  z[139] = z[135] + z[136] + z[137] - z[138] - z[42];
  z[140] = z[139]*z[49];
  z[141] = z[130] - z[131] + z[133] + z[134] + z[140];
  z[142] = z[141]*z[4]*z[9];
  z[143] = z[129]*z[142];
  z[144] = z[118] - z[119] + z[12] - z[120] - z[121] + z[123] + z[128] + z[143] - z[19];
  z[145] = rear_.c*state_[10]*z[6];
  z[146] = state_[9]*z[9];
  z[147] = ls_*z[4];
  z[148] = state_[10]*z[0];
  z[149] = z[62]*z[67]*z[9];
  z[150] = z[67]*z[74];
  z[151] = state_[10]*z[0]*z[70];
  z[152] = z[0]*z[104];
  z[153] = z[6]*z[85];
  z[154] = state_[10]*z[10];
  z[155] = -rear_.r*z[153] + state_[10]*z[99] - z[153]*z[66] + z[153]*z[69] + z[154]*z[66];
  z[156] = z[0]*z[155];
  z[157] = z[148]*z[58];
  z[158] = rear_.r*z[33];
  z[159] = state_[10]*z[0]*z[4];
  z[160] = z[159]*z[66];
  z[161] = z[33]*z[66];
  z[162] = z[159]*z[69];
  z[163] = z[106]*z[33];
  z[164] = state_[9]*z[6];
  z[165] = z[109]*z[164];
  z[166] = z[115]*z[33];
  z[167] = -z[157] - z[158] - z[160] - z[161] + z[162] - z[163] + z[165] - z[166];
  z[168] = z[0]*z[145] + z[10]*z[167] + z[116]*z[14] - z[146]*z[5] - z[146]*z[7] - z[147]*z[148] + z[148]*z[149] + z[148]*z[150] + z[151]*z[62]*z[9] + z[151]*z[74] - z[152]*z[6] - z[156]*z[4];
  z[169] = front_.r*z[6];
  z[170] = state_[10]*z[4]*z[46];
  z[171] = z[13]*z[170];
  z[172] = rear_.c*z[6];
  z[173] = -z[147] + z[172];
  z[174] = front_.r*z[154];
  z[175] = z[25]*z[6];
  z[176] = z[14]*z[41];
  z[177] = z[4]*z[42];
  z[178] = state_[10]*z[15];
  z[179] = z[135]*z[4];
  z[180] = z[178] - z[179];
  z[181] = z[177] + z[180];
  z[182] = front_.r*z[181];
  z[183] = state_[10]*z[5];
  z[184] = state_[10]*z[7];
  z[185] = z[147]*z[85] - z[172]*z[85] + z[183]*z[9] + z[184]*z[9];
  z[186] = z[44]*z[9];
  z[187] = z[10]*z[181];
  z[188] = z[1]*z[49];
  z[189] = z[14] + z[188];
  z[190] = front_.R*z[189]*z[73];
  z[191] = z[169] - z[190]*z[74] + z[53]*z[6];
  z[192] = z[164]*z[46];
  z[193] = -rear_.r*z[192] - z[148]*z[99] + z[156] + z[164]*z[97] + z[192]*z[67];
  z[194] = z[13]*z[4]*z[9];
  z[195] = z[154]*z[53];
  z[196] = z[153]*z[53];
  z[197] = z[190]*z[84];
  z[198] = z[190]*z[86];
  z[199] = z[14]*z[95];
  z[200] = front_.R*z[124]*z[189];
  z[201] = z[126]*z[46]*z[47];
  z[202] = z[200]*z[201];
  z[203] = state_[10]*z[113];
  z[204] = state_[10]*z[48];
  z[205] = 2*state_[9]*z[0];
  z[206] = z[4]*z[6]*z[9];
  z[207] = z[205]*z[206];
  z[208] = state_[10]*z[37];
  z[209] = z[28]*z[4];
  z[210] = z[208] + z[209];
  z[211] = z[210] + z[29]*z[4];
  z[212] = z[211]*z[49];
  z[213] = z[4]*z[92];
  z[214] = z[213]*z[22];
  z[215] = z[203] - z[204] + z[207] + z[212] - z[214];
  z[216] = z[215]*z[4]*z[9];
  z[217] = z[129]*z[216];
  z[218] = z[174] - z[175] + z[195] - z[196] + z[197] + z[198] + z[199] - z[202] + z[217];
  z[219] = z[5] + z[7];
  z[220] = ls_ - z[100] + z[99];
  z[221] = front_.r*z[92];
  z[222] = z[10]*z[92];
  z[223] = z[16]*z[4]*z[44]*z[49]*z[9];
  z[224] = state_[9]*z[4]*z[46];
  z[225] = state_[9]*z[59] - state_[9]*z[61] - z[101]*z[148] + z[152] - z[224]*z[67];
  z[226] = state_[9]*z[57] + z[225];
  z[227] = z[10]*z[155] + z[104]*z[14] - z[145]*z[9] - z[203]*z[67] - z[204]*z[67] + z[30]*z[57] - z[5]*z[85] - z[7]*z[85];
  z[228] = z[49]*z[81];
  z[229] = z[16]*z[228];
  z[230] = z[49]*z[82];
  z[231] = z[16]*z[230];
  z[232] = z[16]*z[92];
  z[233] = z[44]*z[49];
  z[234] = z[232] + z[233];
  z[235] = z[10]*z[234];
  z[236] = 1.0/z[51];
  z[237] = z[16]*z[236]*z[49];
  z[238] = z[126]*z[237]*z[4]*z[9];
  z[239] = -z[229] - z[231] + z[235] + z[238];
  z[240] = front_.R*z[239]*z[73];
  z[241] = front_.r*state_[10]*z[4];
  z[242] = z[63]*z[70];
  z[243] = state_[11]*z[1];
  z[244] = z[47]*z[80];
  z[245] = state_[10]*z[4]*z[6]*z[80];
  z[246] = z[116]*z[4];
  z[247] = z[167]*z[6];
  z[248] = z[13]*z[4];
  z[249] = rear_.r*state_[10]*z[6];
  z[250] = state_[10]*z[13]*z[47]*z[9];
  z[251] = state_[11]*z[219];
  z[252] = z[16]*z[20];
  z[253] = z[4]*z[54];
  z[254] = front_.r*z[44];
  z[255] = z[254]*z[4];
  z[256] = z[13]*z[96];
  z[257] = z[47]*z[54];
  z[258] = state_[10]*z[4]*z[54];
  z[259] = front_.R*z[16]*z[47]*z[49]*z[73];
  z[260] = front_.R*state_[10]*z[16]*z[4]*z[49]*z[73];
  z[261] = state_[11]*(z[149] + z[150] + z[173]);
  z[262] = z[1]*z[96];
  z[263] = -z[104]*z[4] + z[155]*z[6] + z[183] + z[184];
  z[264] = z[129]*(z[229] + z[231] - z[235] - z[238]);
  z[265] = z[13]*z[264];
  z[266] = z[1]*z[116] - z[41]*z[71];
  z[267] = z[4]*z[80];
  z[268] = z[1]*z[155] - z[67]*z[87];
  z[269] = state_[11]*(-ls_ + z[10]*z[66] + z[99]);
  z[270] = front_.R*z[16]*z[49]*z[73];
  z[271] = -z[104]*z[13];
  z[272] = 1.0/z[9];
  z[273] = state_[9]*z[272]*z[4]*z[60];
  z[274] = 1.0/z[63];
  z[275] = state_[9]*z[114]*z[272]*z[274]*z[4];
  z[276] = state_[11]*z[46]*z[6];
  z[277] = 2*z[6]*z[9];
  z[278] = pow(z[0], 3);
  z[279] = state_[9]*z[272]*z[278]*z[6];
  z[280] = z[63]*z[9];
  z[281] = z[114]*z[272]*z[274];
  z[282] = 2*z[113];
  z[283] = 2*z[48];
  z[284] = z[114]*z[274];
  z[285] = z[284]*z[62];
  z[286] = z[284]*z[47];
  z[287] = z[14]*z[3];
  z[288] = state_[11]*z[46]*z[63];
  z[289] = -z[105] + z[11];
  z[290] = z[236]*z[78];
  z[291] = z[236]*z[94];
  z[292] = pow(z[51], -2);
  z[293] = -z[153] + z[154];
  z[294] = z[189]*z[236];
  z[295] = z[294]*z[84];
  z[296] = z[294]*z[86];
  z[297] = z[14]*z[291];
  z[298] = 3*z[189]*z[292]*z[94];
  z[299] = z[16]*z[291];
  z[300] = z[236]*z[49]*z[94];
  z[301] = 3*z[16]*z[292]*z[94];
  z[302] = z[181]*z[49];
  z[303] = z[222]*z[294];
  z[304] = z[16]*z[236]*z[4]*z[94];
  z[305] = z[4]*z[49]*z[9];
  z[306] = 2*z[93];
  z[307] = 2*z[0]*z[1] + 2*z[13]*z[6]*z[9];
  z[308] = pow(z[16], 2);
  z[309] = z[236]*z[308];
  z[310] = z[236]*z[50];
  z[311] = z[16]*z[44];
  z[312] = z[292]*z[308];
  z[313] = front_.c*z[18];
  z[314] = z[49]*z[54];
  z[315] = z[4]*z[54]*z[9];
  z[316] = front_.r*z[76];
  z[317] = z[53]*z[76];
  z[318] = z[49]*z[79];
  z[319] = -z[316] - z[317] + z[318];
  z[320] = front_.R*z[49]*z[73];
  z[321] = z[221] + z[320]*z[94] + z[53]*z[92];
  z[322] = front_.r*z[139];
  z[323] = z[139]*z[53];
  z[324] = z[79]*z[92];
  z[325] = z[76]*z[95];
  z[326] = z[126]*z[49]*z[78];
  z[327] = z[125]*z[326];
  z[328] = z[141]*z[320];
  z[329] = -z[322] - z[323] + z[324] - z[325] + z[327] + z[328];
  z[330] = front_.r*z[1];
  z[331] = z[1]*z[53] - z[190]*z[49] + z[330];
  z[332] = z[1]*z[4]*z[9];
  z[333] = front_.r*z[211];
  z[334] = z[211]*z[53];
  z[335] = z[190]*z[222];
  z[336] = z[332]*z[95];
  z[337] = z[126]*z[4]*z[49]*z[9];
  z[338] = z[200]*z[337];
  z[339] = z[215]*z[320];
  z[340] = z[333] + z[334] + z[335] - z[336] + z[338] - z[339];
  z[341] = -z[129]*z[50] + z[54];
  z[342] = z[16]*z[341];
  z[343] = z[44]*z[53];
  z[344] = z[232]*z[320];
  z[345] = z[16]*z[95];
  z[346] = 3*z[125]*z[16]*z[50]*z[94];
  z[347] = z[234]*z[320];
  z[348] = -z[254] - z[343] + z[344] - z[345] + z[346] + z[347];
  z[349] = z[1]*z[4];
  z[350] = z[321]*z[4];
  z[351] = -z[333] - z[334] - z[335] + z[336] - z[338] + z[339];
  z[352] = state_[10]*z[16]*z[4];
  z[353] = z[3]*z[71];
  z[354] = z[116]*z[13];
  z[355] = z[38]*z[67];
  z[356] = z[13]*z[155];
  z[357] = z[1]*z[104];
  z[358] = z[75] - z[77];
  z[359] = z[236]*z[358];
  z[360] = 2*state_[9]*z[0]*z[47]*z[9];
  z[361] = 2*z[236]*z[94];
  z[362] = 3*z[292]*z[50]*z[94];
  z[363] = z[236]*z[46]*z[47];
  z[364] = -z[130] + z[131] - z[133] - z[134] - z[140];
  z[365] = pow(z[4], 3);
  z[366] = 2*z[0]*z[13] - 2*z[1]*z[6]*z[9];
  z[367] = z[291]*z[332];
  z[368] = -z[203] + z[204] - z[207] - z[212] + z[214];
  z[369] = 2*z[232];
  z[370] = z[236]*z[307]*z[49];
  z[371] = 3*z[16]*z[292]*z[46]*z[47]*z[94];
  z[372] = state_[9]*z[0]*z[6]*z[9];
  z[373] = z[316] + z[317] - z[318];
  z[374] = z[157] + z[158] + z[160] + z[161] - z[162] + z[163] - z[165] + z[166];
  z[375] = z[330]*z[44];
  z[376] = z[4]*z[44]*z[9];
  z[377] = front_.r*state_[11]*z[13]*z[4];
  z[378] = front_.r*z[1]*z[4];
  z[379] = front_.c*z[13]*z[4];
  z[380] = front_.c*state_[11]*z[1];
  z[381] = front_.r*state_[11];
  z[382] = front_.r*z[1]*z[6];
  z[383] = state_[11]*z[13]*z[16];
  z[384] = z[13]*z[49];
  z[385] = z[1]*z[49]*z[54];
  z[386] = state_[11]*z[385];
  z[387] = z[13]*z[321];
  z[388] = front_.r*state_[11]*z[1];
  z[389] = z[13]*z[16];
  z[390] = z[236]*z[49];
  z[391] = z[16]*z[236]*z[358];
  z[392] = z[16]*z[236]*z[4]*z[9];

  ar[0] = z[1]*z[117] + z[10]*z[35] + z[12]*z[16] + z[13]*z[168] - z[144]*z[16] - z[16]*z[19] + z[17]*z[45] - z[21]*z[24] - z[24]*z[26] + z[24]*z[96] + z[3]*z[8] - z[45]*z[80] - z[54]*z[55] - z[56]*z[72];
  ar[1] = front_.r*z[0]*z[47]*z[90] + z[1]*z[193] + z[10]*z[182] - z[13]*z[185] - z[135]*z[173] + z[16]*z[174] - z[16]*z[175] - z[16]*z[218] + z[169]*z[171] + z[169]*z[186] - z[176]*z[66] - z[186]*z[191] - z[187]*z[54] - z[194]*z[96];
  ar[2] = z[1]*z[227] + z[10]*z[221] - z[129]*z[223] - z[13]*z[226] - z[16]*z[240] - z[21]*z[49] - z[219]*z[28] - z[220]*z[3] - z[222]*z[54] - z[26]*z[49] + z[49]*z[96];
  ar[3] = -rear_.r*z[87] + rear_.r*z[88] - rear_.r*z[91] - z[13]*z[245] - z[13]*(z[246] - z[247]) + z[144]*z[248] + z[169]*z[34] + z[24]*z[241] - z[242]*z[3] + z[243]*z[244];
  ar[4] = -front_.r*z[250] - state_[10]*z[13]*z[173] + z[1]*z[251] + z[169]*z[181] - z[178]*z[191] + z[179]*z[191] - z[2]*z[249] + z[218]*z[248] + z[250]*z[54] + z[252] + z[253]*z[38] - z[255] - z[256]*z[6] + z[40]*z[58] - z[41]*z[58];
  ar[5] = -rear_.r*z[31] - rear_.r*z[32] + z[1]*z[263] - z[13]*z[158] - z[13]*z[261] + z[135]*z[259] - z[15]*z[260] + z[169]*z[92] + z[241]*z[49] + z[257]*z[28] + z[258]*z[37] + z[262]*z[4] - z[265]*z[4];
  ar[6] = -z[1]*z[144] + z[266] + z[267]*z[56];
  ar[7] = -z[1]*z[218] + z[191]*z[28] + z[268];
  ar[8] = z[1]*z[264] + z[1]*z[269] - z[179]*z[54] + z[209]*z[270] + z[256] + z[271];
  ar[9] = z[35];
  ar[10] = z[182];
  ar[11] = z[221];
  ar[12] = z[266];
  ar[13] = z[268];
  ar[14] = z[179]*z[67] + z[271];
  ar[15] = -z[118] + z[119] - z[12] + z[120] + z[121] - z[123] - z[128] - z[143] + z[19];
  ar[16] = -z[174] + z[175] - z[195] + z[196] - z[197] - z[198] - z[199] + z[202] - z[217];
  ar[17] = z[264];
  ar[18] = z[65]*(z[1]*z[273] - z[1]*z[275] - z[4]*z[40]);
  ar[19] = z[65]*z[89];
  ar[20] = z[180]*z[65];
  ar[21] = z[65]*(state_[9]*z[13]*(z[112] - z[282] - z[283] - z[285] - z[286]) + z[1]*z[170] + z[1]*z[279] - z[13]*z[276] - z[277]*z[29] - z[280]*z[3] - z[281]*z[91]);
  ar[22] = z[65]*(z[1]*z[224] - z[10]*z[41] - z[2]*z[81]);
  ar[23] = z[65]*(-z[13]*z[192] - z[13]*z[288] - z[154]*z[23] - z[280]*z[29] - z[287]);
  ar[24] = z[139];
  ar[25] = z[211];
  ar[26] = z[44];
  ar[27] = z[52]*(z[122]*z[291] + z[127]*z[292] + z[142]*z[236] + z[289] - z[290]*z[81] - z[290]*z[82]);
  ar[28] = z[52]*(z[216]*z[236] + z[293] + z[295] + z[296] + z[297] - z[298]*z[48]);
  ar[29] = z[239]*z[73];
  ar[30] = z[52]*(z[139]*z[16] - z[141]*z[237] - z[232]*z[290] - z[233]*z[290] - z[24]*z[300] - z[24]*z[92] + z[299]*z[76] - z[301]*z[49]*z[78] - z[34]*z[49] + z[44]*z[76]);
  ar[31] = z[52]*(3*z[16]*z[189]*z[292]*z[305]*z[94] + z[16]*z[211] + z[16]*z[303] + z[194]*z[300] + z[213]*z[27] - z[215]*z[237] - z[22]*z[304] - z[22]*z[45] + z[294]*z[4]*z[44]*z[49]*z[9] - z[302]);
  ar[32] = z[52]*(-z[234]*z[237] - z[306] + z[307]*z[44] - z[309]*z[93] + z[309]*z[94] - z[310]*z[311] - z[310]*z[94] - 3*z[312]*z[50]*z[94]);
  ar[33] = -z[135] - z[136] - z[137] + z[138] + z[42];
  ar[34] = -z[211];
  ar[35] = -z[36] - z[38] - z[40] + z[41] + z[43];
  ar[36] = front_.c*z[11] - z[0]*z[313] + z[1]*z[168] - z[10]*z[329] + z[105]*z[314] - z[11]*z[314] - z[117]*z[13] - z[122]*z[321] - z[139]*z[315] + z[144]*z[49] + z[213]*z[80] - z[243]*z[72] + z[319]*z[81] + z[319]*z[82] - z[41]*z[8] + z[76]*z[96];
  ar[37] = -front_.c*z[153] + front_.c*z[154] - z[1]*z[185] + z[10]*z[340] - z[13]*z[193] - z[14]*z[321] + z[153]*z[314] - z[154]*z[314] + z[173]*z[28] + z[191]*z[9]*z[92] - z[211]*z[315] + z[218]*z[49] - z[287]*z[66] + z[331]*z[84] + z[331]*z[86] - z[332]*z[96];
  ar[38] = -z[1]*z[226] - z[10]*z[348] - z[13]*z[227] - z[135]*z[219] + z[16]*z[96] + z[220]*z[41] + z[222]*z[270] + z[239]*z[320] - z[315]*z[44] - z[342]*z[81] - z[342]*z[82];
  ar[39] = -rear_.r*z[36] - rear_.r*z[38] + rear_.r*z[43] - z[1]*z[245] + z[1]*(-z[246] + z[247]) + z[144]*z[349] + z[242]*z[41] - z[244]*z[56] - z[30]*z[319] - z[329]*z[6];
  ar[40] = state_[10]*z[1]*z[257]*z[9] + state_[10]*z[1]*(z[147] - z[172]) - state_[10]*z[331]*z[74] - z[13]*z[251] - z[18]*z[314] - z[191]*z[208] - z[191]*z[209] + z[218]*z[349] + z[23]*z[249] - z[253]*z[87] - z[262]*z[6] - z[3]*z[58] + z[313] + z[350] - z[351]*z[6] - z[58]*z[90];
  ar[41] = -rear_.r*z[136] + rear_.r*z[138] - z[1]*z[158] - z[1]*z[261] - z[13]*z[263] + z[135]*z[257] - z[15]*z[258] + z[240]*z[349] - z[256]*z[4] - z[259]*z[28] - z[260]*z[37] + z[341]*z[352] - z[348]*z[6];
  ar[42] = z[13]*z[144] + z[243]*z[267] - z[353] - z[354];
  ar[43] = z[13]*z[218] + z[135]*z[191] - z[355] - z[356];
  ar[44] = -z[13]*z[269] + z[179]*z[270] + z[209]*z[54] + z[262] - z[265] - z[357];
  ar[45] = z[322] + z[323] - z[324] + z[325] - z[327] - z[328];
  ar[46] = z[340];
  ar[47] = z[254] + z[343] - z[344] + z[345] - z[346] - z[347];
  ar[48] = -z[353] - z[354];
  ar[49] = -z[355] - z[356];
  ar[50] = -z[209]*z[67] - z[357];
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = z[65]*(-z[13]*z[273] + z[13]*z[275] + z[4]*z[90]);
  ar[55] = z[39]*z[65];
  ar[56] = z[210]*z[65];
  ar[57] = z[65]*(-state_[9]*z[1]*(-z[110] - z[111] + z[282] + z[283] + z[285] + z[286]) - z[1]*z[276] - z[13]*z[279] - z[171] + z[277]*z[42] + z[280]*z[41] + z[281]*z[43]);
  ar[58] = z[65]*(-z[10]*z[3] - z[13]*z[224] + z[23]*z[81]);
  ar[59] = z[65]*(-z[1]*z[192] - z[1]*z[288] - z[154]*z[2] + z[176] + z[280]*z[42]);
  ar[60] = -z[34];
  ar[61] = -z[177] - z[178] + z[179];
  ar[62] = -z[3] - z[87] + z[88] - z[90] - z[91];
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = z[52]*(2*state_[10]*z[359]*z[4]*z[46]*z[6] + state_[9]*z[283] - 2*z[130] - 4*z[132] - 2*z[134] - 2*z[140] - z[201]*z[292]*z[358] - z[306]*z[359] - z[310]*z[364] - z[358]*z[362] + z[359]*z[360] + z[361]*z[75] - z[361]*z[77] - z[363]*z[364]);
  ar[67] = z[52]*(2*state_[10]*z[108]*z[294]*z[47]*z[6] - state_[10]*z[282] + state_[10]*z[283] + 2*state_[9]*z[0]*z[294]*z[365]*z[46] - z[108]*z[298]*z[365] - z[189]*z[362]*z[4]*z[9] - z[206]*z[98] - 2*z[212] + 2*z[214] - z[303]*z[366] - z[310]*z[368] + z[361]*z[4]*z[46]*z[6] - z[363]*z[368] + z[366]*z[367]);
  ar[68] = z[52]*(-2*z[233] + z[234]*z[310] + z[234]*z[363] - z[237]*z[360] + z[301]*pow(z[49], 3) + z[310]*z[369] - z[369] - z[370]*z[84] - z[370]*z[94] + z[371]*z[49]);
  ar[69] = z[34];
  ar[70] = z[181];
  ar[71] = z[92];
  ar[72] = -front_.c*z[34] + rear_.c*z[85] + rear_.r*z[170] + z[0]*z[374] - z[101]*z[98] - z[155]*z[9] + z[16]*z[322] + z[16]*z[329] - z[221]*z[24] + z[24]*z[321] - z[30]*z[97] + z[314]*z[34] + z[316]*z[44] - z[35]*z[49] + z[372]*z[67] + z[372]*z[70] - z[373]*z[44];
  ar[73] = -front_.c*z[181] - z[10]*z[375] + z[16]*z[333] + z[16]*z[351] - z[182]*z[49] + z[194]*z[221] - z[194]*z[321] + z[225] + z[302]*z[54] + z[331]*z[376];
  ar[74] = -front_.c*z[92] + z[16]*z[348] - z[221]*z[366] + z[254]*z[307] - z[311]*z[341] + z[314]*z[92] + z[321]*z[49];
  ar[75] = z[1]*z[20]*z[24] + z[102] + z[103] - z[13]*z[18]*z[373] + z[24]*z[377] + z[243]*z[373]*z[4] - z[248]*z[329] - z[34]*z[378];
  ar[76] = state_[10]*z[379] - pow(z[13], 2)*z[381]*z[47]*z[9] + z[13]*z[30]*z[331]*z[6]*z[9] - z[135]*z[331]*z[47] + z[157] + z[158] + z[169]*z[383] - z[181]*z[378] - z[248]*z[351] - z[258]*z[384] - z[330]*z[352] - z[36]*z[382] + z[380]*z[6] - z[382]*z[44] - z[386]*z[6] - z[387]*z[6];
  ar[77] = -state_[10]*z[341]*z[389]*z[6] + state_[11]*z[379] - state_[11]*z[384]*z[4]*z[54] + z[1]*z[313] + z[1]*z[350] + z[13]*z[252] - z[13]*z[255] + z[16]*z[243]*z[341]*z[4] - z[16]*z[388]*z[4] - z[18]*z[385] + z[188]*z[20] - z[248]*z[348] + z[377]*z[49] - z[378]*z[92];
  ar[78] = z[1]*z[329] - z[13]*z[35] - z[24]*z[388] + z[373]*z[56] + z[374];
  ar[79] = -z[1]*z[340] + z[104] - z[13]*z[182] + z[209]*z[330] - z[209]*z[331];
  ar[80] = z[1]*z[348] - z[13]*z[221] + z[341]*z[383] + z[375] - z[380] - z[381]*z[389] + z[386] + z[387] - z[388]*z[49];
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[374];
  ar[85] = z[104];
  ar[86] = 0;
  ar[87] = z[329];
  ar[88] = z[351];
  ar[89] = z[348];
  ar[90] = z[65]*(z[164]*z[272]*z[60] - z[164]*z[281] - z[33]);
  ar[91] = -z[65]*z[81];
  ar[92] = 0;
  ar[93] = z[65]*(z[10]*z[205] - z[107]*z[272]*z[278] + z[281]*z[82] + z[83]);
  ar[94] = z[65]*(z[0]*z[154] + z[192]);
  ar[95] = 0;
  ar[96] = z[105] - z[11];
  ar[97] = z[153] - z[154];
  ar[98] = 0;
  ar[99] = z[52]*(z[139] - z[141]*z[390] - z[290]*z[92] + z[291]*z[76] - z[292]*z[326]);
  ar[100] = z[52]*(z[211] - z[215]*z[390] + z[298]*z[305] + z[303] - z[367]);
  ar[101] = z[52]*(-z[232]*z[390] - z[234]*z[390] + z[299] - z[301]*z[50] + z[44]);
  ar[102] = z[52]*(-z[0]*z[304] - z[0]*z[45] + z[105]*z[16] - z[11]*z[16] - z[24]*z[291]*z[4]*z[9] + z[24]*z[81] + z[24]*z[82] + z[301]*z[358]*z[4]*z[9] + z[359]*z[376] + z[364]*z[392] - z[391]*z[81] - z[391]*z[82] - z[55]);
  ar[103] = z[52]*(z[13]*z[291]*z[46]*z[47] - z[13]*z[84] - z[14]*z[44] + z[153]*z[16] - z[154]*z[16] - z[16]*z[295] - z[16]*z[296] - z[16]*z[297] - z[187] + z[189]*z[371] + z[294]*z[44]*z[46]*z[47] + z[368]*z[392] - z[42]*z[74]);
  ar[104] = z[52]*(-z[10]*z[300] - z[16]*z[235]*z[236] - z[222] - z[223]*z[236] + z[228]*z[309] + z[228] + z[230]*z[309] + z[230] - z[312]*z[337]);
  ar[105] = z[289];
  ar[106] = z[293];
  ar[107] = 0;
}

/** Computes the n-d array of shape (8)
 *
 * @param[out] ar a C-array of with 8 elements
 */
//  void Bicycle::f_1(double ar[8]) const;
void Bicycle::f_1(double ar[8]) const
{
  double z[23];

  z[0] = sin(state_[0]);
  z[1] = cos(state_[1]);
  z[2] = pow(z[1], 2);
  z[3] = rear_.r*state_[9]*z[2];
  z[4] = cos(state_[0]);
  z[5] = cos(state_[2]);
  z[6] = z[4]*z[5];
  z[7] = sin(state_[1]);
  z[8] = sin(state_[2]);
  z[9] = z[0]*z[8];
  z[10] = rear_.r*state_[10]*z[1];
  z[11] = rear_.r*state_[9]*z[7];
  z[12] = pow(z[5], 2) + pow(z[8], 2);
  z[13] = z[12]*z[2];
  z[14] = pow(z[13], -1.0L/2.0L);
  z[15] = rear_.R*state_[10]*z[1]*z[14];
  z[16] = rear_.R*state_[9]*z[14]*z[7];
  z[17] = state_[12]*z[1]*(rear_.R*z[14] + rear_.r);
  z[18] = rear_.R*state_[9]*z[12]*z[2]*z[7]/pow(z[13], 3.0L/2.0L);
  z[19] = z[10]*z[5] - z[11]*z[8] + z[15]*z[5] - z[16]*z[8] + z[17]*z[5] + z[18]*z[8];
  z[20] = z[4]*z[8];
  z[21] = z[0]*z[5];
  z[22] = -z[10]*z[8] - z[11]*z[5] - z[15]*z[8] - z[16]*z[5] - z[17]*z[8] + z[18]*z[5];

  ar[0] = -state_[8];
  ar[1] = -state_[9];
  ar[2] = -state_[10];
  ar[3] = -state_[11];
  ar[4] = -state_[12];
  ar[5] = -state_[13];
  ar[6] = z[0]*z[3] - z[19]*(-z[6] + z[7]*z[9]) - z[22]*(z[20] + z[21]*z[7]);
  ar[7] = z[19]*(z[20]*z[7] + z[21]) - z[22]*(-z[6]*z[7] + z[9]) - z[3]*z[4];
}

/** Computes the n-d array of shape (8, 8)
 *
 * @param[out] ar a C-array of with 64 elements
 */
//  void Bicycle::f_1_dq(double ar[64]) const;
void Bicycle::f_1_dq(double ar[64]) const
{
  double z[60];

  z[0] = cos(state_[0]);
  z[1] = cos(state_[1]);
  z[2] = pow(z[1], 2);
  z[3] = rear_.r*state_[9]*z[2];
  z[4] = sin(state_[0]);
  z[5] = sin(state_[2]);
  z[6] = z[4]*z[5];
  z[7] = sin(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = z[0]*z[8];
  z[10] = z[6] - z[7]*z[9];
  z[11] = rear_.r*state_[10]*z[1];
  z[12] = z[11]*z[5];
  z[13] = rear_.r*state_[9]*z[7];
  z[14] = z[13]*z[8];
  z[15] = pow(z[5], 2);
  z[16] = pow(z[8], 2);
  z[17] = z[15] + z[16];
  z[18] = z[17]*z[2];
  z[19] = pow(z[18], -1.0L/2.0L);
  z[20] = rear_.R*state_[10]*z[1]*z[19];
  z[21] = z[20]*z[5];
  z[22] = rear_.R*state_[9]*z[19]*z[7];
  z[23] = z[22]*z[8];
  z[24] = rear_.R*z[19] + rear_.r;
  z[25] = state_[12]*z[1]*z[24];
  z[26] = z[25]*z[5];
  z[27] = pow(z[18], -3.0L/2.0L);
  z[28] = rear_.R*state_[9]*z[17]*z[2]*z[27]*z[7];
  z[29] = z[28]*z[8];
  z[30] = z[12] + z[14] + z[21] + z[23] + z[26] - z[29];
  z[31] = z[4]*z[8];
  z[32] = z[0]*z[5];
  z[33] = z[31] + z[32]*z[7];
  z[34] = z[11]*z[8] - z[13]*z[5] + z[20]*z[8] - z[22]*z[5] + z[25]*z[8] + z[28]*z[5];
  z[35] = 2*rear_.r*state_[9]*z[1]*z[7];
  z[36] = z[1]*z[34];
  z[37] = -z[12] - z[14] - z[21] - z[23] - z[26] + z[29];
  z[38] = z[6]*z[7] - z[9];
  z[39] = rear_.r*state_[10]*z[7];
  z[40] = rear_.r*state_[9]*z[1];
  z[41] = rear_.R*state_[10]*z[19]*z[7];
  z[42] = rear_.R*state_[9]*z[1]*z[19];
  z[43] = rear_.R*state_[10]*z[17]*z[2]*z[27]*z[7];
  z[44] = pow(z[7], 2);
  z[45] = 2*rear_.R*state_[9]*z[1]*z[17]*z[27]*z[44];
  z[46] = 3*rear_.R*state_[9]*pow(z[1], 3)*pow(z[17], 2)*z[44]/pow(z[18], 5.0L/2.0L);
  z[47] = state_[12]*z[7]*(-rear_.R*z[18]*z[27] + z[24]);
  z[48] = rear_.R*state_[9]*z[1]*z[27]*(-z[15]*z[2] + z[15]*z[44] - z[16]*z[2] + z[16]*z[44]);
  z[49] = z[39]*z[8] + z[40]*z[5] + z[41]*z[8] + z[42]*z[5] - z[43]*z[8] + z[45]*z[5] - z[46]*z[5] + z[47]*z[8] + z[48]*z[5];
  z[50] = z[31]*z[7] + z[32];
  z[51] = z[39]*z[5];
  z[52] = z[40]*z[8];
  z[53] = z[41]*z[5];
  z[54] = z[42]*z[8];
  z[55] = z[43]*z[5];
  z[56] = z[45]*z[8];
  z[57] = z[46]*z[8];
  z[58] = z[47]*z[5];
  z[59] = z[48]*z[8];

  ar[0] = 0;
  ar[1] = 0;
  ar[2] = 0;
  ar[3] = 0;
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
  ar[8] = 0;
  ar[9] = 0;
  ar[10] = 0;
  ar[11] = 0;
  ar[12] = 0;
  ar[13] = 0;
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = 0;
  ar[18] = 0;
  ar[19] = 0;
  ar[20] = 0;
  ar[21] = 0;
  ar[22] = 0;
  ar[23] = 0;
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = 0;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = 0;
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = 0;
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = 0;
  ar[40] = 0;
  ar[41] = 0;
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 0;
  ar[47] = 0;
  ar[48] = z[0]*z[3] - z[10]*z[30] - z[33]*z[34];
  ar[49] = -z[1]*z[31]*z[37] - z[35]*z[4] - z[36]*z[6] + z[38]*z[49] - z[50]*(z[51] - z[52] + z[53] - z[54] - z[55] - z[56] + z[57] + z[58] - z[59]);
  ar[50] = 0;
  ar[51] = 0;
  ar[52] = 0;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = z[3]*z[4] - z[34]*z[38] - z[37]*z[50];
  ar[57] = z[0]*z[35] - z[1]*z[30]*z[9] + z[10]*(-z[51] + z[52] - z[53] + z[54] + z[55] + z[56] - z[57] - z[58] + z[59]) + z[32]*z[36] - z[33]*z[49];
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = 0;
}

/** Computes the n-d array of shape (8, 12)
 *
 * @param[out] ar a C-array of with 96 elements
 */
//  void Bicycle::f_1_du(double ar[96]) const;
void Bicycle::f_1_du(double ar[96]) const
{
  double z[24];

  z[0] = sin(state_[0]);
  z[1] = cos(state_[1]);
  z[2] = pow(z[1], 2);
  z[3] = rear_.r*z[2];
  z[4] = sin(state_[2]);
  z[5] = cos(state_[0]);
  z[6] = z[4]*z[5];
  z[7] = sin(state_[1]);
  z[8] = cos(state_[2]);
  z[9] = z[0]*z[8];
  z[10] = z[6] + z[7]*z[9];
  z[11] = z[2]*(pow(z[4], 2) + pow(z[8], 2));
  z[12] = rear_.R/sqrt(z[11]) + rear_.r;
  z[13] = -rear_.R/sqrt(z[11]) + z[12];
  z[14] = z[13]*z[7]*z[8];
  z[15] = z[5]*z[8];
  z[16] = z[0]*z[4];
  z[17] = -z[15] + z[16]*z[7];
  z[18] = z[13]*z[4]*z[7];
  z[19] = z[1]*z[12];
  z[20] = z[19]*(z[10]*z[4] - z[17]*z[8]);
  z[21] = -z[15]*z[7] + z[16];
  z[22] = z[6]*z[7] + z[9];
  z[23] = z[19]*(z[21]*z[4] + z[22]*z[8]);

  ar[0] = -1;
  ar[1] = 0;
  ar[2] = 0;
  ar[3] = 0;
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = 0;
  ar[8] = 0;
  ar[9] = 0;
  ar[10] = 0;
  ar[11] = 0;
  ar[12] = 0;
  ar[13] = -1;
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = 0;
  ar[18] = 0;
  ar[19] = 0;
  ar[20] = 0;
  ar[21] = 0;
  ar[22] = 0;
  ar[23] = 0;
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = -1;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = 0;
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = 0;
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = -1;
  ar[40] = 0;
  ar[41] = 0;
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 0;
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = 0;
  ar[52] = -1;
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = 0;
  ar[64] = 0;
  ar[65] = -1;
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = 0;
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = 0;
  ar[73] = z[0]*z[3] + z[10]*z[14] + z[17]*z[18];
  ar[74] = z[20];
  ar[75] = 0;
  ar[76] = z[20];
  ar[77] = 0;
  ar[78] = 0;
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = 0;
  ar[85] = z[14]*z[21] - z[18]*z[22] - z[3]*z[5];
  ar[86] = z[23];
  ar[87] = 0;
  ar[88] = z[23];
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = 0;
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
}

/** Computes the n-d array of shape (12, 12)
 *
 * @param[out] ar a C-array of with 144 elements
 */
//  void Bicycle::gif_dud(double ar[144]) const;
void Bicycle::gif_dud(double ar[144]) const
{
  double z[157];

  z[0] = sin(state_[1]);
  z[1] = pow(z[0], 2);
  z[2] = cos(state_[2]);
  z[3] = cos(state_[1]);
  z[4] = pow(z[3], 2);
  z[5] = sin(state_[2]);
  z[6] = rear_.Ixz*z[5];
  z[7] = -rear_.Izz*z[2] + z[6];
  z[8] = cos(state_[3]);
  z[9] = sin(state_[3]);
  z[10] = z[3]*z[5];
  z[11] = z[0]*z[8] + z[10]*z[9];
  z[12] = pow(z[11], 2);
  z[13] = rear_.Ixz*z[2];
  z[14] = rear_.Ixx*z[5] - z[13];
  z[15] = z[2]*z[3];
  z[16] = z[0]*z[9] - z[10]*z[8];
  z[17] = front_.Ixz*z[16] + front_.Izz*z[15];
  z[18] = front_.Ixx*z[16];
  z[19] = front_.Ixz*z[15] + z[18];
  z[20] = rear_.a*z[2];
  z[21] = rear_.b*z[5];
  z[22] = z[20] + z[21];
  z[23] = rear_.r*z[10];
  z[24] = pow(z[5], 2);
  z[25] = pow(z[2], 2);
  z[26] = z[24] + z[25];
  z[27] = z[26]*z[4];
  z[28] = pow(z[27], -1.0L/2.0L);
  z[29] = rear_.R*z[28];
  z[30] = rear_.r + z[29];
  z[31] = rear_.a + z[10]*z[30] - z[23];
  z[32] = rear_.r*z[15];
  z[33] = rear_.b - z[15]*z[30] + z[32];
  z[34] = front_.a*z[15] - front_.b*z[16];
  z[35] = z[25]*z[4];
  z[36] = pow(z[16], 2);
  z[37] = z[35] + z[36];
  z[38] = sqrt(z[37]);
  z[39] = 1.0/z[38];
  z[40] = front_.R*z[39];
  z[41] = front_.r + z[40];
  z[42] = front_.b - z[15]*z[41];
  z[43] = front_.r*z[15] + z[42];
  z[44] = -front_.a;
  z[45] = front_.r*z[16];
  z[46] = -z[45];
  z[47] = z[16]*z[41];
  z[48] = z[44] + z[46] + z[47];
  z[49] = rear_.Ixx*z[2] + z[6];
  z[50] = rear_.Izz*z[5] + z[13];
  z[51] = z[2]*z[8];
  z[52] = front_.Ixz*z[51] + front_.Izz*z[5];
  z[53] = front_.Ixz*z[5];
  z[54] = front_.Ixx*z[51];
  z[55] = z[53] + z[54];
  z[56] = z[2]*z[9];
  z[57] = rear_.r*z[1];
  z[58] = z[2]*z[31];
  z[59] = z[33]*z[5];
  z[60] = rear_.a*z[5];
  z[61] = rear_.b*z[2];
  z[62] = z[3]*z[30];
  z[63] = z[24]*z[62];
  z[64] = z[25]*z[62];
  z[65] = z[60] - z[61] + z[63] + z[64];
  z[66] = z[3]*z[65];
  z[67] = front_.r*z[11];
  z[68] = z[25]*z[3]*z[41];
  z[69] = -front_.b*z[56] + z[5]*z[67] + z[68]*z[9];
  z[70] = front_.a*z[5] - front_.b*z[51] - z[47]*z[5] + z[68]*z[8];
  z[71] = front_.a*z[9];
  z[72] = z[11]*z[8];
  z[73] = front_.r*z[72];
  z[74] = z[47]*z[9];
  z[75] = z[71] - z[73] - z[74];
  z[76] = z[2]*z[75];
  z[77] = z[11]*z[48];
  z[78] = front_.Iyy*z[11]*z[56] - front_.m*(z[11]*z[43]*z[69] + z[34]*z[70] + z[76]*z[77]) - rear_.m*(z[22]*z[66] + z[57]*z[58] + z[57]*z[59]);
  z[79] = front_.Ixz*z[9];
  z[80] = rear_.m*z[0];
  z[81] = rear_.a + z[10]*z[29] + z[23];
  z[82] = z[15]*z[29];
  z[83] = rear_.b - z[32] - z[82];
  z[84] = z[42]*z[9];
  z[85] = front_.a*z[8];
  z[86] = z[67]*z[9];
  z[87] = z[47]*z[8];
  z[88] = -z[85] - z[86] + z[87];
  z[89] = front_.Iyy*z[72] + rear_.Iyy*z[0] + front_.m*(-z[34]*z[84] + z[42]*z[43]*z[72] + z[77]*z[88]) + z[80]*(z[31]*z[81] + z[33]*z[83]);
  z[90] = z[16]*z[40];
  z[91] = front_.a - z[90];
  z[92] = z[46] + z[91];
  z[93] = -front_.m*(front_.r*z[12]*z[43] + z[34]*z[92]) - z[17];
  z[94] = rear_.m*z[3]*z[30];
  z[95] = z[2]*z[33];
  z[96] = z[31]*z[5];
  z[97] = z[0]*(-rear_.J + z[94]*(z[95] - z[96]));
  z[98] = front_.m*z[41];
  z[99] = z[15]*z[43];
  z[100] = z[16]*z[48];
  z[101] = z[11]*(-front_.J + z[98]*(-z[100] + z[99]));
  z[102] = rear_.m*z[0]*z[28]*z[3]*(-z[95] + z[96]);
  z[103] = rear_.m*z[28]*z[3];
  z[104] = -z[103]*(z[1]*z[58] + z[1]*z[59] + z[22]*z[27]);
  z[105] = z[3]*z[80]*(-z[20] - z[21] + z[58] + z[59]);
  z[106] = front_.m*z[11];
  z[107] = z[106]*z[39]*(z[100] - z[99]);
  z[108] = z[12]*z[39];
  z[109] = z[16]*z[43];
  z[110] = front_.m*(z[108]*z[109] + z[108]*z[2]*z[3]*z[48] - z[34]*z[38]);
  z[111] = -z[106]*(z[109] - z[15]*(front_.a + z[45] - z[47]) + z[34]);
  z[112] = pow(z[9], 2);
  z[113] = pow(rear_.r, 2)*z[1];
  z[114] = -rear_.b + z[32] + z[82];
  z[115] = rear_.m*(-z[114]*z[5] + z[2]*z[81]);
  z[116] = front_.Iyy*z[51]*z[9] - front_.m*(z[42]*z[69]*z[8] - z[70]*z[84] + z[76]*z[88]) - rear_.r*z[0]*z[115];
  z[117] = -front_.m*(z[67]*z[69] + z[70]*z[92]) - z[52];
  z[118] = z[3]*z[69];
  z[119] = -z[71] + z[73] + z[74];
  z[120] = z[2]*(front_.J*z[9] + z[98]*(z[118] + z[119]*z[16]));
  z[121] = -z[103]*(z[24]*z[57] + z[25]*z[57] + z[26]*z[66]);
  z[122] = rear_.r*z[3];
  z[123] = z[80]*(z[122]*z[24] + z[122]*z[25] - z[60] + z[61] - z[63] - z[64]);
  z[124] = front_.m*z[39];
  z[125] = z[124]*z[2]*(-z[118] + z[16]*z[75]);
  z[126] = z[11]*z[39];
  z[127] = z[16]*z[69];
  z[128] = front_.m*(z[126]*z[127] + z[126]*z[25]*z[3]*z[75] - z[38]*z[70]);
  z[129] = -front_.m*(z[11]*z[70] - z[119]*z[25]*z[3] + z[127]);
  z[130] = pow(z[8], 2);
  z[131] = pow(z[42], 2);
  z[132] = z[44] + z[45] + z[90];
  z[133] = -front_.m*z[42]*(z[132]*z[9] + z[73]) - z[79];
  z[134] = z[5]*z[81];
  z[135] = -rear_.J - z[94]*(z[134] - z[2]*z[83]);
  z[136] = z[3]*z[42]*z[51];
  z[137] = -front_.J*z[8] + z[98]*(z[136] - z[16]*z[88]);
  z[138] = z[103]*(z[114]*z[2] + z[134]);
  z[139] = z[115]*z[3];
  z[140] = -z[0]*z[139]*z[28];
  z[141] = z[85] + z[86] - z[87];
  z[142] = -z[124]*(z[136] + z[141]*z[16]);
  z[143] = z[16]*z[42];
  z[144] = front_.m*(z[11]*z[143]*z[39]*z[8] + z[126]*z[2]*z[3]*z[88] + z[38]*z[84]);
  z[145] = -front_.m*(-z[11]*z[84] - z[141]*z[15] + z[143]*z[8]);
  z[146] = front_.m*front_.r*z[11]*z[2]*z[3];
  z[147] = z[146]*z[41];
  z[148] = -z[146]*z[39];
  z[149] = front_.m*(z[108]*z[45] + z[132]*z[38]);
  z[150] = -z[106]*z[91];
  z[151] = rear_.m*z[26]*z[4];
  z[152] = z[151]*z[28]*z[30];
  z[153] = z[38]*z[98];
  z[154] = z[1]/z[26];
  z[155] = z[12]/z[37];
  z[156] = z[106]*(z[35]*z[39] + z[36]*z[39] - z[38]);

  ar[0] = -front_.Iyy*z[12] - rear_.Iyy*z[1] - front_.m*(z[12]*pow(z[43], 2) + z[12]*pow(z[48], 2) + pow(z[34], 2)) - rear_.m*(z[1]*pow(z[31], 2) + z[1]*pow(z[33], 2) + pow(z[22], 2)*z[4]) - z[14]*z[4]*z[5] - z[15]*z[17] - z[16]*z[19] + z[2]*z[4]*z[7];
  ar[1] = z[10]*z[49] - z[15]*z[50] - z[15]*z[52] - z[16]*z[55] + z[78];
  ar[2] = -z[15]*z[79] - z[18]*z[9] - z[89];
  ar[3] = z[93];
  ar[4] = z[97];
  ar[5] = z[101];
  ar[6] = z[102];
  ar[7] = z[104];
  ar[8] = z[105];
  ar[9] = z[107];
  ar[10] = z[110];
  ar[11] = z[111];
  ar[12] = z[10]*z[7] + z[14]*z[15] - z[17]*z[5] - z[19]*z[51] + z[78];
  ar[13] = -front_.Iyy*z[112]*z[25] - front_.m*(z[25]*pow(z[75], 2) + pow(z[69], 2) + pow(z[70], 2)) - rear_.m*(z[113]*z[24] + z[113]*z[25] + pow(z[65], 2)) - z[2]*z[49] - z[5]*z[50] - z[5]*z[52] - z[51]*z[55];
  ar[14] = z[116] - z[53]*z[9] - z[54]*z[9];
  ar[15] = z[117];
  ar[16] = 0;
  ar[17] = z[120];
  ar[18] = 0;
  ar[19] = z[121];
  ar[20] = z[123];
  ar[21] = z[125];
  ar[22] = z[128];
  ar[23] = z[129];
  ar[24] = -z[19]*z[9] - z[89];
  ar[25] = z[116] - z[55]*z[9];
  ar[26] = -front_.Ixx*z[112] - front_.Iyy*z[130] - rear_.Iyy - front_.m*(z[112]*z[131] + z[130]*z[131] + pow(z[88], 2)) - rear_.m*(pow(z[114], 2) + pow(z[81], 2));
  ar[27] = z[133];
  ar[28] = z[135];
  ar[29] = z[137];
  ar[30] = z[138];
  ar[31] = z[140];
  ar[32] = z[139];
  ar[33] = z[142];
  ar[34] = z[144];
  ar[35] = z[145];
  ar[36] = z[93];
  ar[37] = z[117];
  ar[38] = z[133];
  ar[39] = -front_.Izz - front_.m*(pow(front_.r, 2)*z[12] + pow(z[132], 2));
  ar[40] = 0;
  ar[41] = z[147];
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = z[148];
  ar[46] = z[149];
  ar[47] = z[150];
  ar[48] = z[97];
  ar[49] = 0;
  ar[50] = z[135];
  ar[51] = 0;
  ar[52] = -rear_.J - z[151]*pow(z[30], 2);
  ar[53] = 0;
  ar[54] = z[152];
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = z[101];
  ar[61] = z[120];
  ar[62] = z[137];
  ar[63] = z[147];
  ar[64] = 0;
  ar[65] = -front_.J - front_.m*z[37]*pow(z[41], 2);
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[153];
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = z[102];
  ar[73] = 0;
  ar[74] = z[138];
  ar[75] = 0;
  ar[76] = z[152];
  ar[77] = 0;
  ar[78] = -rear_.m;
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = z[104];
  ar[85] = z[121];
  ar[86] = z[140];
  ar[87] = 0;
  ar[88] = 0;
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = -rear_.m*(z[154]*z[24] + z[154]*z[25] + z[27]);
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
  ar[96] = z[105];
  ar[97] = z[123];
  ar[98] = z[139];
  ar[99] = 0;
  ar[100] = 0;
  ar[101] = 0;
  ar[102] = 0;
  ar[103] = 0;
  ar[104] = -rear_.m*(z[1] + z[24]*z[4] + z[35]);
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = z[107];
  ar[109] = z[125];
  ar[110] = z[142];
  ar[111] = z[148];
  ar[112] = 0;
  ar[113] = z[153];
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = -front_.m;
  ar[118] = 0;
  ar[119] = 0;
  ar[120] = z[110];
  ar[121] = z[128];
  ar[122] = z[144];
  ar[123] = z[149];
  ar[124] = 0;
  ar[125] = 0;
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = 0;
  ar[130] = -front_.m*(z[155]*z[35] + z[155]*z[36] + z[37]);
  ar[131] = z[156];
  ar[132] = z[111];
  ar[133] = z[129];
  ar[134] = z[145];
  ar[135] = z[150];
  ar[136] = 0;
  ar[137] = 0;
  ar[138] = 0;
  ar[139] = 0;
  ar[140] = 0;
  ar[141] = 0;
  ar[142] = z[156];
  ar[143] = -front_.m*(z[12] + z[37]);
}

/** Computes the n-d array of shape (12, 12, 3)
 *
 * @param[out] ar a C-array of with 432 elements
 */
//  void Bicycle::gif_dud_dq(double ar[432]) const;
void Bicycle::gif_dud_dq(double ar[432]) const
{
  double z[584];

  z[0] = cos(state_[1]);
  z[1] = rear_.Iyy*z[0];
  z[2] = sin(state_[1]);
  z[3] = 2*z[2];
  z[4] = sin(state_[2]);
  z[5] = z[0]*z[4];
  z[6] = 2*z[5];
  z[7] = cos(state_[2]);
  z[8] = rear_.Ixz*z[7];
  z[9] = rear_.Ixx*z[4] - z[8];
  z[10] = z[0]*z[7];
  z[11] = rear_.Ixz*z[4];
  z[12] = -rear_.Izz*z[7] + z[11];
  z[13] = z[10]*z[12];
  z[14] = front_.Izz*z[7];
  z[15] = sin(state_[3]);
  z[16] = z[15]*z[2];
  z[17] = cos(state_[3]);
  z[18] = z[17]*z[5];
  z[19] = z[16] - z[18];
  z[20] = front_.Ixz*z[19] + z[0]*z[14];
  z[21] = z[20]*z[7];
  z[22] = z[14]*z[2];
  z[23] = z[0]*z[15];
  z[24] = z[17]*z[2];
  z[25] = z[23] + z[24]*z[4];
  z[26] = front_.Ixz*z[25];
  z[27] = -z[22] + z[26];
  z[28] = 2*z[0]*z[15]*z[4] + 2*z[17]*z[2];
  z[29] = z[0]*z[17];
  z[30] = z[16]*z[4] - z[29];
  z[31] = front_.Iyy*z[30];
  z[32] = front_.Ixz*z[7];
  z[33] = z[0]*z[32];
  z[34] = front_.Ixx*z[19];
  z[35] = z[33] + z[34];
  z[36] = front_.Ixx*z[25];
  z[37] = -z[2]*z[32] + z[36];
  z[38] = 2*rear_.m*z[2];
  z[39] = rear_.a*z[7];
  z[40] = rear_.b*z[4];
  z[41] = -z[39] - z[40];
  z[42] = z[39] + z[40];
  z[43] = z[0]*z[42];
  z[44] = rear_.r*z[10];
  z[45] = pow(z[0], 2);
  z[46] = pow(z[4], 2);
  z[47] = pow(z[7], 2);
  z[48] = z[46] + z[47];
  z[49] = z[45]*z[48];
  z[50] = pow(z[49], -1.0L/2.0L);
  z[51] = rear_.R*z[50];
  z[52] = rear_.r + z[51];
  z[53] = z[10]*z[52];
  z[54] = rear_.b + z[44] - z[53];
  z[55] = rear_.r*z[45];
  z[56] = pow(z[2], 2);
  z[57] = rear_.r*z[56];
  z[58] = z[57]*z[7];
  z[59] = z[45]*z[52];
  z[60] = -rear_.R/sqrt(z[49]) + z[52];
  z[61] = z[56]*z[60];
  z[62] = rear_.b*z[0] + z[55]*z[7] - z[58] - z[59]*z[7] + z[61]*z[7];
  z[63] = rear_.r*z[5];
  z[64] = z[5]*z[52];
  z[65] = rear_.a - z[63] + z[64];
  z[66] = rear_.a*z[0];
  z[67] = z[4]*z[55];
  z[68] = z[4]*z[57];
  z[69] = z[4]*z[59];
  z[70] = z[4]*z[61];
  z[71] = -z[66] + z[67] - z[68] - z[69] + z[70];
  z[72] = 2*front_.m;
  z[73] = z[15]*z[5];
  z[74] = z[24] + z[73];
  z[75] = front_.r*z[10];
  z[76] = z[45]*z[47];
  z[77] = pow(z[19], 2);
  z[78] = z[76] + z[77];
  z[79] = sqrt(z[78]);
  z[80] = 1.0/z[79];
  z[81] = front_.R*z[80];
  z[82] = front_.r + z[81];
  z[83] = z[10]*z[82];
  z[84] = front_.b - z[83];
  z[85] = z[75] + z[84];
  z[86] = z[74]*z[85];
  z[87] = front_.b*z[30];
  z[88] = front_.r*z[2];
  z[89] = z[7]*z[74];
  z[90] = z[88]*z[89];
  z[91] = z[30]*z[75];
  z[92] = z[30]*z[83];
  z[93] = pow(z[78], -3.0L/2.0L);
  z[94] = front_.R*z[93];
  z[95] = z[0]*z[47];
  z[96] = z[2]*z[95];
  z[97] = z[19]*z[25];
  z[98] = -z[96] + z[97];
  z[99] = z[0]*z[98];
  z[100] = z[2]*z[81] + z[88] + z[94]*z[99];
  z[101] = z[100]*z[89];
  z[102] = z[101] - z[87] - z[90] - z[91] + z[92];
  z[103] = -front_.a;
  z[104] = front_.r*z[19];
  z[105] = -z[104];
  z[106] = z[19]*z[82];
  z[107] = z[103] + z[105] + z[106];
  z[108] = z[107]*z[74];
  z[109] = front_.a*z[30];
  z[110] = front_.r*z[25];
  z[111] = z[110]*z[74];
  z[112] = z[104]*z[30];
  z[113] = z[106]*z[30];
  z[114] = z[25]*z[81];
  z[115] = front_.R*z[19]*z[93];
  z[116] = z[115]*z[98];
  z[117] = -z[110] - z[114] + z[116];
  z[118] = z[117]*z[74];
  z[119] = z[109] - z[111] + z[112] - z[113] - z[118];
  z[120] = front_.a*z[7];
  z[121] = -front_.b*z[19] + z[0]*z[120];
  z[122] = z[120]*z[2];
  z[123] = front_.b*z[25];
  z[124] = z[25]*z[83];
  z[125] = z[7]*z[82];
  z[126] = z[125]*z[19];
  z[127] = z[126]*z[2];
  z[128] = z[100]*z[19];
  z[129] = z[128]*z[7];
  z[130] = z[10]*z[117];
  z[131] = -z[122] - z[123] + z[124] + z[127] - z[129] + z[130];
  z[132] = rear_.Izz*z[4] + z[8];
  z[133] = rear_.Ixx*z[7] + z[11];
  z[134] = front_.Izz*z[4] + z[17]*z[32];
  z[135] = front_.Iyy*z[7];
  z[136] = 2*z[15]*z[74];
  z[137] = front_.Ixz*z[4];
  z[138] = front_.Ixx*z[17];
  z[139] = z[138]*z[7];
  z[140] = z[137] + z[139];
  z[141] = z[17]*z[7];
  z[142] = rear_.b*z[7];
  z[143] = rear_.a*z[4];
  z[144] = z[142] - z[143];
  z[145] = z[65]*z[7];
  z[146] = z[145]*z[56];
  z[147] = z[4]*z[54];
  z[148] = z[147]*z[56];
  z[149] = front_.b*z[15];
  z[150] = z[149]*z[7];
  z[151] = z[23]*z[47];
  z[152] = z[151]*z[82];
  z[153] = z[150] - z[152];
  z[154] = front_.r*z[4];
  z[155] = z[154]*z[74];
  z[156] = z[17]*z[19];
  z[157] = z[156] + z[5];
  z[158] = front_.R*z[157]*z[93];
  z[159] = z[154] - z[158]*z[95] + z[4]*z[81];
  z[160] = z[159]*z[74];
  z[161] = front_.r*z[151] + z[153] - z[155] + z[160];
  z[162] = z[107]*z[7]*z[74];
  z[163] = front_.a*z[15];
  z[164] = front_.r*z[17];
  z[165] = z[164]*z[74];
  z[166] = z[15]*z[19];
  z[167] = z[166]*z[82];
  z[168] = -z[163] + z[165] + z[167];
  z[169] = z[104]*z[15];
  z[170] = -z[158]*z[19] + z[164] + z[17]*z[81];
  z[171] = z[170]*z[74];
  z[172] = z[168] - z[169] - z[171];
  z[173] = front_.b*z[17];
  z[174] = z[173]*z[7];
  z[175] = z[29]*z[47]*z[82];
  z[176] = z[174] - z[175];
  z[177] = front_.a*z[4];
  z[178] = z[106]*z[4];
  z[179] = z[170]*z[95];
  z[180] = z[159]*z[19];
  z[181] = z[176] - z[177] + z[178] + z[179] - z[180];
  z[182] = -2*z[0]*z[17]*z[4] + 2*z[15]*z[2];
  z[183] = z[19]*z[85];
  z[184] = -front_.b + z[83];
  z[185] = pow(z[74], 2);
  z[186] = z[185]*z[94];
  z[187] = z[10]*z[186];
  z[188] = z[184] + z[187] - z[75];
  z[189] = z[77]*z[94];
  z[190] = z[10]*z[189];
  z[191] = -z[189] + z[82];
  z[192] = z[10]*z[191];
  z[193] = z[184] - z[190] - z[192];
  z[194] = z[77]*z[82];
  z[195] = front_.r*z[77];
  z[196] = front_.r*z[185];
  z[197] = z[185]*z[191];
  z[198] = z[195] - z[196] + z[197];
  z[199] = front_.a*z[19] - z[194] + z[198];
  z[200] = z[132]*z[7];
  z[201] = z[133]*z[4];
  z[202] = z[134]*z[7];
  z[203] = z[15]*z[30];
  z[204] = z[135]*z[203];
  z[205] = rear_.m*z[2];
  z[206] = z[0]*z[48]*z[60];
  z[207] = z[0]*z[46];
  z[208] = z[207]*z[52];
  z[209] = z[52]*z[95];
  z[210] = z[208] + z[209];
  z[211] = -z[142] + z[143] + z[210];
  z[212] = z[205]*(rear_.r*z[4]*z[62] - rear_.r*z[7]*z[71] - z[206]*z[42] + z[211]*z[41] + z[44]*z[65] + z[54]*z[63]);
  z[213] = z[100]*z[47];
  z[214] = z[15]*z[213] + z[154]*z[30];
  z[215] = z[164]*z[30];
  z[216] = z[117]*z[15];
  z[217] = z[215] + z[216];
  z[218] = z[17]*z[213];
  z[219] = z[117]*z[4] - z[218];
  z[220] = -z[150] + z[152];
  z[221] = z[155] + z[220];
  z[222] = -z[165];
  z[223] = -z[167];
  z[224] = z[163] + z[222] + z[223];
  z[225] = z[224]*z[7];
  z[226] = -z[174] + z[175];
  z[227] = -z[178];
  z[228] = z[177] + z[226] + z[227];
  z[229] = front_.m*(z[102]*z[221] + z[119]*z[225] + z[121]*z[219] + z[131]*z[228] + z[162]*z[217] - z[214]*z[86]);
  z[230] = z[137]*z[17];
  z[231] = -z[14] + z[230];
  z[232] = z[138]*z[4];
  z[233] = z[232] - z[32];
  z[234] = pow(z[15], 2);
  z[235] = z[0]*z[17]*z[7];
  z[236] = z[4]*z[74];
  z[237] = z[51]*z[95];
  z[238] = z[0]*z[211];
  z[239] = z[0]*z[15]*z[7];
  z[240] = front_.r*z[89] - z[125]*z[73] + z[149]*z[4] + z[154]*z[239] - z[159]*z[239];
  z[241] = z[0]*z[221];
  z[242] = front_.a + z[104] - z[106];
  z[243] = -z[15]*z[177] - z[151]*z[164] + z[151]*z[170] + z[155]*z[17] + z[167]*z[4];
  z[244] = z[0]*z[168]*z[47];
  z[245] = z[163] + z[169] + z[222] + z[223];
  z[246] = z[171] + z[245];
  z[247] = z[159]*z[235];
  z[248] = z[0]*z[4]*z[7];
  z[249] = z[120] - z[125]*z[18] - z[126] + z[170]*z[248] + z[173]*z[4] - z[247];
  z[250] = -z[179] + z[180];
  z[251] = z[228] + z[250];
  z[252] = -front_.Iyy*z[15]*z[236] + front_.Iyy*z[234]*z[95] - front_.m*(-z[0]*z[228]*z[251] + z[121]*z[249] + z[161]*z[241] + z[240]*z[86] - z[242]*z[243]*z[74] + z[244]*z[246]) + rear_.m*(-rear_.r*z[0]*z[46]*z[51]*z[56] - z[0]*pow(z[42], 2) - z[144]*z[238] - z[237]*z[57] - z[54]*z[58] + z[65]*z[68]) + z[10]*z[133] + z[13] + z[132]*z[5] + z[134]*z[5] + z[140]*z[235] - z[5]*z[9];
  z[253] = z[17]*z[74];
  z[254] = -z[135]*z[166] + z[135]*z[253];
  z[255] = front_.Ixx*z[7];
  z[256] = z[188]*z[19];
  z[257] = z[221]*z[256];
  z[258] = z[154]*z[19];
  z[259] = front_.R*z[19]*z[74]*z[93];
  z[260] = z[151]*z[259];
  z[261] = z[176] + z[258] + z[260];
  z[262] = z[0]*z[17]*z[47];
  z[263] = z[259]*z[262];
  z[264] = z[191]*z[236];
  z[265] = z[220] + z[263] + z[264];
  z[266] = front_.a*z[17];
  z[267] = z[15]*z[74];
  z[268] = front_.r*z[267];
  z[269] = z[156]*z[82];
  z[270] = z[266] + z[268] - z[269];
  z[271] = z[164]*z[19];
  z[272] = z[191]*z[267];
  z[273] = z[270] + z[271] - z[272];
  z[274] = z[168]*z[7];
  z[275] = z[228]*z[74];
  z[276] = z[190] + z[192] + z[84];
  z[277] = z[54]*z[7];
  z[278] = z[4]*z[65];
  z[279] = z[277]*z[61] - z[278]*z[61];
  z[280] = rear_.a + z[5]*z[51] + z[63];
  z[281] = z[10]*z[51];
  z[282] = rear_.b - z[281] - z[44];
  z[283] = z[15]*z[7];
  z[284] = z[121]*z[283];
  z[285] = z[17]*z[7]*z[74];
  z[286] = z[285]*z[85];
  z[287] = front_.r*z[203];
  z[288] = -z[117]*z[17] + z[287];
  z[289] = z[17]*z[84];
  z[290] = -z[266] - z[268] + z[269];
  z[291] = z[15]*z[84];
  z[292] = -front_.m*(-z[100]*z[284] + z[100]*z[286] + z[102]*z[289] + z[108]*z[288] + z[119]*z[290] - z[131]*z[291]) - rear_.m*(z[279] - z[280]*z[71] + z[282]*z[62]) - z[1] + z[17]*z[31];
  z[293] = z[137]*z[15];
  z[294] = z[138]*z[15];
  z[295] = front_.Iyy*z[15]*z[17];
  z[296] = z[280]*z[7];
  z[297] = z[282]*z[4];
  z[298] = front_.r*z[234] + z[17]*z[170];
  z[299] = z[290]*z[7];
  z[300] = -front_.m*(-z[121]*z[15]*z[159] + z[159]*z[253]*z[85] + z[161]*z[289] - z[162]*z[298] + z[172]*z[299] - z[181]*z[291]) - z[205]*(z[145]*z[52] + z[147]*z[52] + z[296]*z[51] + z[297]*z[51]) - z[295]*z[7];
  z[301] = z[235]*z[82];
  z[302] = z[239]*z[259];
  z[303] = -z[173] + z[301] - z[302];
  z[304] = z[17]*z[19]*z[84];
  z[305] = z[0]*z[17]*z[7]*z[74];
  z[306] = z[115]*z[305];
  z[307] = -z[149] + z[239]*z[82] + z[306];
  z[308] = z[191]*z[253] + z[245];
  z[309] = -front_.Ixx*z[267] + front_.Iyy*z[156] + front_.Iyy*z[267] - front_.m*(z[108]*z[308] + z[121]*z[303] + z[188]*z[304] - z[193]*z[267]*z[84] + z[199]*z[290] + z[307]*z[86]);
  z[310] = z[30]*z[74]*z[85];
  z[311] = front_.r*z[74];
  z[312] = z[19]*z[81];
  z[313] = front_.a + z[105] - z[312];
  z[314] = -front_.m*(-front_.r*z[310] + z[102]*z[311] + z[117]*z[121] + z[131]*z[313]) + z[22] - z[26];
  z[315] = z[7]*z[85];
  z[316] = z[170]*z[7];
  z[317] = z[103] + z[104] + z[312];
  z[318] = z[0]*(-front_.m*(z[121]*z[316] + z[161]*z[311] + z[251]*z[317] + z[268]*z[315]) + z[134]);
  z[319] = -z[74]*(front_.Ixz + front_.m*(z[104]*z[188] - z[104]*z[85] - z[121]*z[191] + z[193]*z[313]));
  z[320] = -rear_.J*z[0] - rear_.m*(z[279] - z[53]*z[62] - z[64]*z[71]);
  z[321] = rear_.m*z[0]*z[2];
  z[322] = -z[321]*z[52]*(z[145] + z[147]);
  z[323] = z[110] + z[114] - z[116];
  z[324] = z[323]*z[74];
  z[325] = -z[101] + z[87] + z[90] + z[91] - z[92];
  z[326] = z[111] - z[112];
  z[327] = -z[109] + z[113] + z[118] + z[326];
  z[328] = front_.J*z[30] - front_.m*(z[101]*z[85] - z[106]*z[327] - z[242]*z[324] + z[325]*z[83]);
  z[329] = front_.J*z[15];
  z[330] = -z[0]*(front_.m*(z[126]*z[172] + z[160]*z[85] - z[161]*z[83] - z[162]*z[170]) + z[329]*z[7]);
  z[331] = front_.J*z[19] - front_.m*(z[106]*z[199] + z[183]*z[187] - z[197]*z[242] - z[256]*z[83]);
  z[332] = rear_.m*z[50];
  z[333] = z[66] - z[67] + z[68] + z[69] - z[70];
  z[334] = -z[332]*(z[10]*z[62] - z[333]*z[5]);
  z[335] = z[321]*(z[145]*z[50] + z[147]*z[50]);
  z[336] = rear_.m*z[2]*z[50];
  z[337] = 2*z[47];
  z[338] = z[42]*z[45];
  z[339] = z[10]*z[333];
  z[340] = z[5]*z[62];
  z[341] = -z[336]*(z[145]*z[45] + z[147]*z[45] - z[338]*(z[337] + 2*z[46]) + z[339] + z[340]);
  z[342] = rear_.m*z[0];
  z[343] = z[46]*z[56];
  z[344] = 1.0/z[48];
  z[345] = rear_.R*z[344]/z[0];
  z[346] = z[47]*z[56];
  z[347] = z[45]*z[48]*z[50];
  z[348] = z[50]*z[56];
  z[349] = z[342]*(-z[144]*z[347] - z[277]*z[348] + z[278]*z[348] - z[343]*z[345] - z[345]*z[346]);
  z[350] = -rear_.m*(z[146] + z[148] + z[338] - z[339] - z[340] - z[42]*z[56]);
  z[351] = -z[321]*(z[144] - z[207]*z[51] - z[237] - z[277] + z[278]);
  z[352] = front_.m*z[80];
  z[353] = z[2]*z[74];
  z[354] = z[25]*z[74];
  z[355] = z[96] - z[97];
  z[356] = 1.0/z[78];
  z[357] = z[356]*z[74];
  z[358] = z[352]*(-z[0]*z[355]*z[356]*z[7]*z[74]*z[85] - z[10]*z[102] + z[107]*z[19]*z[355]*z[357] + z[107]*z[354] + z[119]*z[19] + z[315]*z[353]);
  z[359] = front_.m*z[0]*z[80];
  z[360] = z[157]*z[74];
  z[361] = z[0]*z[356]*z[360]*z[47];
  z[362] = z[157]*z[19]*z[356];
  z[363] = z[19]*z[7];
  z[364] = z[359]*(-z[10]*z[161] - z[107]*z[285] + z[162]*z[362] + z[172]*z[363] + z[236]*z[85] - z[361]*z[85]);
  z[365] = z[107]*z[185];
  z[366] = z[185]*z[356];
  z[367] = z[352]*(z[0]*z[183]*z[185]*z[356]*z[7] - z[0]*z[188]*z[19]*z[7] - z[107]*z[366]*z[77] + z[19]*z[199] + z[365]);
  z[368] = z[185]*z[80];
  z[369] = z[368]*z[85];
  z[370] = z[19]*z[80];
  z[371] = z[2]*z[7];
  z[372] = z[107]*z[185]*z[80];
  z[373] = z[0]*z[7]*z[80];
  z[374] = z[19]*z[93];
  z[375] = z[0]*z[355]*z[7]*z[93];
  z[376] = z[3]*z[95];
  z[377] = z[182]*z[25] - z[376];
  z[378] = z[356]*z[76];
  z[379] = z[355]*z[378];
  z[380] = z[356]*z[77];
  z[381] = z[355]*z[380];
  z[382] = z[377] + z[379] + z[381];
  z[383] = z[382]*z[80];
  z[384] = z[74]*z[80];
  z[385] = z[0]*z[7]*z[74]*z[80];
  z[386] = front_.m*(z[102]*z[19]*z[384] - z[107]*z[30]*z[373]*z[74] + z[119]*z[385] - z[121]*z[383] - z[131]*z[79] + z[185]*z[355]*z[374]*z[85] + z[25]*z[369] - z[310]*z[370] + z[365]*z[375] - z[371]*z[372]);
  z[387] = front_.m*z[0];
  z[388] = z[157]*z[378];
  z[389] = z[157]*z[380];
  z[390] = z[388] + z[389];
  z[391] = -z[17]*z[182] + z[390] - z[6];
  z[392] = z[391]*z[80];
  z[393] = z[161]*z[19];
  z[394] = z[387]*(z[0]*z[107]*z[15]*z[384]*z[47] + z[0]*z[107]*z[157]*z[185]*z[47]*z[93] + z[0]*z[172]*z[384]*z[47] - z[121]*z[392]*z[7] - z[141]*z[369] + z[15]*z[370]*z[7]*z[74]*z[85] + z[157]*z[185]*z[363]*z[85]*z[93] - z[181]*z[79] - z[372]*z[4] + z[384]*z[393]);
  z[395] = front_.m*z[74];
  z[396] = z[77]*z[80];
  z[397] = z[185]*z[77];
  z[398] = z[397]*z[93];
  z[399] = z[0]*z[19]*z[7]*z[80];
  z[400] = z[0]*z[185]*z[19]*z[7]*z[93];
  z[401] = z[121]*z[19];
  z[402] = z[378] + z[380];
  z[403] = z[402] - 2;
  z[404] = -z[395]*(-z[188]*z[396] - z[199]*z[373] - z[242]*z[399] - z[242]*z[400] - z[276]*z[79] - z[369] + z[396]*z[85] + z[398]*z[85] - z[401]*z[403]*z[80]);
  z[405] = z[2]*z[7]*z[74];
  z[406] = -front_.m*(-z[10]*z[327] - z[121]*z[30] - z[19]*z[325] + z[242]*z[405] + z[354]*z[85] - z[74]*(z[122] + z[123] - z[124] - z[127] + z[129] - z[130]));
  z[407] = -z[387]*(z[236]*z[242] - z[246]*z[95] - z[251]*z[74] + z[284] - z[286] + z[393]);
  z[408] = -front_.m*(z[10]*z[199] - z[185]*z[276] + z[185]*z[85] + z[188]*z[77] - z[401]);
  z[409] = z[7]*z[9];
  z[410] = z[12]*z[4];
  z[411] = z[17]*z[35];
  z[412] = z[226] - z[258] - z[260];
  z[413] = z[153] - z[263] - z[264];
  z[414] = pow(rear_.r, 2);
  z[415] = z[135]*z[234];
  z[416] = z[140]*z[17];
  z[417] = rear_.m*z[42];
  z[418] = z[140]*z[15];
  z[419] = z[168]*z[47];
  z[420] = rear_.m*rear_.r;
  z[421] = -rear_.b + z[281] + z[44];
  z[422] = z[100]*z[17]*z[7];
  z[423] = z[100]*z[15]*z[7];
  z[424] = -front_.m*(-z[214]*z[289] + z[217]*z[299] - z[219]*z[291] + z[221]*z[422] + z[225]*z[288] - z[228]*z[423]) - z[420]*(z[10]*z[280] - z[421]*z[5]);
  z[425] = z[15]*z[32];
  z[426] = z[282]*z[7];
  z[427] = z[280]*z[4];
  z[428] = z[208] + z[209] - z[427];
  z[429] = z[426] + z[428];
  z[430] = z[298]*z[95];
  z[431] = -front_.m*(z[159]*z[221]*z[29] - z[159]*z[228]*z[23] - z[224]*z[430] + z[240]*z[289] + z[243]*z[290] - z[249]*z[291]) - z[2]*z[420]*z[429] - z[295]*z[4];
  z[432] = pow(z[17], 2);
  z[433] = -front_.m*(z[221]*z[307] + z[225]*z[308] + z[228]*z[303] + z[273]*z[299] + z[289]*z[412] - z[291]*z[413]) + z[135]*z[432] + z[234]*z[255] - z[415];
  z[434] = front_.r*z[221];
  z[435] = z[218] + z[323]*z[4];
  z[436] = -front_.m*(-z[214]*z[311] - z[228]*z[323] - z[30]*z[434] + z[317]*z[435]);
  z[437] = -front_.m*(z[10]*z[170]*z[228] + z[239]*z[434] + z[240]*z[311] + z[249]*z[313]) + z[231];
  z[438] = z[191]*z[74];
  z[439] = front_.m*(z[104]*z[221] + z[228]*z[438] - z[311]*z[412] - z[313]*z[413]) + z[425];
  z[440] = front_.m*z[7];
  z[441] = z[0]*z[214];
  z[442] = -z[15]*z[323] + z[215];
  z[443] = -z[440]*(z[100]*z[221] + z[106]*z[442] - z[168]*z[323] + z[441]*z[82]);
  z[444] = z[0]*z[159];
  z[445] = -front_.m*(z[106]*z[243] - z[179]*z[224] + z[221]*z[444] - z[240]*z[83]) - z[329]*z[4];
  z[446] = z[7]*(front_.J*z[17] - front_.m*(z[0]*z[261]*z[82] + z[106]*z[273] - z[168]*z[438] + z[241]*z[259]));
  z[447] = z[46]*z[55];
  z[448] = z[47]*z[55];
  z[449] = z[0]*z[48];
  z[450] = z[336]*(z[211]*z[449] - 2*z[447] - 2*z[448] + z[45]*pow(z[48], 2)*z[60]);
  z[451] = -z[347]*z[417];
  z[452] = z[48]*z[56];
  z[453] = -rear_.m*(z[238] - z[447] - z[448] - z[452]*z[60] + z[46]*z[57] + z[47]*z[57]);
  z[454] = -z[2]*z[417];
  z[455] = front_.m*z[7]*z[80];
  z[456] = z[0]*z[356];
  z[457] = z[19]*z[355]*z[356];
  z[458] = z[455]*(z[19]*z[217] + z[2]*z[221] - z[221]*z[355]*z[456] + z[224]*z[25] + z[224]*z[457] + z[441]);
  z[459] = z[352]*(z[0]*z[224]*z[362]*z[47] - z[10]*z[240] + z[19]*z[243] - z[221]*z[388] + z[221]*z[5] - z[224]*z[262]);
  z[460] = z[224]*z[74];
  z[461] = z[19]*z[221]*z[74];
  z[462] = z[455]*(-z[0]*z[412] + z[19]*z[273] - z[380]*z[460] + z[456]*z[461] + z[460]);
  z[463] = z[221]*z[25];
  z[464] = z[19]*z[221]*z[80];
  z[465] = z[93]*z[98];
  z[466] = z[19]*z[214];
  z[467] = z[442]*z[95];
  z[468] = -z[378]*z[98] - z[380]*z[98];
  z[469] = z[377] + z[468];
  z[470] = -front_.m*(-z[0]*z[168]*z[465]*z[47]*z[74] - z[2]*z[419]*z[74]*z[80] + z[228]*z[469]*z[80] - z[244]*z[30]*z[80] + z[30]*z[464] - z[384]*z[463] + z[384]*z[466] - z[384]*z[467] - z[435]*z[79] + z[461]*z[465]);
  z[471] = pow(z[7], 3);
  z[472] = z[157]*z[74]*z[93];
  z[473] = z[19]*z[240];
  z[474] = z[10]*z[243];
  z[475] = front_.m*(z[0]*z[19]*z[221]*z[472]*z[7] - z[0]*z[224]*z[4]*z[7]*z[74]*z[80] + z[15]*z[224]*z[45]*z[471]*z[80] - z[221]*z[305]*z[80] + z[224]*z[45]*z[471]*z[472] - z[228]*z[373]*z[391] + z[239]*z[464] - z[249]*z[79] + z[384]*z[473] + z[384]*z[474]);
  z[476] = z[19]*z[261];
  z[477] = z[273]*z[95];
  z[478] = z[19]*z[228];
  z[479] = -front_.m*(-z[0]*z[168]*z[185]*z[374]*z[47] - z[221]*z[368] + z[221]*z[396] + z[221]*z[398] - z[244]*z[370] - z[265]*z[79] + z[384]*z[476] - z[384]*z[477] - z[403]*z[478]*z[74]*z[80]);
  z[480] = -front_.m*(z[2]*z[419] - z[228]*z[30] - z[435]*z[74] + z[463] - z[466] + z[467]);
  z[481] = -front_.m*(z[168]*z[248] - z[221]*z[235] + z[228]*z[239] + z[249]*z[74] + z[473] + z[474]);
  z[482] = -front_.m*(z[221]*z[74] - z[265]*z[74] - z[476] + z[477] - z[478]);
  z[483] = rear_.m*z[2]*z[60];
  z[484] = z[421]*z[7];
  z[485] = z[7]*z[84];
  z[486] = z[234]*z[485];
  z[487] = z[432]*z[485];
  z[488] = z[4]*z[421];
  z[489] = rear_.m*(z[296] - z[488]);
  z[490] = z[489]*z[52];
  z[491] = z[159]*z[84];
  z[492] = front_.m*(-z[101]*z[164] + z[215]*z[84] + z[216]*z[84] - z[317]*z[423]);
  z[493] = z[15]*z[7]*z[84];
  z[494] = z[15]*z[317];
  z[495] = -z[387]*(z[159]*z[165] + z[159]*z[494] + z[164]*z[493] - z[170]*z[493]);
  z[496] = -front_.Ixz*z[17] - front_.m*(-z[271]*z[84] + z[272]*z[84] - z[303]*z[317] + z[307]*z[311]);
  z[497] = z[483]*(z[210] - z[426] + z[427]);
  z[498] = -z[0]*z[490];
  z[499] = z[17]*z[323] + z[287];
  z[500] = -front_.m*(-z[100]*z[175] + z[106]*z[499] - z[270]*z[323] + z[422]*z[84]);
  z[501] = z[387]*(z[126]*z[298] - z[159]*z[289] + z[159]*z[301] + z[290]*z[316]);
  z[502] = -front_.m*(z[106]*z[308] - z[270]*z[438] + z[306]*z[84] - z[307]*z[83]) + z[329];
  z[503] = -z[336]*(z[207]*z[60] + z[60]*z[95]);
  z[504] = rear_.m*z[0]*z[50];
  z[505] = z[504]*(z[296] + z[297]);
  z[506] = z[332]*(-z[296]*z[45] + z[45]*z[488]);
  z[507] = rear_.m*z[0]*z[2]*z[50];
  z[508] = -z[507]*(z[428] - z[484]);
  z[509] = -z[2]*z[489];
  z[510] = z[342]*z[429];
  z[511] = z[356]*z[84];
  z[512] = z[352]*(-z[0]*z[17]*z[355]*z[511]*z[7] - z[100]*z[262] + z[19]*z[288] + z[24]*z[485] + z[25]*z[290] + z[290]*z[457]);
  z[513] = -z[359]*(z[0]*z[157]*z[17]*z[47]*z[511] - z[141]*z[270] + z[157]*z[19]*z[270]*z[356]*z[7] + z[247] - z[289]*z[4] + z[298]*z[363]);
  z[514] = z[290]*z[74];
  z[515] = z[352]*(z[0]*z[17]*z[19]*z[511]*z[7]*z[74] - z[10]*z[307] + z[19]*z[308] - z[380]*z[514] + z[514]);
  z[516] = z[253]*z[84];
  z[517] = z[80]*z[84];
  z[518] = z[290]*z[80];
  z[519] = z[17]*z[19]*z[80];
  z[520] = front_.m*(-z[0]*z[30]*z[518]*z[7] + z[101]*z[519] + z[15]*z[382]*z[517] - z[17]*z[19]*z[30]*z[517] + z[25]*z[516]*z[80] + z[288]*z[385] + z[304]*z[355]*z[74]*z[93] + z[375]*z[514] - z[405]*z[518] + z[423]*z[79]);
  z[521] = z[15]*z[79];
  z[522] = z[156]*z[159];
  z[523] = z[387]*(z[0]*z[290]*z[47]*z[472] + z[151]*z[518] + z[157]*z[304]*z[7]*z[74]*z[93] + z[159]*z[521] - z[236]*z[518] - z[384]*z[430] + z[384]*z[522] + z[392]*z[493] - z[432]*z[517]*z[7]*z[74] + z[493]*z[519]);
  z[524] = z[173] - z[301] + z[302];
  z[525] = z[19]*z[307];
  z[526] = z[10]*z[308];
  z[527] = -front_.m*(z[15]*z[19]*z[403]*z[517]*z[74] - z[270]*z[399] - z[270]*z[400] - z[289]*z[368] + z[289]*z[396] + z[289]*z[398] - z[384]*z[525] - z[384]*z[526] - z[524]*z[79]);
  z[528] = z[100]*z[7];
  z[529] = -front_.m*(z[10]*z[499] + z[156]*z[528] + z[203]*z[84] + z[25]*z[289] - z[267]*z[528] + z[270]*z[371]);
  z[530] = z[387]*(z[159]*z[267] + z[290]*z[4] + z[430] + z[486] + z[487] - z[522]);
  z[531] = -front_.m*(z[166]*z[84] + z[516] - z[524]*z[74] + z[525] + z[526]);
  z[532] = pow(front_.r, 2);
  z[533] = z[30]*z[74];
  z[534] = 2*front_.m*z[0]*z[7];
  z[535] = front_.m*front_.r;
  z[536] = z[0]*z[30];
  z[537] = z[100]*z[74];
  z[538] = -z[535]*z[7]*(z[536]*z[82] + z[537]);
  z[539] = z[0]*z[535]*(z[152] - z[160]);
  z[540] = front_.m*front_.r*z[0]*z[19]*z[7];
  z[541] = -z[540]*(z[186] + z[82]);
  z[542] = front_.m*front_.r*z[80];
  z[543] = z[542]*z[7]*(z[353] + z[357]*z[99] + z[536]);
  z[544] = z[0]*z[542]*(-z[151] + z[236] - z[361]);
  z[545] = z[540]*z[80]*(z[366] + 1);
  z[546] = 2*z[80];
  z[547] = front_.r*z[185]*z[19]*z[93];
  z[548] = front_.m*(-front_.r*z[19]*z[30]*z[546]*z[74] + z[110]*z[368] - z[117]*z[79] + z[317]*z[383] + z[355]*z[547]);
  z[549] = front_.m*z[0]*z[7];
  z[550] = z[549]*(front_.r*z[136]*z[19]*z[80] + z[157]*z[547] - z[164]*z[368] - z[170]*z[79] + z[317]*z[392]);
  z[551] = z[77]*z[93];
  z[552] = z[19]*z[317];
  z[553] = z[395]*(z[191]*z[79] - z[195]*z[546] - z[196]*z[551] + z[196]*z[80] + z[552]*z[80]*(-z[378] - z[380] + 2));
  z[554] = -front_.m*(z[30]*z[317] - z[324] + z[326]);
  z[555] = -z[549]*(z[169] + z[171] + z[222] - z[494]);
  z[556] = front_.m*(z[198] - z[552]);
  z[557] = -z[507]*(z[46]*z[60] + z[47]*z[60]);
  z[558] = -z[100]*z[95] + z[19]*z[323];
  z[559] = z[170]*z[19] + z[444];
  z[560] = front_.m*z[182]*z[74];
  z[561] = front_.R*z[45]*z[47];
  z[562] = z[352]*(z[379]*z[82] + z[381]*z[82] + z[558] - z[82]*z[96] + z[82]*z[97]);
  z[563] = -front_.m*z[373]*(z[269] - z[388]*z[82] - z[389]*z[82] + z[5]*z[82] + z[559]);
  z[564] = front_.m*z[19];
  z[565] = pow(z[78], -2);
  z[566] = z[45]*z[47]*z[93];
  z[567] = -z[564]*z[74]*(-z[191]*z[80] + z[194]*z[93] + z[561]*z[565] + z[566]*z[82] - z[80]*z[82]);
  z[568] = z[0]*z[25]*z[82];
  z[569] = z[0]*z[323];
  z[570] = -z[455]*(z[106]*z[353] - z[19]*z[537] + z[568]*z[74] - z[569]*z[74]);
  z[571] = -z[359]*(z[106]*z[236] - z[160]*z[19] - z[175]*z[74] + z[179]*z[74]);
  z[572] = z[397]*z[565];
  z[573] = z[549]*(front_.R*z[572] + z[191]*z[368] - z[368]*z[82]);
  z[574] = -z[440]*(-z[106]*z[2] + z[128] - z[568] + z[569]);
  z[575] = -z[387]*(z[175] + z[227] + z[250]);
  z[576] = z[504]*(-z[343] - z[346] + z[45]*z[46] + z[452] - z[49] + z[76]);
  z[577] = z[185]*z[45]*z[47];
  z[578] = z[565]*z[577];
  z[579] = z[76]*z[80];
  z[580] = z[355]*z[74];
  z[581] = front_.m*(z[182]*z[25]*z[384] - z[30]*z[396] - z[30]*z[579] + z[30]*z[79] - z[376]*z[384] - z[382]*z[384] + z[551]*z[580] + z[566]*z[580]);
  z[582] = -z[549]*(-z[15]*z[396] - z[15]*z[579] + z[17]*z[182]*z[384] - z[360]*z[551] - z[360]*z[566] + z[384]*z[391] + z[384]*z[6] + z[521]);
  z[583] = -z[564]*(-z[185]*z[546] - z[368]*z[403] + z[396] + z[398] + z[577]*z[93] + z[579] - z[79]);

  ar[0] = -z[1]*z[3] - z[10]*z[27] - z[13]*z[3] - z[19]*z[37] + z[2]*z[21] + z[2]*z[6]*z[9] - z[25]*z[35] + z[28]*z[31] - z[38]*(z[41]*z[43] + z[54]*z[62] - z[65]*z[71]) - z[72]*(z[102]*z[86] + z[108]*z[119] + z[121]*z[131]);
  ar[1] = z[0]*(-2*rear_.m*(z[144]*z[43] + z[146]*z[51] + z[148]*z[51]) + z[10]*z[132] + z[10]*z[134] - z[10]*z[9] - z[12]*z[5] - z[133]*z[5] - z[135]*z[136] + z[140]*z[19] + z[141]*z[35] + z[20]*z[4] - z[72]*(z[121]*z[181] + z[161]*z[86] + z[162]*z[172]));
  ar[2] = z[74]*(front_.Iyy*z[182] - 2*z[33] - 2*z[34] - z[72]*(z[107]*z[199] + z[121]*z[193] + z[183]*z[188]));
  ar[3] = -z[140]*z[25] + z[2]*z[200] - z[2]*z[201] + z[2]*z[202] - z[204] - z[212] - z[229];
  ar[4] = z[10]*z[231] + z[19]*z[233] + z[252];
  ar[5] = front_.Ixz*z[151] - front_.m*(-z[121]*z[265] - z[199]*z[274] - z[242]*z[273]*z[89] + z[257] - z[261]*z[86] - z[275]*z[276]) - z[140]*z[74] + z[166]*z[255] + z[254];
  ar[6] = -z[15]*z[36] + z[16]*z[32] + z[292];
  ar[7] = z[0]*(z[293] + z[294]*z[7] + z[300]);
  ar[8] = -z[138]*z[19] - z[29]*z[32] + z[309];
  ar[9] = z[314];
  ar[10] = z[318];
  ar[11] = z[319];
  ar[12] = z[320];
  ar[13] = z[322];
  ar[14] = 0;
  ar[15] = z[328];
  ar[16] = z[330];
  ar[17] = z[331];
  ar[18] = z[334];
  ar[19] = z[335];
  ar[20] = 0;
  ar[21] = z[341];
  ar[22] = z[349];
  ar[23] = 0;
  ar[24] = z[350];
  ar[25] = z[351];
  ar[26] = 0;
  ar[27] = z[358];
  ar[28] = z[364];
  ar[29] = z[367];
  ar[30] = z[386];
  ar[31] = z[394];
  ar[32] = z[404];
  ar[33] = z[406];
  ar[34] = z[407];
  ar[35] = z[408];
  ar[36] = -z[141]*z[37] - z[2]*z[409] - z[2]*z[410] - z[204] - z[212] - z[229] - z[27]*z[4];
  ar[37] = -z[21] + z[252] + z[4]*z[411];
  ar[38] = -front_.m*(z[121]*z[413] + z[162]*z[273] + z[193]*z[275] + z[199]*z[225] + z[257] + z[412]*z[86]) - z[137]*z[74] - z[139]*z[74] + z[254] + z[283]*z[35];
  ar[39] = -2*front_.m*(-z[214]*z[221] + z[217]*z[224]*z[47] + z[219]*z[228]) - 2*z[205]*(z[207]*z[414] - z[211]*z[48]*z[60] + z[414]*z[95]);
  ar[40] = z[141]*z[233] - z[200] + z[201] - z[202] + z[231]*z[4] + 2*z[4]*z[415] + z[4]*z[416] + z[409] + z[410] - z[417]*(2*rear_.a*z[4] - 2*rear_.b*z[7] + 2*z[0]*z[46]*z[52] + 2*z[0]*z[47]*z[52]) - z[72]*(z[221]*z[240] + z[228]*z[249] - z[243]*z[274]);
  ar[41] = z[293]*z[7] + z[294]*z[47] - z[295]*z[337] + z[418]*z[7] + z[72]*(z[221]*z[261] + z[228]*z[265] + z[273]*z[419]);
  ar[42] = z[424];
  ar[43] = z[15]*z[232] - z[425] + z[431];
  ar[44] = -z[230] - z[255]*z[432] + z[433];
  ar[45] = z[436];
  ar[46] = z[437];
  ar[47] = z[439];
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = z[443];
  ar[52] = z[445];
  ar[53] = z[446];
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = 0;
  ar[57] = z[450];
  ar[58] = z[451];
  ar[59] = 0;
  ar[60] = z[453];
  ar[61] = z[454];
  ar[62] = 0;
  ar[63] = z[458];
  ar[64] = z[459];
  ar[65] = z[462];
  ar[66] = z[470];
  ar[67] = z[475];
  ar[68] = z[479];
  ar[69] = z[480];
  ar[70] = z[481];
  ar[71] = z[482];
  ar[72] = -z[15]*z[37] + z[292];
  ar[73] = z[0]*(z[300] + z[418]);
  ar[74] = z[309] - z[411];
  ar[75] = z[424];
  ar[76] = z[15]*z[233] + z[431];
  ar[77] = -z[416] + z[433];
  ar[78] = -2*front_.m*(z[100]*z[486] + z[100]*z[487] + z[288]*z[290]) + 2*z[483]*(z[427] + z[484]);
  ar[79] = -2*z[0]*(front_.m*(z[234]*z[491] - z[298]*z[299] + z[432]*z[491]) + z[490]);
  ar[80] = -2*front_.m*(z[289]*z[307] + z[290]*z[308] - z[291]*z[303]) - 2*z[294] + 2*z[295];
  ar[81] = z[492];
  ar[82] = z[495];
  ar[83] = z[496];
  ar[84] = z[497];
  ar[85] = z[498];
  ar[86] = 0;
  ar[87] = z[500];
  ar[88] = z[501];
  ar[89] = z[502];
  ar[90] = z[503];
  ar[91] = z[505];
  ar[92] = 0;
  ar[93] = z[506];
  ar[94] = z[508];
  ar[95] = 0;
  ar[96] = z[509];
  ar[97] = z[510];
  ar[98] = 0;
  ar[99] = z[512];
  ar[100] = z[513];
  ar[101] = z[515];
  ar[102] = z[520];
  ar[103] = z[523];
  ar[104] = z[527];
  ar[105] = z[529];
  ar[106] = z[530];
  ar[107] = z[531];
  ar[108] = z[314];
  ar[109] = z[318];
  ar[110] = z[319];
  ar[111] = z[436];
  ar[112] = z[437];
  ar[113] = z[439];
  ar[114] = z[492];
  ar[115] = z[495];
  ar[116] = z[496];
  ar[117] = z[72]*(z[117]*z[317] + z[532]*z[533]);
  ar[118] = -z[534]*(-z[170]*z[317] + z[267]*z[532]);
  ar[119] = front_.m*z[28]*(z[19]*z[532] - z[191]*z[317]);
  ar[120] = 0;
  ar[121] = 0;
  ar[122] = 0;
  ar[123] = z[538];
  ar[124] = z[539];
  ar[125] = z[541];
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = 0;
  ar[130] = 0;
  ar[131] = 0;
  ar[132] = 0;
  ar[133] = 0;
  ar[134] = 0;
  ar[135] = z[543];
  ar[136] = z[544];
  ar[137] = z[545];
  ar[138] = z[548];
  ar[139] = z[550];
  ar[140] = z[553];
  ar[141] = z[554];
  ar[142] = z[555];
  ar[143] = z[556];
  ar[144] = z[320];
  ar[145] = z[322];
  ar[146] = 0;
  ar[147] = 0;
  ar[148] = 0;
  ar[149] = 0;
  ar[150] = z[497];
  ar[151] = z[498];
  ar[152] = 0;
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = 2*rear_.m*z[2]*z[206]*z[52];
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = 0;
  ar[160] = 0;
  ar[161] = 0;
  ar[162] = z[557];
  ar[163] = 0;
  ar[164] = 0;
  ar[165] = 0;
  ar[166] = 0;
  ar[167] = 0;
  ar[168] = 0;
  ar[169] = 0;
  ar[170] = 0;
  ar[171] = 0;
  ar[172] = 0;
  ar[173] = 0;
  ar[174] = 0;
  ar[175] = 0;
  ar[176] = 0;
  ar[177] = 0;
  ar[178] = 0;
  ar[179] = 0;
  ar[180] = z[328];
  ar[181] = z[330];
  ar[182] = z[331];
  ar[183] = z[443];
  ar[184] = z[445];
  ar[185] = z[446];
  ar[186] = z[500];
  ar[187] = z[501];
  ar[188] = z[502];
  ar[189] = z[538];
  ar[190] = z[539];
  ar[191] = z[541];
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = -z[558]*z[72]*z[82];
  ar[196] = z[0]*z[559]*z[7]*z[72]*z[82];
  ar[197] = z[560]*z[82]*(-front_.r + z[189] + z[561]*z[93] - z[81]);
  ar[198] = 0;
  ar[199] = 0;
  ar[200] = 0;
  ar[201] = 0;
  ar[202] = 0;
  ar[203] = 0;
  ar[204] = 0;
  ar[205] = 0;
  ar[206] = 0;
  ar[207] = z[562];
  ar[208] = z[563];
  ar[209] = z[567];
  ar[210] = z[570];
  ar[211] = z[571];
  ar[212] = z[573];
  ar[213] = z[574];
  ar[214] = z[575];
  ar[215] = 0;
  ar[216] = z[334];
  ar[217] = z[335];
  ar[218] = 0;
  ar[219] = 0;
  ar[220] = 0;
  ar[221] = 0;
  ar[222] = z[503];
  ar[223] = z[505];
  ar[224] = 0;
  ar[225] = 0;
  ar[226] = 0;
  ar[227] = 0;
  ar[228] = z[557];
  ar[229] = 0;
  ar[230] = 0;
  ar[231] = 0;
  ar[232] = 0;
  ar[233] = 0;
  ar[234] = 0;
  ar[235] = 0;
  ar[236] = 0;
  ar[237] = 0;
  ar[238] = 0;
  ar[239] = 0;
  ar[240] = 0;
  ar[241] = 0;
  ar[242] = 0;
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = z[341];
  ar[253] = z[349];
  ar[254] = 0;
  ar[255] = z[450];
  ar[256] = z[451];
  ar[257] = 0;
  ar[258] = z[506];
  ar[259] = z[508];
  ar[260] = 0;
  ar[261] = 0;
  ar[262] = 0;
  ar[263] = 0;
  ar[264] = 0;
  ar[265] = 0;
  ar[266] = 0;
  ar[267] = 0;
  ar[268] = 0;
  ar[269] = 0;
  ar[270] = 0;
  ar[271] = 0;
  ar[272] = 0;
  ar[273] = -z[38]*(z[207]*z[344] + z[344]*z[95] - z[449]);
  ar[274] = 0;
  ar[275] = 0;
  ar[276] = z[576];
  ar[277] = 0;
  ar[278] = 0;
  ar[279] = 0;
  ar[280] = 0;
  ar[281] = 0;
  ar[282] = 0;
  ar[283] = 0;
  ar[284] = 0;
  ar[285] = 0;
  ar[286] = 0;
  ar[287] = 0;
  ar[288] = z[350];
  ar[289] = z[351];
  ar[290] = 0;
  ar[291] = z[453];
  ar[292] = z[454];
  ar[293] = 0;
  ar[294] = z[509];
  ar[295] = z[510];
  ar[296] = 0;
  ar[297] = 0;
  ar[298] = 0;
  ar[299] = 0;
  ar[300] = 0;
  ar[301] = 0;
  ar[302] = 0;
  ar[303] = 0;
  ar[304] = 0;
  ar[305] = 0;
  ar[306] = 0;
  ar[307] = 0;
  ar[308] = 0;
  ar[309] = z[576];
  ar[310] = 0;
  ar[311] = 0;
  ar[312] = z[0]*z[38]*(z[48] - 1);
  ar[313] = 0;
  ar[314] = 0;
  ar[315] = 0;
  ar[316] = 0;
  ar[317] = 0;
  ar[318] = 0;
  ar[319] = 0;
  ar[320] = 0;
  ar[321] = 0;
  ar[322] = 0;
  ar[323] = 0;
  ar[324] = z[358];
  ar[325] = z[364];
  ar[326] = z[367];
  ar[327] = z[458];
  ar[328] = z[459];
  ar[329] = z[462];
  ar[330] = z[512];
  ar[331] = z[513];
  ar[332] = z[515];
  ar[333] = z[543];
  ar[334] = z[544];
  ar[335] = z[545];
  ar[336] = 0;
  ar[337] = 0;
  ar[338] = 0;
  ar[339] = z[562];
  ar[340] = z[563];
  ar[341] = z[567];
  ar[342] = 0;
  ar[343] = 0;
  ar[344] = 0;
  ar[345] = 0;
  ar[346] = 0;
  ar[347] = 0;
  ar[348] = 0;
  ar[349] = 0;
  ar[350] = 0;
  ar[351] = -z[356]*z[72]*(z[468] + z[98]);
  ar[352] = -z[356]*z[534]*(-z[156] + z[390] - z[5]);
  ar[353] = front_.m*z[182]*z[356]*z[74]*(z[402] - 1);
  ar[354] = 0;
  ar[355] = 0;
  ar[356] = 0;
  ar[357] = 0;
  ar[358] = 0;
  ar[359] = 0;
  ar[360] = z[386];
  ar[361] = z[394];
  ar[362] = z[404];
  ar[363] = z[470];
  ar[364] = z[475];
  ar[365] = z[479];
  ar[366] = z[520];
  ar[367] = z[523];
  ar[368] = z[527];
  ar[369] = z[548];
  ar[370] = z[550];
  ar[371] = z[553];
  ar[372] = 0;
  ar[373] = 0;
  ar[374] = 0;
  ar[375] = z[570];
  ar[376] = z[571];
  ar[377] = z[573];
  ar[378] = 0;
  ar[379] = 0;
  ar[380] = 0;
  ar[381] = 0;
  ar[382] = 0;
  ar[383] = 0;
  ar[384] = 0;
  ar[385] = 0;
  ar[386] = 0;
  ar[387] = 0;
  ar[388] = 0;
  ar[389] = 0;
  ar[390] = -z[72]*(-z[366]*z[96] + z[366]*z[97] - z[378]*z[533] - z[380]*z[533] + z[469] - z[572]*z[98] - z[578]*z[98]);
  ar[391] = -z[534]*(-z[156]*z[366] + z[157]*z[572] + z[157]*z[578] + z[267]*z[378] + z[267]*z[380] - z[366]*z[5] + z[391]);
  ar[392] = z[560]*(-z[366] + 2*z[378] + 2*z[380] + z[572] + z[578] - 2);
  ar[393] = z[581];
  ar[394] = z[582];
  ar[395] = z[583];
  ar[396] = z[406];
  ar[397] = z[407];
  ar[398] = z[408];
  ar[399] = z[480];
  ar[400] = z[481];
  ar[401] = z[482];
  ar[402] = z[529];
  ar[403] = z[530];
  ar[404] = z[531];
  ar[405] = z[554];
  ar[406] = z[555];
  ar[407] = z[556];
  ar[408] = 0;
  ar[409] = 0;
  ar[410] = 0;
  ar[411] = z[574];
  ar[412] = z[575];
  ar[413] = 0;
  ar[414] = 0;
  ar[415] = 0;
  ar[416] = 0;
  ar[417] = 0;
  ar[418] = 0;
  ar[419] = 0;
  ar[420] = 0;
  ar[421] = 0;
  ar[422] = 0;
  ar[423] = 0;
  ar[424] = 0;
  ar[425] = 0;
  ar[426] = z[581];
  ar[427] = z[582];
  ar[428] = z[583];
  ar[429] = z[72]*(z[355] + z[533]);
  ar[430] = z[534]*(z[157] - z[267]);
  ar[431] = 0;
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gif_ud_zero(double ar[12]) const;
void Bicycle::gif_ud_zero(double ar[12]) const
{
  double z[222];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[1]);
  z[2] = state_[8]*state_[9]*z[1];
  z[3] = sin(state_[2]);
  z[4] = state_[9]*z[3];
  z[5] = cos(state_[2]);
  z[6] = z[1]*z[5];
  z[7] = state_[8]*z[6];
  z[8] = z[4] + z[7];
  z[9] = state_[9]*z[5];
  z[10] = z[1]*z[3];
  z[11] = state_[8]*z[10];
  z[12] = z[11] - z[9];
  z[13] = -rear_.Ixx*z[12] + rear_.Ixz*z[8];
  z[14] = -rear_.Ixz*z[12] + rear_.Izz*z[8];
  z[15] = rear_.Iyy*z[2] + z[12]*z[14] + z[13]*z[8];
  z[16] = rear_.J*state_[12];
  z[17] = state_[8]*z[0];
  z[18] = state_[10] + z[17];
  z[19] = z[12]*z[18];
  z[20] = state_[10]*z[4] + state_[10]*z[7] - z[17]*z[4];
  z[21] = state_[10]*z[11] - state_[10]*z[9] + z[17]*z[9];
  z[22] = rear_.Ixz*z[20] + rear_.Iyy*z[19] + rear_.Izz*z[21] + z[12]*z[16] + z[13]*z[18];
  z[23] = z[18]*z[8];
  z[24] = -rear_.Ixx*z[20] - rear_.Ixz*z[21] - rear_.Iyy*z[23] + z[14]*z[18] - z[16]*z[8];
  z[25] = cos(state_[3]);
  z[26] = z[0]*z[25];
  z[27] = sin(state_[3]);
  z[28] = z[10]*z[27];
  z[29] = z[26] + z[28];
  z[30] = state_[11] + z[8];
  z[31] = z[18]*z[27];
  z[32] = z[12]*z[25];
  z[33] = z[31] - z[32];
  z[34] = front_.Ixx*z[33] + front_.Ixz*z[30];
  z[35] = -state_[11]*z[31] + state_[11]*z[32] + z[2]*z[25] + z[20]*z[27];
  z[36] = front_.Ixz*z[33] + front_.Izz*z[30];
  z[37] = front_.Iyy*z[35] + z[30]*z[34] - z[33]*z[36];
  z[38] = z[0]*z[27];
  z[39] = z[10]*z[25];
  z[40] = z[38] - z[39];
  z[41] = front_.J*state_[13];
  z[42] = z[18]*z[25];
  z[43] = z[12]*z[27];
  z[44] = z[42] + z[43];
  z[45] = z[30]*z[44];
  z[46] = state_[11]*z[42] + state_[11]*z[43] + z[2]*z[27] - z[20]*z[25];
  z[47] = front_.Ixx*z[46] - front_.Ixz*z[21] - front_.Iyy*z[45] - z[30]*z[41] + z[36]*z[44];
  z[48] = front_.Izz*z[21];
  z[49] = z[33]*z[41];
  z[50] = z[33]*z[44];
  z[51] = front_.Iyy*z[50];
  z[52] = front_.Ixz*z[46];
  z[53] = z[34]*z[44];
  z[54] = -z[48] + z[49] + z[51] + z[52] - z[53];
  z[55] = state_[16]*z[1];
  z[56] = pow(z[3], 2);
  z[57] = pow(z[5], 2);
  z[58] = z[56] + z[57];
  z[59] = pow(z[1], 2);
  z[60] = z[58]*z[59];
  z[61] = pow(z[60], -1.0L/2.0L);
  z[62] = state_[15]*z[0]*z[61];
  z[63] = rear_.R*z[61];
  z[64] = rear_.r + z[63];
  z[65] = z[10]*z[64];
  z[66] = z[6]*z[64];
  z[67] = rear_.r*z[10];
  z[68] = state_[9]*z[0]*z[5];
  z[69] = state_[10]*z[1]*z[3];
  z[70] = pow(z[60], -3.0L/2.0L);
  z[71] = rear_.R*z[58]*z[59]*z[70];
  z[72] = rear_.r*z[68] + state_[10]*z[67] + z[63]*z[68] + z[63]*z[69] - z[68]*z[71];
  z[73] = rear_.r*z[6];
  z[74] = rear_.r*z[0];
  z[75] = state_[10]*z[1]*z[5];
  z[76] = state_[9]*z[0]*z[3];
  z[77] = state_[10]*z[73] - z[4]*z[74] + z[63]*z[75] - z[63]*z[76] + z[71]*z[76];
  z[78] = z[3]*z[55];
  z[79] = state_[14]*z[61];
  z[80] = state_[12] + z[18];
  z[81] = z[10]*z[62] + z[6]*z[79] - z[66]*z[80] + z[74]*z[8] - z[78];
  z[82] = z[5]*z[55];
  z[83] = z[10]*z[79] + z[12]*z[74] - z[6]*z[62] - z[65]*z[80] + z[82];
  z[84] = -rear_.a*z[19] - rear_.a*z[21] + rear_.b*z[20] + rear_.b*z[23] - state_[9]*z[1]*z[58]*z[62] + state_[9]*z[55] + z[12]*z[72] + z[12]*z[83] - z[20]*z[66] - z[21]*z[65] + z[77]*z[8] + z[8]*z[81];
  z[85] = z[1]*z[84];
  z[86] = rear_.b*z[2];
  z[87] = state_[16]*z[0];
  z[88] = z[4]*z[87];
  z[89] = state_[10]*z[82];
  z[90] = pow(z[18], 2);
  z[91] = rear_.a*z[90];
  z[92] = rear_.r*state_[9]*z[1];
  z[93] = z[8]*z[92];
  z[94] = z[69]*z[79];
  z[95] = z[68]*z[79];
  z[96] = state_[15]*z[59]*z[61];
  z[97] = z[4]*z[96];
  z[98] = z[62]*z[75];
  z[99] = z[21]*z[74];
  z[100] = pow(z[0], 2);
  z[101] = state_[15]*z[100]*z[61];
  z[102] = z[101]*z[4];
  z[103] = state_[8]*z[59]*z[64];
  z[104] = z[103]*z[9];
  z[105] = state_[14]*z[58]*z[59]*z[70];
  z[106] = z[105]*z[68];
  z[107] = state_[15]*z[100]*z[58]*z[59]*z[70];
  z[108] = z[107]*z[4];
  z[109] = rear_.a*z[8] + rear_.b*z[12];
  z[110] = z[109]*z[8];
  z[111] = z[72]*z[80];
  z[112] = z[18]*z[83];
  z[113] = state_[15]*z[58]*z[59]*z[61] - z[12]*z[66] + z[65]*z[8] + z[87];
  z[114] = z[113]*z[8];
  z[115] = -z[102] - z[104] + z[106] + z[108] - z[110] + z[111] + z[112] - z[114] + z[86] + z[88] - z[89] - z[91] + z[93] - z[94] - z[95] + z[97] + z[98] - z[99];
  z[116] = rear_.a*z[2];
  z[117] = state_[10]*z[78];
  z[118] = z[87]*z[9];
  z[119] = rear_.b*z[90];
  z[120] = z[12]*z[92];
  z[121] = z[75]*z[79];
  z[122] = z[76]*z[79];
  z[123] = z[20]*z[74];
  z[124] = z[101]*z[9];
  z[125] = z[62]*z[69];
  z[126] = z[9]*z[96];
  z[127] = z[103]*z[4];
  z[128] = z[105]*z[76];
  z[129] = z[107]*z[9];
  z[130] = z[109]*z[12];
  z[131] = z[77]*z[80];
  z[132] = z[18]*z[81];
  z[133] = z[113]*z[12];
  z[134] = -z[116] - z[117] - z[118] - z[119] + z[120] + z[121] - z[122] + z[123] + z[124] + z[125] - z[126] - z[127] + z[128] - z[129] - z[130] - z[131] - z[132] - z[133];
  z[135] = z[57]*z[59];
  z[136] = pow(z[40], 2);
  z[137] = z[135] + z[136];
  z[138] = sqrt(z[137]);
  z[139] = 1.0/z[138];
  z[140] = front_.R*z[139];
  z[141] = front_.r + z[140];
  z[142] = z[141]*z[6];
  z[143] = front_.b - z[142];
  z[144] = pow(z[44], 2);
  z[145] = front_.a*z[144];
  z[146] = state_[17]*z[139];
  z[147] = z[146]*z[69];
  z[148] = z[146]*z[68];
  z[149] = front_.r*z[29];
  z[150] = z[149]*z[21];
  z[151] = state_[9]*z[1];
  z[152] = state_[11]*z[26] + state_[11]*z[28] + z[151]*z[27] - z[25]*z[75] + z[26]*z[4];
  z[153] = state_[19]*z[152];
  z[154] = -state_[11]*z[38] + state_[11]*z[39] + z[151]*z[25] + z[27]*z[75] - z[38]*z[4];
  z[155] = front_.r*z[154];
  z[156] = z[155]*z[30];
  z[157] = front_.a*z[30] - front_.b*z[33];
  z[158] = z[157]*z[30];
  z[159] = front_.b*z[35];
  z[160] = state_[18]*z[139]*z[29];
  z[161] = z[152]*z[160];
  z[162] = state_[18]*z[139]*z[154];
  z[163] = z[162]*z[40];
  z[164] = z[142]*z[35];
  z[165] = pow(z[137], -3.0L/2.0L);
  z[166] = state_[10]*z[3]*z[5]*z[59];
  z[167] = z[0]*z[151]*z[57];
  z[168] = z[152]*z[40];
  z[169] = z[166] + z[167] - z[168];
  z[170] = z[1]*z[165]*z[169]*z[5];
  z[171] = state_[17]*z[170];
  z[172] = state_[18]*z[29];
  z[173] = z[165]*z[169]*z[40];
  z[174] = z[172]*z[173];
  z[175] = z[141]*z[40];
  z[176] = state_[18]*z[138] + state_[19]*z[29] + z[142]*z[33] - z[175]*z[30];
  z[177] = z[176]*z[30];
  z[178] = state_[13] + z[44];
  z[179] = -front_.R*z[170] + front_.r*z[68] + front_.r*z[69] + z[140]*z[68] + z[140]*z[69];
  z[180] = z[178]*z[179];
  z[181] = state_[19]*z[6];
  z[182] = z[149]*z[33];
  z[183] = z[146]*z[40];
  z[184] = z[160]*z[6];
  z[185] = z[175]*z[178];
  z[186] = z[181] - z[182] - z[183] - z[184] + z[185];
  z[187] = z[186]*z[44];
  z[188] = -z[145] - z[147] - z[148] - z[150] + z[153] + z[156] - z[158] + z[159] - z[161] - z[163] - z[164] + z[171] - z[174] - z[177] + z[180] + z[187];
  z[189] = z[188]*z[29];
  z[190] = state_[19]*z[40] - z[142]*z[178] + z[146]*z[6] + z[149]*z[30] - z[160]*z[40];
  z[191] = front_.R*z[173] + front_.r*z[152] + z[140]*z[152];
  z[192] = z[169]/z[137];
  z[193] = -front_.a*z[21] + front_.a*z[50] + front_.b*z[45] - front_.b*z[46] + state_[18]*z[139]*(z[135]*z[192] + z[136]*z[192] - 2*z[166] - 2*z[167] + 2*z[168]) + state_[19]*z[154] + z[142]*z[46] + z[175]*z[21] - z[179]*z[33] + z[190]*z[30] - z[191]*z[30];
  z[194] = -z[186]*z[33] + z[193];
  z[195] = -front_.r*z[40];
  z[196] = state_[19]*z[69];
  z[197] = state_[19]*z[68];
  z[198] = front_.b*z[144];
  z[199] = z[160]*z[69];
  z[200] = z[160]*z[68];
  z[201] = front_.a*z[35];
  z[202] = z[155]*z[33];
  z[203] = z[146]*z[152];
  z[204] = z[157]*z[33];
  z[205] = z[162]*z[6];
  z[206] = z[149]*z[46];
  z[207] = z[175]*z[35];
  z[208] = state_[17]*z[173];
  z[209] = z[170]*z[172];
  z[210] = z[176]*z[33];
  z[211] = z[190]*z[44];
  z[212] = z[178]*z[191];
  z[213] = -z[196] - z[197] - z[198] + z[199] + z[200] - z[201] - z[202] - z[203] + z[204] - z[205] - z[206] + z[207] - z[208] - z[209] + z[210] - z[211] + z[212];
  z[214] = z[213]*z[29];
  z[215] = z[1]*z[64];
  z[216] = front_.b*z[5];
  z[217] = z[1]*z[141]*z[57];
  z[218] = front_.m*(-z[188]*z[6] + z[213]*z[40]);
  z[219] = rear_.m*z[1]*z[61];
  z[220] = z[102] + z[104] - z[106] - z[108] + z[110] - z[111] - z[112] + z[114] - z[86] - z[88] + z[89] + z[91] - z[93] + z[94] + z[95] - z[97] - z[98] + z[99];
  z[221] = z[116] + z[117] + z[118] + z[119] - z[120] - z[121] + z[122] - z[123] - z[124] - z[125] + z[126] + z[127] - z[128] + z[129] + z[130] + z[131] + z[132] + z[133];

  ar[0] = -front_.m*(z[189]*(front_.r*z[6] + z[143]) + z[194]*(front_.a*z[6] - front_.b*z[40]) + z[214]*(-front_.a + z[175] + z[195])) - rear_.m*(z[0]*z[115]*(rear_.b - z[66] + z[73]) - z[0]*z[134]*(rear_.a + z[65] - z[67]) + z[85]*(rear_.a*z[5] + rear_.b*z[3])) - z[0]*z[15] + z[10]*z[24] + z[22]*z[6] - z[29]*z[37] - z[40]*z[47] - z[54]*z[6];
  ar[1] = -front_.m*(z[188]*(z[149]*z[3] - z[216]*z[27] + z[217]*z[27]) + z[194]*(front_.a*z[3] - z[175]*z[3] - z[216]*z[25] + z[217]*z[25]) + z[213]*z[5]*(front_.a*z[27] - z[149]*z[25] - z[175]*z[27])) - rear_.m*(z[115]*z[3]*z[74] - z[134]*z[5]*z[74] + z[84]*(rear_.a*z[3] - rear_.b*z[5] + z[215]*z[56] + z[215]*z[57])) + z[22]*z[3] - z[24]*z[5] - z[25]*z[47]*z[5] + z[27]*z[37]*z[5] - z[3]*z[54];
  ar[2] = -front_.m*(z[143]*z[188]*z[25] - z[143]*z[194]*z[27] + z[213]*(-front_.a*z[25] - z[149]*z[27] + z[175]*z[25])) - rear_.m*(z[115]*(rear_.b - z[6]*z[63] - z[73]) - z[134]*(rear_.a + z[10]*z[63] + z[67])) - z[15] - z[25]*z[37] - z[27]*z[47];
  ar[3] = -front_.m*(z[149]*z[188] + z[194]*(front_.a - z[140]*z[40] + z[195])) + z[48] - z[49] - z[51] - z[52] + z[53];
  ar[4] = z[1]*(-rear_.J*state_[8]*state_[9] + rear_.m*z[64]*(z[115]*z[5] + z[134]*z[3]));
  ar[5] = -front_.J*z[35] - z[141]*z[218];
  ar[6] = z[219]*(z[220]*z[5] + z[221]*z[3]);
  ar[7] = -z[219]*(-z[0]*z[220]*z[3] + z[0]*z[221]*z[5] + z[58]*z[85]);
  ar[8] = -rear_.m*(z[0]*z[84] + z[10]*z[220] - z[221]*z[6]);
  ar[9] = z[139]*z[218];
  ar[10] = front_.m*(z[1]*z[139]*z[214]*z[5] - z[138]*z[194] + z[139]*z[189]*z[40]);
  ar[11] = -front_.m*(z[29]*(z[193] + z[33]*(-z[181] + z[182] + z[183] + z[184] - z[185])) - z[40]*(z[145] + z[147] + z[148] + z[150] - z[153] - z[156] + z[158] - z[159] + z[161] + z[163] + z[164] - z[171] + z[174] + z[177] - z[180] - z[187]) - z[6]*(z[196] + z[197] + z[198] - z[199] - z[200] + z[201] + z[202] + z[203] - z[204] + z[205] + z[206] - z[207] + z[208] + z[209] - z[210] + z[211] - z[212]));
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gif_ud_zero_steady(double ar[12]) const;
void Bicycle::gif_ud_zero_steady(double ar[12]) const
{
  double z[113];

  z[0] = sin(state_[2]);
  z[1] = cos(state_[1]);
  z[2] = pow(z[1], 2);
  z[3] = cos(state_[2]);
  z[4] = rear_.J*state_[12];
  z[5] = sin(state_[1]);
  z[6] = rear_.Iyy*state_[8]*z[5];
  z[7] = state_[8]*z[5];
  z[8] = rear_.Ixz*z[0] - rear_.Izz*z[3];
  z[9] = z[3]*z[4] + z[3]*z[6] + z[7]*z[8];
  z[10] = rear_.Ixx*z[0] - rear_.Ixz*z[3];
  z[11] = z[10]*z[3];
  z[12] = z[0]*z[8];
  z[13] = -z[0]*z[4] - z[0]*z[6] + z[10]*z[7];
  z[14] = sin(state_[3]);
  z[15] = cos(state_[3]);
  z[16] = z[0]*z[1];
  z[17] = z[14]*z[5] - z[15]*z[16];
  z[18] = front_.J*state_[13];
  z[19] = z[1]*z[3];
  z[20] = z[14]*z[16];
  z[21] = z[15]*z[5] + z[20];
  z[22] = state_[8]*z[1]*z[21]*z[3];
  z[23] = state_[8]*z[21];
  z[24] = front_.Ixz*z[17] + front_.Izz*z[19];
  z[25] = front_.Iyy*z[22] + z[18]*z[19] - z[23]*z[24];
  z[26] = front_.Ixx*z[17] + front_.Ixz*z[19];
  z[27] = -z[17]*z[24] + z[19]*z[26];
  z[28] = z[17]*z[18];
  z[29] = state_[8]*z[17]*z[21];
  z[30] = front_.Iyy*z[29];
  z[31] = z[23]*z[26];
  z[32] = z[28] + z[30] - z[31];
  z[33] = rear_.r*z[16];
  z[34] = pow(z[0], 2);
  z[35] = pow(z[3], 2);
  z[36] = z[2]*(z[34] + z[35]);
  z[37] = pow(z[36], -1.0L/2.0L);
  z[38] = rear_.R*z[37];
  z[39] = rear_.r + z[38];
  z[40] = state_[8]*pow(z[5], 2);
  z[41] = rear_.a*z[3] + rear_.b*z[0];
  z[42] = state_[8]*z[2]*z[41];
  z[43] = state_[15]*z[36]*z[37] + state_[16]*z[5];
  z[44] = z[1]*z[5];
  z[45] = rear_.r*state_[8]*z[5];
  z[46] = state_[14]*z[37];
  z[47] = state_[15]*z[37]*z[5];
  z[48] = z[39]*(state_[12] + z[7]);
  z[49] = -state_[16]*z[0] + z[0]*z[47] + z[3]*z[45] + z[3]*z[46] - z[3]*z[48];
  z[50] = rear_.b*z[40] + z[0]*z[42] + z[16]*z[43] + z[44]*z[49];
  z[51] = rear_.r*z[19];
  z[52] = rear_.a*z[40];
  z[53] = z[3]*z[42];
  z[54] = z[19]*z[43];
  z[55] = state_[16]*z[3] + z[0]*z[45] + z[0]*z[46] - z[0]*z[48] - z[3]*z[47];
  z[56] = z[44]*z[55];
  z[57] = -z[52] - z[53] - z[54] + z[56];
  z[58] = rear_.b*z[3];
  z[59] = rear_.a*z[0];
  z[60] = z[16]*z[55] + z[19]*z[49] + z[58]*z[7] - z[59]*z[7];
  z[61] = front_.r*z[19];
  z[62] = sqrt(pow(z[17], 2) + z[2]*z[35]);
  z[63] = 1.0/z[62];
  z[64] = front_.R*z[63];
  z[65] = front_.r + z[64];
  z[66] = z[19]*z[65];
  z[67] = front_.b - z[66];
  z[68] = state_[8]*pow(z[21], 2);
  z[69] = front_.a*z[68];
  z[70] = front_.a*z[19] - front_.b*z[17];
  z[71] = state_[8]*z[70];
  z[72] = z[19]*z[71];
  z[73] = state_[18]*z[62] + state_[19]*z[21];
  z[74] = z[19]*z[73];
  z[75] = state_[19]*z[19];
  z[76] = front_.r*z[17];
  z[77] = z[23]*z[76];
  z[78] = state_[17]*z[63];
  z[79] = z[17]*z[78];
  z[80] = state_[18]*z[21]*z[63];
  z[81] = z[19]*z[80];
  z[82] = state_[13] + state_[8]*z[20] + z[15]*z[7];
  z[83] = z[17]*z[65];
  z[84] = z[82]*z[83];
  z[85] = z[75] - z[77] - z[79] - z[81] + z[84];
  z[86] = z[21]*z[85];
  z[87] = -z[69] - z[72] - z[74] + z[86];
  z[88] = -z[76];
  z[89] = front_.b*z[68];
  z[90] = z[17]*z[71];
  z[91] = z[17]*z[73];
  z[92] = state_[19]*z[17] - z[17]*z[80] + z[19]*z[78] + z[23]*z[61] - z[66]*z[82];
  z[93] = z[21]*z[92];
  z[94] = -z[89] + z[90] + z[91] - z[93];
  z[95] = front_.a*z[29] + front_.b*z[22] + z[19]*z[92];
  z[96] = -z[17]*z[85] + z[95];
  z[97] = state_[8]*z[27];
  z[98] = z[3]*z[50];
  z[99] = z[5]*z[98];
  z[100] = z[0]*z[57];
  z[101] = z[1]*z[39];
  z[102] = front_.b*z[3];
  z[103] = front_.r*z[21];
  z[104] = z[1]*z[35]*z[65];
  z[105] = state_[8]*z[2];
  z[106] = z[0]*z[50];
  z[107] = front_.m*state_[8];
  z[108] = z[69] + z[72] + z[74] - z[86];
  z[109] = z[89] - z[90] - z[91] + z[93];
  z[110] = rear_.m*state_[8]*z[1]*z[37];
  z[111] = z[52] + z[53] + z[54] - z[56];
  z[112] = z[21]*z[63];

  ar[0] = state_[8]*(-front_.m*(z[21]*z[87]*(z[61] + z[67]) + z[21]*z[94]*(-front_.a + z[83] + z[88]) + z[70]*z[96]) - rear_.m*(z[2]*z[41]*z[60] + z[5]*z[50]*(rear_.a + z[16]*z[39] - z[33]) + z[5]*z[57]*(rear_.b - z[19]*z[39] + z[51])) - z[0]*z[2]*z[9] - z[13]*z[2]*z[3] + z[17]*z[25] - z[19]*z[32] + z[2]*z[7]*(z[11] + z[12]) - z[23]*z[27]);
  ar[1] = state_[8]*(-front_.m*(z[3]*z[94]*(front_.a*z[14] - z[103]*z[15] - z[14]*z[83]) + z[87]*(z[0]*z[103] - z[102]*z[14] + z[104]*z[14]) + z[96]*(front_.a*z[0] - z[0]*z[83] - z[102]*z[15] + z[104]*z[15])) - rear_.m*(rear_.r*z[100]*z[5] + rear_.r*z[99] + z[1]*z[60]*(z[101]*z[34] + z[101]*z[35] - z[58] + z[59])) - z[0]*z[32] - z[13]*z[16] + z[14]*z[3]*z[97] + z[15]*z[25]*z[3] + z[19]*z[9]);
  ar[2] = state_[8]*(-front_.m*(-z[14]*z[67]*z[96] + z[15]*z[67]*z[87] + z[94]*(-front_.a*z[15] - z[103]*z[14] + z[15]*z[83])) - rear_.m*(z[50]*(rear_.a + z[16]*z[38] + z[33]) + z[57]*(rear_.b - z[19]*z[38] - z[51])) + z[105]*z[11] + z[105]*z[12] + z[14]*z[25] - z[15]*z[97]);
  ar[3] = state_[8]*(-front_.m*(z[103]*z[87] + z[96]*(front_.a - z[17]*z[64] + z[88])) - z[28] - z[30] + z[31]);
  ar[4] = rear_.m*state_[8]*z[1]*z[39]*(-z[106] + z[3]*z[57]);
  ar[5] = -z[107]*z[65]*(z[108]*z[19] - z[109]*z[17]);
  ar[6] = z[110]*(z[106] + z[111]*z[3]);
  ar[7] = -z[110]*(-z[0]*z[111]*z[5] + z[36]*z[60] + z[99]);
  ar[8] = rear_.m*state_[8]*z[1]*(z[100] - z[5]*z[60] + z[98]);
  ar[9] = z[107]*z[63]*(z[17]*z[94] - z[19]*z[87]);
  ar[10] = z[107]*(z[1]*z[112]*z[3]*z[94] + z[112]*z[17]*z[87] - z[62]*z[96]);
  ar[11] = -z[107]*(-z[108]*z[17] - z[109]*z[19] + z[21]*(z[17]*(-z[75] + z[77] + z[79] + z[81] - z[84]) + z[95]));
}

/** Computes the n-d array of shape (12, 7)
 *
 * @param[out] ar a C-array of with 84 elements
 */
//  void Bicycle::gif_ud_zero_steady_dudu(double ar[84]) const;
void Bicycle::gif_ud_zero_steady_dudu(double ar[84]) const
{
  double z[142];

  z[0] = sin(state_[2]);
  z[1] = cos(state_[1]);
  z[2] = pow(z[1], 2);
  z[3] = sin(state_[1]);
  z[4] = cos(state_[2]);
  z[5] = rear_.Ixz*z[0] - rear_.Izz*z[4];
  z[6] = z[3]*(rear_.Iyy*z[4] + z[5]);
  z[7] = rear_.Ixx*z[0] - rear_.Ixz*z[4];
  z[8] = z[3]*(-rear_.Iyy*z[0] + z[7]);
  z[9] = z[4]*z[7];
  z[10] = z[0]*z[5];
  z[11] = sin(state_[3]);
  z[12] = cos(state_[3]);
  z[13] = z[0]*z[1];
  z[14] = z[11]*z[3] - z[12]*z[13];
  z[15] = z[11]*z[13] + z[12]*z[3];
  z[16] = z[1]*z[4];
  z[17] = front_.Izz*z[16];
  z[18] = front_.Ixz*z[14];
  z[19] = z[15]*(front_.Iyy*z[16] - z[17] - z[18]);
  z[20] = front_.Ixz*z[16];
  z[21] = front_.Iyy*z[14];
  z[22] = front_.Ixx*z[14];
  z[23] = z[15]*(-z[20] + z[21] - z[22]);
  z[24] = z[20] + z[22];
  z[25] = -z[14]*(z[17] + z[18]) + z[16]*z[24];
  z[26] = rear_.m*z[3];
  z[27] = rear_.a*z[4] + rear_.b*z[0];
  z[28] = z[2]*z[27];
  z[29] = rear_.b*z[4];
  z[30] = rear_.a*z[0];
  z[31] = pow(z[0], 2);
  z[32] = z[1]*z[31];
  z[33] = pow(z[4], 2);
  z[34] = z[31] + z[33];
  z[35] = z[2]*z[34];
  z[36] = pow(z[35], -1.0L/2.0L);
  z[37] = rear_.R*z[36];
  z[38] = z[1]*z[33];
  z[39] = z[29] - z[30] - z[32]*z[37] - z[37]*z[38];
  z[40] = rear_.r*z[13];
  z[41] = rear_.r + z[37];
  z[42] = rear_.a + z[13]*z[41] - z[40];
  z[43] = pow(z[3], 2);
  z[44] = rear_.b*z[43];
  z[45] = z[0]*z[28];
  z[46] = z[16]*z[37];
  z[47] = z[43]*z[46];
  z[48] = -z[44] - z[45] + z[47];
  z[49] = rear_.r*z[16];
  z[50] = rear_.b - z[16]*z[41] + z[49];
  z[51] = rear_.a*z[43];
  z[52] = z[28]*z[4];
  z[53] = z[13]*z[37];
  z[54] = z[43]*z[53];
  z[55] = -z[51] - z[52] - z[54];
  z[56] = front_.m*z[15];
  z[57] = front_.a*z[16] - front_.b*z[14];
  z[58] = z[2]*z[33];
  z[59] = pow(z[14], 2);
  z[60] = z[58] + z[59];
  z[61] = sqrt(z[60]);
  z[62] = 1.0/z[61];
  z[63] = front_.R*z[62];
  z[64] = front_.a*z[14] + front_.b*z[16] - z[58]*z[63] - z[59]*z[63];
  z[65] = front_.r*z[16];
  z[66] = front_.r + z[63];
  z[67] = front_.b - z[16]*z[66];
  z[68] = z[65] + z[67];
  z[69] = pow(z[15], 2);
  z[70] = front_.a*z[69];
  z[71] = z[16]*z[57];
  z[72] = z[14]*z[63];
  z[73] = z[69]*z[72];
  z[74] = -z[70] - z[71] + z[73];
  z[75] = -front_.a;
  z[76] = front_.r*z[14];
  z[77] = -z[76];
  z[78] = z[14]*z[66];
  z[79] = z[75] + z[77] + z[78];
  z[80] = front_.b*z[69];
  z[81] = z[14]*z[57];
  z[82] = z[1]*z[4]*z[69];
  z[83] = z[63]*z[82];
  z[84] = -z[80] + z[81] + z[83];
  z[85] = rear_.m*z[1]*z[41];
  z[86] = z[0]*z[43]*z[50] + z[27]*z[35] + z[4]*z[42]*z[43];
  z[87] = front_.m*z[66];
  z[88] = z[14]*z[68];
  z[89] = front_.a + z[76] - z[78];
  z[90] = rear_.m*z[1]*z[36];
  z[91] = z[35] + z[43];
  z[92] = rear_.m*z[1]*z[36]*z[91];
  z[93] = z[62]*z[69];
  z[94] = z[61] + z[93];
  z[95] = front_.m*z[15]*z[94];
  z[96] = z[0]*z[55];
  z[97] = z[4]*z[48];
  z[98] = z[1]*(-z[29] + z[30] + z[32]*z[41] + z[38]*z[41]);
  z[99] = front_.b*z[4];
  z[100] = front_.r*z[15];
  z[101] = z[11]*z[66];
  z[102] = z[0]*z[100] + z[101]*z[38] - z[11]*z[99];
  z[103] = front_.a*z[11];
  z[104] = z[100]*z[12];
  z[105] = z[101]*z[14];
  z[106] = z[103] - z[104] - z[105];
  z[107] = z[1]*z[12]*z[33];
  z[108] = front_.a*z[0] - z[0]*z[78] + z[107]*z[66] - z[12]*z[99];
  z[109] = z[15]*z[64];
  z[110] = z[31]*z[43];
  z[111] = z[33]*z[43];
  z[112] = rear_.m*(rear_.r*z[110] + rear_.r*z[111] + z[34]*z[98]);
  z[113] = front_.J*z[14];
  z[114] = z[106]*z[15]*z[38];
  z[115] = z[14]*z[15];
  z[116] = z[102]*z[115];
  z[117] = front_.m*z[94];
  z[118] = rear_.a + z[40] + z[53];
  z[119] = rear_.b - z[46] - z[49];
  z[120] = z[12]*z[67];
  z[121] = z[11]*z[67];
  z[122] = front_.a*z[12];
  z[123] = z[100]*z[11];
  z[124] = z[12]*z[78];
  z[125] = -z[122] - z[123] + z[124];
  z[126] = z[118]*z[4];
  z[127] = z[115]*z[120];
  z[128] = z[1]*z[15]*z[4];
  z[129] = z[122] + z[123] - z[124];
  z[130] = rear_.m*z[1]*z[3]*z[36];
  z[131] = -rear_.b + z[46] + z[49];
  z[132] = z[69]*z[76];
  z[133] = z[72] + z[75] + z[76];
  z[134] = z[36]*z[41];
  z[135] = z[70] + z[71] - z[73];
  z[136] = z[80] - z[81] - z[83];
  z[137] = z[51] + z[52] + z[54];
  z[138] = z[44] + z[45] - z[47];
  z[139] = 1.0/z[34];
  z[140] = z[58]*z[62];
  z[141] = z[69]/z[60];

  ar[0] = -z[0]*z[2]*z[6] + z[14]*z[19] - z[15]*z[25] - z[16]*z[23] + z[2]*z[3]*(z[10] + z[9]) - z[2]*z[4]*z[8] - z[26]*(z[28]*z[39] - z[42]*z[48] + z[50]*z[55]) - z[56]*(z[57]*z[64] + z[68]*z[74] + z[79]*z[84]);
  ar[1] = z[85]*z[86];
  ar[2] = -z[87]*(-z[57]*z[60] + z[69]*z[88] - z[82]*z[89]);
  ar[3] = -z[86]*z[90];
  ar[4] = -z[3]*z[92]*(z[0]*z[42] - z[4]*z[50]);
  ar[5] = front_.m*(z[1]*z[4]*z[79]*z[93] - z[57]*z[61] + z[88]*z[93]);
  ar[6] = z[95]*(z[14]*z[89] + z[16]*z[68]);
  ar[7] = -front_.m*(z[102]*z[74] + z[106]*z[4]*z[84] + z[108]*z[109]) - z[0]*z[23] + z[11]*z[25]*z[4] + z[12]*z[19]*z[4] - z[13]*z[8] + z[16]*z[6] - z[26]*(rear_.r*z[96] - rear_.r*z[97] + z[39]*z[98]);
  ar[8] = z[1]*(rear_.J*z[31] + rear_.J*z[33] + z[112]*z[41]);
  ar[9] = front_.J*z[107] - z[0]*z[113] - z[87]*(-z[108]*z[60] + z[114] + z[116]);
  ar[10] = -z[1]*z[112]*z[36];
  ar[11] = 0;
  ar[12] = front_.m*(-z[108]*z[61] + z[114]*z[62] + z[116]*z[62]);
  ar[13] = z[117]*z[4]*(z[1]*z[102] + z[14]*(-z[103] + z[104] + z[105]));
  ar[14] = -front_.m*(-z[109]*z[121] + z[120]*z[74] + z[125]*z[84]) - rear_.m*(-z[118]*z[48] + z[119]*z[55]) + z[10]*z[2] + z[11]*z[19] - z[12]*z[25] + z[2]*z[9];
  ar[15] = rear_.m*z[1]*z[3]*z[41]*(z[0]*z[119] + z[126]);
  ar[16] = front_.J*z[11]*z[16] - z[87]*(z[121]*z[60] + z[127] - z[128]*z[129]);
  ar[17] = -z[130]*(-z[0]*z[131] + z[126]);
  ar[18] = -z[92]*(z[0]*z[118] + z[131]*z[4]);
  ar[19] = front_.m*(z[121]*z[61] + z[125]*z[128]*z[62] + z[127]*z[62]);
  ar[20] = z[117]*(z[120]*z[16] + z[129]*z[14]);
  ar[21] = z[15]*(-front_.m*(front_.r*z[74] + z[64]*(front_.a - z[72] + z[77])) - z[21] + z[24]);
  ar[22] = 0;
  ar[23] = -z[113] - z[87]*(z[132] + z[133]*z[60]);
  ar[24] = 0;
  ar[25] = 0;
  ar[26] = front_.m*(z[132]*z[62] + z[133]*z[61]);
  ar[27] = z[65]*z[95];
  ar[28] = z[85]*(z[0]*z[48] + z[4]*z[55]);
  ar[29] = 0;
  ar[30] = 0;
  ar[31] = 0;
  ar[32] = -rear_.m*z[134]*z[2]*z[34]*z[91];
  ar[33] = 0;
  ar[34] = 0;
  ar[35] = -z[87]*(z[135]*z[16] - z[136]*z[14]);
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = 0;
  ar[40] = 0;
  ar[41] = -z[117]*z[60]*z[66];
  ar[42] = z[90]*(z[0]*z[138] + z[137]*z[4]);
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = rear_.m*z[91];
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = -z[130]*(-z[0]*z[137] + z[138]*z[4] + z[35]*z[39]);
  ar[50] = rear_.m*z[134]*z[2]*(z[110] + z[111] + z[2]*pow(z[34], 2));
  ar[51] = 0;
  ar[52] = -rear_.m*(z[110]*z[139] + z[111]*z[139] + z[35]);
  ar[53] = 0;
  ar[54] = 0;
  ar[55] = 0;
  ar[56] = rear_.m*z[1]*(-z[39]*z[43] + z[96] - z[97]);
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = 0;
  ar[62] = 0;
  ar[63] = front_.m*z[62]*(z[14]*z[84] - z[16]*z[74]);
  ar[64] = 0;
  ar[65] = 0;
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[117]*z[61];
  ar[70] = z[56]*(z[14]*z[62]*z[74] + z[16]*z[62]*z[84] - z[61]*z[64]);
  ar[71] = 0;
  ar[72] = z[87]*(z[140]*z[69] + z[59]*z[93] + pow(z[60], 3.0L/2.0L));
  ar[73] = 0;
  ar[74] = 0;
  ar[75] = -front_.m*(z[141]*z[58] + z[141]*z[59] + z[60]);
  ar[76] = 0;
  ar[77] = -front_.m*(-z[135]*z[14] - z[136]*z[16] + z[64]*z[69]);
  ar[78] = 0;
  ar[79] = 0;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = z[56]*(z[140] + z[59]*z[62] - z[61]);
  ar[83] = 0;
}

/** Computes the n-d array of shape (7)
 *
 * @param[out] ar a C-array of with 7 elements
 */
//  void Bicycle::gif_ud_zero_steady_cross_terms(double ar[7]) const;
void Bicycle::gif_ud_zero_steady_cross_terms(double ar[7]) const
{

  ar[0] = pow(state_[8], 2);
  ar[1] = state_[12]*state_[8];
  ar[2] = state_[13]*state_[8];
  ar[3] = state_[14]*state_[8];
  ar[4] = state_[15]*state_[8];
  ar[5] = state_[17]*state_[8];
  ar[6] = state_[18]*state_[8];
}

/** Computes the n-d array of shape (12, 3)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::gif_ud_zero_dq(double ar[36]) const;
void Bicycle::gif_ud_zero_dq(double ar[36]) const
{
  double z[919];

  z[0] = cos(state_[1]);
  z[1] = rear_.Iyy*state_[9];
  z[2] = state_[8]*z[0];
  z[3] = sin(state_[2]);
  z[4] = state_[9]*z[3];
  z[5] = cos(state_[2]);
  z[6] = z[0]*z[5];
  z[7] = state_[8]*z[6];
  z[8] = z[4] + z[7];
  z[9] = rear_.Ixz*z[8];
  z[10] = state_[9]*z[5];
  z[11] = z[0]*z[3];
  z[12] = state_[8]*z[11];
  z[13] = -z[10] + z[12];
  z[14] = -rear_.Ixx*z[13] + z[9];
  z[15] = rear_.Ixz*z[13];
  z[16] = rear_.Izz*z[8] - z[15];
  z[17] = sin(state_[1]);
  z[18] = pow(z[17], 2);
  z[19] = rear_.Ixx*z[3] - rear_.Ixz*z[5];
  z[20] = z[19]*z[8];
  z[21] = rear_.Ixz*z[3] - rear_.Izz*z[5];
  z[22] = z[13]*z[21];
  z[23] = z[14]*z[5];
  z[24] = z[16]*z[3];
  z[25] = z[17]*z[5];
  z[26] = rear_.J*state_[12];
  z[27] = state_[8]*z[17];
  z[28] = state_[10] + z[27];
  z[29] = rear_.Iyy*z[28];
  z[30] = z[13]*z[26] + z[13]*z[29];
  z[31] = state_[10]*z[4] + state_[10]*z[7] - z[27]*z[4];
  z[32] = rear_.Ixz*z[31];
  z[33] = -state_[10]*z[10] + state_[10]*z[12] + z[10]*z[27];
  z[34] = rear_.Izz*z[33] + z[14]*z[28] + z[30] + z[32];
  z[35] = state_[10]*z[25];
  z[36] = z[0]*z[4];
  z[37] = z[35] + z[36];
  z[38] = z[17]*z[3];
  z[39] = state_[10]*z[38];
  z[40] = z[0]*z[10];
  z[41] = z[39] - z[40];
  z[42] = z[0]*z[8];
  z[43] = z[17]*z[28];
  z[44] = rear_.Ixx*z[37] + rear_.Ixz*z[41] - rear_.Iyy*z[42] + z[0]*z[16] + z[21]*z[43] + z[25]*z[26] + z[25]*z[29];
  z[45] = -z[26]*z[8] - z[29]*z[8];
  z[46] = rear_.Ixz*z[33];
  z[47] = -rear_.Ixx*z[31] + z[16]*z[28] + z[45] - z[46];
  z[48] = z[0]*z[13];
  z[49] = rear_.Ixz*z[37] - rear_.Iyy*z[48] + rear_.Izz*z[41] - z[0]*z[14] - z[19]*z[43] + z[26]*z[38] + z[29]*z[38];
  z[50] = cos(state_[3]);
  z[51] = z[0]*z[50];
  z[52] = sin(state_[3]);
  z[53] = z[17]*z[52];
  z[54] = z[3]*z[53] - z[51];
  z[55] = state_[11] + z[8];
  z[56] = z[28]*z[52];
  z[57] = z[13]*z[50];
  z[58] = z[56] - z[57];
  z[59] = front_.Ixx*z[58] + front_.Ixz*z[55];
  z[60] = state_[9]*z[51];
  z[61] = -state_[11]*z[56] + state_[11]*z[57] + state_[8]*z[60] + z[31]*z[52];
  z[62] = front_.Ixz*z[58];
  z[63] = front_.Izz*z[55] + z[62];
  z[64] = -z[58]*z[63];
  z[65] = front_.Iyy*z[61] + z[55]*z[59] + z[64];
  z[66] = z[0]*z[52];
  z[67] = z[17]*z[50];
  z[68] = z[3]*z[67] + z[66];
  z[69] = front_.J*state_[13];
  z[70] = front_.Iyy*z[55];
  z[71] = z[28]*z[50];
  z[72] = z[13]*z[52];
  z[73] = z[71] + z[72];
  z[74] = state_[9]*z[66];
  z[75] = state_[8]*z[74];
  z[76] = state_[11]*z[71];
  z[77] = state_[11]*z[72];
  z[78] = z[31]*z[50];
  z[79] = z[75] + z[76] + z[77] - z[78];
  z[80] = z[63]*z[73];
  z[81] = front_.Ixx*z[79] - front_.Ixz*z[33] - z[55]*z[69] - z[70]*z[73] + z[80];
  z[82] = front_.Iyy*z[73];
  z[83] = front_.Ixz*z[79] - front_.Izz*z[33] + z[58]*z[69] + z[58]*z[82] - z[59]*z[73];
  z[84] = z[11]*z[50];
  z[85] = z[53] - z[84];
  z[86] = state_[9]*z[53];
  z[87] = state_[11]*z[51];
  z[88] = state_[11]*z[53];
  z[89] = z[3]*z[88];
  z[90] = -z[37]*z[50] + z[86] - z[87] + z[89];
  z[91] = front_.Ixz*z[68] - front_.Izz*z[25];
  z[92] = -front_.Ixx*z[90] + front_.Ixz*z[41] + z[25]*z[69] + z[25]*z[82] - z[54]*z[63] + z[54]*z[70] + z[73]*z[91];
  z[93] = state_[8]*z[92];
  z[94] = z[11]*z[52];
  z[95] = z[67] + z[94];
  z[96] = front_.Ixx*z[68] - front_.Ixz*z[25];
  z[97] = state_[11]*z[66];
  z[98] = state_[11]*z[67];
  z[99] = state_[9]*z[67] + z[3]*z[98] + z[97];
  z[100] = z[37]*z[52] + z[99];
  z[101] = -front_.Iyy*z[100] - z[25]*z[59] + z[55]*z[96] - z[58]*z[91] - z[63]*z[68];
  z[102] = state_[8]*z[101];
  z[103] = front_.Izz*z[41];
  z[104] = z[68]*z[69];
  z[105] = z[68]*z[82];
  z[106] = front_.Ixz*z[90];
  z[107] = front_.Iyy*z[58];
  z[108] = z[107]*z[54];
  z[109] = z[54]*z[59];
  z[110] = z[103] + z[104] + z[105] - z[106] - z[108] + z[109] - z[73]*z[96];
  z[111] = rear_.a*z[5];
  z[112] = rear_.b*z[3];
  z[113] = state_[16]*z[0];
  z[114] = rear_.b*z[8];
  z[115] = rear_.a*z[13];
  z[116] = pow(z[3], 2);
  z[117] = pow(z[5], 2);
  z[118] = z[116] + z[117];
  z[119] = pow(z[0], 2);
  z[120] = z[118]*z[119];
  z[121] = pow(z[120], -1.0L/2.0L);
  z[122] = state_[15]*z[0]*z[121];
  z[123] = z[118]*z[122]*z[17];
  z[124] = rear_.R*z[121];
  z[125] = rear_.r + z[124];
  z[126] = z[11]*z[125];
  z[127] = z[125]*z[6];
  z[128] = rear_.r*z[11];
  z[129] = rear_.r*z[17];
  z[130] = z[11]*z[124];
  z[131] = rear_.R*z[121]*z[17];
  z[132] = state_[9]*z[17]*z[5];
  z[133] = pow(z[120], -3.0L/2.0L);
  z[134] = rear_.R*z[118]*z[119]*z[133];
  z[135] = state_[10]*z[128] + state_[10]*z[130] + z[10]*z[129] + z[10]*z[131] - z[132]*z[134];
  z[136] = rear_.r*z[6];
  z[137] = z[124]*z[6];
  z[138] = state_[9]*z[17]*z[3];
  z[139] = state_[10]*z[136] + state_[10]*z[137] - z[129]*z[4] - z[131]*z[4] + z[134]*z[138];
  z[140] = z[113]*z[3];
  z[141] = z[129]*z[8];
  z[142] = state_[14]*z[121];
  z[143] = z[142]*z[6];
  z[144] = state_[15]*z[121];
  z[145] = z[0]*z[144]*z[17]*z[3];
  z[146] = state_[12] + z[28];
  z[147] = -z[127]*z[146] - z[140] + z[141] + z[143] + z[145];
  z[148] = z[113]*z[5];
  z[149] = z[129]*z[13];
  z[150] = z[11]*z[142];
  z[151] = z[122]*z[25];
  z[152] = z[126]*z[146];
  z[153] = z[148] + z[149] + z[150] - z[151] - z[152];
  z[154] = -rear_.a*z[33] + rear_.b*z[31] + state_[9]*z[113] - state_[9]*z[123] + z[114]*z[28] - z[115]*z[28] - z[126]*z[33] - z[127]*z[31] + z[13]*z[135] + z[13]*z[153] + z[139]*z[8] + z[147]*z[8];
  z[155] = z[154]*z[17];
  z[156] = rear_.b*z[0];
  z[157] = rear_.r*z[119];
  z[158] = rear_.r*z[18];
  z[159] = z[158]*z[5];
  z[160] = z[119]*z[125];
  z[161] = z[160]*z[5];
  z[162] = z[125] - z[134];
  z[163] = z[162]*z[18];
  z[164] = state_[8]*state_[9];
  z[165] = z[156]*z[164];
  z[166] = pow(z[28], 2);
  z[167] = rear_.a*z[166];
  z[168] = z[153]*z[28];
  z[169] = state_[16]*z[17];
  z[170] = z[169]*z[4];
  z[171] = state_[10]*z[148];
  z[172] = rear_.r*z[42];
  z[173] = state_[9]*z[172];
  z[174] = state_[10]*z[150];
  z[175] = state_[14]*z[121]*z[17];
  z[176] = z[10]*z[175];
  z[177] = state_[15]*z[119]*z[121];
  z[178] = z[177]*z[4];
  z[179] = z[122]*z[35];
  z[180] = z[129]*z[33];
  z[181] = state_[15]*z[121]*z[18];
  z[182] = z[181]*z[4];
  z[183] = state_[8]*z[119]*z[125];
  z[184] = z[10]*z[183];
  z[185] = state_[14]*z[118]*z[119]*z[133];
  z[186] = z[132]*z[185];
  z[187] = state_[15]*z[118]*z[119]*z[133]*z[18];
  z[188] = z[187]*z[4];
  z[189] = rear_.a*z[8];
  z[190] = rear_.b*z[13];
  z[191] = z[189] + z[190];
  z[192] = z[191]*z[8];
  z[193] = z[135]*z[146];
  z[194] = z[120]*z[144] + z[126]*z[8] - z[127]*z[13] + z[169];
  z[195] = z[194]*z[8];
  z[196] = z[170] - z[171] + z[173] - z[174] - z[176] + z[178] + z[179] - z[180] - z[182] - z[184] + z[186] + z[188] - z[192] + z[193] - z[195];
  z[197] = z[165] - z[167] + z[168] + z[196];
  z[198] = rear_.a*z[0];
  z[199] = z[158]*z[3];
  z[200] = z[160]*z[3];
  z[201] = z[164]*z[198];
  z[202] = state_[10]*z[140];
  z[203] = z[10]*z[169];
  z[204] = rear_.b*z[166];
  z[205] = rear_.r*z[48];
  z[206] = state_[9]*z[205];
  z[207] = state_[10]*z[143];
  z[208] = z[175]*z[4];
  z[209] = z[129]*z[31];
  z[210] = z[10]*z[181];
  z[211] = state_[10]*z[145];
  z[212] = z[10]*z[177];
  z[213] = z[183]*z[4];
  z[214] = z[138]*z[185];
  z[215] = z[10]*z[187];
  z[216] = z[13]*z[191];
  z[217] = z[139]*z[146];
  z[218] = z[147]*z[28];
  z[219] = z[13]*z[194];
  z[220] = -z[201] - z[202] - z[203] - z[204] + z[206] + z[207] - z[208] + z[209] + z[210] + z[211] - z[212] - z[213] + z[214] - z[215] - z[216] - z[217] - z[218] - z[219];
  z[221] = z[17]*(rear_.b - z[127] + z[136]);
  z[222] = z[162]*z[17]*z[5];
  z[223] = z[13]*z[222];
  z[224] = z[162]*z[17]*z[3];
  z[225] = z[224]*z[8];
  z[226] = z[113] - z[123] + z[223] - z[225];
  z[227] = z[169]*z[5];
  z[228] = state_[8]*z[199];
  z[229] = z[142]*z[38];
  z[230] = z[181]*z[5];
  z[231] = z[177]*z[5];
  z[232] = state_[8]*z[200];
  z[233] = z[185]*z[38];
  z[234] = z[187]*z[5];
  z[235] = z[146]*z[162];
  z[236] = z[235]*z[38];
  z[237] = z[205] - z[227] - z[228] - z[229] + z[230] - z[231] - z[232] + z[233] - z[234] + z[236];
  z[238] = state_[8]*state_[9]*z[17];
  z[239] = rear_.r*z[40];
  z[240] = 2*state_[8]*z[28];
  z[241] = rear_.r*state_[8]*z[17];
  z[242] = z[111] + z[112];
  z[243] = state_[8]*z[17]*z[242];
  z[244] = state_[10]*z[5];
  z[245] = rear_.r*z[0];
  z[246] = 4*state_[15]*z[121]*z[17];
  z[247] = state_[8]*z[125]*z[17];
  z[248] = state_[8]*z[17]*z[5];
  z[249] = 2*state_[14]*z[118]*z[133]*z[18];
  z[250] = pow(z[0], 3);
  z[251] = 2*state_[15]*z[118]*z[133]*z[250];
  z[252] = pow(z[17], 3);
  z[253] = 2*state_[15]*z[118]*z[133]*z[252];
  z[254] = pow(z[118], 2);
  z[255] = pow(z[120], -5.0L/2.0L);
  z[256] = 3*state_[14]*z[18]*z[250]*z[254]*z[255];
  z[257] = 3*state_[15]*z[250]*z[252]*z[254]*z[255];
  z[258] = state_[8]*z[162]*z[17];
  z[259] = z[116]*z[18];
  z[260] = z[117]*z[18];
  z[261] = z[259] + z[260];
  z[262] = z[116]*z[119];
  z[263] = z[117]*z[119];
  z[264] = z[261] - z[262] - z[263];
  z[265] = state_[14]*z[133]*z[264];
  z[266] = state_[15]*z[133]*z[17]*z[264];
  z[267] = 2*rear_.R*z[118]*z[133]*z[18];
  z[268] = 3*rear_.R*z[18]*z[250]*z[254]*z[255];
  z[269] = rear_.R*z[133]*z[264];
  z[270] = -rear_.r*z[39] - z[10]*z[268] - z[124]*z[39] + z[124]*z[40] + z[134]*z[39] + z[239] + z[267]*z[40] + z[269]*z[40];
  z[271] = -rear_.b*z[238] + state_[10]*z[227] - state_[9]*z[141] + z[10]*z[256] + z[113]*z[4] + z[135]*z[2] + z[138]*z[251] + z[142]*z[39] - z[142]*z[40] + z[146]*z[270] + z[153]*z[2] + z[177]*z[244] - z[181]*z[244] - z[185]*z[39] + z[187]*z[244] + z[191]*z[248] + z[194]*z[248] - z[198]*z[240] - z[239]*z[27] + z[241]*z[41] + z[243]*z[8] - z[245]*z[33] - z[246]*z[36] + z[247]*z[40] - z[249]*z[40] - z[253]*z[36] + z[257]*z[4] + z[258]*z[40] - z[265]*z[40] - z[266]*z[36];
  z[272] = -z[226]*z[8] + z[237]*z[28] + z[271];
  z[273] = z[17]*(rear_.a + z[126] - z[128]);
  z[274] = rear_.a*z[238];
  z[275] = z[169]*z[3];
  z[276] = state_[10]*z[275];
  z[277] = z[10]*z[113];
  z[278] = rear_.r*z[36];
  z[279] = z[27]*z[278];
  z[280] = z[156]*z[240];
  z[281] = state_[9]*z[149];
  z[282] = z[241]*z[37];
  z[283] = z[142]*z[35];
  z[284] = z[142]*z[36];
  z[285] = z[245]*z[31];
  z[286] = z[13]*z[243];
  z[287] = state_[10]*z[3];
  z[288] = z[177]*z[287];
  z[289] = z[181]*z[287];
  z[290] = z[246]*z[40];
  z[291] = z[247]*z[36];
  z[292] = state_[8]*z[17]*z[3];
  z[293] = z[191]*z[292];
  z[294] = z[185]*z[35];
  z[295] = z[249]*z[36];
  z[296] = z[132]*z[251];
  z[297] = z[253]*z[40];
  z[298] = z[187]*z[287];
  z[299] = z[256]*z[4];
  z[300] = z[10]*z[257];
  z[301] = z[258]*z[36];
  z[302] = z[265]*z[36];
  z[303] = z[266]*z[40];
  z[304] = z[139]*z[2];
  z[305] = z[147]*z[2];
  z[306] = z[194]*z[292];
  z[307] = z[13]*z[226];
  z[308] = rear_.r*z[35];
  z[309] = z[124]*z[35];
  z[310] = z[124]*z[36];
  z[311] = z[134]*z[35];
  z[312] = z[267]*z[36];
  z[313] = z[268]*z[4];
  z[314] = z[269]*z[36];
  z[315] = -z[278] - z[308] - z[309] - z[310] + z[311] - z[312] + z[313] - z[314];
  z[316] = z[146]*z[315];
  z[317] = -state_[8]*z[159] - state_[8]*z[161] - z[142]*z[25] + z[172] + z[177]*z[3] - z[181]*z[3] + z[185]*z[25] + z[187]*z[3] + z[235]*z[25] + z[275];
  z[318] = z[28]*z[317];
  z[319] = z[274] + z[276] - z[277] - z[279] - z[280] - z[281] - z[282] - z[283] - z[284] + z[285] + z[286] + z[288] - z[289] + z[290] + z[291] + z[293] + z[294] - z[295] - z[296] + z[297] + z[298] + z[299] - z[300] + z[301] - z[302] + z[303] - z[304] - z[305] + z[306] - z[307] - z[316] - z[318];
  z[320] = z[0]*z[242];
  z[321] = state_[15]*state_[9]*z[121];
  z[322] = 2*z[262];
  z[323] = 2*z[263];
  z[324] = z[264]/z[118];
  z[325] = z[116]*z[324];
  z[326] = z[117]*z[324];
  z[327] = rear_.a*z[3];
  z[328] = state_[8]*z[17]*z[28];
  z[329] = rear_.b*z[5];
  z[330] = state_[8]*z[41];
  z[331] = rear_.a*z[330] - rear_.b*state_[8]*z[37] - state_[8]*z[13]*z[198] + state_[8]*z[156]*z[8] - state_[9]*z[169] + z[12]*z[125]*z[41] + z[125]*z[37]*z[7] + z[13]*z[270] - z[135]*z[292] - z[139]*z[248] - z[147]*z[248] - z[153]*z[292] + z[222]*z[31] + z[224]*z[33] + z[317]*z[8] + z[327]*z[328] - z[328]*z[329];
  z[332] = z[13]*z[237] + z[315]*z[8] + z[321]*(z[261] - z[322] - z[323] - z[325] - z[326]) + z[331];
  z[333] = front_.b*z[54];
  z[334] = front_.r*z[17];
  z[335] = z[334]*z[5]*z[95];
  z[336] = front_.r*z[6];
  z[337] = pow(z[85], 2);
  z[338] = z[263] + z[337];
  z[339] = sqrt(z[338]);
  z[340] = 1.0/z[339];
  z[341] = front_.R*z[340];
  z[342] = front_.r + z[341];
  z[343] = z[342]*z[6];
  z[344] = z[17]*z[341];
  z[345] = pow(z[338], -3.0L/2.0L);
  z[346] = z[0]*z[117]*z[17];
  z[347] = z[68]*z[85];
  z[348] = -z[346] + z[347];
  z[349] = front_.R*z[345]*z[348];
  z[350] = z[0]*z[349] + z[334] + z[344];
  z[351] = z[350]*z[5];
  z[352] = pow(z[73], 2);
  z[353] = front_.a*z[352];
  z[354] = state_[11]*z[94] - z[244]*z[51] + z[4]*z[67] + z[74] + z[98];
  z[355] = state_[19]*z[354];
  z[356] = front_.b*z[61];
  z[357] = z[343]*z[61];
  z[358] = state_[19]*z[6];
  z[359] = front_.r*z[95];
  z[360] = z[359]*z[58];
  z[361] = state_[17]*z[340];
  z[362] = z[361]*z[85];
  z[363] = state_[18]*z[340]*z[95];
  z[364] = z[363]*z[6];
  z[365] = state_[13] + z[73];
  z[366] = z[342]*z[85];
  z[367] = z[365]*z[366];
  z[368] = z[358] - z[360] - z[362] - z[364] + z[367];
  z[369] = z[368]*z[73];
  z[370] = -z[353] + z[355] + z[356] - z[357] + z[369];
  z[371] = state_[10]*z[0]*z[3];
  z[372] = z[361]*z[371];
  z[373] = z[132]*z[361];
  z[374] = z[33]*z[359];
  z[375] = front_.r*z[55];
  z[376] = state_[11]*z[84] + z[244]*z[66] - z[4]*z[53] + z[60] - z[88];
  z[377] = z[375]*z[376];
  z[378] = front_.b*z[58];
  z[379] = front_.a*z[55] - z[378];
  z[380] = z[379]*z[55];
  z[381] = z[354]*z[363];
  z[382] = state_[18]*z[340]*z[85];
  z[383] = z[376]*z[382];
  z[384] = state_[17]*z[0]*z[345]*z[5];
  z[385] = z[119]*z[287]*z[5];
  z[386] = state_[9]*z[346];
  z[387] = z[354]*z[85];
  z[388] = z[385] + z[386] - z[387];
  z[389] = z[384]*z[388];
  z[390] = state_[18]*z[345]*z[388]*z[85]*z[95];
  z[391] = state_[19]*z[95] + z[343]*z[58];
  z[392] = state_[18]*z[339] - z[366]*z[55] + z[391];
  z[393] = z[392]*z[55];
  z[394] = front_.r*z[3];
  z[395] = front_.R*z[345]*z[388];
  z[396] = state_[10]*z[0]*z[394] + z[10]*z[334] + z[10]*z[344] + z[341]*z[371] - z[395]*z[6];
  z[397] = z[365]*z[396];
  z[398] = z[370] - z[372] - z[373] - z[374] + z[377] - z[380] - z[381] - z[383] + z[389] - z[390] - z[393] + z[397];
  z[399] = front_.a*z[54];
  z[400] = front_.r*z[68];
  z[401] = z[400]*z[95];
  z[402] = front_.r*z[85];
  z[403] = z[366]*z[54];
  z[404] = z[341]*z[68];
  z[405] = z[349]*z[85];
  z[406] = -z[400] - z[404] + z[405];
  z[407] = state_[19]*z[11];
  z[408] = state_[10]*z[407];
  z[409] = state_[19]*z[17];
  z[410] = z[10]*z[409];
  z[411] = front_.b*z[352];
  z[412] = z[363]*z[371];
  z[413] = z[132]*z[363];
  z[414] = front_.a*z[61];
  z[415] = front_.r*z[376];
  z[416] = z[415]*z[58];
  z[417] = z[354]*z[361];
  z[418] = z[379]*z[58];
  z[419] = state_[18]*z[0]*z[340]*z[5];
  z[420] = z[376]*z[419];
  z[421] = z[359]*z[79];
  z[422] = z[366]*z[61];
  z[423] = state_[17]*z[345]*z[388];
  z[424] = z[423]*z[85];
  z[425] = state_[18]*z[0]*z[345]*z[388]*z[5];
  z[426] = z[425]*z[95];
  z[427] = z[392]*z[58];
  z[428] = state_[19]*z[85];
  z[429] = z[361]*z[6];
  z[430] = z[85]*z[95];
  z[431] = state_[18]*z[340];
  z[432] = z[430]*z[431];
  z[433] = -z[343]*z[365] + z[359]*z[55] + z[428] + z[429] - z[432];
  z[434] = z[433]*z[73];
  z[435] = front_.r*z[354];
  z[436] = z[341]*z[354] + z[395]*z[85] + z[435];
  z[437] = z[365]*z[436];
  z[438] = -z[408] - z[410] - z[411] + z[412] + z[413] - z[414] - z[416] - z[417] + z[418] - z[420] - z[421] + z[422] - z[424] - z[426] + z[427] - z[434] + z[437];
  z[439] = front_.a*z[5];
  z[440] = z[17]*z[439];
  z[441] = front_.b*z[68];
  z[442] = -z[368]*z[58];
  z[443] = front_.b*z[73];
  z[444] = z[443]*z[55];
  z[445] = state_[19]*z[376];
  z[446] = front_.a*z[58];
  z[447] = -front_.b*z[79];
  z[448] = z[343]*z[79];
  z[449] = -z[396]*z[58];
  z[450] = 2*z[385];
  z[451] = 2*z[346];
  z[452] = state_[9]*z[451];
  z[453] = 2*z[387];
  z[454] = 1.0/z[338];
  z[455] = z[263]*z[454];
  z[456] = z[337]*z[454];
  z[457] = -front_.a*z[33] + z[33]*z[366] + z[431]*(z[388]*z[455] + z[388]*z[456] - z[450] - z[452] + z[453]) + z[433]*z[55] - z[436]*z[55] + z[444] + z[445] + z[446]*z[73] + z[447] + z[448] + z[449];
  z[458] = z[442] + z[457];
  z[459] = front_.b - z[343];
  z[460] = z[95]*(z[336] + z[459]);
  z[461] = state_[10]*state_[17]*z[0]*z[3]*z[345];
  z[462] = z[346] - z[347];
  z[463] = state_[17]*state_[9]*z[17]*z[345]*z[5];
  z[464] = z[354]*z[95];
  z[465] = state_[18]*z[345]*z[462];
  z[466] = z[376]*z[85];
  z[467] = state_[17]*z[462];
  z[468] = pow(z[338], -5.0L/2.0L);
  z[469] = 3*state_[10]*z[119]*z[3]*z[5] + 3*state_[9]*z[0]*z[117]*z[17] - 3*z[354]*z[85];
  z[470] = 3*state_[18]*z[388]*z[468]*z[85]*z[95];
  z[471] = state_[8]*z[54];
  z[472] = state_[19]*z[25];
  z[473] = state_[8]*z[401];
  z[474] = front_.r*z[54];
  z[475] = z[474]*z[58];
  z[476] = z[361]*z[68];
  z[477] = z[25]*z[363];
  z[478] = z[419]*z[54];
  z[479] = state_[8]*z[403];
  z[480] = state_[17]*z[345]*z[462];
  z[481] = z[480]*z[85];
  z[482] = z[462]*z[95];
  z[483] = state_[18]*z[0]*z[345]*z[482]*z[5];
  z[484] = z[365]*z[406];
  z[485] = -z[472] - z[473] + z[475] - z[476] + z[477] + z[478] - z[479] - z[481] - z[483] - z[484];
  z[486] = state_[8]*z[0]*z[342]*z[5];
  z[487] = -state_[19]*z[54] + z[248]*z[366] - z[351]*z[58] + z[486]*z[68];
  z[488] = 2*z[347];
  z[489] = -z[451] + z[488];
  z[490] = z[455]*z[462] + z[456]*z[462] + z[489];
  z[491] = z[406]*z[55] + z[431]*z[490] + z[487];
  z[492] = state_[8]*z[55];
  z[493] = z[440] + z[441];
  z[494] = z[244]*z[67] + z[4]*z[51] - z[86] + z[87] - z[89];
  z[495] = state_[8]*z[100];
  z[496] = 2*state_[8]*z[73];
  z[497] = state_[8]*z[376];
  z[498] = z[244]*z[53] + z[4]*z[66] + z[99];
  z[499] = state_[18]*z[340]*z[354];
  z[500] = state_[18]*z[340]*z[376];
  z[501] = state_[18]*z[345]*z[388]*z[95];
  z[502] = state_[18]*z[345]*z[388]*z[85];
  z[503] = state_[9]*z[260];
  z[504] = 2*z[11];
  z[505] = z[354]*z[68];
  z[506] = z[494]*z[85];
  z[507] = -state_[9]*z[263] + z[35]*z[504] + z[503] + z[505] + z[506];
  z[508] = state_[18]*z[345]*z[85]*z[95];
  z[509] = z[0]*z[348]*z[468]*z[469]*z[5];
  z[510] = front_.R*z[345]*z[507];
  z[511] = front_.R*z[509] + front_.r*z[40] - z[132]*z[349] + z[25]*z[395] - z[287]*z[334] - z[341]*z[39] + z[341]*z[40] - z[349]*z[371] + z[510]*z[6];
  z[512] = -front_.b*z[495] - front_.r*z[17]*z[497]*z[5] + state_[19]*z[494] + z[100]*z[486] + z[248]*z[379] + z[248]*z[392] - z[25]*z[423] + z[33]*z[474] + z[330]*z[359] + z[351]*z[61] + z[361]*z[39] - z[361]*z[40] - z[363]*z[494] + z[365]*z[511] - z[375]*z[498] + z[382]*z[498] - z[384]*z[507] - z[396]*z[471] + z[399]*z[496] + z[492]*z[493] + z[499]*z[54] - z[500]*z[68] - z[501]*z[68] + z[502]*z[54] + z[507]*z[508];
  z[513] = z[0]*z[467]*z[468]*z[469]*z[5] - z[368]*z[471] - z[461]*z[462] - z[462]*z[463] - z[462]*z[470] - z[464]*z[465] - z[465]*z[466] + z[485]*z[73] - z[491]*z[55] + z[512];
  z[514] = -z[402];
  z[515] = z[95]*(-front_.a + z[366] + z[514]);
  z[516] = state_[10]*state_[18]*z[0]*z[3]*z[345];
  z[517] = state_[18]*state_[9]*z[17]*z[345]*z[5];
  z[518] = state_[18]*z[0]*z[345]*z[376]*z[5];
  z[519] = 3*state_[18]*z[0]*z[388]*z[468]*z[5];
  z[520] = state_[19]*z[68];
  z[521] = state_[8]*z[335];
  z[522] = z[474]*z[55];
  z[523] = z[25]*z[361];
  z[524] = z[486]*z[54];
  z[525] = z[363]*z[68];
  z[526] = z[382]*z[54];
  z[527] = z[384]*z[462];
  z[528] = z[430]*z[465];
  z[529] = z[351]*z[365];
  z[530] = z[520] - z[521] - z[522] - z[523] + z[524] - z[525] + z[526] + z[527] - z[528] + z[529];
  z[531] = state_[10]*state_[18]*z[0]*z[3]*z[340];
  z[532] = state_[18]*state_[9]*z[17]*z[340]*z[5];
  z[533] = state_[8]*z[58];
  z[534] = state_[8]*z[90];
  z[535] = state_[8]*z[68];
  z[536] = front_.r*z[58];
  z[537] = state_[17]*z[345]*z[85];
  z[538] = state_[18]*z[0]*z[345]*z[5]*z[95];
  z[539] = z[348]*z[468]*z[469]*z[85];
  z[540] = front_.R*z[539] - front_.r*z[494] - z[341]*z[494] + z[349]*z[354] - z[395]*z[68] + z[510]*z[85];
  z[541] = front_.a*z[495] + state_[19]*z[39] - state_[19]*z[40] + z[25]*z[500] + z[25]*z[501] + z[333]*z[496] + z[359]*z[534] - z[361]*z[494] - z[363]*z[39] + z[363]*z[40] - z[365]*z[540] - z[366]*z[495] + z[379]*z[535] + z[392]*z[535] - z[400]*z[497] + z[419]*z[498] - z[423]*z[68] + z[425]*z[54] + z[433]*z[471] - z[436]*z[471] + z[474]*z[79] - z[493]*z[533] + z[498]*z[536] + z[507]*z[537] + z[507]*z[538] - z[531]*z[54] - z[532]*z[54];
  z[542] = -z[354]*z[480] - z[406]*z[61] - z[462]*z[518] - z[467]*z[468]*z[469]*z[85] + z[482]*z[516] + z[482]*z[517] - z[482]*z[519] + z[491]*z[58] - z[530]*z[73] + z[541];
  z[543] = -front_.b*z[85] + z[0]*z[439];
  z[544] = front_.a*z[330];
  z[545] = z[333]*z[492];
  z[546] = z[248]*z[443];
  z[547] = state_[19]*z[498];
  z[548] = state_[8]*z[73];
  z[549] = front_.a*z[548]*z[68];
  z[550] = front_.b*z[534];
  z[551] = z[399]*z[533];
  z[552] = z[330]*z[366];
  z[553] = z[486]*z[90];
  z[554] = z[33]*z[406];
  z[555] = z[351]*z[79];
  z[556] = z[248]*z[433];
  z[557] = z[396]*z[535];
  z[558] = z[368]*z[535];
  z[559] = z[248]*z[436];
  z[560] = z[530]*z[55];
  z[561] = z[485]*z[58];
  z[562] = z[540]*z[55];
  z[563] = z[511]*z[58];
  z[564] = z[454]*z[462];
  z[565] = z[388]*z[454];
  z[566] = pow(z[338], -2);
  z[567] = z[117]*z[119]*z[566];
  z[568] = z[337]*z[469]*z[566];
  z[569] = z[431]*(-state_[9]*z[323] + 4*z[0]*z[3]*z[35] - z[450]*z[564] - z[451]*z[565] - z[452]*z[564] + z[453]*z[564] - z[455]*z[507] - z[456]*z[507] + z[462]*z[469]*z[567] + z[462]*z[568] + z[488]*z[565] + 2*z[503] + 2*z[505] + 2*z[506]);
  z[570] = z[544] - z[545] - z[546] - z[547] + z[549] + z[550] - z[551] - z[552] - z[553] - z[554] - z[555] - z[556] - z[557] - z[558] + z[559] + z[560] - z[561] + z[562] - z[563] + z[569];
  z[571] = rear_.Izz*z[13] + z[9];
  z[572] = rear_.Ixx*z[33] - z[28]*z[571] + z[30] - z[32];
  z[573] = rear_.Ixx*z[8] + z[15];
  z[574] = -rear_.Izz*z[31] + z[28]*z[573] + z[45] + z[46];
  z[575] = z[573]*z[8];
  z[576] = z[16]*z[8];
  z[577] = z[13]*z[571];
  z[578] = z[13]*z[14];
  z[579] = z[0]*z[5]*z[52];
  z[580] = z[0]*z[5]*z[50];
  z[581] = z[50]*z[8];
  z[582] = state_[11]*z[581];
  z[583] = z[33]*z[52];
  z[584] = -z[582] + z[583];
  z[585] = front_.Ixx*z[581] + front_.Ixz*z[13];
  z[586] = front_.Ixz*z[581] + front_.Izz*z[13];
  z[587] = -front_.Iyy*z[584] - z[13]*z[59] - z[55]*z[585] + z[58]*z[586] + z[581]*z[63];
  z[588] = z[52]*z[8];
  z[589] = state_[11]*z[588] + z[33]*z[50];
  z[590] = front_.Ixx*z[589] - front_.Ixz*z[31] + z[13]*z[69] + z[13]*z[82] - z[586]*z[73] + z[588]*z[63] - z[588]*z[70];
  z[591] = z[581]*z[69];
  z[592] = front_.Izz*z[31];
  z[593] = z[107]*z[588];
  z[594] = z[581]*z[82];
  z[595] = front_.Ixz*z[589];
  z[596] = z[585]*z[73];
  z[597] = z[588]*z[59];
  z[598] = -z[591] - z[592] + z[593] - z[594] + z[595] + z[596] - z[597];
  z[599] = z[189]*z[28];
  z[600] = z[190]*z[28];
  z[601] = rear_.a*z[31];
  z[602] = rear_.b*z[33];
  z[603] = z[153]*z[8];
  z[604] = -z[148] - z[149] - z[150] + z[151] + z[152];
  z[605] = z[604]*z[8];
  z[606] = -z[599] - z[600] - z[601] - z[602] + z[603] + z[605];
  z[607] = z[0]*z[154];
  z[608] = z[0]*z[17]*z[5];
  z[609] = z[114] - z[115];
  z[610] = z[202] + z[203] - z[206] - z[207] + z[208] - z[209] - z[210] - z[211] + z[212] + z[213] - z[214] + z[215] + z[216] + z[217] + z[218] + z[219];
  z[611] = -z[609]*z[8] + z[610];
  z[612] = z[13]*z[609];
  z[613] = z[28]*z[604];
  z[614] = z[196] - z[612] - z[613];
  z[615] = front_.b*z[52];
  z[616] = z[5]*z[615];
  z[617] = z[0]*z[117]*z[52];
  z[618] = z[342]*z[617];
  z[619] = z[616] - z[618];
  z[620] = z[394]*z[95];
  z[621] = z[0]*z[117];
  z[622] = z[50]*z[85];
  z[623] = z[11] + z[622];
  z[624] = front_.R*z[345]*z[623];
  z[625] = z[3]*z[341] + z[394] - z[621]*z[624];
  z[626] = front_.a*z[52];
  z[627] = front_.r*z[50];
  z[628] = z[627]*z[95];
  z[629] = z[402]*z[52];
  z[630] = z[366]*z[52];
  z[631] = z[341]*z[50] - z[624]*z[85] + z[627];
  z[632] = z[0]*z[438]*z[5];
  z[633] = front_.a*z[3];
  z[634] = front_.b*z[50];
  z[635] = z[5]*z[634];
  z[636] = z[0]*z[117]*z[50];
  z[637] = z[342]*z[636];
  z[638] = z[3]*z[366];
  z[639] = state_[10]*z[84] + z[10]*z[67] + z[5]*z[97];
  z[640] = state_[19]*z[639];
  z[641] = front_.r*z[0]*z[5]*z[52];
  z[642] = z[33]*z[641];
  z[643] = z[138]*z[361];
  z[644] = state_[10]*z[429];
  z[645] = z[31]*z[359];
  z[646] = state_[10]*z[94] + z[10]*z[53] - z[5]*z[87];
  z[647] = z[375]*z[646];
  z[648] = z[73]*z[8];
  z[649] = 2*front_.a*z[52]*z[648];
  z[650] = front_.b*z[584];
  z[651] = -front_.a*z[13] + z[634]*z[8];
  z[652] = z[55]*z[651];
  z[653] = z[13]*z[415];
  z[654] = z[13]*z[379];
  z[655] = state_[17]*z[345]*z[623];
  z[656] = z[385]*z[655];
  z[657] = z[386]*z[655];
  z[658] = z[363]*z[639];
  z[659] = z[382]*z[646];
  z[660] = z[500]*z[580];
  z[661] = z[499]*z[579];
  z[662] = z[343]*z[584];
  z[663] = state_[18]*z[0]*z[345]*z[5]*z[623];
  z[664] = z[464]*z[663];
  z[665] = z[11]*z[423];
  z[666] = z[466]*z[663];
  z[667] = z[501]*z[580];
  z[668] = z[502]*z[579];
  z[669] = z[117]*z[119]*z[468]*z[469]*z[623];
  z[670] = state_[17]*z[669];
  z[671] = state_[10]*z[263];
  z[672] = state_[10]*z[262];
  z[673] = state_[9]*z[0]*z[17]*z[3]*z[5];
  z[674] = 2*z[673];
  z[675] = z[639]*z[85];
  z[676] = z[354]*z[580];
  z[677] = z[671] - z[672] - z[674] - z[675] + z[676];
  z[678] = z[384]*z[677];
  z[679] = z[0]*z[625];
  z[680] = z[61]*z[679];
  z[681] = z[0]*z[5]*z[623];
  z[682] = z[470]*z[681];
  z[683] = z[508]*z[677];
  z[684] = z[13]*z[392];
  z[685] = z[396]*z[588];
  z[686] = z[368]*z[588];
  z[687] = z[628]*z[8];
  z[688] = z[58]*z[641];
  z[689] = z[361]*z[580];
  z[690] = state_[18]*z[340]*z[52];
  z[691] = z[263]*z[690];
  z[692] = z[11]*z[363];
  z[693] = z[366]*z[588];
  z[694] = state_[17]*z[0]*z[345]*z[5]*z[623];
  z[695] = z[694]*z[85];
  z[696] = state_[18]*z[345]*z[623]*z[95];
  z[697] = z[263]*z[696];
  z[698] = z[0]*z[5]*z[631];
  z[699] = z[365]*z[698];
  z[700] = -z[407] + z[687] - z[688] + z[689] - z[691] + z[692] + z[693] - z[695] - z[697] - z[699];
  z[701] = z[700]*z[73];
  z[702] = state_[19]*z[5];
  z[703] = z[342]*z[580];
  z[704] = z[455]*z[623];
  z[705] = z[456]*z[623] - z[504] - 2*z[622] + z[704];
  z[706] = z[13]*z[366] + z[419]*z[705] + z[55]*z[698] - z[58]*z[679] + z[66]*z[702] - z[703]*z[8];
  z[707] = z[55]*z[706];
  z[708] = state_[10]*z[0]*z[5];
  z[709] = -z[671] + z[672] + z[674] + z[675] - z[676];
  z[710] = front_.R*z[345]*z[709];
  z[711] = -front_.R*z[669] + state_[10]*z[336] + z[11]*z[395] - z[334]*z[4] + z[341]*z[708] - z[344]*z[4] + z[385]*z[624] + z[386]*z[624] + z[6]*z[710];
  z[712] = z[365]*z[711];
  z[713] = z[640] - z[642] + z[643] - z[644] - z[645] - z[647] - z[649] - z[650] - z[652] - z[653] + z[654] - z[656] - z[657] - z[658] + z[659] + z[660] - z[661] + z[662] - z[664] - z[665] - z[666] + z[667] - z[668] + z[670] + z[678] + z[680] - z[682] - z[683] + z[684] + z[685] + z[686] + z[701] - z[707] + z[712];
  z[714] = z[4]*z[409];
  z[715] = state_[10]*z[358];
  z[716] = front_.b*z[52]*z[8];
  z[717] = 2*z[13]*z[52] + 2*z[28]*z[50];
  z[718] = z[716]*z[717];
  z[719] = z[385]*z[690];
  z[720] = state_[18]*state_[9]*z[17]*z[340]*z[52]*z[621];
  z[721] = front_.a*z[584];
  z[722] = z[363]*z[708];
  z[723] = z[138]*z[363];
  z[724] = z[536]*z[646];
  z[725] = z[376]*z[627]*z[8];
  z[726] = z[359]*z[589];
  z[727] = z[361]*z[639];
  z[728] = z[58]*z[651];
  z[729] = z[379]*z[581];
  z[730] = z[419]*z[646];
  z[731] = z[641]*z[79];
  z[732] = z[11]*z[500];
  z[733] = z[385]*z[696];
  z[734] = z[386]*z[696];
  z[735] = z[366]*z[584];
  z[736] = z[354]*z[694];
  z[737] = state_[18]*z[117]*z[119]*z[345];
  z[738] = z[376]*z[623]*z[737];
  z[739] = z[423]*z[580];
  z[740] = z[388]*z[52]*z[737];
  z[741] = z[11]*z[501];
  z[742] = z[0]*z[468]*z[469]*z[5]*z[623]*z[85];
  z[743] = state_[17]*z[742];
  z[744] = z[117]*z[119]*z[623]*z[95];
  z[745] = 3*state_[18]*z[388]*z[468];
  z[746] = z[744]*z[745];
  z[747] = z[537]*z[677];
  z[748] = z[538]*z[677];
  z[749] = z[61]*z[698];
  z[750] = z[392]*z[581];
  z[751] = z[433]*z[588];
  z[752] = z[436]*z[588];
  z[753] = z[51]*z[702];
  z[754] = z[55]*z[641];
  z[755] = z[13]*z[359];
  z[756] = z[11]*z[361];
  z[757] = z[363]*z[580];
  z[758] = z[342]*z[579];
  z[759] = z[758]*z[8];
  z[760] = z[382]*z[579];
  z[761] = z[263]*z[655];
  z[762] = state_[18]*z[0]*z[345]*z[5]*z[85]*z[95];
  z[763] = z[623]*z[762];
  z[764] = z[365]*z[679];
  z[765] = -z[753] + z[754] - z[755] - z[756] + z[757] - z[759] - z[760] + z[761] - z[763] + z[764];
  z[766] = z[73]*z[765];
  z[767] = z[58]*z[706];
  z[768] = front_.r*z[639];
  z[769] = z[341]*z[639];
  z[770] = z[0]*z[354]*z[5]*z[624];
  z[771] = z[395]*z[580];
  z[772] = front_.R*z[742];
  z[773] = z[710]*z[85];
  z[774] = -z[768] - z[769] - z[770] + z[771] - z[772] + z[773];
  z[775] = z[365]*z[774];
  z[776] = z[714] - z[715] - z[718] + z[719] + z[720] + z[721] + z[722] - z[723] + z[724] + z[725] - z[726] - z[727] + z[728] - z[729] + z[730] - z[731] + z[732] + z[733] + z[734] - z[735] - z[736] - z[738] + z[739] - z[740] + z[741] - z[743] - z[746] - z[747] - z[748] - z[749] - z[750] - z[751] + z[752] - z[766] + z[767] - z[775];
  z[777] = front_.a*z[50];
  z[778] = -front_.a*z[31] - front_.b*z[589] - state_[19]*z[646] - z[13]*z[433] + z[13]*z[436] - z[13]*z[443] + z[31]*z[366] - z[33]*z[698] + z[343]*z[589] + z[396]*z[581] + z[55]*z[716] + z[58]*z[626]*z[8] - z[58]*z[711] - z[648]*z[777] - z[679]*z[79];
  z[779] = 2*z[454]*z[623];
  z[780] = pow(z[5], 3);
  z[781] = z[0]*z[454]*z[5]*z[623];
  z[782] = z[119]*z[3];
  z[783] = -state_[10]*z[117]*z[250]*z[3]*z[779] + state_[10]*z[322] - state_[10]*z[323] - state_[9]*z[119]*z[17]*z[779]*z[780] - 2*z[0]*z[388]*z[454]*z[5]*z[50]*z[85] + z[250]*z[469]*z[566]*z[623]*z[780] - 2*z[388]*z[454]*z[5]*z[782] + z[453]*z[781] + z[568]*z[681] + 4*z[673] + 2*z[675] - 2*z[676];
  z[784] = z[368]*z[581] + z[431]*(z[455]*z[677] + z[456]*z[677] + z[783]) + z[55]*z[765] + z[55]*z[774] - z[58]*z[700] + z[778];
  z[785] = front_.Ixx*z[61] + front_.Ixz*z[352] + z[58]*z[70] + z[64];
  z[786] = -z[75] - z[76] - z[77] + z[78];
  z[787] = front_.Ixx*z[55]*z[73] + front_.Iyy*z[786] - z[62]*z[73] - z[80];
  z[788] = z[69]*z[73];
  z[789] = front_.Iyy*z[352];
  z[790] = front_.Ixx*z[352];
  z[791] = pow(z[58], 2);
  z[792] = front_.Iyy*z[791];
  z[793] = front_.Ixz*z[61];
  z[794] = z[58]*z[59];
  z[795] = z[788] + z[789] - z[790] - z[792] + z[793] + z[794];
  z[796] = -front_.b + z[343];
  z[797] = pow(z[95], 2);
  z[798] = z[0]*z[5]*z[797];
  z[799] = front_.R*z[345];
  z[800] = z[337]*z[799];
  z[801] = z[342] - z[800];
  z[802] = front_.R*z[345]*z[365];
  z[803] = z[371]*z[430];
  z[804] = z[132]*z[430];
  z[805] = z[464] + z[466];
  z[806] = z[6]*z[805];
  z[807] = z[388]*z[454]*z[85]*z[95];
  z[808] = 3*z[0]*z[5]*z[807];
  z[809] = -z[803] - z[804] + z[806] + z[808];
  z[810] = z[343]*z[73];
  z[811] = front_.R*z[0]*z[345]*z[5]*z[85]*z[95];
  z[812] = z[58]*z[811];
  z[813] = z[801]*z[95];
  z[814] = z[55]*z[813];
  z[815] = z[432]*(-z[455] - z[456] + 2);
  z[816] = -z[428] + z[810] - z[812] - z[814] + z[815];
  z[817] = state_[17]*z[345];
  z[818] = state_[18]*z[345]*z[797];
  z[819] = z[337]*z[345]*z[95];
  z[820] = z[337]*z[345];
  z[821] = state_[17]*z[819] + state_[18]*z[345]*z[798]*z[85] - z[359]*z[73] - z[361]*z[95] + z[365]*z[813] - z[366]*z[58] + z[402]*z[58] + z[419]*z[85];
  z[822] = -3*state_[17]*z[0]*z[388]*z[468]*z[5]*z[85]*z[95] + state_[18]*z[337]*z[468]*z[469]*z[797] + state_[18]*z[376]*z[819] + state_[18]*z[388]*z[820] + z[33]*z[402] - z[363]*(2*state_[10]*z[0]*z[5]*z[52] + 2*state_[11]*z[0]*z[3]*z[50] - 2*state_[11]*z[17]*z[52] + 2*state_[9]*z[0]*z[50] - 2*state_[9]*z[17]*z[3]*z[52]) + z[382]*(-2*state_[10]*z[0]*z[5]*z[50] + 2*state_[11]*z[0]*z[3]*z[52] + 2*state_[11]*z[17]*z[50] + 2*state_[9]*z[0]*z[52] + 2*state_[9]*z[17]*z[3]*z[50]) - z[384]*z[805] + z[387]*z[818] - z[388]*z[818] - z[435]*z[55] + z[444] + z[445] + z[446]*z[717] + z[449] + z[508]*z[805] + z[61]*z[811] + z[73]*z[821] + z[803]*z[817] + z[804]*z[817];
  z[823] = front_.b*z[786] - z[343]*z[786] + z[442] - z[55]*z[816] + z[802]*z[809] + z[822];
  z[824] = z[353] - z[355] - z[356] + z[357] - z[369];
  z[825] = front_.a*z[791];
  z[826] = z[378]*z[55];
  z[827] = z[33]*z[813];
  z[828] = z[79]*z[811];
  z[829] = z[396]*z[73];
  z[830] = z[58]*z[799]*z[809];
  z[831] = state_[18]*z[797]*z[820] + z[337]*z[431] + z[365]*z[811] - z[384]*z[430] + z[391] - z[402]*z[55] - z[431]*z[797];
  z[832] = z[55]*z[831];
  z[833] = z[58]*z[821];
  z[834] = front_.R*z[345]*z[85]*z[95];
  z[835] = 3*z[337]*z[388]*z[468]*z[95];
  z[836] = z[805]*z[85];
  z[837] = front_.R*z[835] - z[341]*z[376] + z[354]*z[834] - z[395]*z[95] - z[415] + z[799]*z[836];
  z[838] = z[55]*z[837];
  z[839] = 2*z[464];
  z[840] = z[454]*z[85]*z[95];
  z[841] = z[431]*(-3*z[388]*z[566]*pow(z[85], 3)*z[95] - 3*z[388]*z[567]*z[85]*z[95] + z[450]*z[840] + z[452]*z[840] - z[455]*z[805] - z[456]*z[805] - z[456]*z[839] + 2*z[466] + 2*z[807] + z[839]);
  z[842] = z[824] - z[825] - z[826] + z[827] - z[828] - z[829] - z[830] + z[832] - z[833] + z[838] + z[841];
  z[843] = state_[18]*z[345]*z[797]*z[85];
  z[844] = state_[17]*z[345]*z[354];
  z[845] = state_[17]*z[835] + z[0]*z[5]*z[745]*z[797]*z[85] - z[132]*z[843] + z[354]*z[419] - z[359]*z[61] - z[361]*z[376] - z[365]*z[837] - z[371]*z[843] + z[376]*z[762] + z[378]*z[73] + z[379]*z[73] + z[392]*z[73] + z[402]*z[79] - z[415]*z[73] - z[423]*z[95] + z[430]*z[844] + z[433]*z[58] + z[435]*z[58] - z[436]*z[58] + z[502]*z[6] - z[531]*z[85] - z[532]*z[85] + z[538]*z[805] + z[61]*z[813] - z[73]*z[831] + z[817]*z[836];
  z[846] = -front_.a*z[786] + z[366]*z[786] + z[58]*z[816] + z[845];
  z[847] = state_[8]*z[5];
  z[848] = state_[8]*z[3];
  z[849] = rear_.r*z[17]*z[3];
  z[850] = rear_.r*z[17]*z[5];
  z[851] = z[0]*z[125];
  z[852] = z[116]*z[851] + z[117]*z[851] + z[327] - z[329];
  z[853] = z[117]*z[350];
  z[854] = z[438]*z[5];
  z[855] = -z[616] + z[618] + z[620];
  z[856] = z[626] - z[628] - z[630];
  z[857] = z[5]*z[856];
  z[858] = -z[635] + z[637];
  z[859] = z[633] - z[638] + z[858];
  z[860] = z[52]*z[65];
  z[861] = z[50]*z[81];
  z[862] = z[5]*z[52];
  z[863] = z[5]*z[50];
  z[864] = z[342]*z[5];
  z[865] = z[359]*z[52];
  z[866] = z[342]*z[622];
  z[867] = z[197]*z[222];
  z[868] = z[220]*z[224];
  z[869] = rear_.a + z[128] + z[130];
  z[870] = z[459]*z[50];
  z[871] = -z[777] - z[865] + z[866];
  z[872] = z[459]*z[52];
  z[873] = front_.a - z[341]*z[85] + z[514];
  z[874] = z[372] + z[373] + z[374] - z[377] + z[380] + z[381] + z[383] - z[389] + z[390] + z[393] - z[397] + z[824];
  z[875] = z[400] + z[404] - z[405];
  z[876] = z[408] + z[410] + z[411] - z[412] - z[413] + z[414] + z[416] + z[417] - z[418] + z[420] + z[421] - z[422] + z[424] + z[426] - z[427] + z[434] - z[437];
  z[877] = state_[18]*z[345]*z[348];
  z[878] = -z[358] + z[360] + z[362] + z[364] - z[367];
  z[879] = z[431]*(-z[348]*z[455] - z[348]*z[456] + z[489]) + z[487] - z[55]*z[875];
  z[880] = -state_[17]*z[509] + z[348]*z[461] + z[348]*z[463] + z[348]*z[470] + z[464]*z[877] + z[466]*z[877] + z[471]*z[878] + z[512] - z[55]*z[879] - z[73]*(z[472] + z[473] - z[475] + z[476] - z[477] - z[478] + z[479] + z[481] + z[483] + z[484]);
  z[881] = z[348]*z[95];
  z[882] = state_[17]*z[539] + z[348]*z[518] + z[348]*z[844] - z[516]*z[881] - z[517]*z[881] + z[519]*z[881] + z[541] + z[58]*z[879] + z[61]*z[875] + z[73]*(-z[520] + z[521] + z[522] + z[523] - z[524] + z[525] - z[526] - z[527] + z[528] - z[529]);
  z[883] = -z[640] + z[642] - z[643] + z[644] + z[645] + z[647] + z[649] + z[650] + z[652] + z[653] - z[654] + z[656] + z[657] + z[658] - z[659] - z[660] + z[661] - z[662] + z[664] + z[665] + z[666] - z[667] + z[668] - z[670] - z[678] - z[680] + z[682] + z[683] - z[684] - z[685] - z[686] - z[701] + z[707] - z[712];
  z[884] = -z[714] + z[715] + z[718] - z[719] - z[720] - z[721] - z[722] + z[723] - z[724] - z[725] + z[726] + z[727] - z[728] + z[729] - z[730] + z[731] - z[732] - z[733] - z[734] + z[735] + z[736] + z[738] - z[739] + z[740] - z[741] + z[743] + z[746] + z[747] + z[748] + z[749] + z[750] + z[751] - z[752] + z[766] - z[767] + z[775];
  z[885] = rear_.m*z[121];
  z[886] = -z[205] + z[227] + z[228] + z[229] - z[230] + z[231] + z[232] - z[233] + z[234] - z[236];
  z[887] = z[271] - z[28]*z[886] + z[8]*(-z[113] + z[123] - z[223] + z[225]);
  z[888] = -z[274] - z[276] + z[277] + z[279] + z[280] + z[281] + z[282] + z[283] + z[284] - z[285] - z[286] - z[288] + z[289] - z[290] - z[291] - z[293] - z[294] + z[295] + z[296] - z[297] - z[298] - z[299] + z[300] - z[301] + z[302] - z[303] + z[304] + z[305] - z[306] + z[307] + z[316] + z[318];
  z[889] = rear_.m*z[0]*z[121];
  z[890] = -z[170] + z[171] - z[173] + z[174] + z[176] - z[178] - z[179] + z[180] + z[182] + z[184] - z[186] - z[188] + z[192] - z[193] + z[195];
  z[891] = -z[165] + z[167] - z[168] + z[890];
  z[892] = z[201] + z[204] + z[610];
  z[893] = z[5]*z[892];
  z[894] = z[610] + z[8]*(-z[114] + z[115]);
  z[895] = z[612] + z[613] + z[890];
  z[896] = z[0]*z[118];
  z[897] = z[11]*z[887];
  z[898] = -z[13]*z[886] - z[321]*(-z[259] - z[260] + z[322] + z[323] + z[325] + z[326]) + z[331] - z[8]*(z[278] + z[308] + z[309] + z[310] - z[311] + z[312] - z[313] + z[314]);
  z[899] = front_.m*z[340];
  z[900] = z[0]*z[398]*z[5];
  z[901] = z[438]*z[85];
  z[902] = z[438]*z[95];
  z[903] = z[340]*z[398]*z[95];
  z[904] = z[340]*z[398]*z[85];
  z[905] = z[345]*z[398]*z[85]*z[95];
  z[906] = z[340]*z[438]*z[95];
  z[907] = z[340]*z[438];
  z[908] = z[345]*z[438];
  z[909] = z[340]*z[85]*z[95];
  z[910] = z[0]*z[340]*z[5]*z[95];
  z[911] = z[0]*z[340]*z[5];
  z[912] = z[340]*z[874];
  z[913] = z[58]*z[878];
  z[914] = z[457] + z[913];
  z[915] = z[428] - z[810] + z[812] + z[814] - z[815];
  z[916] = z[447] + z[448] + z[55]*z[915] - z[802]*(z[803] + z[804] - z[806] - z[808]) + z[822] + z[913];
  z[917] = z[370] + z[825] + z[826] - z[827] + z[828] + z[829] + z[830] - z[832] + z[833] - z[838] - z[841];
  z[918] = front_.a*z[79] - z[366]*z[79] - z[58]*z[915] + z[845];

  ar[0] = -front_.m*(z[398]*(-z[333] - z[335] - z[336]*z[54] + z[343]*z[54] + z[351]*z[95]) + z[438]*(z[399] - z[401] + z[402]*z[54] - z[403] - z[406]*z[95]) + z[458]*(z[25]*z[366] + z[343]*z[68] - z[351]*z[85] + z[406]*z[6] - z[440] - z[441]) + z[460]*z[513] + z[515]*z[542] + z[543]*z[570]) - rear_.m*(z[155]*(-z[111] - z[112]) + z[197]*(z[156] + z[157]*z[5] - z[159] - z[161] + z[163]*z[5]) + z[220]*(z[157]*z[3] + z[163]*z[3] - z[198] - z[199] - z[200]) + z[221]*z[272] - z[273]*z[319] + z[320]*z[332]) - state_[8]*z[18]*(-z[1] + z[20] + z[22] - z[23] - z[24]) - z[0]*(z[1]*z[2] + z[13]*z[16] + z[14]*z[8]) - z[102]*z[95] - z[110]*z[7] + z[12]*z[44] - z[25]*z[34] + z[25]*z[83] - z[38]*z[47] - z[49]*z[7] + z[54]*z[65] - z[68]*z[81] - z[85]*z[93];
  ar[1] = -front_.m*(z[0]*z[398]*(front_.r*z[617] + z[619] - z[620] + z[625]*z[95]) + z[0]*z[458]*(z[621]*z[631] - z[625]*z[85] - z[633] + z[635] - z[637] + z[638]) + z[460]*z[713] + z[515]*z[776] + z[543]*z[784] + z[632]*(-z[626] + z[628] - z[629] + z[630] - z[631]*z[95])) - rear_.m*(-rear_.R*z[121]*z[220]*z[608] + z[130]*z[17]*z[197] + z[221]*z[611] - z[273]*z[614] + z[320]*z[606] + z[607]*(-z[327] + z[329])) - z[11]*z[34] + z[11]*z[572] + z[11]*z[83] - z[17]*(-z[575] + z[576] - z[577] - z[578]) + z[47]*z[6] - z[574]*z[6] - z[579]*z[65] + z[580]*z[81] - z[587]*z[95] - z[590]*z[85] - z[598]*z[6];
  ar[2] = -front_.m*(z[398]*z[85]*(-z[336] + z[796] + z[798]*z[799]) + z[438]*(front_.a*z[85] + front_.r*z[337] - front_.r*z[797] - z[337]*z[342] + z[797]*z[801]) + z[458]*z[95]*(-z[6]*z[800] - z[6]*z[801] + z[796]) + z[460]*z[823] + z[515]*z[846] + z[543]*z[842]) - z[6]*z[795] + z[65]*z[85] - z[785]*z[85] - z[787]*z[95] - z[81]*z[95];
  ar[3] = -front_.m*(-z[398]*(z[394]*z[54] + z[52]*z[853]) + z[458]*(z[3]*z[406] - z[50]*z[853]) + z[513]*z[855] + z[542]*z[857] + z[570]*z[859] + z[854]*(z[406]*z[52] + z[54]*z[627])) - rear_.m*(-z[118]*z[155]*z[162] + z[128]*z[197] - z[136]*z[220] + z[272]*z[849] - z[319]*z[850] + z[332]*z[852]) + z[101]*z[52]*z[847] - z[110]*z[848] - z[44]*z[847] - z[49]*z[848] - z[50]*z[847]*z[92];
  ar[4] = -front_.m*(z[398]*(z[3]*z[615] + z[359]*z[5] + z[394]*z[579] - z[579]*z[625] - z[864]*z[94]) + z[438]*(z[50]*z[620] - z[52]*z[633] + z[52]*z[638] - z[617]*z[627] + z[617]*z[631]) + z[458]*(z[11]*z[5]*z[631] + z[3]*z[634] + z[439] - z[580]*z[625] - z[84]*z[864] - z[85]*z[864]) + z[713]*z[855] + z[776]*z[857] + z[784]*z[859]) - rear_.m*(z[154]*z[242] + z[197]*z[850] + z[220]*z[849] + z[606]*z[852] + z[611]*z[849] - z[614]*z[850]) + z[3]*z[47] - z[3]*z[574] - z[3]*z[598] - z[3]*z[860] + z[3]*z[861] + z[34]*z[5] - z[5]*z[572] - z[5]*z[83] + z[587]*z[862] - z[590]*z[863];
  ar[5] = -front_.m*(z[398]*(-z[394]*z[85] - z[617]*z[834] + z[858]) + z[458]*(-z[3]*z[813] + z[619] - z[636]*z[834]) + z[823]*z[855] + z[842]*z[859] + z[846]*z[857] + z[854]*(-z[52]*z[813] + z[627]*z[85] + z[777] + z[865] - z[866])) - z[3]*z[795] + z[65]*z[863] - z[785]*z[863] + z[787]*z[862] + z[81]*z[862];
  ar[6] = -front_.m*(z[351]*z[398]*z[50] - z[351]*z[458]*z[52] + z[438]*(-z[406]*z[50] + z[474]*z[52]) + z[513]*z[870] + z[542]*z[871] - z[570]*z[872]) - rear_.m*(-z[272]*(-rear_.b + z[136] + z[137]) - z[319]*z[869] + z[867] + z[868]) + z[1]*z[27] - z[102]*z[50] - z[20]*z[27] - z[22]*z[27] + z[23]*z[27] + z[24]*z[27] - z[52]*z[93];
  ar[7] = -front_.m*(z[398]*z[51]*z[625] - z[458]*z[625]*z[66] - z[632]*(front_.r*pow(z[52], 2) + z[50]*z[631]) + z[713]*z[870] + z[776]*z[871] - z[784]*z[872]) - rear_.m*(z[126]*z[197] - z[127]*z[220] + z[611]*(rear_.b - z[136] - z[137]) - z[614]*z[869]) - z[50]*z[587] - z[52]*z[590] + z[575] - z[576] + z[577] + z[578];
  ar[8] = -front_.m*(z[398]*(z[580]*z[834] - z[615] + z[758]) + z[438]*(z[50]*z[813] + z[629] + z[856]) + z[458]*(-z[579]*z[834] - z[634] + z[703]) + z[823]*z[870] - z[842]*z[872] + z[846]*z[871]) - z[50]*z[787] - z[52]*z[785] + z[860] - z[861];
  ar[9] = -front_.m*(z[359]*z[513] - z[398]*z[474] + z[406]*z[458] + z[570]*z[873]) - state_[8]*z[103] - state_[8]*z[104] - state_[8]*z[105] + state_[8]*z[106] + state_[8]*z[108] - state_[8]*z[109] + z[548]*z[96];
  ar[10] = -front_.m*(z[359]*z[713] + z[398]*z[641] + z[458]*z[698] + z[784]*z[873]) + z[591] + z[592] - z[593] + z[594] - z[595] - z[596] + z[597];
  ar[11] = -front_.m*(z[359]*z[823] - z[398]*z[402] - z[458]*z[813] + z[842]*z[873]) - z[788] - z[789] + z[790] + z[792] - z[793] - z[794];
  ar[12] = rear_.J*z[238] + rear_.m*(z[126]*z[319] + z[127]*z[272] - z[867] - z[868]);
  ar[13] = rear_.m*z[851]*(-z[197]*z[3] + z[220]*z[5] + z[3]*z[614] + z[5]*z[611]);
  ar[14] = 0;
  ar[15] = front_.J*z[495] - front_.m*(-z[343]*z[880] - z[351]*z[874] + z[366]*z[882] - z[875]*z[876]);
  ar[16] = -front_.J*(z[582] - z[583]) - front_.m*(z[343]*z[883] - z[366]*z[884] - z[679]*z[874] + z[698]*z[876]);
  ar[17] = -front_.J*z[786] - front_.m*(-z[343]*z[823] + z[366]*z[846] + z[398]*z[811] + z[438]*z[813]);
  ar[18] = -z[885]*(-z[11]*z[888] + z[6]*z[887]);
  ar[19] = -z[889]*(z[3]*z[891] - z[3]*z[895] + z[5]*z[894] - z[893]);
  ar[20] = 0;
  ar[21] = -z[885]*(z[119]*z[893] + z[120]*z[898] - z[155]*z[896] + z[17]*z[897] + z[608]*z[888] - z[782]*z[891]);
  ar[22] = -z[889]*(-z[25]*z[891] + z[25]*z[895] - z[38]*z[892] + z[38]*z[894] - z[896]*(z[599] + z[600] + z[601] + z[602] - z[603] - z[605]));
  ar[23] = 0;
  ar[24] = -rear_.m*(z[17]*z[898] + z[25]*z[892] - z[38]*z[891] - z[6]*z[888] + z[607] - z[897]);
  ar[25] = rear_.m*(z[11]*z[220] + z[11]*z[611] - z[17]*z[606] + z[197]*z[6] - z[6]*z[614]);
  ar[26] = 0;
  ar[27] = z[899]*(z[25]*z[398] + z[438]*z[68] - z[513]*z[6] + z[542]*z[85] - z[564]*z[900] + z[564]*z[901]);
  ar[28] = z[899]*(z[11]*z[398] - z[398]*z[704] - z[438]*z[580] - z[6]*z[713] + z[776]*z[85] + z[781]*z[901]);
  ar[29] = z[899]*(-z[456]*z[902] - z[6]*z[823] + z[840]*z[900] + z[846]*z[85] + z[902]);
  ar[30] = front_.m*(z[0]*z[462]*z[5]*z[908]*z[95] - z[0]*z[5]*z[54]*z[907] - z[25]*z[906] - z[339]*z[570] - z[340]*z[458]*z[490] + z[462]*z[905] + z[513]*z[909] - z[54]*z[904] + z[542]*z[910] + z[68]*z[903]);
  ar[31] = front_.m*(-z[11]*z[906] + z[117]*z[119]*z[52]*z[907] - z[339]*z[784] - z[458]*z[705]*z[911] + z[579]*z[904] - z[580]*z[903] + z[681]*z[905] + z[713]*z[909] + z[744]*z[908] + z[776]*z[910]);
  ar[32] = -front_.m*(-z[0]*z[345]*z[5]*z[797]*z[85]*z[876] - z[337]*z[912] - z[339]*z[917] - z[797]*z[820]*z[874] + z[797]*z[912] - z[85]*z[876]*z[911] - z[909]*z[914]*(z[455] + z[456] - 2) - z[909]*z[916] - z[910]*z[918]);
  ar[33] = -front_.m*(z[25]*z[876] - z[54]*z[914] + z[6]*z[882] - z[68]*z[874] + z[85]*z[880] - z[95]*(-z[544] + z[545] + z[546] + z[547] - z[549] - z[550] + z[551] + z[552] + z[553] + z[554] + z[555] + z[556] + z[557] + z[558] - z[559] - z[560] + z[561] - z[562] + z[563] - z[569]));
  ar[34] = -front_.m*(z[11]*z[876] + z[579]*z[914] + z[580]*z[874] - z[6]*z[884] - z[85]*z[883] + z[95]*(z[431]*(-z[455]*z[709] - z[456]*z[709] + z[783]) - z[55]*(z[768] + z[769] + z[770] - z[771] + z[772] - z[773]) - z[55]*(z[753] - z[754] + z[755] + z[756] - z[757] + z[759] + z[760] - z[761] + z[763] - z[764]) + z[58]*(z[407] - z[687] + z[688] - z[689] + z[691] - z[692] - z[693] + z[695] + z[697] + z[699]) - z[581]*z[878] + z[778]));
  ar[35] = -front_.m*(z[6]*z[918] - z[85]*z[914] + z[85]*z[916] - z[874]*z[95] - z[917]*z[95]);
}

/** Computes the n-d array of shape (12, 12)
 *
 * @param[out] ar a C-array of with 144 elements
 */
//  void Bicycle::gif_ud_zero_du(double ar[144]) const;
void Bicycle::gif_ud_zero_du(double ar[144]) const
{
  double z[629];

  z[0] = sin(state_[1]);
  z[1] = cos(state_[1]);
  z[2] = rear_.Iyy*state_[9];
  z[3] = sin(state_[2]);
  z[4] = rear_.Ixx*z[3];
  z[5] = cos(state_[2]);
  z[6] = rear_.Ixz*z[5];
  z[7] = z[4] - z[6];
  z[8] = state_[9]*z[3];
  z[9] = state_[8]*z[1];
  z[10] = z[5]*z[9];
  z[11] = z[10] + z[8];
  z[12] = z[11]*z[7];
  z[13] = rear_.Ixz*z[3];
  z[14] = rear_.Izz*z[5];
  z[15] = z[13] - z[14];
  z[16] = state_[9]*z[5];
  z[17] = z[1]*z[3];
  z[18] = state_[8]*z[17] - z[16];
  z[19] = z[15]*z[18];
  z[20] = rear_.Ixz*z[11];
  z[21] = rear_.Ixx*z[18];
  z[22] = z[20] - z[21];
  z[23] = rear_.Izz*z[11];
  z[24] = rear_.Ixz*z[18];
  z[25] = z[23] - z[24];
  z[26] = rear_.J*state_[12];
  z[27] = z[26]*z[5];
  z[28] = z[1]*z[5];
  z[29] = state_[8]*z[0];
  z[30] = state_[10] + z[29];
  z[31] = rear_.Iyy*z[30];
  z[32] = state_[10]*z[17];
  z[33] = z[0]*z[16];
  z[34] = z[32] + z[33];
  z[35] = rear_.Iyy*z[11];
  z[36] = state_[10]*z[28];
  z[37] = z[0]*z[8];
  z[38] = z[36] - z[37];
  z[39] = z[1]*z[30];
  z[40] = -rear_.Ixx*z[38] - rear_.Ixz*z[34] + z[0]*z[25] - z[0]*z[35] - z[1]*z[27] - z[15]*z[39] - z[28]*z[31];
  z[41] = rear_.Iyy*z[18];
  z[42] = -rear_.Ixz*z[38] - rear_.Izz*z[34] - z[0]*z[22] - z[0]*z[41] - z[17]*z[26] - z[17]*z[31] + z[39]*z[7];
  z[43] = sin(state_[3]);
  z[44] = z[0]*z[43];
  z[45] = cos(state_[3]);
  z[46] = z[17]*z[45];
  z[47] = z[44] - z[46];
  z[48] = front_.J*state_[13];
  z[49] = z[0]*z[45];
  z[50] = z[17]*z[43];
  z[51] = z[49] + z[50];
  z[52] = state_[11] + z[11];
  z[53] = front_.Iyy*z[52];
  z[54] = z[18]*z[43] + z[30]*z[45];
  z[55] = front_.Iyy*z[54];
  z[56] = state_[11]*z[49];
  z[57] = z[1]*z[43];
  z[58] = state_[9]*z[57];
  z[59] = state_[11]*z[50];
  z[60] = z[56] + z[58] + z[59];
  z[61] = -z[38]*z[45] + z[60];
  z[62] = front_.Ixz*z[47] + front_.Izz*z[28];
  z[63] = front_.Izz*z[52];
  z[64] = -z[18]*z[45] + z[30]*z[43];
  z[65] = front_.Ixz*z[64];
  z[66] = z[63] + z[65];
  z[67] = front_.Ixx*z[61] - front_.Ixz*z[34] - z[28]*z[48] - z[28]*z[55] - z[51]*z[53] + z[51]*z[66] + z[54]*z[62];
  z[68] = front_.Ixx*z[47] + front_.Ixz*z[28];
  z[69] = z[1]*z[45];
  z[70] = -state_[11]*z[44] + state_[11]*z[46] + state_[9]*z[69];
  z[71] = z[38]*z[43] + z[70];
  z[72] = front_.Ixz*z[52];
  z[73] = front_.Ixx*z[64];
  z[74] = z[72] + z[73];
  z[75] = front_.Iyy*z[71] + z[28]*z[74] - z[47]*z[66] + z[52]*z[68] - z[62]*z[64];
  z[76] = front_.Izz*z[34];
  z[77] = z[47]*z[48];
  z[78] = front_.Ixz*z[61];
  z[79] = front_.Iyy*z[64];
  z[80] = z[51]*z[79];
  z[81] = z[47]*z[55];
  z[82] = z[54]*z[68];
  z[83] = z[51]*z[74];
  z[84] = -z[76] + z[77] + z[78] + z[80] + z[81] - z[82] - z[83];
  z[85] = rear_.r*z[28];
  z[86] = pow(z[1], 2);
  z[87] = pow(z[3], 2);
  z[88] = pow(z[5], 2);
  z[89] = z[87] + z[88];
  z[90] = z[86]*z[89];
  z[91] = pow(z[90], -1.0L/2.0L);
  z[92] = rear_.R*z[91];
  z[93] = rear_.r + z[92];
  z[94] = z[28]*z[93];
  z[95] = rear_.b + z[85] - z[94];
  z[96] = z[0]*z[95];
  z[97] = state_[9]*z[1];
  z[98] = rear_.b*z[97];
  z[99] = z[16]*z[86];
  z[100] = rear_.r*z[99];
  z[101] = 2*state_[10] + 2*state_[8]*z[0];
  z[102] = rear_.a*z[0]*z[101];
  z[103] = rear_.r*z[0];
  z[104] = z[103]*z[34];
  z[105] = rear_.a*z[5];
  z[106] = rear_.b*z[3];
  z[107] = z[105] + z[106];
  z[108] = z[1]*z[107];
  z[109] = z[108]*z[11];
  z[110] = z[93]*z[99];
  z[111] = z[17]*z[30];
  z[112] = z[0]*z[111];
  z[113] = z[112]*z[92];
  z[114] = rear_.a*z[11] + rear_.b*z[18];
  z[115] = z[114]*z[28];
  z[116] = rear_.r*z[17];
  z[117] = pow(z[90], -3.0L/2.0L);
  z[118] = rear_.R*z[117]*z[86]*z[89];
  z[119] = rear_.r*z[33] + state_[10]*z[116] - z[118]*z[33] + z[32]*z[92] + z[33]*z[92];
  z[120] = z[0]*z[119];
  z[121] = state_[16]*z[1];
  z[122] = state_[14]*z[91];
  z[123] = state_[15]*z[0]*z[91];
  z[124] = state_[12] + z[30];
  z[125] = z[17]*z[93];
  z[126] = z[103]*z[18] + z[121]*z[5] + z[122]*z[17] - z[123]*z[28] - z[124]*z[125];
  z[127] = z[0]*z[126];
  z[128] = state_[16]*z[0];
  z[129] = z[1]*z[11]*z[3];
  z[130] = z[1]*z[18]*z[5];
  z[131] = state_[15]*z[90]*z[91] + z[128] + z[129]*z[93] - z[130]*z[93];
  z[132] = z[131]*z[28];
  z[133] = z[100] - z[102] - z[104] - z[109] - z[110] - z[113] - z[115] + z[120] + z[127] - z[132] + z[98];
  z[134] = rear_.a - z[116] + z[125];
  z[135] = z[0]*z[134];
  z[136] = rear_.a*z[97];
  z[137] = z[8]*z[86];
  z[138] = rear_.r*z[137];
  z[139] = rear_.b*z[0]*z[101];
  z[140] = z[103]*z[38];
  z[141] = z[108]*z[18];
  z[142] = z[137]*z[93];
  z[143] = z[28]*z[30];
  z[144] = z[0]*z[143];
  z[145] = z[144]*z[92];
  z[146] = z[114]*z[17];
  z[147] = state_[10]*z[85];
  z[148] = rear_.r*z[37];
  z[149] = z[36]*z[92];
  z[150] = z[37]*z[92];
  z[151] = z[118]*z[37];
  z[152] = z[147] - z[148] + z[149] - z[150] + z[151];
  z[153] = z[0]*z[152];
  z[154] = z[103]*z[11] - z[121]*z[3] + z[122]*z[28] + z[123]*z[17] - z[124]*z[94];
  z[155] = z[0]*z[154];
  z[156] = z[131]*z[17];
  z[157] = -z[136] + z[138] - z[139] + z[140] - z[141] - z[142] + z[145] - z[146] - z[153] - z[155] - z[156];
  z[158] = rear_.b*z[5];
  z[159] = rear_.a*z[3];
  z[160] = rear_.b*z[11];
  z[161] = rear_.a*z[18];
  z[162] = z[0]*z[11];
  z[163] = z[28]*z[92];
  z[164] = z[0]*z[18];
  z[165] = z[17]*z[92];
  z[166] = -rear_.a*z[34] + rear_.b*z[38] + z[0]*z[160] - z[0]*z[161] + z[119]*z[17] - z[125]*z[34] + z[126]*z[17] + z[152]*z[28] + z[154]*z[28] + z[158]*z[39] - z[159]*z[39] - z[162]*z[163] - z[164]*z[165] - z[38]*z[94];
  z[167] = front_.r*z[28];
  z[168] = z[86]*z[88];
  z[169] = pow(z[47], 2);
  z[170] = z[168] + z[169];
  z[171] = sqrt(z[170]);
  z[172] = 1.0/z[171];
  z[173] = front_.R*z[172];
  z[174] = front_.r + z[173];
  z[175] = z[174]*z[28];
  z[176] = front_.b - z[175];
  z[177] = z[51]*(z[167] + z[176]);
  z[178] = front_.r*z[51];
  z[179] = z[178]*z[34];
  z[180] = front_.a*z[28] - front_.b*z[47];
  z[181] = z[180]*z[52];
  z[182] = front_.b*z[71];
  z[183] = 2*z[18]*z[43] + 2*z[30]*z[45];
  z[184] = front_.a*z[183]*z[51];
  z[185] = state_[10]*z[5];
  z[186] = z[185]*z[57] - z[44]*z[8] + z[70];
  z[187] = z[167]*z[186];
  z[188] = front_.a*z[52];
  z[189] = front_.b*z[64];
  z[190] = z[188] - z[189];
  z[191] = z[190]*z[28];
  z[192] = z[175]*z[71];
  z[193] = z[47]*z[54];
  z[194] = front_.R*z[172]*z[51];
  z[195] = z[193]*z[194];
  z[196] = state_[18]*z[171];
  z[197] = z[47]*z[52];
  z[198] = z[174]*z[197];
  z[199] = z[28]*z[64];
  z[200] = state_[19]*z[51] + z[174]*z[199] + z[196] - z[198];
  z[201] = z[200]*z[28];
  z[202] = front_.r*z[3];
  z[203] = front_.r*z[0];
  z[204] = pow(z[170], -3.0L/2.0L);
  z[205] = z[185]*z[3]*z[86];
  z[206] = z[0]*z[88]*z[97];
  z[207] = z[49]*z[8];
  z[208] = -z[185]*z[69];
  z[209] = z[207] + z[208] + z[60];
  z[210] = z[209]*z[47];
  z[211] = z[205] + z[206] - z[210];
  z[212] = z[1]*z[211]*z[5];
  z[213] = -front_.R*z[204]*z[212] + state_[10]*z[1]*z[202] + z[16]*z[203] + z[173]*z[32] + z[173]*z[33];
  z[214] = z[213]*z[51];
  z[215] = state_[19]*z[28];
  z[216] = z[178]*z[64];
  z[217] = state_[17]*z[172];
  z[218] = z[217]*z[47];
  z[219] = state_[18]*z[172]*z[51];
  z[220] = z[219]*z[28];
  z[221] = state_[13] + z[54];
  z[222] = z[174]*z[47];
  z[223] = z[221]*z[222];
  z[224] = z[215] - z[216] - z[218] - z[220] + z[223];
  z[225] = z[224]*z[51];
  z[226] = -z[179] - z[181] + z[182] - z[184] + z[187] - z[191] - z[192] + z[195] - z[201] + z[214] + z[225];
  z[227] = -front_.a;
  z[228] = front_.r*z[47];
  z[229] = -z[228];
  z[230] = z[51]*(z[222] + z[227] + z[229]);
  z[231] = 2*front_.b*z[54];
  z[232] = z[231]*z[51];
  z[233] = front_.a*z[71];
  z[234] = z[180]*z[64];
  z[235] = z[178]*z[61];
  z[236] = z[186]*z[228];
  z[237] = z[190]*z[47];
  z[238] = z[28]*z[54];
  z[239] = z[194]*z[238];
  z[240] = z[222]*z[71];
  z[241] = z[200]*z[47];
  z[242] = z[178]*z[52];
  z[243] = z[217]*z[28];
  z[244] = z[219]*z[47];
  z[245] = z[175]*z[221];
  z[246] = z[243] - z[244] - z[245];
  z[247] = state_[19]*z[47] + z[242] + z[246];
  z[248] = z[247]*z[51];
  z[249] = front_.r*z[209];
  z[250] = z[173]*z[209];
  z[251] = front_.R*z[204]*z[47];
  z[252] = z[211]*z[251];
  z[253] = z[249] + z[250] + z[252];
  z[254] = z[253]*z[51];
  z[255] = -z[232] - z[233] + z[234] - z[235] - z[236] + z[237] + z[239] + z[240] + z[241] - z[248] + z[254];
  z[256] = z[51]*z[52];
  z[257] = front_.b*z[54];
  z[258] = front_.a*z[64];
  z[259] = z[28]*z[52];
  z[260] = z[51]*z[64];
  z[261] = z[173]*z[47];
  z[262] = front_.a*z[193] - front_.a*z[34] + front_.b*z[256] - front_.b*z[61] + z[175]*z[61] - z[194]*z[259] - z[213]*z[47] + z[222]*z[34] + z[247]*z[28] - z[253]*z[28] + z[257]*z[28] + z[258]*z[51] - z[260]*z[261];
  z[263] = -z[224]*z[47] + z[262];
  z[264] = state_[10] - z[29];
  z[265] = rear_.Izz*z[3] + z[6];
  z[266] = -z[26]*z[3] - z[264]*z[4] + z[264]*z[6] + z[265]*z[30] - z[3]*z[31];
  z[267] = rear_.Ixx*z[5] + z[13];
  z[268] = -z[13]*z[264] + z[14]*z[264] - z[267]*z[30] + z[27] + z[31]*z[5];
  z[269] = rear_.Iyy*z[9];
  z[270] = z[11]*z[267];
  z[271] = z[18]*z[265];
  z[272] = z[22]*z[3];
  z[273] = z[25]*z[5];
  z[274] = z[264]*z[5];
  z[275] = z[43]*z[5];
  z[276] = state_[8]*z[57];
  z[277] = state_[11]*z[275];
  z[278] = z[264]*z[3];
  z[279] = z[278]*z[45];
  z[280] = z[276] - z[277] - z[279];
  z[281] = z[45]*z[5];
  z[282] = front_.Ixz*z[281] + front_.Izz*z[3];
  z[283] = front_.Ixx*z[280] + front_.Ixz*z[274] + z[275]*z[53] - z[275]*z[66] + z[282]*z[54] - z[3]*z[48] - z[3]*z[55];
  z[284] = front_.Ixx*z[281] + front_.Ixz*z[3];
  z[285] = -state_[11]*z[281] + state_[8]*z[69] + z[278]*z[43];
  z[286] = front_.Iyy*z[285] - z[281]*z[66] - z[282]*z[64] + z[284]*z[52] + z[3]*z[74];
  z[287] = z[281]*z[48];
  z[288] = front_.Izz*z[274];
  z[289] = front_.Ixz*z[280];
  z[290] = z[281]*z[55];
  z[291] = z[275]*z[79];
  z[292] = z[284]*z[54];
  z[293] = z[275]*z[74];
  z[294] = z[287] + z[288] + z[289] + z[290] - z[291] - z[292] + z[293];
  z[295] = rear_.r*z[1];
  z[296] = rear_.r*z[0]*z[30];
  z[297] = -z[158] + z[159];
  z[298] = state_[14]*z[0]*z[91];
  z[299] = state_[15]*z[86]*z[91];
  z[300] = pow(z[0], 2);
  z[301] = state_[15]*z[300]*z[91];
  z[302] = state_[8]*z[86]*z[93];
  z[303] = z[0]*z[5];
  z[304] = state_[14]*z[117]*z[86]*z[89];
  z[305] = state_[15]*z[117]*z[300]*z[86]*z[89];
  z[306] = z[1]*z[89]*z[93];
  z[307] = -z[118] + z[93];
  z[308] = z[124]*z[307];
  z[309] = rear_.b*z[9] + z[103]*z[274] + z[11]*z[295] - z[11]*z[297] - z[11]*z[306] - z[114]*z[3] + z[128]*z[3] - z[131]*z[3] + z[295]*z[8] - z[296]*z[5] - z[298]*z[5] + z[299]*z[3] - z[3]*z[301] + z[3]*z[305] - z[302]*z[5] + z[303]*z[304] + z[303]*z[308];
  z[310] = rear_.a*z[9];
  z[311] = z[128]*z[5];
  z[312] = z[16]*z[295];
  z[313] = z[103]*z[278];
  z[314] = z[296]*z[3];
  z[315] = z[18]*z[295];
  z[316] = z[298]*z[3];
  z[317] = z[18]*z[297];
  z[318] = z[301]*z[5];
  z[319] = z[299]*z[5];
  z[320] = z[3]*z[302];
  z[321] = z[114]*z[5];
  z[322] = z[0]*z[3];
  z[323] = z[304]*z[322];
  z[324] = z[305]*z[5];
  z[325] = z[18]*z[306];
  z[326] = z[308]*z[322];
  z[327] = z[131]*z[5];
  z[328] = -z[310] - z[311] - z[312] + z[313] - z[314] + z[315] - z[316] - z[317] + z[318] - z[319] - z[320] + z[321] + z[323] - z[324] - z[325] + z[326] + z[327];
  z[329] = z[11]*z[3];
  z[330] = z[18]*z[5];
  z[331] = z[1]*z[89];
  z[332] = z[103]*z[329] - z[103]*z[330] + z[105]*z[264] + z[105]*z[30] + z[106]*z[264] + z[106]*z[30] - z[119]*z[5] + z[121] - z[123]*z[331] - z[126]*z[5] + z[152]*z[3] + z[154]*z[3] - z[162]*z[3]*z[307] + z[164]*z[307]*z[5];
  z[333] = z[3]*z[49] + z[57];
  z[334] = state_[19]*z[333];
  z[335] = z[178]*z[274];
  z[336] = front_.a*z[3] - front_.b*z[281];
  z[337] = z[336]*z[52];
  z[338] = front_.b*z[285];
  z[339] = front_.r*z[52];
  z[340] = z[3]*z[44] - z[69];
  z[341] = z[339]*z[340];
  z[342] = front_.a*z[43];
  z[343] = z[342]*z[54];
  z[344] = 2*z[343]*z[5];
  z[345] = z[217]*z[303];
  z[346] = z[186]*z[202];
  z[347] = z[190]*z[3];
  z[348] = z[219]*z[333];
  z[349] = state_[18]*z[172]*z[47];
  z[350] = z[340]*z[349];
  z[351] = z[175]*z[285];
  z[352] = z[0]*z[1]*z[88];
  z[353] = z[333]*z[47];
  z[354] = z[352] - z[353];
  z[355] = state_[17]*z[204]*z[354];
  z[356] = z[28]*z[355];
  z[357] = z[69]*z[88];
  z[358] = z[3]*z[47];
  z[359] = z[357] - z[358];
  z[360] = z[174]*z[52];
  z[361] = z[359]*z[360];
  z[362] = front_.r*z[45];
  z[363] = z[362]*z[51];
  z[364] = z[222]*z[43];
  z[365] = z[363] + z[364];
  z[366] = z[365]*z[5]*z[54];
  z[367] = state_[18]*z[204]*z[354]*z[51];
  z[368] = z[367]*z[47];
  z[369] = -z[352] + z[353];
  z[370] = front_.R*z[204]*z[369];
  z[371] = z[0]*z[173] + z[1]*z[370] + z[203];
  z[372] = z[221]*z[371]*z[5];
  z[373] = z[200]*z[3];
  z[374] = z[213]*z[275];
  z[375] = z[224]*z[275];
  z[376] = z[334] + z[335] - z[337] + z[338] - z[341] + z[344] - z[345] + z[346] - z[347] - z[348] + z[350] - z[351] + z[356] - z[361] - z[366] - z[368] + z[372] - z[373] - z[374] - z[375];
  z[377] = state_[19]*z[5];
  z[378] = z[0]*z[377];
  z[379] = front_.a*z[285];
  z[380] = front_.b*z[275];
  z[381] = z[183]*z[380];
  z[382] = z[336]*z[64];
  z[383] = front_.r*z[64];
  z[384] = z[340]*z[383];
  z[385] = z[178]*z[280];
  z[386] = z[217]*z[333];
  z[387] = z[186]*z[362]*z[5];
  z[388] = z[219]*z[303];
  z[389] = state_[18]*z[1]*z[172]*z[5];
  z[390] = z[340]*z[389];
  z[391] = z[190]*z[281];
  z[392] = z[222]*z[285];
  z[393] = z[355]*z[47];
  z[394] = z[174]*z[57]*z[88] + z[202]*z[51];
  z[395] = z[394]*z[54];
  z[396] = z[174]*z[64];
  z[397] = z[359]*z[396];
  z[398] = z[28]*z[367];
  z[399] = front_.r*z[333];
  z[400] = z[173]*z[333];
  z[401] = z[370]*z[47];
  z[402] = -z[399] - z[400] + z[401];
  z[403] = z[221]*z[402];
  z[404] = z[200]*z[281];
  z[405] = z[247]*z[275];
  z[406] = z[253]*z[275];
  z[407] = -z[378] - z[379] + z[381] + z[382] + z[384] - z[385] - z[386] - z[387] + z[388] + z[390] + z[391] + z[392] - z[393] - z[395] + z[397] - z[398] - z[403] + z[404] + z[405] - z[406];
  z[408] = state_[18]*z[172];
  z[409] = -2*z[352] + 2*z[353];
  z[410] = 1.0/z[170];
  z[411] = z[168]*z[410];
  z[412] = z[169]*z[410];
  z[413] = front_.a*z[45]*z[54];
  z[414] = z[5]*z[64];
  z[415] = front_.a*z[274] - state_[19]*z[340] - z[213]*z[281] - z[222]*z[274] + z[247]*z[3] - z[253]*z[3] + z[257]*z[3] - z[342]*z[414] + z[365]*z[414] - z[371]*z[414] - z[380]*z[52] + z[394]*z[52] + z[413]*z[5];
  z[416] = -front_.b*z[280] + z[175]*z[280] - z[224]*z[281] + z[402]*z[52] + z[408]*(z[354]*z[411] + z[354]*z[412] + z[409]) + z[415];
  z[417] = -rear_.Ixx*z[11] + z[23] - 2*z[24] - z[35];
  z[418] = -rear_.Izz*z[18] - 2*z[20] + z[21] - z[41];
  z[419] = state_[11] - z[10] - z[8];
  z[420] = front_.Ixx*z[52] - front_.Iyy*z[419] - z[63] - 2*z[65];
  z[421] = z[420]*z[43];
  z[422] = z[45]*z[52];
  z[423] = z[419]*z[45];
  z[424] = front_.Ixx*z[423] - front_.Ixz*z[18] + front_.Ixz*z[43]*z[54] - front_.Iyy*z[422] + z[45]*z[66];
  z[425] = z[43]*z[48];
  z[426] = front_.Izz*z[18];
  z[427] = front_.Ixz*z[423];
  z[428] = z[43]*z[55];
  z[429] = front_.Ixx*z[54];
  z[430] = z[429]*z[43];
  z[431] = z[45]*z[79];
  z[432] = z[45]*z[74];
  z[433] = z[425] - z[426] + z[427] + z[428] - z[430] + z[431] - z[432];
  z[434] = 2*z[160];
  z[435] = 2*z[161];
  z[436] = z[11]*z[94];
  z[437] = z[125]*z[18];
  z[438] = z[434] - z[435] - z[436] - z[437];
  z[439] = -z[111]*z[93] + z[119];
  z[440] = -rear_.a*z[101] + z[439];
  z[441] = rear_.b*z[101];
  z[442] = z[143]*z[93];
  z[443] = -z[147] + z[148] - z[149] + z[150] - z[151] + z[442];
  z[444] = -z[441] + z[443];
  z[445] = z[178]*z[43];
  z[446] = z[45]*z[47];
  z[447] = z[174]*z[446];
  z[448] = -z[445] + z[447];
  z[449] = z[43]*z[52];
  z[450] = z[419]*z[43];
  z[451] = z[1]*z[43]*z[5];
  z[452] = z[1]*z[45]*z[5];
  z[453] = z[174]*z[419];
  z[454] = z[17] + z[446];
  z[455] = state_[17]*z[204]*z[454];
  z[456] = z[1]*z[47]*z[5];
  z[457] = state_[18]*z[204]*z[454]*z[51];
  z[458] = front_.R*z[204]*z[454];
  z[459] = z[1]*(-z[1]*z[458]*z[88] + z[173]*z[3] + z[202]);
  z[460] = front_.b*z[449] - front_.b*z[450] + z[168]*z[455] - z[17]*z[217] - z[178]*z[18] + z[213]*z[45] + z[219]*z[452] + z[221]*z[459] + z[339]*z[451] - z[349]*z[451] - z[360]*z[451] - z[377]*z[69] - 2*z[413] + z[451]*z[453] - z[456]*z[457];
  z[461] = z[224]*z[45] + z[448]*z[54] + z[460];
  z[462] = front_.a*z[45];
  z[463] = z[173]*z[45] + z[362] - z[458]*z[47];
  z[464] = -front_.a*z[18] + front_.b*z[422] - front_.b*z[423] + z[18]*z[222] - z[213]*z[43] + z[259]*z[463] + z[343] - z[360]*z[452] + z[377]*z[57] + z[389]*(-2*z[17] + z[411]*z[454] + z[412]*z[454] - 2*z[446]) + z[452]*z[453] - z[459]*z[64] + z[462]*z[64];
  z[465] = -z[224]*z[43] - z[448]*z[64] + z[464];
  z[466] = state_[19]*z[17];
  z[467] = z[342]*z[419];
  z[468] = z[231]*z[45];
  z[469] = z[189]*z[43];
  z[470] = z[363]*z[419];
  z[471] = z[383]*z[451];
  z[472] = z[217]*z[452];
  z[473] = z[408]*z[43]*z[86]*z[88];
  z[474] = front_.r*z[186];
  z[475] = z[43]*z[474];
  z[476] = z[190]*z[43];
  z[477] = z[17]*z[219];
  z[478] = z[222]*z[450];
  z[479] = z[174]*z[452]*z[54];
  z[480] = z[396]*z[451];
  z[481] = z[455]*z[456];
  z[482] = z[168]*z[457];
  z[483] = z[221]*z[28]*z[463];
  z[484] = z[200]*z[43];
  z[485] = z[247]*z[45];
  z[486] = z[253]*z[45];
  z[487] = -z[466] + z[467] - z[468] - z[469] - z[470] - z[471] + z[472] - z[473] - z[475] + z[476] + z[477] - z[478] + z[479] + z[480] - z[481] - z[482] - z[483] + z[484] - z[485] + z[486];
  z[488] = front_.Izz*z[54] + z[429] - z[48] - z[55];
  z[489] = -front_.Izz*z[64] + 2*z[72] + z[73] - z[79];
  z[490] = pow(z[51], 2);
  z[491] = state_[18]*z[490];
  z[492] = z[169]*z[204];
  z[493] = state_[17]*z[51];
  z[494] = z[1]*z[204]*z[47]*z[5];
  z[495] = z[221]*z[51];
  z[496] = front_.R*z[1]*z[204]*z[47]*z[495]*z[5] + z[169]*z[408] - 2*z[188] - z[196] + 2*z[198] - z[228]*z[52] - z[408]*z[490] + z[474] + z[491]*z[492] - z[493]*z[494];
  z[497] = z[47]*z[64];
  z[498] = -front_.R*z[492] + z[174];
  z[499] = -z[178]*z[183] - z[217]*z[51] + z[228]*z[64] + 2*z[258] + z[389]*z[47] + z[491]*z[494] + z[492]*z[493] + z[495]*z[498] - z[497]*(2*front_.R*z[172] + 2*front_.r);
  z[500] = 2*z[242];
  z[501] = z[174]*z[238];
  z[502] = z[199]*z[51];
  z[503] = z[251]*z[502];
  z[504] = z[256]*z[498];
  z[505] = z[244]*(-z[411] - z[412] + 2);
  z[506] = z[246] - z[249] - z[250] - z[252] + z[500] + z[501] - z[503] - z[504] + z[505];
  z[507] = z[107]*z[86];
  z[508] = z[11]*z[5];
  z[509] = z[18]*z[3];
  z[510] = z[508] + z[509];
  z[511] = z[507]*z[510];
  z[512] = front_.J*z[52];
  z[513] = front_.J*z[64];
  z[514] = z[259] + z[497];
  z[515] = z[180]*z[514];
  z[516] = z[174]*z[193] + z[213];
  z[517] = z[253] + z[501];
  z[518] = rear_.m*z[91];
  z[519] = -z[111];
  z[520] = z[32] + z[519];
  z[521] = -z[143];
  z[522] = z[36] + z[521];
  z[523] = rear_.m*z[0]*z[91];
  z[524] = -z[329] + z[330];
  z[525] = state_[9]*z[87] + state_[9]*z[88] + z[524];
  z[526] = z[0]*z[32];
  z[527] = z[18]*z[90];
  z[528] = z[112] - z[526] + z[527] + z[99];
  z[529] = z[0]*z[36] - z[11]*z[90] + z[137] - z[144];
  z[530] = state_[9] + z[524];
  z[531] = z[162] + z[38] + z[521];
  z[532] = -z[32];
  z[533] = -z[33];
  z[534] = z[111] - z[164] + z[532] + z[533];
  z[535] = front_.m*z[172];
  z[536] = z[193] + z[32] + z[33];
  z[537] = z[212]*z[410];
  z[538] = z[536] - z[537];
  z[539] = z[51]*(front_.a - z[222] + z[228]);
  z[540] = z[207] + z[208] + z[238] + z[56] + z[58] + z[59];
  z[541] = z[211]*z[47];
  z[542] = z[410]*z[541] + z[540];
  z[543] = -2*z[205] - 2*z[206] + 2*z[210] + z[211]*z[411] + z[211]*z[412] - z[256]*z[47] + z[502];
  z[544] = z[172]*z[543];
  z[545] = z[172]*z[51];
  z[546] = z[172]*z[186];
  z[547] = z[204]*z[51];
  z[548] = z[171]*z[52] + z[209]*z[545] + z[238]*z[545] + z[47]*z[546] + z[541]*z[547];
  z[549] = z[171]*z[64] + z[193]*z[545] - z[212]*z[547] - z[28]*z[546] + z[32]*z[545] + z[33]*z[545];
  z[550] = z[186] + z[197] - z[199];
  z[551] = -z[256] + z[540];
  z[552] = -z[260] + z[536];
  z[553] = rear_.r*z[0]*z[3];
  z[554] = rear_.r*z[0]*z[5];
  z[555] = z[1]*z[93];
  z[556] = z[297] + z[555]*z[87] + z[555]*z[88];
  z[557] = -z[380] + z[394];
  z[558] = z[5]*(z[342] - z[363] - z[364]);
  z[559] = z[174]*z[357] - z[174]*z[358] + z[336];
  z[560] = z[3]*z[439];
  z[561] = z[174]*z[514];
  z[562] = z[3]*z[520];
  z[563] = z[5]*z[522];
  z[564] = z[1]*z[556];
  z[565] = z[5]*z[528];
  z[566] = z[3]*z[529];
  z[567] = z[3]*z[531];
  z[568] = z[5]*(-z[342] + z[365]);
  z[569] = rear_.b - z[163] - z[85];
  z[570] = rear_.a + z[116] + z[165];
  z[571] = z[176]*z[45];
  z[572] = z[448] - z[462];
  z[573] = z[176]*z[43];
  z[574] = z[152] - z[442];
  z[575] = -rear_.b + z[163] + z[85];
  z[576] = z[176]*z[43]*z[514];
  z[577] = z[445] - z[447];
  z[578] = z[462] + z[577];
  z[579] = -z[193] + z[532] + z[533];
  z[580] = z[537] + z[579];
  z[581] = front_.a + z[229] - z[261];
  z[582] = z[227] + z[228] + z[261];
  z[583] = -z[243] + z[244] + z[245] + z[253] - z[500] - z[501] + z[503] + z[504] - z[505];
  z[584] = rear_.m*z[93];
  z[585] = z[309]*z[5];
  z[586] = rear_.m*z[1]*z[93];
  z[587] = z[441] + z[574];
  z[588] = -z[3]*z[587] + z[440]*z[5];
  z[589] = -z[3]*z[574] + z[439]*z[5];
  z[590] = rear_.m*z[1]*z[91]*z[93];
  z[591] = z[3]*z[522];
  z[592] = z[5]*z[520];
  z[593] = -z[3]*z[528] + z[5]*z[529];
  z[594] = z[5]*z[531];
  z[595] = front_.m*z[174];
  z[596] = -z[226]*z[28] + z[255]*z[47];
  z[597] = -z[28]*z[376] + z[407]*z[47];
  z[598] = -z[215] + z[216] + z[218] + z[220] - z[223];
  z[599] = -z[45]*z[598] + z[460] - z[54]*z[577];
  z[600] = z[466] - z[467] + z[468] + z[469] + z[470] + z[471] - z[472] + z[473] + z[475] - z[476] - z[477] + z[478] - z[479] - z[480] + z[481] + z[482] + z[483] - z[484] + z[485] - z[486];
  z[601] = -z[28]*z[496] + z[47]*z[499];
  z[602] = -z[28]*z[516] + z[47]*z[517];
  z[603] = z[47]*z[542];
  z[604] = z[28]*z[548] + z[47]*z[549];
  z[605] = z[28]*z[551];
  z[606] = rear_.m*z[1]*z[91];
  z[607] = -z[100] + z[102] + z[104] + z[109] + z[110] + z[113] + z[115] - z[120] - z[127] + z[132] - z[98];
  z[608] = z[136] - z[138] + z[139] - z[140] + z[141] + z[142] - z[145] + z[146] + z[153] + z[155] + z[156];
  z[609] = z[310] + z[311] + z[312] - z[313] + z[314] - z[315] + z[316] + z[317] - z[318] + z[319] + z[320] - z[321] - z[323] + z[324] + z[325] - z[326] - z[327];
  z[610] = rear_.m/(z[1]*z[89]);
  z[611] = z[164] + z[34] + z[519];
  z[612] = -z[434] + z[435] + z[436] + z[437];
  z[613] = z[510]*z[90];
  z[614] = z[565] + z[566];
  z[615] = rear_.m*z[1];
  z[616] = z[0]*z[510];
  z[617] = z[260] + z[579];
  z[618] = z[172]*z[47]*z[51];
  z[619] = z[1]*z[172]*z[5]*z[51];
  z[620] = z[47]*z[496];
  z[621] = z[47]*z[516];
  z[622] = z[410]*z[51];
  z[623] = z[47]*z[538];
  z[624] = z[28]*z[542];
  z[625] = z[47]*z[548];
  z[626] = z[47]*z[551];
  z[627] = -z[276] + z[277] + z[279];
  z[628] = z[51]*z[514];

  ar[0] = -front_.m*(z[177]*z[226] + z[180]*z[263] + z[230]*z[255]) - rear_.m*(z[108]*z[166] + z[133]*z[96] - z[135]*z[157]) - z[0]*z[1]*(-z[12] - z[19] + z[2] + z[22]*z[5] + z[25]*z[3]) + z[17]*z[40] - z[28]*z[42] - z[28]*z[84] - z[47]*z[67] - z[51]*z[75];
  ar[1] = -front_.m*(z[177]*z[376] + z[180]*z[416] + z[230]*z[407]) - rear_.m*(z[108]*z[332] - z[135]*z[328] + z[309]*z[96]) - z[0]*(z[269] + z[270] + z[271] + z[272] - z[273]) + z[17]*z[266] - z[268]*z[28] - z[28]*z[294] - z[283]*z[47] - z[286]*z[51];
  ar[2] = -front_.m*(z[177]*z[461] + z[180]*z[465] + z[230]*z[487]) - rear_.m*(z[108]*z[438] - z[135]*z[444] + z[440]*z[96]) + z[17]*z[417] - z[28]*z[418] - z[28]*z[433] - z[421]*z[51] - z[424]*z[47];
  ar[3] = -front_.m*(z[177]*z[496] + z[180]*z[506] + z[230]*z[499]) - z[47]*z[488] - z[489]*z[51];
  ar[4] = -rear_.J*z[129] + rear_.J*z[130] - rear_.m*(-z[135]*z[443] + z[439]*z[96] - z[511]*z[93]);
  ar[5] = -front_.m*(-z[174]*z[515] + z[177]*z[516] + z[230]*z[517]) - z[28]*z[513] + z[47]*z[512];
  ar[6] = z[518]*(z[135]*z[522] - z[511] + z[520]*z[96]);
  ar[7] = -z[523]*(z[134]*z[528] - z[507]*z[525] + z[529]*z[95]);
  ar[8] = rear_.m*(z[135]*z[534] - z[507]*z[530] + z[531]*z[96]);
  ar[9] = -z[535]*(-z[177]*z[538] + z[515] + z[539]*z[542]);
  ar[10] = -front_.m*(-z[177]*z[548] + z[180]*z[544] - z[539]*z[549]);
  ar[11] = -front_.m*(z[177]*z[551] + z[180]*z[550] + z[539]*z[552]);
  ar[12] = -front_.m*(z[226]*z[557] + z[255]*z[558] + z[263]*z[559]) - rear_.m*(z[133]*z[553] - z[157]*z[554] + z[166]*z[556]) + z[275]*z[75] - z[281]*z[67] - z[3]*z[42] - z[3]*z[84] - z[40]*z[5];
  ar[13] = -front_.m*(z[376]*z[557] + z[407]*z[558] + z[416]*z[559]) - rear_.m*(z[309]*z[553] - z[328]*z[554] + z[332]*z[556]) - z[266]*z[5] - z[268]*z[3] + z[275]*z[286] - z[281]*z[283] - z[294]*z[3];
  ar[14] = -front_.m*(z[461]*z[557] + z[465]*z[559] + z[487]*z[558]) - rear_.m*(z[438]*z[556] + z[440]*z[553] - z[444]*z[554]) - z[281]*z[424] - z[3]*z[418] - z[3]*z[433] - z[417]*z[5] + z[420]*pow(z[43], 2)*z[5];
  ar[15] = -front_.m*(z[496]*z[557] + z[499]*z[558] + z[506]*z[559]) + z[275]*z[489] - z[281]*z[488];
  ar[16] = rear_.J*z[508] + rear_.J*z[509] + rear_.m*(-z[103]*z[560] + z[443]*z[554] + z[510]*z[555]*z[556]);
  ar[17] = -front_.m*(z[516]*z[557] + z[517]*z[558] - z[559]*z[561]) + z[281]*z[512] - z[3]*z[513];
  ar[18] = z[518]*(z[103]*z[562] + z[103]*z[563] - z[510]*z[564]);
  ar[19] = -z[523]*(rear_.r*z[565] + rear_.r*z[566] - z[525]*z[564]);
  ar[20] = rear_.m*(z[103]*z[567] - z[530]*z[564] + z[534]*z[554]);
  ar[21] = -z[535]*(z[514]*z[559] - z[538]*z[557] + z[542]*z[568]);
  ar[22] = -front_.m*(z[544]*z[559] - z[548]*z[557] - z[549]*z[568]);
  ar[23] = -front_.m*(z[550]*z[559] + z[551]*z[557] + z[552]*z[568]);
  ar[24] = -front_.m*(z[226]*z[571] + z[255]*z[572] - z[263]*z[573]) - rear_.m*(z[133]*z[569] - z[157]*z[570]) + z[1]*z[12] + z[1]*z[19] - z[1]*z[2] - z[17]*z[25] - z[22]*z[28] - z[43]*z[67] - z[45]*z[75];
  ar[25] = -front_.m*(z[376]*z[571] + z[407]*z[572] - z[416]*z[573]) - rear_.m*(z[309]*z[569] - z[328]*z[570]) - z[269] - z[270] - z[271] - z[272] + z[273] - z[283]*z[43] - z[286]*z[45];
  ar[26] = -front_.m*(z[461]*z[571] - z[465]*z[573] + z[487]*z[572]) - rear_.m*(z[440]*z[569] - z[444]*z[570]) - z[421]*z[45] - z[424]*z[43];
  ar[27] = -front_.m*(z[496]*z[571] + z[499]*z[572] - z[506]*z[573]) - z[43]*z[488] - z[45]*z[489];
  ar[28] = -rear_.m*(-z[439]*z[575] + z[570]*z[574]);
  ar[29] = front_.J*z[449] - front_.m*(z[174]*z[576] + z[516]*z[571] - z[517]*z[578]);
  ar[30] = z[518]*(-z[520]*z[575] + z[522]*z[570]);
  ar[31] = z[518]*(z[529]*z[575] + z[570]*(-z[112] + z[526] - z[527] - z[99]));
  ar[32] = rear_.m*(-z[531]*z[575] + z[534]*z[570]);
  ar[33] = z[535]*(z[542]*z[572] - z[571]*z[580] + z[576]);
  ar[34] = front_.m*(z[544]*z[573] + z[548]*z[571] - z[549]*z[572]);
  ar[35] = -front_.m*(-z[550]*z[573] + z[551]*z[571] + z[552]*z[578]);
  ar[36] = -front_.m*(z[178]*z[226] + z[263]*z[581]) + z[76] - z[77] - z[78] - z[80] - z[81] + z[82] + z[83];
  ar[37] = -front_.m*(z[178]*z[376] + z[416]*z[581]) - z[287] - z[288] - z[289] - z[290] + z[291] + z[292] - z[293];
  ar[38] = -front_.m*(z[178]*z[461] + z[465]*z[581]) - z[425] + z[426] - z[427] - z[428] + z[430] - z[431] + z[432];
  ar[39] = -front_.m*(z[178]*z[496] + z[582]*z[583]);
  ar[40] = 0;
  ar[41] = -front_.m*(z[178]*z[516] + z[561]*z[582]) - z[513];
  ar[42] = 0;
  ar[43] = 0;
  ar[44] = 0;
  ar[45] = z[535]*(z[178]*z[538] + z[514]*z[582]);
  ar[46] = front_.m*(z[178]*z[548] + z[544]*z[582]);
  ar[47] = -front_.m*(z[178]*z[551] - z[550]*z[582]);
  ar[48] = z[1]*(-rear_.J*state_[9] + z[584]*(z[133]*z[5] + z[157]*z[3]));
  ar[49] = z[1]*(-rear_.J*state_[8] + z[584]*(z[3]*z[328] + z[585]));
  ar[50] = z[586]*z[588];
  ar[51] = 0;
  ar[52] = z[586]*z[589];
  ar[53] = 0;
  ar[54] = z[590]*(z[591] - z[592]);
  ar[55] = z[590]*z[593];
  ar[56] = z[586]*(z[3]*z[534] - z[594]);
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = -front_.J*z[71] - z[595]*z[596];
  ar[61] = -front_.J*z[285] - z[595]*z[597];
  ar[62] = front_.J*z[450] + z[595]*(z[28]*z[599] + z[47]*z[600]);
  ar[63] = z[513] - z[595]*z[601];
  ar[64] = 0;
  ar[65] = -z[595]*z[602];
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = z[174]*z[535]*(z[28]*z[580] + z[603]);
  ar[70] = -z[595]*z[604];
  ar[71] = z[595]*(z[47]*z[552] + z[605]);
  ar[72] = z[606]*(z[3]*z[608] + z[5]*z[607]);
  ar[73] = -z[606]*(-z[3]*z[609] + z[585]);
  ar[74] = -z[588]*z[606];
  ar[75] = 0;
  ar[76] = -z[589]*z[606];
  ar[77] = 0;
  ar[78] = z[610]*(-z[591] + z[592]);
  ar[79] = -z[593]*z[610];
  ar[80] = z[606]*(z[3]*z[611] + z[594]);
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = 0;
  ar[84] = -z[606]*(z[166]*z[331] + z[303]*z[608] - z[322]*z[607]);
  ar[85] = -z[606]*(z[303]*z[609] + z[309]*z[322] + z[331]*z[332]);
  ar[86] = -z[606]*(z[303]*z[587] + z[322]*z[440] - z[331]*z[612]);
  ar[87] = 0;
  ar[88] = z[606]*(z[303]*z[443] - z[322]*z[439] + z[613]*z[93]);
  ar[89] = 0;
  ar[90] = z[610]*(z[0]*z[562] + z[0]*z[563] - z[613]);
  ar[91] = -z[0]*z[610]*(-z[525]*z[90] + z[614]);
  ar[92] = z[606]*(z[303]*z[534] + z[322]*z[531] - z[530]*z[90]);
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = 0;
  ar[96] = -rear_.m*(z[0]*z[166] + z[17]*z[607] - z[28]*z[608]);
  ar[97] = -rear_.m*(z[0]*z[332] - z[17]*z[309] - z[28]*z[609]);
  ar[98] = rear_.m*(z[0]*z[612] + z[17]*z[440] + z[28]*z[587]);
  ar[99] = 0;
  ar[100] = z[615]*(-z[443]*z[5] + z[560] + z[616]*z[93]);
  ar[101] = 0;
  ar[102] = -z[606]*(z[562] + z[563] + z[616]);
  ar[103] = z[606]*(z[300]*z[525] + z[614]);
  ar[104] = -z[615]*(z[0]*z[530] - z[5]*z[611] + z[567]);
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = z[535]*z[596];
  ar[109] = z[535]*z[597];
  ar[110] = z[535]*(-z[28]*z[461] + z[47]*z[487]);
  ar[111] = z[535]*z[601];
  ar[112] = 0;
  ar[113] = z[535]*z[602];
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = -front_.m*z[410]*(-z[28]*z[538] + z[603]);
  ar[118] = z[535]*z[604];
  ar[119] = z[535]*(z[47]*z[617] - z[605]);
  ar[120] = front_.m*(-z[171]*z[263] + z[226]*z[618] + z[255]*z[619]);
  ar[121] = front_.m*(-z[171]*z[416] + z[376]*z[618] + z[407]*z[619]);
  ar[122] = front_.m*(-z[171]*z[465] + z[461]*z[618] + z[487]*z[619]);
  ar[123] = front_.m*(-z[171]*z[506] + z[499]*z[619] + z[545]*z[620]);
  ar[124] = 0;
  ar[125] = front_.m*(z[171]*z[561] + z[517]*z[619] + z[545]*z[621]);
  ar[126] = 0;
  ar[127] = 0;
  ar[128] = 0;
  ar[129] = -front_.m*(z[514] + z[622]*z[623] + z[622]*z[624]);
  ar[130] = -front_.m*(z[543] + z[545]*z[625] - z[549]*z[619]);
  ar[131] = front_.m*(-z[171]*z[550] + z[545]*z[626] + z[617]*z[619]);
  ar[132] = -front_.m*(-z[28]*(z[232] + z[233] - z[234] + z[235] + z[236] - z[237] - z[239] - z[240] - z[241] + z[248] - z[254]) - z[47]*(z[179] + z[181] - z[182] + z[184] - z[187] + z[191] + z[192] - z[195] + z[201] - z[214] - z[225]) + z[51]*(z[262] + z[47]*z[598]));
  ar[133] = -front_.m*(-z[28]*(z[378] + z[379] - z[381] - z[382] - z[384] + z[385] + z[386] + z[387] - z[388] - z[390] - z[391] - z[392] + z[393] + z[395] - z[397] + z[398] + z[403] - z[404] - z[405] + z[406]) - z[47]*(-z[334] - z[335] + z[337] - z[338] + z[341] - z[344] + z[345] - z[346] + z[347] + z[348] - z[350] + z[351] - z[356] + z[361] + z[366] + z[368] - z[372] + z[373] + z[374] + z[375]) + z[51]*(front_.b*z[627] - z[175]*z[627] + z[281]*z[598] + z[408]*(-z[369]*z[411] - z[369]*z[412] + z[409]) + z[415] - z[52]*(z[399] + z[400] - z[401])));
  ar[134] = -front_.m*(-z[28]*z[600] + z[47]*z[599] + z[51]*(z[43]*z[598] + z[464] + z[577]*z[64]));
  ar[135] = -front_.m*(z[28]*z[499] - z[51]*z[583] + z[620]);
  ar[136] = 0;
  ar[137] = -front_.m*(-z[174]*z[628] + z[28]*z[517] + z[621]);
  ar[138] = 0;
  ar[139] = 0;
  ar[140] = 0;
  ar[141] = -z[535]*(-z[623] - z[624] + z[628]);
  ar[142] = -front_.m*(z[28]*z[549] + z[543]*z[545] - z[625]);
  ar[143] = -front_.m*(-z[28]*z[552] + z[51]*z[550] + z[626]);
}

/** Computes the n-d array of shape (12)
 *
 * @param[out] ar a C-array of with 12 elements
 */
//  void Bicycle::gaf(double ar[12]) const;
void Bicycle::gaf(double ar[12]) const
{
  double z[93];

  z[0] = sin(state_[1]);
  z[1] = sin(state_[2]);
  z[2] = cos(state_[1]);
  z[3] = z[1]*z[2];
  z[4] = front_.Tz + steer_torque_;
  z[5] = cos(state_[2]);
  z[6] = z[2]*z[5];
  z[7] = rear_.Tz - steer_torque_;
  z[8] = rear_.Fy*z[2];
  z[9] = rear_.a*z[5];
  z[10] = rear_.b*z[1];
  z[11] = sin(state_[3]);
  z[12] = cos(state_[3]);
  z[13] = z[0]*z[11] - z[12]*z[3];
  z[14] = front_.Tw - front_.Ty;
  z[15] = z[0]*z[12] + z[11]*z[3];
  z[16] = front_.a*z[6] - front_.b*z[13];
  z[17] = rear_.r*z[6];
  z[18] = pow(z[2], 2);
  z[19] = pow(z[1], 2);
  z[20] = pow(z[5], 2);
  z[21] = z[19] + z[20];
  z[22] = z[18]*z[21];
  z[23] = pow(z[22], -1.0L/2.0L);
  z[24] = rear_.R*z[23];
  z[25] = rear_.r + z[24];
  z[26] = z[25]*z[6];
  z[27] = rear_.b + z[17] - z[26];
  z[28] = rear_.r*z[3];
  z[29] = z[25]*z[3];
  z[30] = rear_.a - z[28] + z[29];
  z[31] = z[18]*z[20];
  z[32] = pow(z[13], 2);
  z[33] = z[31] + z[32];
  z[34] = sqrt(z[33]);
  z[35] = 1.0/z[34];
  z[36] = front_.R*z[35];
  z[37] = front_.r + z[36];
  z[38] = front_.b - z[37]*z[6];
  z[39] = front_.r*z[6] + z[38];
  z[40] = front_.r*z[13];
  z[41] = z[13]*z[37];
  z[42] = front_.a + z[40] - z[41];
  z[43] = g_*rear_.m*z[2];
  z[44] = g_*front_.m*z[15];
  z[45] = z[12]*z[5];
  z[46] = rear_.Fx*z[1];
  z[47] = rear_.r*z[0];
  z[48] = rear_.Fz*z[5];
  z[49] = z[11]*z[5];
  z[50] = rear_.a*z[1];
  z[51] = rear_.b*z[5];
  z[52] = z[2]*z[25];
  z[53] = z[19]*z[52];
  z[54] = z[20]*z[52];
  z[55] = front_.r*z[15];
  z[56] = z[2]*z[20]*z[37];
  z[57] = -front_.b*z[49] + z[1]*z[55] + z[11]*z[56];
  z[58] = -front_.a*z[11] + z[11]*z[41] + z[12]*z[55];
  z[59] = g_*rear_.m;
  z[60] = rear_.r*z[2];
  z[61] = front_.a*z[1] - front_.b*z[45] - z[1]*z[41] + z[12]*z[56];
  z[62] = g_*front_.m;
  z[63] = rear_.a + z[24]*z[3] + z[28];
  z[64] = -rear_.b + z[17] + z[24]*z[6];
  z[65] = z[12]*z[38];
  z[66] = z[11]*z[38];
  z[67] = front_.a*z[12] + z[11]*z[55] - z[12]*z[41];
  z[68] = z[13]*z[36];
  z[69] = front_.Fx*z[2]*z[5];
  z[70] = front_.Fz*z[13];
  z[71] = z[23]*z[5];
  z[72] = z[1]*z[23];
  z[73] = 1.0/z[2];
  z[74] = rear_.Gy*z[0];
  z[75] = rear_.Gx*z[5] + z[1]*z[74];
  z[76] = 1.0/z[21];
  z[77] = z[73]*z[75]*z[76];
  z[78] = rear_.Gx*z[1] - z[5]*z[74];
  z[79] = z[73]*z[76]*z[78];
  z[80] = z[0]*z[23];
  z[81] = pow(z[0], 2) + z[18]*z[19] + z[31];
  z[82] = 1.0/z[33];
  z[83] = front_.Gy*z[15];
  z[84] = front_.Gx*z[6] - z[13]*z[83];
  z[85] = z[82]*z[84];
  z[86] = front_.Gx*z[13] + z[6]*z[83];
  z[87] = front_.Fz*z[6];
  z[88] = z[15]*z[35];
  z[89] = front_.Fx*z[13];
  z[90] = z[2]*z[5]*z[86];
  z[91] = z[31]*z[35] + z[32]*z[35] - z[34];
  z[92] = pow(z[15], 2) + z[33];

  ar[0] = front_.Fx*z[15]*z[39] + rear_.Fx*z[0]*z[27] + front_.Fy*z[16] - front_.Fz*z[15]*z[42] - rear_.Fz*z[0]*z[30] + rear_.Tw*z[0] + front_.Tx*z[13] - rear_.Tx*z[3] - z[0]*z[43]*(z[1]*z[27] - z[10] + z[30]*z[5] - z[9]) - z[0]*(rear_.Tw - rear_.Ty) - z[14]*z[15] + z[4]*z[6] + z[44]*(z[13]*z[39] + z[16] - z[42]*z[6]) + z[6]*z[7] + z[8]*(z[10] + z[9]);
  ar[1] = front_.Fx*z[57] + front_.Fy*z[61] + rear_.Fy*(z[50] - z[51] + z[53] + z[54]) - front_.Fz*z[5]*z[58] + front_.Tx*z[45] + rear_.Tx*z[5] - z[0]*z[59]*(z[19]*z[60] + z[20]*z[60] - z[50] + z[51] - z[53] - z[54]) + z[1]*z[4] + z[1]*z[7] + z[14]*z[49] + z[46]*z[47] - z[47]*z[48] + z[62]*(z[13]*z[57] + z[15]*z[61] - z[2]*z[20]*z[58]);
  ar[2] = front_.Fx*z[65] - rear_.Fx*z[64] - front_.Fy*z[66] - front_.Fz*z[67] - rear_.Fz*z[63] + front_.Tx*z[11] + rear_.Ty - z[12]*z[14] - z[43]*(-z[1]*z[64] + z[5]*z[63]) + z[62]*(z[13]*z[65] - z[15]*z[66] - z[6]*z[67]);
  ar[3] = front_.Fx*z[55] - front_.Fy*(-front_.a + z[40] + z[68]) + z[4] + z[44]*(front_.a - z[68]);
  ar[4] = -rear_.Fx*z[26] - rear_.Fz*z[29] + rear_.Tw;
  ar[5] = front_.Tw - z[37]*z[69] + z[37]*z[70];
  ar[6] = z[2]*(rear_.Fx*z[71] + rear_.Fz*z[72] + z[1]*z[79] + z[5]*z[77]);
  ar[7] = z[2]*(rear_.Gy*z[2]*z[21] + z[0]*z[1]*z[77] - z[0]*z[5]*z[79] + z[21]*z[23]*z[8] + z[46]*z[80] - z[48]*z[80]);
  ar[8] = -rear_.Fx*z[3] + rear_.Fy*z[0] + rear_.Fz*z[6] + rear_.Gy*z[0]*z[22]*z[23] + rear_.Gz*z[81] + z[18]*z[71]*z[78] - z[18]*z[72]*z[75] + z[59]*z[81];
  ar[9] = z[13]*z[82]*z[86] + z[35]*z[69] - z[35]*z[70] + z[6]*z[85];
  ar[10] = front_.Fy*z[34] + front_.Gy*z[33] - front_.Gz*z[15]*z[91] - z[13]*z[15]*z[85] + z[15]*z[82]*z[90] - z[44]*z[91] - z[87]*z[88] - z[88]*z[89];
  ar[11] = front_.Fy*z[15] + front_.Gz*z[92] + z[13]*z[35]*z[84] + z[34]*z[83] - z[35]*z[90] + z[62]*z[92] + z[87] + z[89];
}

/** Computes the n-d array of shape (12, 3)
 *
 * @param[out] ar a C-array of with 36 elements
 */
//  void Bicycle::gaf_dq(double ar[36]) const;
void Bicycle::gaf_dq(double ar[36]) const
{
  double z[309];

  z[0] = cos(state_[1]);
  z[1] = sin(state_[1]);
  z[2] = sin(state_[2]);
  z[3] = rear_.Tx*z[2];
  z[4] = cos(state_[2]);
  z[5] = front_.Tz + steer_torque_;
  z[6] = z[4]*z[5];
  z[7] = z[1]*z[4];
  z[8] = rear_.Tz - steer_torque_;
  z[9] = rear_.a*z[4] + rear_.b*z[2];
  z[10] = rear_.Fy*z[9];
  z[11] = sin(state_[3]);
  z[12] = cos(state_[3]);
  z[13] = z[1]*z[12];
  z[14] = z[0]*z[11] + z[13]*z[2];
  z[15] = front_.Tw - front_.Ty;
  z[16] = z[1]*z[11];
  z[17] = -z[0]*z[12] + z[16]*z[2];
  z[18] = pow(z[0], 2);
  z[19] = rear_.r*z[18];
  z[20] = pow(z[1], 2);
  z[21] = rear_.r*z[20];
  z[22] = pow(z[2], 2);
  z[23] = pow(z[4], 2);
  z[24] = z[22] + z[23];
  z[25] = z[18]*z[24];
  z[26] = pow(z[25], -1.0L/2.0L);
  z[27] = rear_.R*z[26];
  z[28] = rear_.r + z[27];
  z[29] = z[18]*z[28];
  z[30] = z[20]*z[4];
  z[31] = pow(z[25], -3.0L/2.0L);
  z[32] = -rear_.R*z[18]*z[24]*z[31] + z[28];
  z[33] = rear_.b*z[0] + z[19]*z[4] - z[21]*z[4] - z[29]*z[4] + z[30]*z[32];
  z[34] = z[2]*z[20];
  z[35] = rear_.a*z[0] - z[19]*z[2] + z[2]*z[21] + z[2]*z[29] - z[32]*z[34];
  z[36] = front_.r*z[1];
  z[37] = z[0]*z[2];
  z[38] = z[11]*z[37] + z[13];
  z[39] = z[38]*z[4];
  z[40] = z[0]*z[4];
  z[41] = front_.r*z[40];
  z[42] = z[18]*z[23];
  z[43] = -z[12]*z[37] + z[16];
  z[44] = pow(z[43], 2);
  z[45] = z[42] + z[44];
  z[46] = sqrt(z[45]);
  z[47] = 1.0/z[46];
  z[48] = front_.R*z[47];
  z[49] = front_.r + z[48];
  z[50] = z[40]*z[49];
  z[51] = pow(z[45], -3.0L/2.0L);
  z[52] = front_.R*z[51];
  z[53] = z[0]*z[1]*z[23];
  z[54] = z[14]*z[43];
  z[55] = -z[53] + z[54];
  z[56] = z[0]*z[52]*z[55] + z[1]*z[48] + z[36];
  z[57] = front_.b*z[17] + z[17]*z[41] - z[17]*z[50] + z[36]*z[39] - z[39]*z[56];
  z[58] = front_.r*z[14];
  z[59] = front_.r*z[43];
  z[60] = -z[17]*z[59] + z[38]*z[58];
  z[61] = z[43]*z[49];
  z[62] = z[14]*z[48];
  z[63] = front_.R*z[43]*z[51];
  z[64] = z[55]*z[63];
  z[65] = -z[58] - z[62] + z[64];
  z[66] = -front_.a*z[17] + z[17]*z[61] + z[38]*z[65] + z[60];
  z[67] = g_*rear_.m;
  z[68] = rear_.r*z[37];
  z[69] = rear_.a + z[28]*z[37] - z[68];
  z[70] = rear_.r*z[40];
  z[71] = rear_.b - z[28]*z[40] + z[70];
  z[72] = front_.a*z[4];
  z[73] = z[4]*z[56];
  z[74] = front_.b*z[14] + z[1]*z[72] - z[14]*z[50] - z[40]*z[65] + z[43]*z[73] - z[61]*z[7];
  z[75] = g_*front_.m;
  z[76] = -front_.b*z[43] + z[0]*z[72];
  z[77] = front_.b - z[50];
  z[78] = z[41] + z[77];
  z[79] = z[38]*z[78];
  z[80] = z[38]*(front_.a + z[59] - z[61]);
  z[81] = front_.Tx*z[12];
  z[82] = z[11]*z[4];
  z[83] = rear_.a*z[2];
  z[84] = rear_.b*z[4];
  z[85] = z[83] - z[84];
  z[86] = rear_.Fx*z[2];
  z[87] = z[1]*z[86];
  z[88] = rear_.Fz*z[4];
  z[89] = z[1]*z[88];
  z[90] = g_*rear_.m*z[1];
  z[91] = rear_.R*z[0]*z[26];
  z[92] = front_.b*z[11];
  z[93] = z[4]*z[92];
  z[94] = z[0]*z[11]*z[23];
  z[95] = front_.r*z[2];
  z[96] = z[38]*z[95];
  z[97] = z[49]*z[94];
  z[98] = z[12]*z[43];
  z[99] = z[37] + z[98];
  z[100] = z[0]*z[23]*z[99];
  z[101] = -z[100]*z[52] + z[2]*z[48] + z[95];
  z[102] = front_.r*z[94] + z[101]*z[38] + z[93] - z[96] - z[97];
  z[103] = front_.Fz*z[4];
  z[104] = front_.a*z[11];
  z[105] = z[11]*z[59];
  z[106] = front_.r*z[12];
  z[107] = z[106]*z[38];
  z[108] = -z[107];
  z[109] = z[11]*z[61];
  z[110] = z[104] + z[105] + z[108] - z[109];
  z[111] = z[106] + z[12]*z[48] - z[63]*z[99];
  z[112] = z[111]*z[38];
  z[113] = z[110] + z[112];
  z[114] = front_.a*z[2];
  z[115] = front_.b*z[12];
  z[116] = z[115]*z[4];
  z[117] = z[0]*z[12]*z[49];
  z[118] = z[117]*z[23];
  z[119] = z[2]*z[61];
  z[120] = z[118] - z[119];
  z[121] = z[114] - z[116] + z[120];
  z[122] = z[0]*z[23];
  z[123] = z[101]*z[43] - z[111]*z[122];
  z[124] = z[121] + z[123];
  z[125] = z[12]*z[4];
  z[126] = front_.Fx*z[43];
  z[127] = pow(z[38], 2);
  z[128] = front_.R*z[0]*z[4]*z[51];
  z[129] = -front_.b + z[127]*z[128] - z[41] + z[50];
  z[130] = z[44]*z[52];
  z[131] = -z[130] + z[49];
  z[132] = z[130]*z[40] + z[131]*z[40] + z[77];
  z[133] = front_.r*z[44];
  z[134] = front_.r*z[127];
  z[135] = z[127]*z[131];
  z[136] = front_.a*z[43] + z[133] - z[134] + z[135] - z[44]*z[49];
  z[137] = rear_.r*z[0];
  z[138] = z[1]*z[32];
  z[139] = z[23]*z[56];
  z[140] = z[11]*z[139] + z[17]*z[95];
  z[141] = z[58] + z[62] - z[64];
  z[142] = z[106]*z[17] - z[11]*z[141];
  z[143] = z[0]*z[28];
  z[144] = z[143]*z[22] + z[143]*z[23];
  z[145] = z[20]*z[24];
  z[146] = z[12]*z[139] + z[141]*z[2];
  z[147] = -z[104] + z[107] + z[109];
  z[148] = -z[93] + z[97];
  z[149] = z[148] + z[96];
  z[150] = rear_.Fx*z[4];
  z[151] = rear_.r*z[1];
  z[152] = rear_.Fz*z[2];
  z[153] = z[11]*z[15];
  z[154] = z[0]*z[11]*z[4];
  z[155] = z[0]*z[2]*z[49];
  z[156] = front_.r*z[39] - z[101]*z[154] + z[154]*z[95] - z[155]*z[82] + z[2]*z[92];
  z[157] = -z[106]*z[94] - z[11]*z[114] + z[11]*z[119] + z[111]*z[94] + z[12]*z[96];
  z[158] = z[0]*z[12]*z[4];
  z[159] = z[0]*z[2]*z[4];
  z[160] = -z[101]*z[158] + z[111]*z[159] + z[115]*z[2] - z[125]*z[155] - z[4]*z[61] + z[72];
  z[161] = front_.R*z[38]*z[43]*z[51];
  z[162] = z[116] - z[118] + z[161]*z[94] + z[43]*z[95];
  z[163] = front_.a*z[12];
  z[164] = z[11]*z[38];
  z[165] = front_.r*z[164];
  z[166] = z[49]*z[98];
  z[167] = z[163] + z[165] - z[166];
  z[168] = z[106]*z[43] - z[131]*z[164] + z[167];
  z[169] = z[131]*z[38];
  z[170] = z[0]*z[12]*z[161]*z[23] + z[148] + z[169]*z[2];
  z[171] = rear_.a + z[27]*z[37] + z[68];
  z[172] = z[27]*z[40];
  z[173] = front_.Fx*z[125];
  z[174] = front_.Fy*z[82];
  z[175] = z[11]*z[17];
  z[176] = front_.r*z[175] + z[12]*z[141];
  z[177] = z[12]*z[77];
  z[178] = z[43]*z[56];
  z[179] = front_.Fx*z[101];
  z[180] = pow(z[11], 2);
  z[181] = front_.r*z[180] + z[111]*z[12];
  z[182] = z[4]*z[77];
  z[183] = z[0]*z[12]*z[38]*z[4]*z[63] + z[154]*z[49] - z[92];
  z[184] = z[115] - z[117]*z[4] + z[154]*z[161];
  z[185] = z[110] + z[12]*z[169];
  z[186] = front_.Fx*front_.r;
  z[187] = -front_.a + z[43]*z[48] + z[59];
  z[188] = z[150] + z[152];
  z[189] = g_*front_.m*z[4];
  z[190] = z[1]*z[26];
  z[191] = z[1]*z[18]*z[24]*z[31];
  z[192] = z[0]*z[26];
  z[193] = 1.0/z[24];
  z[194] = rear_.Gy*z[0]*z[1]*z[193];
  z[195] = rear_.Fx*z[2]*z[26];
  z[196] = rear_.Fz*z[26]*z[4];
  z[197] = z[0]*z[2]*(rear_.Gx*z[4] + rear_.Gy*z[1]*z[2]);
  z[198] = rear_.Gx*z[2] - rear_.Gy*z[7];
  z[199] = z[18]*z[20]*z[24]*z[31];
  z[200] = z[0]*z[26]*(z[145] + z[18]*z[22] - z[20]*z[22] - z[20]*z[23] - z[25] + z[42]);
  z[201] = z[0]*z[188];
  z[202] = 2*z[0]*(z[24] - 1);
  z[203] = rear_.Gy*pow(z[0], 3)*z[26];
  z[204] = front_.Fx*z[47];
  z[205] = front_.Fz*z[47];
  z[206] = 1.0/z[45];
  z[207] = front_.Gy*z[38];
  z[208] = z[207]*z[43];
  z[209] = front_.Gx*z[40] - z[208];
  z[210] = z[206]*z[209];
  z[211] = front_.Fx*z[51];
  z[212] = z[53] - z[54];
  z[213] = z[0]*z[212]*z[4];
  z[214] = front_.Gx*z[43];
  z[215] = z[207]*z[40];
  z[216] = z[214] + z[215];
  z[217] = z[206]*z[216];
  z[218] = front_.Fz*z[51];
  z[219] = z[212]*z[43];
  z[220] = pow(z[45], -2);
  z[221] = z[209]*z[220];
  z[222] = z[216]*z[220];
  z[223] = z[0]*z[206]*z[4];
  z[224] = front_.Gx*z[7];
  z[225] = z[14]*z[207];
  z[226] = front_.Gy*z[43];
  z[227] = z[17]*z[226];
  z[228] = front_.Gx*z[0]*z[206]*z[4];
  z[229] = z[212]*z[228];
  z[230] = z[206]*z[212];
  z[231] = z[208]*z[230];
  z[232] = -z[224] - z[225] + z[227] + z[229] - z[231];
  z[233] = z[206]*z[43];
  z[234] = front_.Gx*z[14];
  z[235] = z[207]*z[7];
  z[236] = front_.Gy*z[17];
  z[237] = z[236]*z[40];
  z[238] = z[214]*z[230];
  z[239] = z[215]*z[230];
  z[240] = -z[234] + z[235] + z[237] - z[238] - z[239];
  z[241] = z[4]*z[43]*z[99];
  z[242] = front_.Gx*z[125];
  z[243] = front_.Gy*z[94];
  z[244] = z[2]*z[207];
  z[245] = z[206]*z[4]*z[99];
  z[246] = z[214]*z[245];
  z[247] = z[0]*z[206]*z[23]*z[99];
  z[248] = z[207]*z[247];
  z[249] = -z[242] + z[243] - z[244] + z[246] + z[248];
  z[250] = front_.Gx*z[2];
  z[251] = z[226]*z[82];
  z[252] = z[125]*z[207];
  z[253] = front_.Gx*z[247];
  z[254] = z[208]*z[245];
  z[255] = z[250] + z[251] - z[252] - z[253] + z[254];
  z[256] = front_.Fz*z[38]*z[51];
  z[257] = z[0]*z[4]*z[43];
  z[258] = front_.Fx*z[38]*z[51];
  z[259] = z[217]*z[38];
  z[260] = z[220]*z[44];
  z[261] = front_.Gy*z[44];
  z[262] = front_.Gy*z[127];
  z[263] = z[206]*z[44];
  z[264] = z[262]*z[263];
  z[265] = z[228]*z[38]*z[43];
  z[266] = front_.Gx*z[38];
  z[267] = z[0]*z[206]*z[4]*z[43];
  z[268] = z[226]*z[40] + z[262]*z[267] + z[263]*z[266] - z[266];
  z[269] = front_.Fz*z[7];
  z[270] = z[38]*z[47];
  z[271] = front_.Fz*z[0]*z[4]*z[47];
  z[272] = front_.Fx*z[38];
  z[273] = z[14]*z[47];
  z[274] = front_.Fx*z[43]*z[47];
  z[275] = z[206]*z[209]*z[38];
  z[276] = z[206]*z[209]*z[43];
  z[277] = z[216]*z[220]*z[38];
  z[278] = 2*front_.Gy;
  z[279] = 2*z[53];
  z[280] = 2*z[54];
  z[281] = -z[279] + z[280];
  z[282] = z[206]*z[42];
  z[283] = z[212]*z[263] + z[212]*z[282] + z[281];
  z[284] = z[0]*z[206]*z[38]*z[4];
  z[285] = z[206]*z[38]*z[43];
  z[286] = z[42]*z[47];
  z[287] = z[44]*z[47];
  z[288] = z[212]*z[38]*z[51];
  z[289] = z[17]*z[286] + z[17]*z[287] - z[17]*z[46] + z[270]*z[279] - z[270]*z[280] + z[270]*z[283] - z[288]*z[42] - z[288]*z[44];
  z[290] = front_.Fz*z[2];
  z[291] = 2*z[37];
  z[292] = 2*z[98];
  z[293] = z[263]*z[99] + z[282]*z[99] - z[291] - z[292];
  z[294] = z[293]*z[4]*z[47];
  z[295] = z[38]*z[51]*z[99];
  z[296] = -z[11]*z[286] - z[11]*z[287] + z[11]*z[46] + z[270]*z[291] + z[270]*z[292] + z[270]*z[293] - z[295]*z[42] - z[295]*z[44];
  z[297] = z[127]*z[51];
  z[298] = z[297]*z[44];
  z[299] = z[263] + z[282] - 2;
  z[300] = z[0]*z[268]*z[4];
  z[301] = -z[261] + z[262] - z[264] + z[265];
  z[302] = z[127]*z[47];
  z[303] = z[43]*(z[286] + z[287] + z[297]*z[42] + z[298] - z[299]*z[302] - 2*z[302] - z[46]);
  z[304] = z[216]*z[47];
  z[305] = -2*z[14]*z[43] + 2*z[17]*z[38] + z[279];
  z[306] = z[0]*z[4]*z[47];
  z[307] = z[43]*z[47];
  z[308] = 2*z[4]*(-z[164] + z[99]);

  ar[0] = -front_.Fx*z[57] + rear_.Fx*z[33] - front_.Fy*z[74] - front_.Fz*z[66] - rear_.Fz*z[35] + rear_.Tw*z[0] + front_.Tx*z[14] - z[0]*(rear_.Tw - rear_.Ty) - z[1]*z[10] + z[1]*z[3] - z[1]*z[6] + z[15]*z[17] + z[67]*(z[18]*z[9] - z[20]*z[9] + z[30]*z[69] - z[33]*z[37] + z[34]*z[71] - z[35]*z[40]) - z[7]*z[8] + z[75]*(z[14]*z[79] - z[17]*z[76] - z[38]*z[74] - z[40]*z[66] - z[43]*z[57] + z[7]*z[80]);
  ar[1] = z[0]*(front_.Fx*z[102] - front_.Fy*z[124] - rear_.Fy*z[85] - rear_.Tx*z[4] - z[103]*z[113] - z[15]*z[82] - z[2]*z[5] - z[2]*z[8] + z[27]*z[87] - z[27]*z[89] - z[4]*z[81] + z[75]*(z[102]*z[43] - z[113]*z[122] - z[124]*z[38] - z[125]*z[79] + z[2]*z[80] + z[76]*z[82]) + z[90]*(z[2]*z[69] - z[22]*z[91] - z[23]*z[91] - z[4]*z[71] - z[83] + z[84]));
  ar[2] = -front_.Fy*z[132]*z[38] + front_.Fz*z[136] + front_.Tx*z[38] + z[126]*z[129] + z[15]*z[43] + z[75]*(-z[127]*z[132] + z[127]*z[78] + z[129]*z[44] + z[136]*z[40] - z[43]*z[76]);
  ar[3] = -front_.Fx*z[140] - front_.Fy*z[146] - rear_.Fy*z[138]*z[24] + z[103]*z[142] + z[137]*z[86] - z[137]*z[88] + z[67]*(z[0]*(z[144] + z[85]) - z[145]*z[32] - z[19]*z[22] - z[19]*z[23] + z[21]*z[22] + z[21]*z[23]) + z[75]*(z[1]*z[147]*z[23] - z[121]*z[17] + z[122]*z[142] + z[14]*z[149] - z[140]*z[43] - z[146]*z[38]);
  ar[4] = front_.Fx*z[156] + front_.Fy*z[160] + front_.Fz*z[157] + z[10] + z[150]*z[151] + z[151]*z[152] - z[153]*z[2] - z[2]*z[81] - z[3] + z[4]*z[8] + z[6] + z[75]*(z[121]*z[154] + z[147]*z[159] - z[149]*z[158] + z[156]*z[43] + z[157]*z[40] + z[160]*z[38]) + z[9]*z[90];
  ar[5] = -front_.Fx*z[162] - front_.Fy*z[170] - front_.Tx*z[82] + z[103]*z[168] + z[125]*z[15] + z[75]*(-z[121]*z[43] + z[122]*z[168] + z[149]*z[38] - z[162]*z[43] - z[170]*z[38]);
  ar[6] = front_.Fz*z[176] + z[138]*z[150] + z[138]*z[152] + z[173]*z[56] - z[174]*z[56] + z[75]*(z[125]*z[178] + z[14]*z[177] + z[167]*z[7] + z[175]*z[77] + z[176]*z[40] - z[38]*z[56]*z[82]) + z[90]*(z[171]*z[4] - z[2]*(-rear_.b + z[172] + z[70]));
  ar[7] = z[0]*(-front_.Fy*z[101]*z[11] - z[103]*z[181] + z[12]*z[179] + z[28]*z[86] - z[28]*z[88] - z[67]*(z[144] - z[171]*z[2] + z[4]*(rear_.b - z[172] - z[70])) - z[75]*(z[101]*z[164] - z[101]*z[98] + pow(z[12], 2)*z[182] + z[122]*z[181] + z[180]*z[182] + z[2]*(-z[163] - z[165] + z[166])));
  ar[8] = front_.Fx*z[183] - front_.Fy*z[184] + front_.Fz*z[185] + z[153] + z[75]*(z[11]*z[43]*z[77] + z[177]*z[38] + z[183]*z[43] - z[184]*z[38] + z[185]*z[40]) + z[81];
  ar[9] = -front_.Fy*z[141] - z[17]*z[186] + z[75]*(-z[141]*z[38] + z[17]*z[187] + z[60]);
  ar[10] = z[40]*(front_.Fy*z[111] + z[11]*z[186] + z[75]*(z[105] + z[108] - z[11]*z[187] + z[112]));
  ar[11] = -front_.Fy*z[169] - z[186]*z[43] + z[75]*(-z[133] + z[134] - z[135] + z[187]*z[43]);
  ar[12] = z[138]*z[188];
  ar[13] = z[143]*(z[86] - z[88]);
  ar[14] = 0;
  ar[15] = front_.Fx*z[73] + front_.Fz*z[141] + z[189]*(-z[0]*z[14]*z[49] + z[0]*z[141] - z[1]*z[61] + z[178]);
  ar[16] = z[0]*(-z[103]*z[111] + z[179] + z[75]*(z[120] + z[123]));
  ar[17] = z[38]*(front_.Fz*z[131] + z[126]*z[128]);
  ar[18] = -z[150]*z[190] + z[150]*z[191] - z[152]*z[190] + z[152]*z[191];
  ar[19] = z[192]*(-z[86] + z[88]);
  ar[20] = 0;
  ar[21] = -rear_.Fy*z[0]*z[190]*z[24] - 2*rear_.Gy*z[0]*z[1]*z[24] - rear_.Gz*z[200] + z[18]*z[195] - z[18]*z[196] + z[193]*z[197] - z[193]*z[198]*z[40] + z[194]*z[22] + z[194]*z[23] - z[195]*z[20] + z[196]*z[20] + z[199]*z[86] - z[199]*z[88] - z[200]*z[67];
  ar[22] = z[190]*z[201];
  ar[23] = 0;
  ar[24] = rear_.Fy*z[0] - rear_.Gy*z[192]*z[20]*z[24] - rear_.Gz*z[1]*z[202] - z[1]*z[192]*z[198]*z[4] + z[190]*z[197] - z[202]*z[90] - z[203]*z[22] - z[203]*z[23] + z[203]*z[24] + z[87] - z[89];
  ar[25] = -z[201];
  ar[26] = 0;
  ar[27] = -z[14]*z[205] + z[14]*z[217] - z[204]*z[7] - z[210]*z[7] + z[211]*z[213] + z[213]*z[221] - z[218]*z[219] + z[219]*z[222] + z[223]*z[232] - z[233]*z[240];
  ar[28] = z[0]*(z[100]*z[211] + z[100]*z[221] + z[125]*z[205] - z[125]*z[217] - z[2]*z[204] - z[2]*z[210] - z[218]*z[241] + z[222]*z[241] - z[223]*z[255] + z[233]*z[249]);
  ar[29] = -z[0]*z[221]*z[38]*z[4]*z[43] - z[205]*z[38] - z[216]*z[260]*z[38] + z[223]*(z[261] - z[262] + z[264] - z[265]) - z[233]*z[268] + z[256]*z[44] - z[257]*z[258] + z[259];
  ar[30] = front_.Fy*z[283]*z[47] + front_.Gz*z[289] - z[0]*z[17]*z[217]*z[4] - z[14]*z[275] + z[17]*z[271] + z[17]*z[274] + z[17]*z[276] - z[212]*z[221]*z[38]*z[43] - z[213]*z[256] + z[213]*z[277] - z[219]*z[258] - z[232]*z[285] - z[240]*z[284] - z[259]*z[7] + z[269]*z[270] - z[272]*z[273] + z[278]*z[283] + z[289]*z[75];
  ar[31] = z[0]*(front_.Fy*z[294] + front_.Gz*z[296]*z[4] - z[100]*z[256] + z[100]*z[277] + z[125]*z[275] + z[173]*z[270] + z[189]*z[296] - z[2]*z[259] - z[205]*z[94] + z[217]*z[94] - z[221]*z[38]*z[4]*z[43]*z[99] - z[241]*z[258] + z[270]*z[290] - z[274]*z[82] - z[276]*z[82] + z[278]*z[293]*z[4] - z[284]*(z[242] - z[243] + z[244] - z[246] - z[248]) - z[285]*(-z[250] - z[251] + z[252] + z[253] - z[254]));
  ar[32] = front_.Fx*z[298] - front_.Fy*z[270]*z[299]*z[43] + front_.Fz*z[127]*z[257]*z[51] + front_.Gz*z[303] - z[0]*z[127]*z[222]*z[4]*z[43] - z[127]*z[204] + z[127]*z[209]*z[260] - z[127]*z[210] + z[204]*z[44] - z[206]*z[300]*z[38] - z[208]*(2*z[18]*z[206]*z[23] + 2*z[206]*z[44] - 4) + z[209]*z[263] - z[216]*z[267] + z[271]*z[43] + z[285]*z[301] + z[303]*z[75];
  ar[33] = front_.Fx*z[14] - front_.Fy*z[17] - front_.Gz*z[305] + z[207]*z[47]*(-z[263]*z[55] + z[281] - z[282]*z[55]) + z[209]*z[273] - z[236]*z[46] - z[269] + z[304]*z[7] - z[305]*z[75] - z[306]*(z[234] - z[235] - z[237] + z[238] + z[239]) - z[307]*(z[224] + z[225] - z[227] - z[229] + z[231]);
  ar[34] = z[0]*(front_.Gy*z[46]*z[82] - front_.Gz*z[308] - z[125]*z[209]*z[47] - z[173] + z[174] + z[2]*z[304] + z[207]*z[294] - z[249]*z[306] - z[255]*z[307] - z[290] - z[308]*z[75]);
  ar[35] = -front_.Fy*z[43] - front_.Gy*z[127]*z[299]*z[307] + z[209]*z[270] - z[226]*z[46] + z[272] + z[300]*z[47] - z[301]*z[307];
}

/** Computes the n-d array of shape (12, 22)
 *
 * @param[out] ar a C-array of with 264 elements
 */
//  void Bicycle::gaf_dr(double ar[264]) const;
void Bicycle::gaf_dr(double ar[264]) const
{
  double z[80];

  z[0] = sin(state_[2]);
  z[1] = cos(state_[1]);
  z[2] = z[0]*z[1];
  z[3] = -z[2];
  z[4] = sin(state_[1]);
  z[5] = cos(state_[2]);
  z[6] = z[1]*z[5];
  z[7] = rear_.r*z[6];
  z[8] = pow(z[1], 2);
  z[9] = pow(z[0], 2);
  z[10] = pow(z[5], 2);
  z[11] = z[10] + z[9];
  z[12] = z[11]*z[8];
  z[13] = pow(z[12], -1.0L/2.0L);
  z[14] = rear_.R*z[13];
  z[15] = rear_.r + z[14];
  z[16] = -z[15]*z[6];
  z[17] = rear_.b + z[16] + z[7];
  z[18] = rear_.a*z[5];
  z[19] = rear_.b*z[0];
  z[20] = rear_.r*z[2];
  z[21] = z[15]*z[2];
  z[22] = -z[21];
  z[23] = cos(state_[3]);
  z[24] = sin(state_[3]);
  z[25] = z[2]*z[24] + z[23]*z[4];
  z[26] = -z[2]*z[23] + z[24]*z[4];
  z[27] = z[10]*z[8];
  z[28] = pow(z[26], 2);
  z[29] = z[27] + z[28];
  z[30] = sqrt(z[29]);
  z[31] = 1.0/z[30];
  z[32] = front_.R*z[31];
  z[33] = front_.r + z[32];
  z[34] = z[33]*z[6];
  z[35] = -z[34];
  z[36] = front_.b + z[35];
  z[37] = front_.r*z[6] + z[36];
  z[38] = front_.a*z[6] - front_.b*z[26];
  z[39] = front_.r*z[26];
  z[40] = -z[39];
  z[41] = z[26]*z[33];
  z[42] = rear_.m*z[1];
  z[43] = front_.m*z[25];
  z[44] = rear_.r*z[4];
  z[45] = rear_.a*z[0];
  z[46] = rear_.b*z[5];
  z[47] = z[1]*z[15];
  z[48] = z[47]*z[9];
  z[49] = z[10]*z[47];
  z[50] = z[24]*z[5];
  z[51] = z[23]*z[5];
  z[52] = front_.r*z[25];
  z[53] = z[1]*z[10]*z[33];
  z[54] = -front_.b*z[50] + z[0]*z[52] + z[24]*z[53];
  z[55] = front_.a*z[0] - front_.b*z[51] - z[0]*z[41] + z[23]*z[53];
  z[56] = front_.a*z[24];
  z[57] = z[23]*z[52];
  z[58] = z[24]*z[41];
  z[59] = rear_.r*z[1];
  z[60] = z[14]*z[6];
  z[61] = rear_.a + z[14]*z[2] + z[20];
  z[62] = z[23]*z[36];
  z[63] = front_.a*z[23];
  z[64] = z[24]*z[52];
  z[65] = z[23]*z[41];
  z[66] = front_.a - z[26]*z[32];
  z[67] = z[13]*z[6];
  z[68] = z[13]*z[2];
  z[69] = pow(z[4], 2);
  z[70] = z[69]/z[11];
  z[71] = z[27] + z[69] + z[8]*z[9];
  z[72] = z[31]*z[6];
  z[73] = z[26]*z[31];
  z[74] = pow(z[25], 2);
  z[75] = z[74]/z[29];
  z[76] = z[27]*z[31];
  z[77] = z[28]*z[31];
  z[78] = z[25]*(z[30] - z[76] - z[77]);
  z[79] = z[29] + z[74];

  ar[0] = 0;
  ar[1] = z[3];
  ar[2] = z[4];
  ar[3] = z[6];
  ar[4] = 0;
  ar[5] = 0;
  ar[6] = 0;
  ar[7] = z[17]*z[4];
  ar[8] = z[1]*(z[18] + z[19]);
  ar[9] = z[4]*(-rear_.a + z[20] + z[22]);
  ar[10] = -z[25];
  ar[11] = z[26];
  ar[12] = z[25];
  ar[13] = z[6];
  ar[14] = 0;
  ar[15] = 0;
  ar[16] = 0;
  ar[17] = z[25]*z[37];
  ar[18] = z[38];
  ar[19] = z[25]*(-front_.a + z[40] + z[41]);
  ar[20] = 0;
  ar[21] = -z[4]*z[42]*(z[0]*z[17] - z[18] - z[19] + z[5]*(rear_.a - z[20] + z[21])) + z[43]*(z[26]*z[37] + z[38] - z[6]*(front_.a + z[39] - z[41]));
  ar[22] = 0;
  ar[23] = z[5];
  ar[24] = 0;
  ar[25] = z[0];
  ar[26] = 0;
  ar[27] = 0;
  ar[28] = 0;
  ar[29] = z[0]*z[44];
  ar[30] = z[45] - z[46] + z[48] + z[49];
  ar[31] = -z[44]*z[5];
  ar[32] = z[50];
  ar[33] = z[51];
  ar[34] = -z[50];
  ar[35] = z[0];
  ar[36] = 0;
  ar[37] = 0;
  ar[38] = 0;
  ar[39] = z[54];
  ar[40] = z[55];
  ar[41] = z[5]*(z[56] - z[57] - z[58]);
  ar[42] = 0;
  ar[43] = front_.m*(-z[1]*z[10]*(-z[56] + z[57] + z[58]) + z[25]*z[55] + z[26]*z[54]) - rear_.m*z[4]*(z[10]*z[59] - z[45] + z[46] - z[48] - z[49] + z[59]*z[9]);
  ar[44] = 0;
  ar[45] = 0;
  ar[46] = 1;
  ar[47] = 0;
  ar[48] = 0;
  ar[49] = 0;
  ar[50] = 0;
  ar[51] = rear_.b - z[60] - z[7];
  ar[52] = 0;
  ar[53] = -z[61];
  ar[54] = -z[23];
  ar[55] = z[24];
  ar[56] = z[23];
  ar[57] = 0;
  ar[58] = 0;
  ar[59] = 0;
  ar[60] = 0;
  ar[61] = z[62];
  ar[62] = z[24]*(-front_.b + z[34]);
  ar[63] = -z[63] - z[64] + z[65];
  ar[64] = 0;
  ar[65] = front_.m*(-z[24]*z[25]*z[36] + z[26]*z[62] - z[6]*(z[63] + z[64] - z[65])) - z[42]*(-z[0]*(-rear_.b + z[60] + z[7]) + z[5]*z[61]);
  ar[66] = 0;
  ar[67] = 0;
  ar[68] = 0;
  ar[69] = 0;
  ar[70] = 0;
  ar[71] = 0;
  ar[72] = 0;
  ar[73] = 0;
  ar[74] = 0;
  ar[75] = 0;
  ar[76] = 0;
  ar[77] = 0;
  ar[78] = 0;
  ar[79] = 1;
  ar[80] = 0;
  ar[81] = 0;
  ar[82] = 0;
  ar[83] = z[52];
  ar[84] = z[40] + z[66];
  ar[85] = 0;
  ar[86] = 1;
  ar[87] = z[43]*z[66];
  ar[88] = 1;
  ar[89] = 0;
  ar[90] = 0;
  ar[91] = 0;
  ar[92] = 0;
  ar[93] = 0;
  ar[94] = 0;
  ar[95] = z[16];
  ar[96] = 0;
  ar[97] = z[22];
  ar[98] = 0;
  ar[99] = 0;
  ar[100] = 0;
  ar[101] = 0;
  ar[102] = 0;
  ar[103] = 0;
  ar[104] = 0;
  ar[105] = 0;
  ar[106] = 0;
  ar[107] = 0;
  ar[108] = 0;
  ar[109] = 0;
  ar[110] = 0;
  ar[111] = 0;
  ar[112] = 0;
  ar[113] = 0;
  ar[114] = 0;
  ar[115] = 0;
  ar[116] = 0;
  ar[117] = 0;
  ar[118] = 0;
  ar[119] = 0;
  ar[120] = 1;
  ar[121] = 0;
  ar[122] = 0;
  ar[123] = 0;
  ar[124] = 0;
  ar[125] = 0;
  ar[126] = 0;
  ar[127] = z[35];
  ar[128] = 0;
  ar[129] = z[41];
  ar[130] = 0;
  ar[131] = 0;
  ar[132] = 0;
  ar[133] = 0;
  ar[134] = 0;
  ar[135] = 0;
  ar[136] = 1;
  ar[137] = 0;
  ar[138] = 0;
  ar[139] = z[67];
  ar[140] = 0;
  ar[141] = z[68];
  ar[142] = 0;
  ar[143] = 0;
  ar[144] = 0;
  ar[145] = 0;
  ar[146] = 0;
  ar[147] = 0;
  ar[148] = 0;
  ar[149] = 0;
  ar[150] = 0;
  ar[151] = 0;
  ar[152] = 0;
  ar[153] = 0;
  ar[154] = 0;
  ar[155] = 0;
  ar[156] = 0;
  ar[157] = 0;
  ar[158] = 0;
  ar[159] = z[10]*z[70] + z[12] + z[70]*z[9];
  ar[160] = 0;
  ar[161] = z[4]*z[68];
  ar[162] = z[12]*z[13];
  ar[163] = -z[4]*z[67];
  ar[164] = 0;
  ar[165] = 0;
  ar[166] = 0;
  ar[167] = 0;
  ar[168] = 0;
  ar[169] = 0;
  ar[170] = 0;
  ar[171] = 0;
  ar[172] = 0;
  ar[173] = 0;
  ar[174] = 0;
  ar[175] = 0;
  ar[176] = 0;
  ar[177] = 0;
  ar[178] = 0;
  ar[179] = 0;
  ar[180] = 0;
  ar[181] = 0;
  ar[182] = z[71];
  ar[183] = z[3];
  ar[184] = z[4];
  ar[185] = z[6];
  ar[186] = 0;
  ar[187] = 0;
  ar[188] = 0;
  ar[189] = 0;
  ar[190] = 0;
  ar[191] = 0;
  ar[192] = 0;
  ar[193] = 0;
  ar[194] = 0;
  ar[195] = 0;
  ar[196] = 0;
  ar[197] = rear_.m*z[71];
  ar[198] = 0;
  ar[199] = 0;
  ar[200] = 0;
  ar[201] = 0;
  ar[202] = 0;
  ar[203] = 0;
  ar[204] = 0;
  ar[205] = 0;
  ar[206] = 0;
  ar[207] = 0;
  ar[208] = 0;
  ar[209] = 0;
  ar[210] = 0;
  ar[211] = 0;
  ar[212] = 1;
  ar[213] = 0;
  ar[214] = 0;
  ar[215] = z[72];
  ar[216] = 0;
  ar[217] = -z[73];
  ar[218] = 0;
  ar[219] = 0;
  ar[220] = 0;
  ar[221] = 0;
  ar[222] = 0;
  ar[223] = 0;
  ar[224] = 0;
  ar[225] = 0;
  ar[226] = 0;
  ar[227] = 0;
  ar[228] = 0;
  ar[229] = 0;
  ar[230] = 0;
  ar[231] = 0;
  ar[232] = 0;
  ar[233] = 0;
  ar[234] = 0;
  ar[235] = z[27]*z[75] + z[28]*z[75] + z[29];
  ar[236] = z[78];
  ar[237] = -z[25]*z[73];
  ar[238] = z[30];
  ar[239] = -z[25]*z[72];
  ar[240] = 0;
  ar[241] = -z[43]*(-z[30] + z[76] + z[77]);
  ar[242] = 0;
  ar[243] = 0;
  ar[244] = 0;
  ar[245] = 0;
  ar[246] = 0;
  ar[247] = 0;
  ar[248] = 0;
  ar[249] = 0;
  ar[250] = 0;
  ar[251] = 0;
  ar[252] = 0;
  ar[253] = 0;
  ar[254] = 0;
  ar[255] = 0;
  ar[256] = 0;
  ar[257] = z[78];
  ar[258] = z[79];
  ar[259] = z[26];
  ar[260] = z[25];
  ar[261] = z[6];
  ar[262] = 0;
  ar[263] = front_.m*z[79];
}

}
